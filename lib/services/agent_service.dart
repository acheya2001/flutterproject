import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import 'dart:math';

/// üè¢ Service de gestion pour Agent
/// G√®re toutes les op√©rations sp√©cifiques aux agents
class AgentService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// üë§ R√©cup√©rer les informations de l'agent connect√©
  static Future<Map<String, dynamic>?> getAgentInfo(String agentId) async {
    try {
      debugPrint('[AGENT] üë§ R√©cup√©ration infos agent: $agentId');

      final agentDoc = await _firestore.collection('users').doc(agentId).get();
      if (!agentDoc.exists) {
        debugPrint('[AGENT] ‚ùå Agent non trouv√©: $agentId');
        return null;
      }

      final agentData = agentDoc.data()!;
      agentData['id'] = agentDoc.id;

      // R√©cup√©rer les informations de l'agence
      final agenceId = agentData['agenceId'];
      if (agenceId != null) {
        final agenceDoc = await _firestore.collection('agences').doc(agenceId).get();
        if (agenceDoc.exists) {
          agentData['agenceInfo'] = agenceDoc.data();
        }
      }

      // R√©cup√©rer les informations de la compagnie
      final compagnieId = agentData['compagnieId'];
      if (compagnieId != null) {
        final compagnieDoc = await _firestore.collection('compagnies_assurance').doc(compagnieId).get();
        if (compagnieDoc.exists) {
          agentData['compagnieInfo'] = compagnieDoc.data();
        }
      }

      debugPrint('[AGENT] ‚úÖ Infos agent r√©cup√©r√©es: ${agentData['prenom']} ${agentData['nom']}');
      return agentData;

    } catch (e) {
      debugPrint('[AGENT] ‚ùå Erreur r√©cup√©ration agent: $e');
      return null;
    }
  }

  /// üìä R√©cup√©rer les statistiques de l'agent
  static Future<Map<String, dynamic>> getAgentStats(String agentId) async {
    try {
      debugPrint('[AGENT] üìä R√©cup√©ration stats agent: $agentId');

      // Compter les contrats cr√©√©s par cet agent
      final contratsQuery = await _firestore
          .collection('contrats')
          .where('agentId', isEqualTo: agentId)  // Utiliser agentId au lieu de createdBy
          .get();

      final totalContrats = contratsQuery.docs.length;
      final contratsActifs = contratsQuery.docs.where((doc) => 
          doc.data()['statut'] == 'actif' || doc.data()['isActive'] == true).length;

      // Compter les v√©hicules g√©r√©s
      final vehiculesQuery = await _firestore
          .collection('vehicules')
          .where('agentId', isEqualTo: agentId)
          .get();

      final totalVehicules = vehiculesQuery.docs.length;

      // Compter les conducteurs g√©r√©s
      final conducteursQuery = await _firestore
          .collection('conducteurs')
          .where('agentId', isEqualTo: agentId)
          .get();

      final totalConducteurs = conducteursQuery.docs.length;

      // Compter les sinistres trait√©s
      final sinistresQuery = await _firestore
          .collection('sinistres')
          .where('agentId', isEqualTo: agentId)
          .get();

      final totalSinistres = sinistresQuery.docs.length;
      final sinistresEnCours = sinistresQuery.docs.where((doc) => 
          doc.data()['statut'] == 'en_cours' || doc.data()['statut'] == 'ouvert').length;

      // R√©cup√©rer les derni√®res activit√©s
      final recentActivities = await _getRecentActivities(agentId);

      final stats = {
        'totalContrats': totalContrats,
        'contratsActifs': contratsActifs,
        'totalVehicules': totalVehicules,
        'totalConducteurs': totalConducteurs,
        'totalSinistres': totalSinistres,
        'sinistresEnCours': sinistresEnCours,
        'recentActivities': recentActivities,
      };

      debugPrint('[AGENT] ‚úÖ Stats r√©cup√©r√©es: $totalContrats contrats, $totalVehicules v√©hicules');
      return stats;

    } catch (e) {
      debugPrint('[AGENT] ‚ùå Erreur r√©cup√©ration stats: $e');
      return {
        'totalContrats': 0,
        'contratsActifs': 0,
        'totalVehicules': 0,
        'totalConducteurs': 0,
        'totalSinistres': 0,
        'sinistresEnCours': 0,
        'recentActivities': [],
      };
    }
  }

  /// üìù R√©cup√©rer les activit√©s r√©centes de l'agent
  static Future<List<Map<String, dynamic>>> _getRecentActivities(String agentId) async {
    try {
      List<Map<String, dynamic>> activities = [];

      // Derniers contrats cr√©√©s - SANS orderBy pour √©viter l'erreur d'index
      final contratsQuery = await _firestore
          .collection('contrats')
          .where('agentId', isEqualTo: agentId)  // Utiliser agentId au lieu de createdBy
          .get();

      // Trier en m√©moire et limiter √† 3
      final sortedDocs = contratsQuery.docs.toList();
      sortedDocs.sort((a, b) {
        final aDate = a.data()['createdAt'] as Timestamp?;
        final bDate = b.data()['createdAt'] as Timestamp?;
        if (aDate == null && bDate == null) return 0;
        if (aDate == null) return 1;
        if (bDate == null) return -1;
        return bDate.compareTo(aDate);
      });

      for (var doc in sortedDocs.take(3)) {
        final data = doc.data();
        activities.add({
          'type': 'contrat_created',
          'title': 'Contrat cr√©√©',
          'description': 'Contrat ${data['numeroContrat'] ?? doc.id}',
          'timestamp': data['createdAt'],
          'icon': 'contract',
        });
      }

      // Derniers v√©hicules ajout√©s
      final vehiculesQuery = await _firestore
          .collection('vehicules')
          .where('agentId', isEqualTo: agentId)
          .orderBy('createdAt', descending: true)
          .limit(2)
          .get();

      for (var doc in vehiculesQuery.docs) {
        final data = doc.data();
        activities.add({
          'type': 'vehicule_added',
          'title': 'V√©hicule ajout√©',
          'description': '${data['marque']} ${data['modele']} - ${data['immatriculation']}',
          'timestamp': data['createdAt'],
          'icon': 'car',
        });
      }

      // Trier par timestamp d√©croissant
      activities.sort((a, b) {
        final aTime = a['timestamp'] as Timestamp?;
        final bTime = b['timestamp'] as Timestamp?;
        if (aTime == null || bTime == null) return 0;
        return bTime.compareTo(aTime);
      });

      return activities.take(5).toList();

    } catch (e) {
      debugPrint('[AGENT] ‚ùå Erreur r√©cup√©ration activit√©s: $e');
      return [];
    }
  }

  /// üìã R√©cup√©rer les contrats de l'agent
  static Future<List<Map<String, dynamic>>> getAgentContrats(String agentId) async {
    try {
      debugPrint('[AGENT] üìã R√©cup√©ration contrats agent: $agentId');

      // Requ√™te simplifi√©e pour √©viter l'index composite
      final contratsQuery = await _firestore
          .collection('contrats')
          .where('createdBy', isEqualTo: agentId)
          .get();

      List<Map<String, dynamic>> contrats = [];
      for (var doc in contratsQuery.docs) {
        final contratData = doc.data();
        contratData['id'] = doc.id;
        contrats.add(contratData);
      }

      // Trier c√¥t√© client par date de cr√©ation (plus r√©cent en premier)
      contrats.sort((a, b) {
        final aDate = a['createdAt'] as Timestamp?;
        final bDate = b['createdAt'] as Timestamp?;
        if (aDate == null && bDate == null) return 0;
        if (aDate == null) return 1;
        if (bDate == null) return -1;
        return bDate.compareTo(aDate);
      });

      debugPrint('[AGENT] ‚úÖ ${contrats.length} contrats r√©cup√©r√©s et tri√©s');
      return contrats;

    } catch (e) {
      debugPrint('[AGENT] ‚ùå Erreur r√©cup√©ration contrats: $e');
      return [];
    }
  }

  /// üöó R√©cup√©rer les v√©hicules de l'agent
  static Future<List<Map<String, dynamic>>> getAgentVehicules(String agentId) async {
    try {
      debugPrint('[AGENT] üöó R√©cup√©ration v√©hicules agent: $agentId');

      final vehiculesQuery = await _firestore
          .collection('vehicules')
          .where('agentId', isEqualTo: agentId)
          .orderBy('createdAt', descending: true)
          .get();

      List<Map<String, dynamic>> vehicules = [];
      for (var doc in vehiculesQuery.docs) {
        final vehiculeData = doc.data();
        vehiculeData['id'] = doc.id;
        vehicules.add(vehiculeData);
      }

      debugPrint('[AGENT] ‚úÖ ${vehicules.length} v√©hicules r√©cup√©r√©s');
      return vehicules;

    } catch (e) {
      debugPrint('[AGENT] ‚ùå Erreur r√©cup√©ration v√©hicules: $e');
      return [];
    }
  }

  /// üë• R√©cup√©rer les conducteurs de l'agent
  static Future<List<Map<String, dynamic>>> getAgentConducteurs(String agentId) async {
    try {
      debugPrint('[AGENT] üë• R√©cup√©ration conducteurs agent: $agentId');

      final conducteursQuery = await _firestore
          .collection('conducteurs')
          .where('agentId', isEqualTo: agentId)
          .orderBy('createdAt', descending: true)
          .get();

      List<Map<String, dynamic>> conducteurs = [];
      for (var doc in conducteursQuery.docs) {
        final conducteurData = doc.data();
        conducteurData['id'] = doc.id;
        conducteurs.add(conducteurData);
      }

      debugPrint('[AGENT] ‚úÖ ${conducteurs.length} conducteurs r√©cup√©r√©s');
      return conducteurs;

    } catch (e) {
      debugPrint('[AGENT] ‚ùå Erreur r√©cup√©ration conducteurs: $e');
      return [];
    }
  }

  /// üö® R√©cup√©rer les sinistres de l'agent
  static Future<List<Map<String, dynamic>>> getAgentSinistres(String agentId) async {
    try {
      debugPrint('[AGENT] üö® R√©cup√©ration sinistres agent: $agentId');

      final sinistresQuery = await _firestore
          .collection('sinistres')
          .where('agentId', isEqualTo: agentId)
          .orderBy('createdAt', descending: true)
          .get();

      List<Map<String, dynamic>> sinistres = [];
      for (var doc in sinistresQuery.docs) {
        final sinistreData = doc.data();
        sinistreData['id'] = doc.id;
        sinistres.add(sinistreData);
      }

      debugPrint('[AGENT] ‚úÖ ${sinistres.length} sinistres r√©cup√©r√©s');
      return sinistres;

    } catch (e) {
      debugPrint('[AGENT] ‚ùå Erreur r√©cup√©ration sinistres: $e');
      return [];
    }
  }

  /// ‚ûï Cr√©er un nouveau contrat
  static Future<Map<String, dynamic>> createContrat({
    required String agentId,
    required String agenceId,
    required String compagnieId,
    required String numeroContrat,
    required String typeContrat,
    required String nomAssure,
    required String prenomAssure,
    required String telephoneAssure,
    required String emailAssure,
    required DateTime dateDebut,
    required DateTime dateFin,
    required double montantPrime,
    String? adresseAssure,
    String? cinAssure,
    Map<String, dynamic>? vehiculeInfo,
  }) async {
    try {
      debugPrint('[AGENT] ‚ûï Cr√©ation contrat: $numeroContrat');

      // V√©rifier si le num√©ro de contrat existe d√©j√†
      final existingContratQuery = await _firestore
          .collection('contrats')
          .where('numeroContrat', isEqualTo: numeroContrat)
          .limit(1)
          .get();

      if (existingContratQuery.docs.isNotEmpty) {
        return {
          'success': false,
          'error': 'Num√©ro de contrat d√©j√† utilis√©',
          'message': 'Ce num√©ro de contrat existe d√©j√†',
        };
      }

      // Cr√©er une r√©f√©rence de document pour auto-g√©n√©rer l'ID
      final docRef = _firestore.collection('contrats').doc();
      final contratId = docRef.id;

      // Donn√©es du contrat
      final contratData = {
        'id': contratId,
        'numeroContrat': numeroContrat,
        'typeContrat': typeContrat,
        'nomAssure': nomAssure,
        'prenomAssure': prenomAssure,
        'telephoneAssure': telephoneAssure,
        'emailAssure': emailAssure,
        'adresseAssure': adresseAssure,
        'cinAssure': cinAssure,
        'dateDebut': Timestamp.fromDate(dateDebut),
        'dateFin': Timestamp.fromDate(dateFin),
        'montantPrime': montantPrime,
        'statut': 'actif',
        'isActive': true,
        'agentId': agentId,
        'agenceId': agenceId,
        'compagnieId': compagnieId,
        'vehiculeInfo': vehiculeInfo,
        'createdAt': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
        'createdBy': agentId,
        'origin': 'agent_creation',
      };

      // Cr√©er le contrat dans Firestore
      await docRef.set(contratData);

      debugPrint('[AGENT] ‚úÖ Contrat cr√©√© avec succ√®s: $numeroContrat');
      return {
        'success': true,
        'message': 'Contrat cr√©√© avec succ√®s',
        'contratId': contratId,
        'numeroContrat': numeroContrat,
      };

    } catch (e) {
      debugPrint('[AGENT] ‚ùå Erreur cr√©ation contrat: $e');
      return {
        'success': false,
        'error': e.toString(),
        'message': 'Erreur lors de la cr√©ation du contrat',
      };
    }
  }

  /// ‚ûï Ajouter un v√©hicule
  static Future<Map<String, dynamic>> addVehicule({
    required String agentId,
    required String agenceId,
    required String compagnieId,
    required String immatriculation,
    required String marque,
    required String modele,
    required int annee,
    required String typeVehicule,
    required String couleur,
    String? numeroSerie,
    String? contratId,
    String? conducteurId,
  }) async {
    try {
      debugPrint('[AGENT] ‚ûï Ajout v√©hicule: $immatriculation');

      // V√©rifier si l'immatriculation existe d√©j√†
      final existingVehiculeQuery = await _firestore
          .collection('vehicules')
          .where('immatriculation', isEqualTo: immatriculation)
          .limit(1)
          .get();

      if (existingVehiculeQuery.docs.isNotEmpty) {
        return {
          'success': false,
          'error': 'Immatriculation d√©j√† utilis√©e',
          'message': 'Cette immatriculation existe d√©j√†',
        };
      }

      // Cr√©er une r√©f√©rence de document pour auto-g√©n√©rer l'ID
      final docRef = _firestore.collection('vehicules').doc();
      final vehiculeId = docRef.id;

      // Donn√©es du v√©hicule
      final vehiculeData = {
        'id': vehiculeId,
        'immatriculation': immatriculation,
        'marque': marque,
        'modele': modele,
        'annee': annee,
        'typeVehicule': typeVehicule,
        'couleur': couleur,
        'numeroSerie': numeroSerie,
        'contratId': contratId,
        'conducteurId': conducteurId,
        'agentId': agentId,
        'agenceId': agenceId,
        'compagnieId': compagnieId,
        'isActive': true,
        'createdAt': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
        'createdBy': agentId,
        'origin': 'agent_creation',
      };

      // Cr√©er le v√©hicule dans Firestore
      await docRef.set(vehiculeData);

      debugPrint('[AGENT] ‚úÖ V√©hicule ajout√© avec succ√®s: $immatriculation');
      return {
        'success': true,
        'message': 'V√©hicule ajout√© avec succ√®s',
        'vehiculeId': vehiculeId,
        'immatriculation': immatriculation,
      };

    } catch (e) {
      debugPrint('[AGENT] ‚ùå Erreur ajout v√©hicule: $e');
      return {
        'success': false,
        'error': e.toString(),
        'message': 'Erreur lors de l\'ajout du v√©hicule',
      };
    }
  }

  /// ‚ûï Ajouter un conducteur
  static Future<Map<String, dynamic>> addConducteur({
    required String agentId,
    required String agenceId,
    required String compagnieId,
    required String nom,
    required String prenom,
    required String cin,
    required String telephone,
    required DateTime dateNaissance,
    required String numeroPermis,
    required DateTime dateObtentionPermis,
    String? email,
    String? adresse,
    String? vehiculeId,
  }) async {
    try {
      debugPrint('[AGENT] ‚ûï Ajout conducteur: $prenom $nom');

      // V√©rifier si le CIN existe d√©j√†
      final existingConducteurQuery = await _firestore
          .collection('conducteurs')
          .where('cin', isEqualTo: cin)
          .limit(1)
          .get();

      if (existingConducteurQuery.docs.isNotEmpty) {
        return {
          'success': false,
          'error': 'CIN d√©j√† utilis√©',
          'message': 'Ce CIN existe d√©j√†',
        };
      }

      // Cr√©er une r√©f√©rence de document pour auto-g√©n√©rer l'ID
      final docRef = _firestore.collection('conducteurs').doc();
      final conducteurId = docRef.id;

      // Donn√©es du conducteur
      final conducteurData = {
        'id': conducteurId,
        'nom': nom,
        'prenom': prenom,
        'cin': cin,
        'telephone': telephone,
        'email': email,
        'adresse': adresse,
        'dateNaissance': Timestamp.fromDate(dateNaissance),
        'numeroPermis': numeroPermis,
        'dateObtentionPermis': Timestamp.fromDate(dateObtentionPermis),
        'vehiculeId': vehiculeId,
        'agentId': agentId,
        'agenceId': agenceId,
        'compagnieId': compagnieId,
        'isActive': true,
        'createdAt': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
        'createdBy': agentId,
        'origin': 'agent_creation',
      };

      // Cr√©er le conducteur dans Firestore
      await docRef.set(conducteurData);

      debugPrint('[AGENT] ‚úÖ Conducteur ajout√© avec succ√®s: $prenom $nom');
      return {
        'success': true,
        'message': 'Conducteur ajout√© avec succ√®s',
        'conducteurId': conducteurId,
        'displayName': '$prenom $nom',
      };

    } catch (e) {
      debugPrint('[AGENT] ‚ùå Erreur ajout conducteur: $e');
      return {
        'success': false,
        'error': e.toString(),
        'message': 'Erreur lors de l\'ajout du conducteur',
      };
    }
  }
}
