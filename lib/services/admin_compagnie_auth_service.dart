import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';import ';  }';/// üè¢ Service d';      debugPrint('[ADMIN_COMPAGNIE_AUTH] üîê Tentative connexion: 'email';      // 1. Verifier si l';          .collection('users';          .where('email, isEqualTo: email';          .where('role', isEqualTo: ';      if (userQuery.docs.isEmpty';          error: ';      final userData = userQuery.docs.first.data(';      debugPrint('[ADMIN_COMPAGNIE_AUTH] üë§ Utilisateur trouve: '{userData['compagnieNom';      // 2. Verifier le mot de passe (TOUS les champs possibles';      final storedPassword = userData['password';                            userData['temporaryPassword';                            userData['motDePasseTemporaire';                            userData['motDePasse';                            userData['temp_password';                            userData['generated_password';      debugPrint('[ADMIN_COMPAGNIE_AUTH] üîë Verification mot de passe...';      debugPrint('[ADMIN_COMPAGNIE_AUTH] üìù Champs disponibles: {userData.keys.toList(')}';      debugPrint('[ADMIN_COMPAGNIE_AUTH] üîç Champs mot de passe:';      debugPrint('[ADMIN_COMPAGNIE_AUTH]   - password: '{userData['password']}';      debugPrint('[ADMIN_COMPAGNIE_AUTH]   - temporaryPassword: '{userData['temporaryPassword']}';      debugPrint('[ADMIN_COMPAGNIE_AUTH]   - motDePasseTemporaire: '{userData['motDePasseTemporaire']}';      debugPrint('[ADMIN_COMPAGNIE_AUTH]   - motDePasse: '{userData['motDePasse']}';      debugPrint('[ADMIN_COMPAGNIE_AUTH]   - temp_password: '{userData['temp_password']}';      debugPrint('[ADMIN_COMPAGNIE_AUTH]   - generated_password: '{userData['generated_password';      if (storedPassword == null';        debugPrint('[ADMIN_COMPAGNIE_AUTH] ‚ùå Aucun mot de passe trouve dans les champs';          error: '‚ùå MOT DE PASSE NON D√âFINI\n\nCe compte n\';      if (storedPassword != password';        debugPrint('[ADMIN_COMPAGNIE_AUTH] ‚ùå Mot de passe incorrect';        debugPrint('[ADMIN_COMPAGNIE_AUTH] üîç Attendu: $storedPassword, Recu: 'password';          error: ';        ';      debugPrint('[ADMIN_COMPAGNIE_AUTH] ‚úÖ Mot de passe correct';      final status = userData['status';      final isActive = userData['isActive';      debugPrint('[ADMIN_COMPAGNIE_AUTH] üìä Verification statut: $status, actif: 'isActive';      if (status == 'supprime' || status == 'deleted';          error: ';        ';      if (status != 'actif || isActive != true';          error: '‚ùå COMPTE D√âSACTIV√â\n\nStatut: $status\nActif: 'isActive\n\nüí° Contactez l\';        await _auth.signInAnonymously(';        debugPrint(';      } catch (e';        debugPrint('[ADMIN_COMPAGNIE_AUTH] ‚ö†Ô∏è Session Firebase echouee:  + e.toString()';          .collection('users';          .doc(userData['uid]';        'last_login: FieldValue.serverTimestamp(';        ';      }';      debugPrint('[ADMIN_COMPAGNIE_AUTH] üéâ Connexion reussie pour '{userData['compagnieNom']}';        compagnieId: userData['compagnieId';        compagnieNom: userData[';    } catch (e';      debugPrint('[ADMIN_COMPAGNIE_AUTH] ‚ùå Erreur connexion:  + e.toString()';        error: 'Erreur de connexion: ';  static Future<Map<String, dynamic>?> getCompagnieData(String compagnieId';      final collections = ['companies', 'compagnies_assurance', ';          if (doc.exists';            debugPrint('[ADMIN_COMPAGNIE_AUTH] üè¢ Compagnie trouvee dans: ';        } catch (e';        'id';        'nom': compagnieId.replaceAll('_', ' ';        'code';        'status': 'actif';        'created_at: FieldValue.serverTimestamp(';          .collection(';    } catch (e';      debugPrint(';  static Future<Map<String, dynamic>> getCompagnieStats(String compagnieId';      debugPrint('[ADMIN_COMPAGNIE_AUTH] üìà Recuperation stats pour: 'compagnieId';            .collection('agencies';            .where(';      } catch (e';        debugPrint('[ADMIN_COMPAGNIE_AUTH] ‚ö†Ô∏è Erreur count agences:  + e.toString()';            .collection('users';            .where('compagnieId, isEqualTo: compagnieId';            .where('role', isEqualTo: ';      } catch (e';        debugPrint('[ADMIN_COMPAGNIE_AUTH] ‚ö†Ô∏è Erreur count agents:  + e.toString()';            .collection('contracts';            .where(';      } catch (e';        debugPrint('[ADMIN_COMPAGNIE_AUTH] ‚ö†Ô∏è Erreur count contrats:  + e.toString()';            .collection('claims';            .where(';      } catch (e';        debugPrint('[ADMIN_COMPAGNIE_AUTH] ‚ö†Ô∏è Erreur count sinistres:  + e.toString()';        'total_agences';        'total_agents';        'total_contrats';        'total_sinistres';        'last_updated: DateTime.now().toIso8601String(';      debugPrint('[ADMIN_COMPAGNIE_AUTH] üìä Stats calculees: ';    } catch (e';      debugPrint('[ADMIN_COMPAGNIE_AUTH] ‚ùå Erreur calcul stats:  + e.toString()';        'total_agences';        'total_agents';        'total_contrats';        'total_sinistres';        ';  }';      debugPrint('[ADMIN_COMPAGNIE_SERVICE] üë§ Creation Admin Agence: $prenom 'nom';      debugPrint('[ADMIN_COMPAGNIE_SERVICE] üìã Parametres: compagnieId=$compagnieId, agenceId='agenceId';      // 1. Verifier que l';      debugPrint('[ADMIN_COMPAGNIE_SERVICE] üîç Verification agence...';      // Essayer d';          .collection(';          .doc(compagnieId';          .collection(';      if (!agenceDoc.exists';        debugPrint('[ADMIN_COMPAGNIE_SERVICE] ‚ö†Ô∏è Agence non trouvee dans nouvelle structure, essai ancienne...';        // Fallback vers l';            .collection(';        if (!oldAgenceDoc.exists';          debugPrint('[ADMIN_COMPAGNIE_SERVICE] ‚ùå Agence introuvable dans les deux structures: 'agenceId';            'success';            'error': 'Agence introuvable';            'message': 'L\'agence specifiee n\'existe pas. Veuillez d\';        agenceData = oldAgenceDoc.data(';        debugPrint('[ADMIN_COMPAGNIE_SERVICE] ‚úÖ Agence trouvee dans ancienne structure: '{agenceData['nom']}';        debugPrint(';        agenceData = agenceDoc.data(';        debugPrint('[ADMIN_COMPAGNIE_SERVICE] ‚úÖ Agence trouvee dans nouvelle structure: '{agenceData['nom']}';      // 2. Verifier qu'il n';      debugPrint('[ADMIN_COMPAGNIE_SERVICE] üîç Verification admin existant...';          .collection('users';          .where('role', isEqualTo: 'admin_agence';          .where('agenceId, isEqualTo: agenceId';          .where('compagnieId, isEqualTo: compagnieId';          .where(';        final existingAdminData = existingAdmin.docs.first.data(';        debugPrint('[ADMIN_COMPAGNIE_SERVICE] ‚ùå Admin deja existant: '{existingAdminData['email']}';          'success';          'error': 'Admin deja existant';          'message': 'Cette agence a deja un administrateur: '{existingAdminData['prenom']} '{existingAdminData['nom']} ('{existingAdminData['email]}')';      // 3. Verifier que l'email n';      debugPrint('[ADMIN_COMPAGNIE_SERVICE] üîç Verification email...';          .collection('users';          .where('email, isEqualTo: email';          .where(';      if (existingUser.docs.isNotEmpty';        debugPrint('[ADMIN_COMPAGNIE_SERVICE] ‚ùå Email deja utilise: 'email';          'success';          'error': 'Email deja utilise';          'message': ';      final tempPassword = _generateSecurePassword(';      final adminId = 'admin_agence_${agenceId}_{DateTime.now(').millisecondsSinceEpoch}';      debugPrint('[ADMIN_COMPAGNIE_SERVICE] üîê Mot de passe genere: 'tempPassword';        'uid';        'email';        'nom';        'prenom';        'role': 'admin_agence';        'compagnieId';        'agenceId';        'telephone';        'adresse': adresse ?? ';        'cin': cin ?? ';        'status': 'actif';        'isActive';        'isFirstLogin';        'passwordChangeRequired';        'created_at: FieldValue.serverTimestamp(';        'created_by';        ';        // Mots de passe dans tous les champs pour compatibilite (m√™me format que Super Admin';        'password';        'temporaryPassword';        'motDePasseTemporaire';        'motDePasse';        'temp_password';        'generated_password';      // 5. Creer l';      debugPrint('[ADMIN_COMPAGNIE_SERVICE] üíæ Creation utilisateur...';          .collection(';          .set(adminData';      // 6. Mettre a jour l'agence avec l';      debugPrint('[ADMIN_COMPAGNIE_SERVICE] üîó Liaison agence-admin...';        'adminUid';        'adminEmail';        'adminNom': '$prenom 'nom';        'hasAdmin';        ';      if (isNewStructure';            .collection(';            .doc(compagnieId';            .collection(';        // Ancienne structure (fallback';            .collection(';            .update(updateData';        debugPrint('[ADMIN_COMPAGNIE_SERVICE] ‚ö†Ô∏è Agence mise a jour dans ancienne structure - Migration recommandee';      debugPrint('[ADMIN_COMPAGNIE_SERVICE] ‚úÖ Admin Agence cree avec succes: 'adminId';        'success';        'adminId';        'email';        'password';        'message': 'Admin Agence cree avec succes';        'displayCredentials';          'email';          'password';          'nom': '"prenom 'nom';          'role': 'Admin Agence';          'agence': agenceData[';    } catch (e';      debugPrint('[ADMIN_COMPAGNIE_SERVICE] ‚ùå Erreur creation Admin Agence:  + e.toString()';      debugPrint('[ADMIN_COMPAGNIE_SERVICE] üìç Stack trace: '{StackTrace.current}';        'success';        'error: e.toString(';        'message': 'Erreur lors de la creation de l\'Admin Agence: {e.toString(')}';    String password = ';    password += 'ABCDEFGHIJKLMNOPQRSTUVWXYZ[random.nextInt(26';    password += 'abcdefghijklmnopqrstuvwxyz[random.nextInt(26';    password += '0123456789[random.nextInt(10';    password += '!@#\';      password += chars[random.nextInt(chars.length';    final passwordList = password.split(';      await _auth.signOut(';      debugPrint(';    } catch (e';      debugPrint(';  static Future<bool> checkAdminCompagnieExists(String email';          .collection('users';          .where('email, isEqualTo: email';          .where('role', isEqualTo: ';    } catch (e';      debugPrint(';    if (!kDebugMode';          .collection('users';          .where(';        final userData = userQuery.docs.first.data(';        debugPrint('=== DEBUG USER DATA ===';        debugPrint('Email: 'email';        debugPrint('Donnees completes: 'userData';        debugPrint('Champs mot de passe:';        debugPrint('  - password: '{userData['password']}';        debugPrint('  - temporaryPassword: '{userData['temporaryPassword']}';        debugPrint('  - motDePasseTemporaire: '{userData['motDePasseTemporaire']}';        debugPrint('========================';        debugPrint('‚ùå Aucun utilisateur trouve avec l\'email: ';    } catch (e';      debugPrint('‚ùå Erreur debug: ';