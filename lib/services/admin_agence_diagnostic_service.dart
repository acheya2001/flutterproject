import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';

/// üîß Service de diagnostic et r√©paration pour Admin Agence
/// Aide √† diagnostiquer et corriger les probl√®mes de configuration
class AdminAgenceDiagnosticService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// üîç Diagnostiquer les probl√®mes d'un admin agence
  static Future<Map<String, dynamic>> diagnoseAdminAgence(String adminId) async {
    final diagnosis = <String, dynamic>{
      'adminExists': false,
      'adminData': null,
      'hasAgenceId': false,
      'agenceExists': false,
      'agenceData': null,
      'possibleAgences': [],
      'recommendations': [],
    };

    try {
      debugPrint('[DIAGNOSTIC] üîç Diagnostic pour admin: $adminId');

      // 1. V√©rifier si l'admin existe
      final adminDoc = await _firestore.collection('users').doc(adminId).get();
      diagnosis['adminExists'] = adminDoc.exists;

      if (!adminDoc.exists) {
        diagnosis['recommendations'].add('L\'utilisateur admin n\'existe pas dans Firestore');
        return diagnosis;
      }

      final adminData = adminDoc.data()!;
      diagnosis['adminData'] = adminData;
      debugPrint('[DIAGNOSTIC] üë§ Admin trouv√©: ${adminData['email']}');

      // 2. V√©rifier si l'admin a un agenceId
      final agenceId = adminData['agenceId'];
      diagnosis['hasAgenceId'] = agenceId != null;

      if (agenceId != null) {
        // 3. V√©rifier si l'agence existe
        final agenceDoc = await _firestore.collection('agences').doc(agenceId).get();
        diagnosis['agenceExists'] = agenceDoc.exists;

        if (agenceDoc.exists) {
          diagnosis['agenceData'] = agenceDoc.data();
          debugPrint('[DIAGNOSTIC] ‚úÖ Agence trouv√©e: ${agenceDoc.data()!['nom']}');
        } else {
          diagnosis['recommendations'].add('L\'agence r√©f√©renc√©e (ID: $agenceId) n\'existe pas');
        }
      } else {
        diagnosis['recommendations'].add('L\'admin n\'a pas d\'agenceId assign√©');
      }

      // 4. Chercher des agences possibles par email
      final email = adminData['email'];
      if (email != null) {
        final possibleAgences = await _findPossibleAgencesByEmail(email);
        diagnosis['possibleAgences'] = possibleAgences;

        if (possibleAgences.isNotEmpty) {
          diagnosis['recommendations'].add('${possibleAgences.length} agence(s) trouv√©e(s) avec cet email');
        }
      }

      // 5. G√©n√©rer des recommandations
      if (!diagnosis['hasAgenceId'] && diagnosis['possibleAgences'].isEmpty) {
        diagnosis['recommendations'].add('Cr√©er une nouvelle agence pour cet admin');
      }

      if (!diagnosis['hasAgenceId'] && diagnosis['possibleAgences'].isNotEmpty) {
        diagnosis['recommendations'].add('Assigner l\'admin √† une agence existante');
      }

      return diagnosis;

    } catch (e) {
      debugPrint('[DIAGNOSTIC] ‚ùå Erreur diagnostic: $e');
      diagnosis['error'] = e.toString();
      return diagnosis;
    }
  }

  /// üîç Chercher des agences possibles par email
  static Future<List<Map<String, dynamic>>> _findPossibleAgencesByEmail(String email) async {
    final possibleAgences = <Map<String, dynamic>>[];

    try {
      final agencesQuery = await _firestore.collection('agences').get();

      for (final agenceDoc in agencesQuery.docs) {
        final agenceData = agenceDoc.data();
        agenceData['id'] = agenceDoc.id;

        // V√©rifier diff√©rents champs d'email
        if (agenceData['adminEmail'] == email ||
            agenceData['email'] == email ||
            agenceData['contactEmail'] == email) {
          possibleAgences.add(agenceData);
        }
      }

      debugPrint('[DIAGNOSTIC] üîç ${possibleAgences.length} agences possibles trouv√©es');
      return possibleAgences;

    } catch (e) {
      debugPrint('[DIAGNOSTIC] ‚ùå Erreur recherche agences: $e');
      return [];
    }
  }

  /// üîß R√©parer automatiquement la configuration d'un admin agence
  static Future<bool> repairAdminAgence(String adminId) async {
    try {
      debugPrint('[DIAGNOSTIC] üîß Tentative de r√©paration pour admin: $adminId');

      final diagnosis = await diagnoseAdminAgence(adminId);

      if (!diagnosis['adminExists']) {
        debugPrint('[DIAGNOSTIC] ‚ùå Impossible de r√©parer: admin inexistant');
        return false;
      }

      final adminData = diagnosis['adminData'] as Map<String, dynamic>;
      final possibleAgences = diagnosis['possibleAgences'] as List<Map<String, dynamic>>;

      // Si l'admin n'a pas d'agenceId mais qu'on a trouv√© des agences possibles
      if (!diagnosis['hasAgenceId'] && possibleAgences.isNotEmpty) {
        final agenceToAssign = possibleAgences.first;
        
        // Assigner l'agence √† l'admin
        await _firestore.collection('users').doc(adminId).update({
          'agenceId': agenceToAssign['id'],
          'agenceNom': agenceToAssign['nom'],
          'compagnieId': agenceToAssign['compagnieId'],
        });

        debugPrint('[DIAGNOSTIC] ‚úÖ Admin assign√© √† l\'agence: ${agenceToAssign['nom']}');
        return true;
      }

      // Si aucune agence n'est trouv√©e, cr√©er une agence par d√©faut
      if (!diagnosis['hasAgenceId'] && possibleAgences.isEmpty) {
        final newAgenceId = await _createDefaultAgence(adminData);
        if (newAgenceId != null) {
          await _firestore.collection('users').doc(adminId).update({
            'agenceId': newAgenceId,
          });
          debugPrint('[DIAGNOSTIC] ‚úÖ Nouvelle agence cr√©√©e et assign√©e');
          return true;
        }
      }

      debugPrint('[DIAGNOSTIC] ‚ùå Aucune r√©paration possible');
      return false;

    } catch (e) {
      debugPrint('[DIAGNOSTIC] ‚ùå Erreur r√©paration: $e');
      return false;
    }
  }

  /// üè¢ Cr√©er une agence par d√©faut pour un admin
  static Future<String?> _createDefaultAgence(Map<String, dynamic> adminData) async {
    try {
      // Chercher une compagnie par d√©faut ou cr√©er une
      final compagniesQuery = await _firestore.collection('compagnies_assurance').limit(1).get();
      String? compagnieId;

      if (compagniesQuery.docs.isNotEmpty) {
        compagnieId = compagniesQuery.docs.first.id;
      } else {
        // Cr√©er une compagnie par d√©faut
        final compagnieRef = await _firestore.collection('compagnies_assurance').add({
          'nom': 'Compagnie par D√©faut',
          'code': 'DEFAULT',
          'email': 'default@company.com',
          'telephone': '00000000',
          'adresse': 'Adresse par d√©faut',
          'dateCreation': FieldValue.serverTimestamp(),
          'isActive': true,
        });
        compagnieId = compagnieRef.id;
      }

      // Cr√©er l'agence
      final agenceRef = await _firestore.collection('agences').add({
        'nom': 'Agence ${adminData['prenom']} ${adminData['nom']}',
        'code': 'AG${DateTime.now().millisecondsSinceEpoch.toString().substring(8)}',
        'compagnieId': compagnieId,
        'adminEmail': adminData['email'],
        'email': adminData['email'],
        'telephone': adminData['telephone'] ?? '00000000',
        'adresse': 'Adresse √† d√©finir',
        'ville': adminData['ville'] ?? 'Ville √† d√©finir',
        'dateCreation': FieldValue.serverTimestamp(),
        'isActive': true,
        'stats': {
          'totalAgents': 0,
          'activeAgents': 0,
          'totalContrats': 0,
          'totalSinistres': 0,
        },
      });

      debugPrint('[DIAGNOSTIC] ‚úÖ Agence par d√©faut cr√©√©e: ${agenceRef.id}');
      return agenceRef.id;

    } catch (e) {
      debugPrint('[DIAGNOSTIC] ‚ùå Erreur cr√©ation agence: $e');
      return null;
    }
  }

  /// üìä Obtenir un rapport de diagnostic complet
  static Future<String> getDiagnosticReport(String adminId) async {
    final diagnosis = await diagnoseAdminAgence(adminId);
    
    final report = StringBuffer();
    report.writeln('=== RAPPORT DE DIAGNOSTIC ADMIN AGENCE ===');
    report.writeln('Admin ID: $adminId');
    report.writeln('');
    
    if (diagnosis['adminExists']) {
      final adminData = diagnosis['adminData'] as Map<String, dynamic>;
      report.writeln('‚úÖ Admin trouv√©:');
      report.writeln('   Email: ${adminData['email']}');
      report.writeln('   Nom: ${adminData['prenom']} ${adminData['nom']}');
      report.writeln('   R√¥le: ${adminData['role']}');
      report.writeln('');
    } else {
      report.writeln('‚ùå Admin non trouv√©');
      return report.toString();
    }
    
    if (diagnosis['hasAgenceId']) {
      report.writeln('‚úÖ AgenceId pr√©sent');
      if (diagnosis['agenceExists']) {
        final agenceData = diagnosis['agenceData'] as Map<String, dynamic>;
        report.writeln('‚úÖ Agence trouv√©e: ${agenceData['nom']}');
      } else {
        report.writeln('‚ùå Agence r√©f√©renc√©e inexistante');
      }
    } else {
      report.writeln('‚ùå Aucun AgenceId assign√©');
    }
    
    final possibleAgences = diagnosis['possibleAgences'] as List<Map<String, dynamic>>;
    if (possibleAgences.isNotEmpty) {
      report.writeln('');
      report.writeln('üîç Agences possibles trouv√©es:');
      for (final agence in possibleAgences) {
        report.writeln('   - ${agence['nom']} (ID: ${agence['id']})');
      }
    }
    
    final recommendations = diagnosis['recommendations'] as List<dynamic>;
    if (recommendations.isNotEmpty) {
      report.writeln('');
      report.writeln('üí° Recommandations:');
      for (final rec in recommendations) {
        report.writeln('   - $rec');
      }
    }
    
    return report.toString();
  }
}
