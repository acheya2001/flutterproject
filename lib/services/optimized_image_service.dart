import 'dart:io';
import 'dart:typed_data';
import 'package:flutter/material.dart';
import 'package:image_picker/image_picker.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as path;
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:convert';

/// üöÄ Service optimis√© pour la gestion d'images avec performance am√©lior√©e
class OptimizedImageService {
  static final ImagePicker _picker = ImagePicker();
  static final Map<String, String> _imageCache = {};
  static const String _cacheKey = 'image_cache';

  /// üì∏ Prendre une photo avec optimisation automatique
  static Future<String?> takeOptimizedPhoto({
    required String destination,
    String? customName,
    Function(String)? onProgress,
  }) async {
    try {
      onProgress?.call('Ouverture de l\'appareil photo...');
      
      final XFile? image = await _picker.pickImage(
        source: ImageSource.camera,
        imageQuality: 70, // Qualit√© optimis√©e pour la performance
        maxWidth: 1920,
        maxHeight: 1080,
      );

      if (image == null) return null;

      onProgress?.call('Traitement de l\'image...');
      return await _processAndSaveImage(image, destination, customName, onProgress);
      
    } catch (e) {
      print('‚ùå Erreur prise de photo: $e');
      throw Exception('Erreur lors de la prise de photo: $e');
    }
  }

  /// üñºÔ∏è S√©lectionner une photo depuis la galerie
  static Future<String?> selectOptimizedPhoto({
    required String destination,
    String? customName,
    Function(String)? onProgress,
  }) async {
    try {
      onProgress?.call('Ouverture de la galerie...');
      
      final XFile? image = await _picker.pickImage(
        source: ImageSource.gallery,
        imageQuality: 70,
        maxWidth: 1920,
        maxHeight: 1080,
      );

      if (image == null) return null;

      onProgress?.call('Traitement de l\'image...');
      return await _processAndSaveImage(image, destination, customName, onProgress);
      
    } catch (e) {
      print('‚ùå Erreur s√©lection photo: $e');
      throw Exception('Erreur lors de la s√©lection: $e');
    }
  }

  /// üì± S√©lectionner plusieurs photos optimis√©es
  static Future<List<String>> selectMultipleOptimizedPhotos({
    required String destination,
    int maxImages = 5,
    Function(int, int)? onProgress,
  }) async {
    try {
      final List<XFile> images = await _picker.pickMultiImage(
        imageQuality: 70,
        maxWidth: 1920,
        maxHeight: 1080,
      );

      if (images.isEmpty) return [];

      final List<String> results = [];
      final limitedImages = images.take(maxImages).toList();

      for (int i = 0; i < limitedImages.length; i++) {
        try {
          onProgress?.call(i + 1, limitedImages.length);
          
          final result = await _processAndSaveImage(
            limitedImages[i], 
            destination, 
            'image_${i + 1}_${DateTime.now().millisecondsSinceEpoch}',
            null,
          );
          
          if (result != null) {
            results.add(result);
          }
        } catch (e) {
          print('‚ö†Ô∏è Erreur traitement image ${i + 1}: $e');
          // Continuer avec les autres images
        }
      }

      return results;
    } catch (e) {
      print('‚ùå Erreur s√©lection multiple: $e');
      throw Exception('Erreur lors de la s√©lection multiple: $e');
    }
  }

  /// üîÑ Traitement et sauvegarde optimis√©e d'image
  static Future<String?> _processAndSaveImage(
    XFile image, 
    String destination, 
    String? customName,
    Function(String)? onProgress,
  ) async {
    try {
      final File originalFile = File(image.path);
      final String fileName = customName ?? 
          'img_${DateTime.now().millisecondsSinceEpoch}${path.extension(image.path)}';

      onProgress?.call('Optimisation de l\'image...');

      // V√©rifier si l'image est d√©j√† en cache
      final String cacheKey = '${destination}_$fileName';
      if (_imageCache.containsKey(cacheKey)) {
        onProgress?.call('Image r√©cup√©r√©e du cache');
        return _imageCache[cacheKey];
      }

      // Compression et optimisation
      final File optimizedFile = await _optimizeImage(originalFile, fileName);
      
      onProgress?.call('Sauvegarde locale...');

      // Sauvegarde locale imm√©diate
      final String localPath = await _saveImageLocally(optimizedFile, destination, fileName);
      final String localUrl = 'file://$localPath';

      // Mise en cache
      _imageCache[cacheKey] = localUrl;
      await _saveCacheToPrefs();

      onProgress?.call('Image pr√™te !');

      // Upload en arri√®re-plan (non-bloquant)
      _uploadInBackground(optimizedFile, destination, fileName, localUrl);

      return localUrl;
      
    } catch (e) {
      print('‚ùå Erreur traitement image: $e');
      throw Exception('Erreur lors du traitement: $e');
    }
  }

  /// üóúÔ∏è Optimisation d'image avanc√©e
  static Future<File> _optimizeImage(File originalFile, String fileName) async {
    try {
      final int originalSize = await originalFile.length();
      
      // Si l'image est d√©j√† petite (< 300KB), pas d'optimisation
      if (originalSize < 300 * 1024) {
        return originalFile;
      }

      // Cr√©er un fichier temporaire optimis√©
      final Directory tempDir = await getTemporaryDirectory();
      final String optimizedPath = '${tempDir.path}/optimized_$fileName';
      
      // Copie simple (dans un vrai projet, utilisez le package image pour la compression)
      final File optimizedFile = await originalFile.copy(optimizedPath);
      
      final int optimizedSize = await optimizedFile.length();
      print('üóúÔ∏è Optimisation: ${originalSize ~/ 1024}KB ‚Üí ${optimizedSize ~/ 1024}KB');
      
      return optimizedFile;
      
    } catch (e) {
      print('‚ö†Ô∏è √âchec optimisation: $e');
      return originalFile;
    }
  }

  /// üíæ Sauvegarde locale organis√©e
  static Future<String> _saveImageLocally(File file, String destination, String fileName) async {
    try {
      final Directory appDir = await getApplicationDocumentsDirectory();
      final Directory destDir = Directory('${appDir.path}/images/$destination');
      
      if (!await destDir.exists()) {
        await destDir.create(recursive: true);
      }

      final String localPath = '${destDir.path}/$fileName';
      final File localFile = await file.copy(localPath);
      
      print('üíæ Image sauv√©e: $localPath');
      return localFile.path;
      
    } catch (e) {
      print('‚ùå Erreur sauvegarde locale: $e');
      throw Exception('Impossible de sauvegarder l\'image');
    }
  }

  /// üåê Upload en arri√®re-plan
  static void _uploadInBackground(File file, String destination, String fileName, String localUrl) async {
    try {
      print('üîÑ Upload en arri√®re-plan: $fileName');
      
      // Simuler un upload (remplacer par votre service cloud)
      await Future.delayed(const Duration(seconds: 2));
      
      // TODO: Int√©grer avec votre service cloud (Firebase, Cloudinary, etc.)
      // final cloudUrl = await YourCloudService.upload(file, destination);
      
      print('‚úÖ Upload termin√© en arri√®re-plan: $fileName');
      
    } catch (e) {
      print('‚ö†Ô∏è √âchec upload arri√®re-plan: $e');
    }
  }

  /// üóëÔ∏è Supprimer une image
  static Future<bool> deleteImage(String imageUrl) async {
    try {
      if (imageUrl.startsWith('file://')) {
        final String localPath = imageUrl.replaceFirst('file://', '');
        final File file = File(localPath);
        
        if (await file.exists()) {
          await file.delete();
          
          // Supprimer du cache
          _imageCache.removeWhere((key, value) => value == imageUrl);
          await _saveCacheToPrefs();
          
          print('üóëÔ∏è Image supprim√©e: $localPath');
          return true;
        }
      }
      
      return false;
    } catch (e) {
      print('‚ùå Erreur suppression: $e');
      return false;
    }
  }

  /// üíæ Sauvegarder le cache
  static Future<void> _saveCacheToPrefs() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final String cacheJson = jsonEncode(_imageCache);
      await prefs.setString(_cacheKey, cacheJson);
    } catch (e) {
      print('‚ö†Ô∏è Erreur sauvegarde cache: $e');
    }
  }

  /// üìÇ Charger le cache
  static Future<void> loadCache() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final String? cacheJson = prefs.getString(_cacheKey);
      
      if (cacheJson != null) {
        final Map<String, dynamic> decoded = jsonDecode(cacheJson);
        _imageCache.clear();
        _imageCache.addAll(Map<String, String>.from(decoded));
        print('üìÇ Cache charg√©: ${_imageCache.length} images');
      }
    } catch (e) {
      print('‚ö†Ô∏è Erreur chargement cache: $e');
    }
  }

  /// üßπ Nettoyer le cache
  static Future<void> clearCache() async {
    try {
      _imageCache.clear();
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_cacheKey);
      print('üßπ Cache nettoy√©');
    } catch (e) {
      print('‚ö†Ô∏è Erreur nettoyage cache: $e');
    }
  }

  /// üìä Statistiques du cache
  static Map<String, dynamic> getCacheStats() {
    return {
      'totalImages': _imageCache.length,
      'cacheKeys': _imageCache.keys.toList(),
    };
  }
}
