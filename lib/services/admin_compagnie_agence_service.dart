import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import 'dart:math';

/// üè¢ Service de gestion des agences pour Admin Compagnie
class AdminCompagnieAgenceService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// üè¢ Cr√©er une nouvelle agence
  static Future<Map<String, dynamic>> createAgence({
    required String compagnieId,
    required String compagnieNom,
    required String nom,
    required String adresse,
    required String telephone,
    required String gouvernorat,
    required String emailContact,
    String? description,
    String? createdByEmail,
  }) async {
    try {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üè¢ Cr√©ation agence: $nom');

      // G√©n√©rer un code unique pour l'agence
      final codeAgence = _generateAgenceCode(compagnieNom, nom);

      // Donn√©es de l'agence avec m√©tadonn√©es de cr√©ation
      final agenceData = {
        'nom': nom,
        'code': codeAgence,
        'adresse': adresse,
        'telephone': telephone,
        'gouvernorat': gouvernorat,
        'emailContact': emailContact,
        'description': description ?? '',
        'compagnieId': compagnieId,
        'compagnieNom': compagnieNom,
        'isActive': true,
        'hasAdminAgence': false,
        'nombreAgents': 0,
        'nombreConstats': 0,
        'dateCreation': FieldValue.serverTimestamp(),
        'createdAt': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
        // üîç M√©tadonn√©es de cr√©ation pour synchronisation Super Admin
        'origin': 'admin_compagnie',
        'createdBy': createdByEmail ?? 'admin_compagnie',
        'createdByRole': 'admin_compagnie',
        'createdByCompagnie': compagnieNom,
      };

      // Cr√©er l'agence dans Firestore
      final agenceRef = await _firestore.collection('agences').add(agenceData);

      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Agence cr√©√©e: ${agenceRef.id}');

      return {
        'success': true,
        'agenceId': agenceRef.id,
        'code': codeAgence,
        'message': 'Agence cr√©√©e avec succ√®s',
      };

    } catch (e) {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Erreur cr√©ation agence: $e');
      return {
        'success': false,
        'error': e.toString(),
        'message': 'Erreur lors de la cr√©ation de l\'agence',
      };
    }
  }

  /// üë®‚Äçüíº Cr√©er un admin agence pour une agence
  static Future<Map<String, dynamic>> createAdminAgence({
    required String agenceId,
    required String agenceNom,
    required String compagnieId,
    required String compagnieNom,
    required String prenom,
    required String nom,
    required String telephone,
    String? email,
    String? createdByEmail,
  }) async {
    debugPrint('[ADMIN_COMPAGNIE_AGENCE] üöÄ D√âBUT cr√©ation admin agence');
    debugPrint('[ADMIN_COMPAGNIE_AGENCE] üìã Param√®tres re√ßus:');
    debugPrint('[ADMIN_COMPAGNIE_AGENCE] - agenceId: $agenceId');
    debugPrint('[ADMIN_COMPAGNIE_AGENCE] - agenceNom: $agenceNom');
    debugPrint('[ADMIN_COMPAGNIE_AGENCE] - compagnieId: $compagnieId');
    debugPrint('[ADMIN_COMPAGNIE_AGENCE] - compagnieNom: $compagnieNom');
    debugPrint('[ADMIN_COMPAGNIE_AGENCE] - prenom: $prenom');
    debugPrint('[ADMIN_COMPAGNIE_AGENCE] - nom: $nom');
    debugPrint('[ADMIN_COMPAGNIE_AGENCE] - telephone: $telephone');

    try {
      // Validation des param√®tres d'entr√©e
      if (agenceId.isEmpty || agenceNom.isEmpty || compagnieId.isEmpty ||
          compagnieNom.isEmpty || prenom.isEmpty || nom.isEmpty) {
        debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Param√®tres manquants d√©tect√©s');
        throw Exception('Param√®tres manquants pour la cr√©ation de l\'admin agence');
      }

      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Validation param√®tres OK');

      // V√©rifier si l'agence a d√©j√† un admin (v√©rification robuste)
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üîç V√©rification agence existante...');
      final agenceDoc = await _firestore.collection('agences').doc(agenceId).get();
      if (!agenceDoc.exists) {
        debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Agence non trouv√©e: $agenceId');
        return {
          'success': false,
          'error': 'Agence non trouv√©e',
          'message': 'L\'agence sp√©cifi√©e n\'existe pas',
        };
      }

      final agenceData = agenceDoc.data()!;
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üìã Donn√©es agence: hasAdminAgence=${agenceData['hasAdminAgence']}');

      // V√©rification robuste : v√©rifier s'il y a vraiment un admin actif pour cette agence
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üîç V√©rification admin r√©el dans la collection users...');
      final existingAdminQuery = await _firestore
          .collection('users')
          .where('role', isEqualTo: 'admin_agence')
          .where('agenceId', isEqualTo: agenceId)
          .where('isActive', isEqualTo: true)
          .limit(1)
          .get();

      final hasRealAdmin = existingAdminQuery.docs.isNotEmpty;
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üìã Admin r√©el trouv√©: $hasRealAdmin');

      if (hasRealAdmin) {
        debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Agence a d√©j√† un admin actif');
        return {
          'success': false,
          'error': 'Cette agence a d√©j√† un admin agence actif',
          'message': 'Cette agence a d√©j√† un admin agence actif assign√©',
        };
      }

      // Si le flag hasAdminAgence est true mais qu'il n'y a pas d'admin r√©el, corriger les donn√©es
      if (agenceData['hasAdminAgence'] == true && !hasRealAdmin) {
        debugPrint('[ADMIN_COMPAGNIE_AGENCE] üîß Correction des donn√©es incoh√©rentes de l\'agence...');
        await _firestore.collection('agences').doc(agenceId).update({
          'hasAdminAgence': false,
          'adminAgenceId': FieldValue.delete(),
          'adminAgenceEmail': FieldValue.delete(),
          'adminAgence': FieldValue.delete(),
          'statut': 'libre',
          'correctedAt': FieldValue.serverTimestamp(),
        });
        debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Donn√©es agence corrig√©es');
      }

      // G√©n√©rer l'email si non fourni
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üìß G√©n√©ration email...');
      final finalEmail = email ?? _generateAdminAgenceEmail(prenom, nom, agenceNom);
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Email g√©n√©r√©: $finalEmail');

      // G√©n√©rer un mot de passe
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üîë G√©n√©ration mot de passe...');
      final password = _generatePassword();
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Mot de passe g√©n√©r√©');

      // Cr√©er une r√©f√©rence de document pour auto-g√©n√©rer l'ID
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üÜî G√©n√©ration r√©f√©rence document...');
      final docRef = _firestore.collection('users').doc();
      final uid = docRef.id;
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ UID g√©n√©r√©: $uid');

      // Donn√©es de l'admin agence avec m√©tadonn√©es de cr√©ation
      final adminData = {
        'uid': uid,
        'email': finalEmail,
        'password': password,
        'prenom': prenom,
        'nom': nom,
        'displayName': '$prenom $nom',
        'telephone': telephone,
        'role': 'admin_agence',
        'agenceId': agenceId,
        'agenceNom': agenceNom,
        'compagnieId': compagnieId,
        'compagnieNom': compagnieNom,
        'isActive': true,
        'status': 'actif',
        'firebaseAuthCreated': false,
        'created_at': FieldValue.serverTimestamp(),
        'createdAt': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
        // üîç M√©tadonn√©es de cr√©ation pour synchronisation Super Admin
        'origin': 'auto_creation',
        'createdBy': createdByEmail ?? 'admin_compagnie',
        'createdByRole': 'admin_compagnie',
        'createdByCompagnie': compagnieNom,
        'autoCreatedForAgence': agenceNom,
      };

      // Cr√©er l'admin agence dans Firestore
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üíæ Cr√©ation document admin dans Firestore...');
      await docRef.set(adminData);
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Document admin cr√©√© avec succ√®s');

      // Mettre √† jour l'agence pour indiquer qu'elle a un admin (statut occup√©)
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üîÑ Mise √† jour agence...');
      await _firestore.collection('agences').doc(agenceId).update({
        'hasAdminAgence': true,
        'adminAgenceId': uid,
        'adminAgenceEmail': finalEmail,
        'statut': 'occup√©',
        'dateAffectationAdmin': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
      });
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Agence mise √† jour avec succ√®s');

      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Admin agence cr√©√©: $finalEmail');

      return {
        'success': true,
        'email': finalEmail,
        'password': password,
        'adminId': uid,
        'displayName': '$prenom $nom',
        'message': 'Admin agence cr√©√© avec succ√®s',
      };

    } catch (e, stackTrace) {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Erreur cr√©ation admin agence: $e');
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üìç Stack trace: $stackTrace');

      // Analyser le type d'erreur pour donner un message plus pr√©cis
      String errorMessage = 'Erreur lors de la cr√©ation de l\'admin agence';
      if (e.toString().contains('permission')) {
        errorMessage = 'Permissions insuffisantes pour cr√©er l\'admin agence';
      } else if (e.toString().contains('network')) {
        errorMessage = 'Erreur de connexion. V√©rifiez votre connexion internet';
      } else if (e.toString().contains('email')) {
        errorMessage = 'Erreur avec l\'adresse email g√©n√©r√©e';
      }

      return {
        'success': false,
        'error': e.toString(),
        'message': errorMessage,
        'details': 'Erreur technique: ${e.toString()}',
      };
    }
  }

  /// üìã R√©cup√©rer les agences d'une compagnie
  static Future<List<Map<String, dynamic>>> getAgencesByCompagnie(String compagnieId) async {
    try {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üìã R√©cup√©ration agences pour compagnie: $compagnieId');

      final agencesQuery = await _firestore
          .collection('agences')
          .where('compagnieId', isEqualTo: compagnieId)
          .get();

      final agences = agencesQuery.docs.map((doc) {
        final data = doc.data();
        data['id'] = doc.id;
        return data;
      }).toList();

      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ ${agences.length} agences r√©cup√©r√©es');
      return agences;

    } catch (e) {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Erreur r√©cup√©ration agences: $e');
      return [];
    }
  }

  /// üë• R√©cup√©rer les admins agence d'une compagnie
  static Future<List<Map<String, dynamic>>> getAdminsAgenceByCompagnie(String compagnieId) async {
    try {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üë• R√©cup√©ration admins agence pour compagnie: $compagnieId');

      final adminsQuery = await _firestore
          .collection('users')
          .where('role', isEqualTo: 'admin_agence')
          .where('compagnieId', isEqualTo: compagnieId)
          .get();

      final admins = adminsQuery.docs.map((doc) {
        final data = doc.data();
        data['id'] = doc.id;
        return data;
      }).toList();

      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ ${admins.length} admins agence r√©cup√©r√©s');
      return admins;

    } catch (e) {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Erreur r√©cup√©ration admins agence: $e');
      return [];
    }
  }



  /// üîÑ Activer/D√©sactiver un admin agence
  static Future<Map<String, dynamic>> toggleAdminAgenceStatus(String adminId, bool isActive) async {
    try {
      await _firestore.collection('users').doc(adminId).update({
        'isActive': isActive,
        'status': isActive ? 'actif' : 'inactif',
        'updatedAt': FieldValue.serverTimestamp(),
      });

      return {
        'success': true,
        'message': isActive ? 'Admin agence activ√©' : 'Admin agence d√©sactiv√©',
      };

    } catch (e) {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Erreur toggle admin agence: $e');
      return {
        'success': false,
        'error': e.toString(),
      };
    }
  }

  // M√©thodes utilitaires priv√©es
  static String _generateAgenceCode(String compagnieNom, String agenceNom) {
    final compagnieCode = compagnieNom.substring(0, 3).toUpperCase();
    final agenceCode = agenceNom.substring(0, 3).toUpperCase();
    final random = Random().nextInt(999).toString().padLeft(3, '0');
    return '$compagnieCode-$agenceCode-$random';
  }

  static String _generateAdminAgenceEmail(String prenom, String nom, String agenceNom) {
    try {
      final prenomClean = prenom.toLowerCase()
          .replaceAll(' ', '')
          .replaceAll(RegExp(r'[^a-z0-9]'), ''); // Supprimer caract√®res sp√©ciaux
      final nomClean = nom.toLowerCase()
          .replaceAll(' ', '')
          .replaceAll(RegExp(r'[^a-z0-9]'), ''); // Supprimer caract√®res sp√©ciaux
      final agenceClean = agenceNom.toLowerCase()
          .replaceAll(' ', '')
          .replaceAll('agence', '')
          .replaceAll(RegExp(r'[^a-z0-9]'), '') // Supprimer caract√®res sp√©ciaux
          .trim();

      // S'assurer qu'aucun champ n'est vide
      final prenomFinal = prenomClean.isEmpty ? 'admin' : prenomClean;
      final nomFinal = nomClean.isEmpty ? 'user' : nomClean;
      final agenceFinal = agenceClean.isEmpty ? 'agence' : agenceClean;

      return '$prenomFinal.$nomFinal.$agenceFinal@assuretn.tn';
    } catch (e) {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Erreur g√©n√©ration email: $e');
      // Email de fallback
      return 'admin.${DateTime.now().millisecondsSinceEpoch}@assuretn.tn';
    }
  }

  static String _generatePassword() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    final random = Random();
    return String.fromCharCodes(Iterable.generate(
      12, (_) => chars.codeUnitAt(random.nextInt(chars.length))
    ));
  }

  static String _generateUID() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    final random = Random();
    return String.fromCharCodes(Iterable.generate(
      20, (_) => chars.codeUnitAt(random.nextInt(chars.length))
    ));
  }

  /// üìã R√©cup√©rer les agences avec leur statut d'affectation admin
  static Future<List<Map<String, dynamic>>> getAgencesWithAdminStatus(String compagnieId) async {
    try {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üìã R√©cup√©ration agences avec statut admin pour compagnie: $compagnieId');

      final agencesQuery = await _firestore
          .collection('agences')
          .where('compagnieId', isEqualTo: compagnieId)
          .get();

      List<Map<String, dynamic>> agences = [];

      for (var doc in agencesQuery.docs) {
        final agenceData = doc.data();
        agenceData['id'] = doc.id;

        // V√©rifier s'il y a un admin agence associ√© ET ACTIF
        final adminQuery = await _firestore
            .collection('users')
            .where('role', isEqualTo: 'admin_agence')
            .where('agenceId', isEqualTo: doc.id)
            .where('isActive', isEqualTo: true) // Seulement les admins actifs
            .limit(1)
            .get();

        final hasActiveAdmin = adminQuery.docs.isNotEmpty;
        agenceData['hasAdminAgence'] = hasActiveAdmin;

        if (hasActiveAdmin) {
          final adminData = adminQuery.docs.first.data();
          agenceData['adminAgence'] = {
            'id': adminQuery.docs.first.id,
            'nom': adminData['nom'],
            'prenom': adminData['prenom'],
            'email': adminData['email'],
            'telephone': adminData['telephone'],
            'cin': adminData['cin'],
            'isActive': adminData['isActive'],
          };
          agenceData['adminAgenceId'] = adminQuery.docs.first.id;
          agenceData['adminAgenceEmail'] = adminData['email'];
        } else {
          // S'assurer que les champs admin sont supprim√©s si pas d'admin actif
          agenceData['adminAgence'] = null;
          agenceData['adminAgenceId'] = null;
          agenceData['adminAgenceEmail'] = null;
        }

        agences.add(agenceData);
      }

      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ ${agences.length} agences avec statut admin r√©cup√©r√©es');
      return agences;

    } catch (e) {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Erreur r√©cup√©ration agences avec statut: $e');
      return [];
    }
  }

  /// üîÑ D√©sactiver une agence et son admin
  static Future<Map<String, dynamic>> disableAgence(String agenceId) async {
    try {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üîÑ D√©sactivation agence: $agenceId');

      // R√©cup√©rer l'agence pour trouver son admin
      final agenceDoc = await _firestore.collection('agences').doc(agenceId).get();
      if (!agenceDoc.exists) {
        return {'success': false, 'message': 'Agence non trouv√©e'};
      }

      final agenceData = agenceDoc.data()!;
      final adminAgenceId = agenceData['adminAgenceId'];

      // D√©sactiver l'agence
      await _firestore.collection('agences').doc(agenceId).update({
        'isActive': false,
        'statut': 'd√©sactiv√©',
        'dateDesactivation': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
      });

      // D√©sactiver l'admin agence s'il existe
      if (adminAgenceId != null) {
        await _firestore.collection('users').doc(adminAgenceId).update({
          'status': 'inactif',
          'isActive': false,
          'dateDesactivation': FieldValue.serverTimestamp(),
          'updatedAt': FieldValue.serverTimestamp(),
        });
        debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Admin agence d√©sactiv√©: $adminAgenceId');
      }

      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Agence d√©sactiv√©e: $agenceId');
      return {'success': true, 'message': 'Agence et admin d√©sactiv√©s avec succ√®s'};

    } catch (e) {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Erreur d√©sactivation agence: $e');
      return {'success': false, 'message': 'Erreur lors de la d√©sactivation: $e'};
    }
  }

  /// ‚ôªÔ∏è R√©activer une agence et son admin
  static Future<Map<String, dynamic>> enableAgence(String agenceId) async {
    try {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ôªÔ∏è R√©activation agence: $agenceId');

      // R√©cup√©rer l'agence pour trouver son admin
      final agenceDoc = await _firestore.collection('agences').doc(agenceId).get();
      if (!agenceDoc.exists) {
        return {'success': false, 'message': 'Agence non trouv√©e'};
      }

      final agenceData = agenceDoc.data()!;
      final adminAgenceId = agenceData['adminAgenceId'];

      // R√©activer l'agence
      await _firestore.collection('agences').doc(agenceId).update({
        'isActive': true,
        'statut': agenceData['hasAdminAgence'] == true ? 'occup√©' : 'libre',
        'dateReactivation': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
      });

      // R√©activer l'admin agence s'il existe
      if (adminAgenceId != null) {
        await _firestore.collection('users').doc(adminAgenceId).update({
          'status': 'actif',
          'isActive': true,
          'dateReactivation': FieldValue.serverTimestamp(),
          'updatedAt': FieldValue.serverTimestamp(),
        });
        debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Admin agence r√©activ√©: $adminAgenceId');
      }

      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Agence r√©activ√©e: $agenceId');
      return {'success': true, 'message': 'Agence et admin r√©activ√©s avec succ√®s'};

    } catch (e) {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Erreur r√©activation agence: $e');
      return {'success': false, 'message': 'Erreur lors de la r√©activation: $e'};
    }
  }

  /// üóëÔ∏è Retirer un admin d'une agence (sans supprimer le compte)
  static Future<Map<String, dynamic>> deleteAdminAgence(String adminId, String agenceId) async {
    try {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üóëÔ∏è Retrait admin de l\'agence: $adminId');

      // Retirer l'assignation √† l'agence (garder l'admin dans la liste)
      await _firestore.collection('users').doc(adminId).update({
        'agenceId': null,
        'agenceNom': null,
        'updatedAt': FieldValue.serverTimestamp(),
      });

      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Admin retir√© de l\'agence avec succ√®s');
      return {
        'success': true,
        'message': 'Administrateur retir√© de l\'agence avec succ√®s'
      };
    } catch (e) {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Erreur retrait admin agence: $e');
      return {
        'success': false,
        'error': 'Erreur lors du retrait: $e'
      };
    }
  }

  /// üîÑ Affecter un admin existant √† une agence libre
  static Future<Map<String, dynamic>> affectAdminToAgence(String adminId, String agenceId) async {
    try {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üîÑ Affectation admin $adminId √† agence $agenceId');

      // V√©rifier que l'agence est libre
      final agenceDoc = await _firestore.collection('agences').doc(agenceId).get();
      if (!agenceDoc.exists) {
        return {'success': false, 'message': 'Agence non trouv√©e'};
      }

      final agenceData = agenceDoc.data()!;
      if (agenceData['hasAdminAgence'] == true) {
        return {'success': false, 'message': 'Cette agence a d√©j√† un admin affect√©'};
      }

      // R√©cup√©rer les infos de l'admin
      final adminDoc = await _firestore.collection('users').doc(adminId).get();
      if (!adminDoc.exists) {
        return {'success': false, 'message': 'Admin non trouv√©'};
      }

      final adminData = adminDoc.data()!;

      // Mettre √† jour l'admin avec la nouvelle agence
      await _firestore.collection('users').doc(adminId).update({
        'agenceId': agenceId,
        'agenceNom': agenceData['nom'],
        'dateAffectation': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
      });

      // Mettre √† jour l'agence avec l'admin
      await _firestore.collection('agences').doc(agenceId).update({
        'hasAdminAgence': true,
        'adminAgenceId': adminId,
        'adminAgenceEmail': adminData['email'],
        'statut': 'occup√©',
        'dateAffectationAdmin': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
      });

      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Admin affect√© √† l\'agence avec succ√®s');
      return {'success': true, 'message': 'Admin affect√© √† l\'agence avec succ√®s'};

    } catch (e) {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Erreur affectation: $e');
      return {'success': false, 'message': 'Erreur lors de l\'affectation: $e'};
    }
  }

  /// üóëÔ∏è Supprimer une agence et tous ses √©l√©ments associ√©s
  static Future<Map<String, dynamic>> deleteAgence(String agenceId) async {
    try {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üóëÔ∏è Suppression agence: $agenceId');

      // R√©cup√©rer l'agence pour v√©rifier son existence
      final agenceDoc = await _firestore.collection('agences').doc(agenceId).get();
      if (!agenceDoc.exists) {
        return {'success': false, 'message': 'Agence non trouv√©e'};
      }

      final agenceData = agenceDoc.data()!;
      final agenceNom = agenceData['nom'] ?? 'Agence inconnue';

      // 1. Supprimer tous les admins agence de cette agence
      final adminsQuery = await _firestore
          .collection('users')
          .where('role', isEqualTo: 'admin_agence')
          .where('agenceId', isEqualTo: agenceId)
          .get();

      for (var adminDoc in adminsQuery.docs) {
        await adminDoc.reference.delete();
        debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Admin agence supprim√©: ${adminDoc.id}');
      }

      // 2. Supprimer tous les agents de cette agence
      final agentsQuery = await _firestore
          .collection('users')
          .where('role', isEqualTo: 'agent')
          .where('agenceId', isEqualTo: agenceId)
          .get();

      for (var agentDoc in agentsQuery.docs) {
        await agentDoc.reference.delete();
        debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Agent supprim√©: ${agentDoc.id}');
      }

      // 3. Supprimer l'agence elle-m√™me
      await _firestore.collection('agences').doc(agenceId).delete();

      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Agence "$agenceNom" supprim√©e avec succ√®s');
      return {
        'success': true,
        'message': 'Agence "$agenceNom" et tous ses √©l√©ments associ√©s supprim√©s avec succ√®s'
      };

    } catch (e) {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Erreur suppression agence: $e');
      return {
        'success': false,
        'message': 'Erreur lors de la suppression de l\'agence: $e'
      };
    }
  }

  /// ‚úèÔ∏è Modifier une agence
  static Future<Map<String, dynamic>> updateAgence({
    required String agenceId,
    required String nom,
    required String adresse,
    required String telephone,
    required String gouvernorat,
    required String emailContact,
    String? description,
  }) async {
    try {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úèÔ∏è Modification agence: $agenceId');

      // V√©rifier que l'agence existe
      final agenceDoc = await _firestore.collection('agences').doc(agenceId).get();
      if (!agenceDoc.exists) {
        return {'success': false, 'message': 'Agence non trouv√©e'};
      }

      // Donn√©es √† mettre √† jour
      final updateData = {
        'nom': nom,
        'adresse': adresse,
        'telephone': telephone,
        'gouvernorat': gouvernorat,
        'emailContact': emailContact,
        'description': description ?? '',
        'updatedAt': FieldValue.serverTimestamp(),
      };

      // Mettre √† jour l'agence
      await _firestore.collection('agences').doc(agenceId).update(updateData);

      // Mettre √† jour le nom de l'agence dans tous les utilisateurs associ√©s
      final usersQuery = await _firestore
          .collection('users')
          .where('agenceId', isEqualTo: agenceId)
          .get();

      for (var userDoc in usersQuery.docs) {
        await userDoc.reference.update({
          'agenceNom': nom,
          'updatedAt': FieldValue.serverTimestamp(),
        });
      }

      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Agence modifi√©e avec succ√®s');
      return {
        'success': true,
        'message': 'Agence modifi√©e avec succ√®s'
      };

    } catch (e) {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Erreur modification agence: $e');
      return {
        'success': false,
        'message': 'Erreur lors de la modification: $e'
      };
    }
  }

  /// üîÑ Changer le statut d'une agence
  static Future<Map<String, dynamic>> toggleAgenceStatus(
    String agenceId,
    bool isActive,
  ) async {
    try {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üîÑ Changement statut agence: $agenceId -> $isActive');

      // V√©rifier que l'agence existe
      final agenceDoc = await _firestore.collection('agences').doc(agenceId).get();
      if (!agenceDoc.exists) {
        return {'success': false, 'message': 'Agence non trouv√©e'};
      }

      // Mettre √† jour le statut
      await _firestore.collection('agences').doc(agenceId).update({
        'isActive': isActive,
        'updatedAt': FieldValue.serverTimestamp(),
      });

      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Statut agence modifi√© avec succ√®s');
      return {
        'success': true,
        'message': isActive
            ? 'Agence r√©activ√©e avec succ√®s'
            : 'Agence d√©sactiv√©e avec succ√®s'
      };
    } catch (e) {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Erreur changement statut agence: $e');
      return {
        'success': false,
        'message': 'Erreur lors du changement de statut: $e'
      };
    }
  }

  /// üîó Assigner un admin existant √† une agence
  static Future<Map<String, dynamic>> assignAdminToAgence(
    String adminId,
    String agenceId,
  ) async {
    try {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üîó Assignation admin: $adminId -> agence: $agenceId');

      // V√©rifier que l'admin existe et n'est pas d√©j√† assign√©
      final adminDoc = await _firestore.collection('users').doc(adminId).get();
      if (!adminDoc.exists) {
        return {'success': false, 'error': 'Administrateur non trouv√©'};
      }

      final adminData = adminDoc.data()!;
      if (adminData['agenceId'] != null && adminData['agenceId'].isNotEmpty) {
        return {'success': false, 'error': 'Cet administrateur est d√©j√† assign√© √† une agence'};
      }

      // V√©rifier que l'agence existe
      final agenceDoc = await _firestore.collection('agences').doc(agenceId).get();
      if (!agenceDoc.exists) {
        return {'success': false, 'error': 'Agence non trouv√©e'};
      }

      final agenceData = agenceDoc.data()!;

      // Mettre √† jour l'admin avec l'agenceId
      await _firestore.collection('users').doc(adminId).update({
        'agenceId': agenceId,
        'agenceNom': agenceData['nom'],
        'updatedAt': FieldValue.serverTimestamp(),
      });

      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Admin assign√© avec succ√®s');
      return {
        'success': true,
        'message': 'Administrateur assign√© avec succ√®s √† l\'agence'
      };
    } catch (e) {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Erreur assignation admin: $e');
      return {
        'success': false,
        'error': 'Erreur lors de l\'assignation: $e'
      };
    }
  }

  /// üîê R√©initialiser le mot de passe d'un admin agence
  static Future<Map<String, dynamic>> resetAdminPassword(String adminId, String newPassword) async {
    try {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üîê R√©initialisation mot de passe admin: $adminId');

      // Mettre √† jour le mot de passe dans Firestore
      await _firestore.collection('users').doc(adminId).update({
        'password': newPassword,
        'mustChangePassword': true, // Forcer le changement √† la prochaine connexion
        'passwordResetAt': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
      });

      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Mot de passe r√©initialis√© avec succ√®s');
      return {
        'success': true,
        'message': 'Mot de passe r√©initialis√© avec succ√®s'
      };
    } catch (e) {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Erreur r√©initialisation mot de passe: $e');
      return {
        'success': false,
        'message': 'Erreur lors de la r√©initialisation du mot de passe: $e'
      };
    }
  }

  /// üìß Envoyer un email
  static Future<Map<String, dynamic>> sendEmail(Map<String, dynamic> emailData) async {
    try {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üìß Envoi email √†: ${emailData['to']}');

      // Ajouter l'email √† la collection pour traitement par Cloud Function
      await _firestore.collection('mail').add({
        'to': emailData['to'],
        'message': {
          'subject': emailData['subject'],
          'html': emailData['html'],
        },
        'createdAt': FieldValue.serverTimestamp(),
        'status': 'pending',
      });

      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Email ajout√© √† la queue d\'envoi');
      return {
        'success': true,
        'message': 'Email envoy√© avec succ√®s'
      };
    } catch (e) {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Erreur envoi email: $e');
      return {
        'success': false,
        'message': 'Erreur lors de l\'envoi de l\'email: $e'
      };
    }
  }

}
