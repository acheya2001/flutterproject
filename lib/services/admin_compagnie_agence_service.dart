import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import 'dart:math';

/// üè¢ Service de gestion des agences pour Admin Compagnie
class AdminCompagnieAgenceService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// üè¢ Cr√©er une nouvelle agence
  static Future<Map<String, dynamic>> createAgence({
    required String compagnieId,
    required String compagnieNom,
    required String nom,
    required String adresse,
    required String telephone,
    required String gouvernorat,
    required String emailContact,
    String? description,
    String? createdByEmail,
  }) async {
    try {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üè¢ Cr√©ation agence: $nom');

      // G√©n√©rer un code unique pour l'agence
      final codeAgence = _generateAgenceCode(compagnieNom, nom);

      // Donn√©es de l'agence avec m√©tadonn√©es de cr√©ation
      final agenceData = {
        'nom': nom,
        'code': codeAgence,
        'adresse': adresse,
        'telephone': telephone,
        'gouvernorat': gouvernorat,
        'emailContact': emailContact,
        'description': description ?? '',
        'compagnieId': compagnieId,
        'compagnieNom': compagnieNom,
        'isActive': true,
        'hasAdminAgence': false,
        'nombreAgents': 0,
        'nombreConstats': 0,
        'dateCreation': FieldValue.serverTimestamp(),
        'createdAt': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
        // üîç M√©tadonn√©es de cr√©ation pour synchronisation Super Admin
        'origin': 'admin_compagnie',
        'createdBy': createdByEmail ?? 'admin_compagnie',
        'createdByRole': 'admin_compagnie',
        'createdByCompagnie': compagnieNom,
      };

      // Cr√©er l'agence dans Firestore
      final agenceRef = await _firestore.collection('agences').add(agenceData);

      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Agence cr√©√©e: ${agenceRef.id}');

      return {
        'success': true,
        'agenceId': agenceRef.id,
        'code': codeAgence,
        'message': 'Agence cr√©√©e avec succ√®s',
      };

    } catch (e) {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Erreur cr√©ation agence: $e');
      return {
        'success': false,
        'error': e.toString(),
        'message': 'Erreur lors de la cr√©ation de l\'agence',
      };
    }
  }

  /// üë®‚Äçüíº Cr√©er un admin agence pour une agence
  static Future<Map<String, dynamic>> createAdminAgence({
    required String agenceId,
    required String agenceNom,
    required String compagnieId,
    required String compagnieNom,
    required String prenom,
    required String nom,
    required String telephone,
    String? email,
    String? createdByEmail,
  }) async {
    try {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üë®‚Äçüíº Cr√©ation admin agence pour: $agenceNom');

      // V√©rifier si l'agence a d√©j√† un admin
      final agenceDoc = await _firestore.collection('agences').doc(agenceId).get();
      if (!agenceDoc.exists) {
        return {
          'success': false,
          'error': 'Agence non trouv√©e',
        };
      }

      final agenceData = agenceDoc.data()!;
      if (agenceData['hasAdminAgence'] == true) {
        return {
          'success': false,
          'error': 'Cette agence a d√©j√† un admin agence',
        };
      }

      // G√©n√©rer l'email si non fourni
      final finalEmail = email ?? _generateAdminAgenceEmail(prenom, nom, agenceNom);
      
      // G√©n√©rer un mot de passe
      final password = _generatePassword();

      // G√©n√©rer un UID unique
      final uid = _generateUID();

      // Donn√©es de l'admin agence avec m√©tadonn√©es de cr√©ation
      final adminData = {
        'uid': uid,
        'email': finalEmail,
        'password': password,
        'prenom': prenom,
        'nom': nom,
        'telephone': telephone,
        'role': 'admin_agence',
        'agenceId': agenceId,
        'agenceNom': agenceNom,
        'compagnieId': compagnieId,
        'compagnieNom': compagnieNom,
        'isActive': true,
        'status': 'actif',
        'firebaseAuthCreated': false,
        'created_at': FieldValue.serverTimestamp(),
        'createdAt': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
        // üîç M√©tadonn√©es de cr√©ation pour synchronisation Super Admin
        'origin': 'auto_creation',
        'createdBy': createdByEmail ?? 'admin_compagnie',
        'createdByRole': 'admin_compagnie',
        'createdByCompagnie': compagnieNom,
        'autoCreatedForAgence': agenceNom,
      };

      // Cr√©er l'admin agence dans Firestore
      await _firestore.collection('users').doc(uid).set(adminData);

      // Mettre √† jour l'agence pour indiquer qu'elle a un admin (statut occup√©)
      await _firestore.collection('agences').doc(agenceId).update({
        'hasAdminAgence': true,
        'adminAgenceId': uid,
        'adminAgenceEmail': finalEmail,
        'statut': 'occup√©',
        'dateAffectationAdmin': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
      });

      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Admin agence cr√©√©: $finalEmail');

      return {
        'success': true,
        'email': finalEmail,
        'password': password,
        'adminId': uid,
        'displayName': '$prenom $nom',
        'message': 'Admin agence cr√©√© avec succ√®s',
      };

    } catch (e) {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Erreur cr√©ation admin agence: $e');
      return {
        'success': false,
        'error': e.toString(),
        'message': 'Erreur lors de la cr√©ation de l\'admin agence',
      };
    }
  }

  /// üìã R√©cup√©rer les agences d'une compagnie
  static Future<List<Map<String, dynamic>>> getAgencesByCompagnie(String compagnieId) async {
    try {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üìã R√©cup√©ration agences pour compagnie: $compagnieId');

      final agencesQuery = await _firestore
          .collection('agences')
          .where('compagnieId', isEqualTo: compagnieId)
          .get();

      final agences = agencesQuery.docs.map((doc) {
        final data = doc.data();
        data['id'] = doc.id;
        return data;
      }).toList();

      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ ${agences.length} agences r√©cup√©r√©es');
      return agences;

    } catch (e) {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Erreur r√©cup√©ration agences: $e');
      return [];
    }
  }

  /// üë• R√©cup√©rer les admins agence d'une compagnie
  static Future<List<Map<String, dynamic>>> getAdminsAgenceByCompagnie(String compagnieId) async {
    try {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üë• R√©cup√©ration admins agence pour compagnie: $compagnieId');

      final adminsQuery = await _firestore
          .collection('users')
          .where('role', isEqualTo: 'admin_agence')
          .where('compagnieId', isEqualTo: compagnieId)
          .get();

      final admins = adminsQuery.docs.map((doc) {
        final data = doc.data();
        data['id'] = doc.id;
        return data;
      }).toList();

      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ ${admins.length} admins agence r√©cup√©r√©s');
      return admins;

    } catch (e) {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Erreur r√©cup√©ration admins agence: $e');
      return [];
    }
  }



  /// üîÑ Activer/D√©sactiver un admin agence
  static Future<Map<String, dynamic>> toggleAdminAgenceStatus(String adminId, bool isActive) async {
    try {
      await _firestore.collection('users').doc(adminId).update({
        'isActive': isActive,
        'status': isActive ? 'actif' : 'inactif',
        'updatedAt': FieldValue.serverTimestamp(),
      });

      return {
        'success': true,
        'message': isActive ? 'Admin agence activ√©' : 'Admin agence d√©sactiv√©',
      };

    } catch (e) {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Erreur toggle admin agence: $e');
      return {
        'success': false,
        'error': e.toString(),
      };
    }
  }

  // M√©thodes utilitaires priv√©es
  static String _generateAgenceCode(String compagnieNom, String agenceNom) {
    final compagnieCode = compagnieNom.substring(0, 3).toUpperCase();
    final agenceCode = agenceNom.substring(0, 3).toUpperCase();
    final random = Random().nextInt(999).toString().padLeft(3, '0');
    return '$compagnieCode-$agenceCode-$random';
  }

  static String _generateAdminAgenceEmail(String prenom, String nom, String agenceNom) {
    final prenomClean = prenom.toLowerCase().replaceAll(' ', '');
    final nomClean = nom.toLowerCase().replaceAll(' ', '');
    final agenceClean = agenceNom.toLowerCase().replaceAll(' ', '').replaceAll('agence', '');
    return '$prenomClean.$nomClean.$agenceClean@assuretn.tn';
  }

  static String _generatePassword() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    final random = Random();
    return String.fromCharCodes(Iterable.generate(
      12, (_) => chars.codeUnitAt(random.nextInt(chars.length))
    ));
  }

  static String _generateUID() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    final random = Random();
    return String.fromCharCodes(Iterable.generate(
      20, (_) => chars.codeUnitAt(random.nextInt(chars.length))
    ));
  }

  /// üìã R√©cup√©rer les agences avec leur statut d'affectation admin
  static Future<List<Map<String, dynamic>>> getAgencesWithAdminStatus(String compagnieId) async {
    try {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üìã R√©cup√©ration agences avec statut admin pour compagnie: $compagnieId');

      final agencesQuery = await _firestore
          .collection('agences')
          .where('compagnieId', isEqualTo: compagnieId)
          .get();

      List<Map<String, dynamic>> agences = [];

      for (var doc in agencesQuery.docs) {
        final agenceData = doc.data();
        agenceData['id'] = doc.id;

        // V√©rifier s'il y a un admin agence associ√©
        final adminQuery = await _firestore
            .collection('users')
            .where('role', isEqualTo: 'admin_agence')
            .where('agenceId', isEqualTo: doc.id)
            .limit(1)
            .get();

        agenceData['hasAdminAgence'] = adminQuery.docs.isNotEmpty;
        if (adminQuery.docs.isNotEmpty) {
          final adminData = adminQuery.docs.first.data();
          agenceData['adminAgence'] = {
            'id': adminQuery.docs.first.id,
            'nom': adminData['nom'],
            'prenom': adminData['prenom'],
            'email': adminData['email'],
            'telephone': adminData['telephone'],
          };
        }

        agences.add(agenceData);
      }

      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ ${agences.length} agences avec statut admin r√©cup√©r√©es');
      return agences;

    } catch (e) {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Erreur r√©cup√©ration agences avec statut: $e');
      return [];
    }
  }

  /// üîÑ D√©sactiver une agence et son admin
  static Future<Map<String, dynamic>> disableAgence(String agenceId) async {
    try {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üîÑ D√©sactivation agence: $agenceId');

      // R√©cup√©rer l'agence pour trouver son admin
      final agenceDoc = await _firestore.collection('agences').doc(agenceId).get();
      if (!agenceDoc.exists) {
        return {'success': false, 'message': 'Agence non trouv√©e'};
      }

      final agenceData = agenceDoc.data()!;
      final adminAgenceId = agenceData['adminAgenceId'];

      // D√©sactiver l'agence
      await _firestore.collection('agences').doc(agenceId).update({
        'isActive': false,
        'statut': 'd√©sactiv√©',
        'dateDesactivation': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
      });

      // D√©sactiver l'admin agence s'il existe
      if (adminAgenceId != null) {
        await _firestore.collection('users').doc(adminAgenceId).update({
          'status': 'inactif',
          'isActive': false,
          'dateDesactivation': FieldValue.serverTimestamp(),
          'updatedAt': FieldValue.serverTimestamp(),
        });
        debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Admin agence d√©sactiv√©: $adminAgenceId');
      }

      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Agence d√©sactiv√©e: $agenceId');
      return {'success': true, 'message': 'Agence et admin d√©sactiv√©s avec succ√®s'};

    } catch (e) {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Erreur d√©sactivation agence: $e');
      return {'success': false, 'message': 'Erreur lors de la d√©sactivation: $e'};
    }
  }

  /// ‚ôªÔ∏è R√©activer une agence et son admin
  static Future<Map<String, dynamic>> enableAgence(String agenceId) async {
    try {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ôªÔ∏è R√©activation agence: $agenceId');

      // R√©cup√©rer l'agence pour trouver son admin
      final agenceDoc = await _firestore.collection('agences').doc(agenceId).get();
      if (!agenceDoc.exists) {
        return {'success': false, 'message': 'Agence non trouv√©e'};
      }

      final agenceData = agenceDoc.data()!;
      final adminAgenceId = agenceData['adminAgenceId'];

      // R√©activer l'agence
      await _firestore.collection('agences').doc(agenceId).update({
        'isActive': true,
        'statut': agenceData['hasAdminAgence'] == true ? 'occup√©' : 'libre',
        'dateReactivation': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
      });

      // R√©activer l'admin agence s'il existe
      if (adminAgenceId != null) {
        await _firestore.collection('users').doc(adminAgenceId).update({
          'status': 'actif',
          'isActive': true,
          'dateReactivation': FieldValue.serverTimestamp(),
          'updatedAt': FieldValue.serverTimestamp(),
        });
        debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Admin agence r√©activ√©: $adminAgenceId');
      }

      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Agence r√©activ√©e: $agenceId');
      return {'success': true, 'message': 'Agence et admin r√©activ√©s avec succ√®s'};

    } catch (e) {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Erreur r√©activation agence: $e');
      return {'success': false, 'message': 'Erreur lors de la r√©activation: $e'};
    }
  }

  /// üóëÔ∏è Supprimer un admin agence et lib√©rer l'agence
  static Future<Map<String, dynamic>> deleteAdminAgence(String adminId, String agenceId) async {
    try {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üóëÔ∏è Suppression admin agence: $adminId');

      // Supprimer l'admin agence
      await _firestore.collection('users').doc(adminId).delete();

      // Lib√©rer l'agence (retirer l'affectation)
      await _firestore.collection('agences').doc(agenceId).update({
        'hasAdminAgence': false,
        'adminAgenceId': FieldValue.delete(),
        'adminAgenceEmail': FieldValue.delete(),
        'statut': 'libre',
        'dateLiberation': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
      });

      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Admin supprim√© et agence lib√©r√©e');
      return {'success': true, 'message': 'Admin supprim√© et agence lib√©r√©e avec succ√®s'};

    } catch (e) {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Erreur suppression admin: $e');
      return {'success': false, 'message': 'Erreur lors de la suppression: $e'};
    }
  }

  /// üîÑ Affecter un admin existant √† une agence libre
  static Future<Map<String, dynamic>> affectAdminToAgence(String adminId, String agenceId) async {
    try {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] üîÑ Affectation admin $adminId √† agence $agenceId');

      // V√©rifier que l'agence est libre
      final agenceDoc = await _firestore.collection('agences').doc(agenceId).get();
      if (!agenceDoc.exists) {
        return {'success': false, 'message': 'Agence non trouv√©e'};
      }

      final agenceData = agenceDoc.data()!;
      if (agenceData['hasAdminAgence'] == true) {
        return {'success': false, 'message': 'Cette agence a d√©j√† un admin affect√©'};
      }

      // R√©cup√©rer les infos de l'admin
      final adminDoc = await _firestore.collection('users').doc(adminId).get();
      if (!adminDoc.exists) {
        return {'success': false, 'message': 'Admin non trouv√©'};
      }

      final adminData = adminDoc.data()!;

      // Mettre √† jour l'admin avec la nouvelle agence
      await _firestore.collection('users').doc(adminId).update({
        'agenceId': agenceId,
        'agenceNom': agenceData['nom'],
        'dateAffectation': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
      });

      // Mettre √† jour l'agence avec l'admin
      await _firestore.collection('agences').doc(agenceId).update({
        'hasAdminAgence': true,
        'adminAgenceId': adminId,
        'adminAgenceEmail': adminData['email'],
        'statut': 'occup√©',
        'dateAffectationAdmin': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
      });

      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚úÖ Admin affect√© √† l\'agence avec succ√®s');
      return {'success': true, 'message': 'Admin affect√© √† l\'agence avec succ√®s'};

    } catch (e) {
      debugPrint('[ADMIN_COMPAGNIE_AGENCE] ‚ùå Erreur affectation: $e');
      return {'success': false, 'message': 'Erreur lors de l\'affectation: $e'};
    }
  }

}
