import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';import ';  }';      debugPrint('[ALT_USER_CREATION] üöÄ Creation Admin Compagnie alternative...';      debugPrint('[ALT_USER_CREATION] üè¢ Compagnie: $compagnieNom (compagnieId')';      final email = 'admin.{compagnieId.toLowerCase(').replaceAll(' ', ').replaceAll('-', ')}@assurance.tn';      final userId = admin_${compagnieId.toLowerCase(')}_'{DateTime.now().millisecondsSinceEpoch}';      debugPrint('[ALT_USER_CREATION] üìß Email genere: 'email';      debugPrint('[ALT_USER_CREATION] üîë Mot de passe genere: 'password';      debugPrint('[ALT_USER_CREATION] üÜî ID genere: 'userId';        'uid';        'email';        'nom';        'prenom';        'role': 'admin_compagnie';        'compagnieId';        'compagnieNom';        'telephone': telephone ?? ';        'adresse': adresse ?? ';        'password';        'status': 'actif';        'isActive';        'authMethod': 'alternative_creation';        'created_at: FieldValue.serverTimestamp(';        'created_by': _auth.currentUser?.uid ?? 'system';        'created_by_email': _auth.currentUser?.email ?? 'system';        'source': 'alternative_service';        'collection_type': 'admin_compagnies_alt';        'admin_compagnies';        'admins_compagnie';        'compagnie_admins';        'users_admin_compagnie';        ';      for (String collectionName in collections';          debugPrint('[ALT_USER_CREATION] üîÑ Tentative avec collection: ';              .timeout(const Duration(seconds: 10)';          debugPrint('[ALT_USER_CREATION] ‚úÖ Succes avec collection: ';        } catch (e';          debugPrint(';      if (!success';          error: 'Impossible d\';        ';      // 4. Essayer aussi d';        debugPrint('[ALT_USER_CREATION] üîÑ Tentative collection users principale...';            .collection(';            .timeout(const Duration(seconds: 5)';        debugPrint(';      } catch (e';        debugPrint('[ALT_USER_CREATION] ‚ö†Ô∏è √âchec collection users (pas grave):  + e.toString()';      debugPrint('[ALT_USER_CREATION] üéâ Admin Compagnie cree avec succes !';      debugPrint('[ALT_USER_CREATION] üìä Collection utilisee: 'usedCollection';          ';    } catch (e';      debugPrint('[ALT_USER_CREATION] ‚ùå Erreur generale:  + e.toString()';        error: 'Erreur lors de la creation: ';  static Future<Map<String, bool>> testCollectionsAccess(';      debugPrint('[ALT_USER_CREATION] üß™ Test d\'acces aux collections...';        'users';        'admin_compagnies';        'admins_compagnie';        'compagnie_admins';        'users_admin_compagnie';        'admin_accounts';        ';      for (String collectionName in testCollections';          debugPrint('[ALT_USER_CREATION] üîç Test collection: 'collectionName';          final testDocId = 'test_{DateTime.now(').millisecondsSinceEpoch}';            'test';            'created_at: FieldValue.serverTimestamp(';            'purpose': ';              .timeout(const Duration(seconds: 5)';          debugPrint('[ALT_USER_CREATION] ‚úÖ Collection ';        } catch (e';          debugPrint('[ALT_USER_CREATION] ‚ùå Collection $collectionName: INACCESSIBLE (e')';      debugPrint(';      results.forEach((collection, accessible';        debugPrint('[ALT_USER_CREATION] - $collection: ';    } catch (e';      debugPrint(';  static Future<Map<String, List<Map<String, dynamic>>>> getAllUsersFromAllCollections(';      debugPrint('[ALT_USER_CREATION] üîç Recherche utilisateurs dans toutes collections...';        'users';        'admin_compagnies';        'admins_compagnie';        'compagnie_admins';        'users_admin_compagnie';        ';              .collection(collectionName';              .where('role', isEqualTo: ';            final data = doc.data(';            data['docId';            data[';          }).toList(';          debugPrint('[ALT_USER_CREATION] üìä Collection $collectionName: {users.length} admin(s) trouve(s')';          debugPrint(';    } catch (e';      debugPrint('[ALT_USER_CREATION] ‚ùå Erreur recherche globale: ';