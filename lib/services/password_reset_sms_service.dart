import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'dart:math';

/// üì± Service de r√©cup√©ration de mot de passe par SMS
class PasswordResetSMSService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static final FirebaseAuth _auth = FirebaseAuth.instance;
  static const String _otpCollection = 'password_reset_otp';

  /// üì± Envoyer un code de r√©cup√©ration par SMS
  static Future<Map<String, dynamic>> sendPasswordResetCode({
    required String phoneNumber,
    String? userId,
    String? userEmail,
    String? userName,
  }) async {
    try {
      print('[PASSWORD_RESET_SMS] üì± Envoi code pour: $phoneNumber');

      // 1. Si les donn√©es utilisateur sont fournies, les utiliser directement
      Map<String, dynamic> userData;
      String finalUserId;

      if (userId != null && userEmail != null && userName != null) {
        // Utiliser les donn√©es fournies (depuis findUserByEmail)
        userData = {
          'email': userEmail,
          'nom': userName.split(' ').last,
          'prenom': userName.split(' ').first,
          'telephone': phoneNumber,
        };
        finalUserId = userId;
        print('[PASSWORD_RESET_SMS] ‚úÖ Utilisation des donn√©es utilisateur fournies');
      } else {
        // Fallback: chercher par num√©ro de t√©l√©phone
        final userResult = await _findUserByPhone(phoneNumber);
        if (!userResult['found']) {
          return {
            'success': false,
            'error': 'Aucun compte trouv√© avec ce num√©ro de t√©l√©phone',
          };
        }
        userData = userResult['userData'] as Map<String, dynamic>;
        finalUserId = userResult['userId'] as String;
      }

      // 2. G√©n√©rer un code OTP
      final code = _generateOTP();

      // 3. Stocker l'OTP dans Firestore
      await _firestore.collection(_otpCollection).doc(phoneNumber).set({
        'code': code,
        'userId': finalUserId,
        'phoneNumber': phoneNumber,
        'userEmail': userData['email'],
        'userName': '${userData['prenom'] ?? ''} ${userData['nom'] ?? ''}'.trim(),
        'createdAt': FieldValue.serverTimestamp(),
        'expiresAt': DateTime.now().add(const Duration(minutes: 5)).millisecondsSinceEpoch,
        'verified': false,
        'attempts': 0,
      });

      // 4. Envoyer le SMS
      await _sendSMS(phoneNumber, code, userData['prenom'] ?? 'Utilisateur');

      // 5. Logger l'envoi
      await _logPasswordResetAttempt(finalUserId, phoneNumber, 'code_sent');

      return {
        'success': true,
        'message': 'Code de r√©cup√©ration envoy√© par SMS',
        'phoneNumber': phoneNumber,
        'userName': userData['prenom'] ?? 'Utilisateur',
      };

    } catch (e) {
      print('[PASSWORD_RESET_SMS] ‚ùå Erreur envoi code: $e');
      return {
        'success': false,
        'error': 'Erreur lors de l\'envoi du code: $e',
      };
    }
  }

  /// ‚úÖ V√©rifier le code OTP
  static Future<Map<String, dynamic>> verifyResetCode({
    required String phoneNumber,
    required String code,
  }) async {
    try {
      print('[PASSWORD_RESET_SMS] ‚úÖ V√©rification code pour: $phoneNumber');

      // 1. R√©cup√©rer l'OTP stock√©
      final otpDoc = await _firestore.collection(_otpCollection).doc(phoneNumber).get();
      
      if (!otpDoc.exists) {
        return {
          'success': false,
          'error': 'Aucun code de r√©cup√©ration trouv√©. Demandez un nouveau code.',
        };
      }

      final otpData = otpDoc.data()!;

      // 2. V√©rifier l'expiration
      final expiresAt = otpData['expiresAt'] as int;
      if (DateTime.now().millisecondsSinceEpoch > expiresAt) {
        await _firestore.collection(_otpCollection).doc(phoneNumber).delete();
        return {
          'success': false,
          'error': 'Le code a expir√©. Demandez un nouveau code.',
        };
      }

      // 3. V√©rifier le nombre de tentatives
      final attempts = (otpData['attempts'] as int? ?? 0);
      if (attempts >= 3) {
        await _firestore.collection(_otpCollection).doc(phoneNumber).delete();
        return {
          'success': false,
          'error': 'Trop de tentatives. Demandez un nouveau code.',
        };
      }

      // 4. V√©rifier le code
      final storedCode = otpData['code'] as String;
      if (code != storedCode) {
        // Incr√©menter les tentatives
        await _firestore.collection(_otpCollection).doc(phoneNumber).update({
          'attempts': attempts + 1,
        });
        
        return {
          'success': false,
          'error': 'Code incorrect. ${2 - attempts} tentative(s) restante(s).',
        };
      }

      // 5. Marquer comme v√©rifi√©
      await _firestore.collection(_otpCollection).doc(phoneNumber).update({
        'verified': true,
        'verifiedAt': FieldValue.serverTimestamp(),
      });

      // 6. Logger la v√©rification
      await _logPasswordResetAttempt(otpData['userId'], phoneNumber, 'code_verified');

      return {
        'success': true,
        'message': 'Code v√©rifi√© avec succ√®s',
        'userId': otpData['userId'],
        'userEmail': otpData['userEmail'],
        'userName': otpData['userName'],
      };

    } catch (e) {
      print('[PASSWORD_RESET_SMS] ‚ùå Erreur v√©rification: $e');
      return {
        'success': false,
        'error': 'Erreur lors de la v√©rification: $e',
      };
    }
  }

  /// üîê R√©initialiser le mot de passe apr√®s v√©rification
  static Future<Map<String, dynamic>> resetPassword({
    required String phoneNumber,
    required String newPassword,
  }) async {
    try {
      print('[PASSWORD_RESET_SMS] üîê R√©initialisation mot de passe pour: $phoneNumber');

      // 1. V√©rifier que le code a √©t√© v√©rifi√©
      final otpDoc = await _firestore.collection(_otpCollection).doc(phoneNumber).get();
      
      if (!otpDoc.exists) {
        return {
          'success': false,
          'error': 'Session expir√©e. Recommencez le processus.',
        };
      }

      final otpData = otpDoc.data()!;
      if (!(otpData['verified'] ?? false)) {
        return {
          'success': false,
          'error': 'Code non v√©rifi√©. V√©rifiez d\'abord votre code.',
        };
      }

      final userId = otpData['userId'] as String;
      final userEmail = otpData['userEmail'] as String;

      // 2. Mettre √† jour le mot de passe dans Firestore
      await _firestore.collection('users').doc(userId).update({
        'password': newPassword,
        'passwordResetAt': FieldValue.serverTimestamp(),
        'passwordResetMethod': 'sms',
        'updatedAt': FieldValue.serverTimestamp(),
      });

      // 3. Essayer de mettre √† jour Firebase Auth si possible
      try {
        // Note: En production, ceci devrait √™tre fait via Firebase Admin SDK c√¥t√© serveur
        final user = await _auth.signInWithEmailAndPassword(
          email: userEmail,
          password: otpData['oldPassword'] ?? 'temp', // Mot de passe temporaire
        );
        
        await user.user?.updatePassword(newPassword);
        await _auth.signOut();
      } catch (authError) {
        print('[PASSWORD_RESET_SMS] ‚ö†Ô∏è Erreur mise √† jour Firebase Auth: $authError');
        // Continuer m√™me si Firebase Auth √©choue
      }

      // 4. Nettoyer l'OTP
      await _firestore.collection(_otpCollection).doc(phoneNumber).delete();

      // 5. Logger la r√©initialisation
      await _logPasswordResetAttempt(userId, phoneNumber, 'password_reset');

      return {
        'success': true,
        'message': 'Mot de passe r√©initialis√© avec succ√®s',
        'userEmail': userEmail,
      };

    } catch (e) {
      print('[PASSWORD_RESET_SMS] ‚ùå Erreur r√©initialisation: $e');
      return {
        'success': false,
        'error': 'Erreur lors de la r√©initialisation: $e',
      };
    }
  }

  /// üîç Trouver un utilisateur par email (nouvelle fonction publique)
  static Future<Map<String, dynamic>> findUserByEmail(String email) async {
    try {
      print('üîç Recherche utilisateur par email: $email');

      // 1. Chercher dans la collection users
      final usersQuery = await _firestore
          .collection('users')
          .where('email', isEqualTo: email.trim().toLowerCase())
          .limit(1)
          .get();

      if (usersQuery.docs.isNotEmpty) {
        final userData = usersQuery.docs.first.data();
        final userId = usersQuery.docs.first.id;

        print('‚úÖ Utilisateur trouv√© dans users: $userId');

        return {
          'success': true,
          'userId': userId,
          'userEmail': userData['email'] ?? email,
          'userName': userData['nom'] ?? userData['name'] ?? 'Utilisateur',
          'phoneNumber': userData['telephone'] ?? userData['phone'] ?? '',
        };
      }

      // 2. Chercher dans demandes_contrats
      final demandesQuery = await _firestore
          .collection('demandes_contrats')
          .where('email', isEqualTo: email.trim().toLowerCase())
          .limit(1)
          .get();

      if (demandesQuery.docs.isNotEmpty) {
        final demandeData = demandesQuery.docs.first.data();
        final demandeId = demandesQuery.docs.first.id;

        print('‚úÖ Utilisateur trouv√© dans demandes_contrats: $demandeId');

        return {
          'success': true,
          'userId': demandeData['conducteurId'] ?? demandeId,
          'userEmail': demandeData['email'] ?? email,
          'userName': demandeData['nom'] ?? demandeData['nomConducteur'] ?? 'Conducteur',
          'phoneNumber': demandeData['telephone'] ?? demandeData['phone'] ?? '',
        };
      }

      print('‚ùå Aucun utilisateur trouv√© avec l\'email: $email');
      return {
        'success': false,
        'error': 'Aucun compte trouv√© avec cet email',
      };

    } catch (e) {
      print('‚ùå Erreur lors de la recherche par email: $e');
      return {
        'success': false,
        'error': 'Erreur lors de la recherche du compte',
      };
    }
  }

  /// üîç Trouver un utilisateur par num√©ro de t√©l√©phone
  static Future<Map<String, dynamic>> _findUserByPhone(String phoneNumber) async {
    try {
      // Nettoyer le num√©ro de t√©l√©phone
      final cleanPhone = phoneNumber.replaceAll(RegExp(r'[^\d+]'), '');

      // Chercher dans la collection users
      final usersQuery = await _firestore
          .collection('users')
          .where('telephone', isEqualTo: cleanPhone)
          .limit(1)
          .get();

      if (usersQuery.docs.isNotEmpty) {
        final doc = usersQuery.docs.first;
        return {
          'found': true,
          'userId': doc.id,
          'userData': doc.data(),
        };
      }

      // Chercher dans les demandes d'assurance
      final demandesQuery = await _firestore
          .collection('demandes_contrats')
          .where('telephone', isEqualTo: cleanPhone)
          .limit(1)
          .get();

      if (demandesQuery.docs.isNotEmpty) {
        final demande = demandesQuery.docs.first.data();
        final conducteurId = demande['conducteurId'];
        
        if (conducteurId != null) {
          final userDoc = await _firestore.collection('users').doc(conducteurId).get();
          if (userDoc.exists) {
            return {
              'found': true,
              'userId': conducteurId,
              'userData': {...userDoc.data()!, ...demande},
            };
          }
        }
      }

      return {'found': false};

    } catch (e) {
      print('[PASSWORD_RESET_SMS] ‚ùå Erreur recherche utilisateur: $e');
      return {'found': false};
    }
  }

  /// üé≤ G√©n√©rer un code OTP √† 6 chiffres
  static String _generateOTP() {
    final random = Random();
    return (100000 + random.nextInt(900000)).toString();
  }

  /// üì± Envoyer SMS (simulation pour d√©veloppement)
  static Future<void> _sendSMS(String phoneNumber, String code, String userName) async {
    try {
      final message = '''
üîê Code de r√©cup√©ration Constat Tunisie

Bonjour $userName,

Votre code de r√©cup√©ration de mot de passe est:

$code

Ce code expire dans 5 minutes.

‚ö†Ô∏è Ne partagez jamais ce code.
''';

      print('[PASSWORD_RESET_SMS] üì± Envoi code pour: $phoneNumber');
      print('[SMS_SIMULATION] üì± MODE D√âVELOPPEMENT - SMS simul√©:');
      print('[SMS_SIMULATION] üìû Destinataire: $phoneNumber');
      print('[SMS_SIMULATION] üë§ Nom: $userName');
      print('[SMS_SIMULATION] üîê Code: $code');
      print('[SMS_SIMULATION] ‚úÖ SMS envoy√© avec succ√®s (simulation)');

      // Simuler un d√©lai d'envoi r√©aliste
      await Future.delayed(const Duration(milliseconds: 500));

      // En mode d√©veloppement, toujours r√©ussir
      print('[PASSWORD_RESET_SMS] ‚úÖ SMS envoy√© avec succ√®s');

    } catch (e) {
      print('[PASSWORD_RESET_SMS] ‚ùå Erreur envoi SMS: $e');
      // En mode d√©veloppement, ne pas faire √©chouer l'envoi
      print('[PASSWORD_RESET_SMS] üîß Mode d√©veloppement: Simulation r√©ussie malgr√© l\'erreur');
    }
  }

  /// üìù Logger les tentatives de r√©cup√©ration
  static Future<void> _logPasswordResetAttempt(String userId, String phoneNumber, String action) async {
    try {
      await _firestore.collection('password_reset_logs').add({
        'userId': userId,
        'phoneNumber': phoneNumber,
        'action': action,
        'timestamp': FieldValue.serverTimestamp(),
        'ip': 'unknown', // En production, r√©cup√©rer l'IP r√©elle
      });
    } catch (e) {
      print('[PASSWORD_RESET_SMS] ‚ùå Erreur logging: $e');
    }
  }

  /// üßπ Nettoyer les OTP expir√©s
  static Future<void> cleanExpiredOTPs() async {
    try {
      final now = DateTime.now().millisecondsSinceEpoch;
      final expiredQuery = await _firestore
          .collection(_otpCollection)
          .where('expiresAt', isLessThan: now)
          .get();

      for (final doc in expiredQuery.docs) {
        await doc.reference.delete();
      }

      print('[PASSWORD_RESET_SMS] üßπ ${expiredQuery.docs.length} OTP expir√©s supprim√©s');
    } catch (e) {
      print('[PASSWORD_RESET_SMS] ‚ùå Erreur nettoyage: $e');
    }
  }
}
