import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';/// üè¢ Service unifie pour la gestion des compagnies d';/// Ce service evite les doublons et unifie l';  // Collection principale (la plus utilisee';  static const String _primaryCollection = 'compagnies_assurance';    'compagnies';    ';  static Future<List<Map<String, dynamic>>> getAllCompagniesUnified(';      debugPrint(';      compagniesList.sort((a, b') => (a['nom] as String').compareTo(b['nom] as String)';      debugPrint('[UNIFIED_COMPAGNIE] ‚úÖ ';    } catch (e';      debugPrint(';  ';      debugPrint('[UNIFIED_COMPAGNIE] üì• Chargement depuis: ';          .collection(collection';          .orderBy(';        final data = doc.data(';        if (data['isFakeData] == true';        if (data['status'] == 'supprime' || data['isActive] == false';        final nom = data['nom'] as String? ?? 'Sans nom';        final code = data['code'] as String? ?? ';        final uniqueKey = ${nom.toLowerCase(')}_';        if (!compagniesMap.containsKey(uniqueKey)';            'id';            'nom';            'code';            'collection';            'ville': data['ville'] ?? ';            'gouvernorat': data['gouvernorat'] ?? ';            'email': data['email'] ?? ';            'telephone': data['telephone'] ?? ';            'adresse': data['adresse'] ?? data['adresseSiege'] ?? ';      debugPrint('[UNIFIED_COMPAGNIE] üìä Collection $collection: $added ajoutees, ';    } catch (e';      debugPrint(';      return compagnies.map((compagnie';        'id': compagnie['id';        'nom': compagnie['nom';        'code': compagnie['code';        'display': ''{compagnie['nom']} ('{compagnie['code]}')';      debugPrint(';            final data = doc.data(';              'id';              'nom': data['nom'] ?? 'Sans nom';              'code': data['code'] ?? ';              ';        } catch (e';          debugPrint(';    } catch (e';      debugPrint(';  static Future<Map<String, dynamic>> cleanDuplicates(';      debugPrint(';            final data = doc.data(';            final nom = data['nom'] as String? ?? 'Sans nom';            final code = data['code'] as String? ?? ';            final key = ${nom.toLowerCase(')}_';            allCompagnies.putIfAbsent(key, () => []';              'id';              'collection';              'nom';              'code';              ';        } catch (e';          debugPrint(';        if (entry.value.length > 1';      debugPrint('[UNIFIED_COMPAGNIE] üìä Resultats nettoyage:';      debugPrint('[UNIFIED_COMPAGNIE]   - Total trouvees: 'totalFound';      debugPrint('[UNIFIED_COMPAGNIE]   - Groupes uniques: '{allCompagnies.length}';      debugPrint('[UNIFIED_COMPAGNIE]   - Doublons detectes: '{duplicates.length}';        'success';        'total_found';        'unique_groups';        'duplicates_detected';        'duplicates';        'message': 'Analyse terminee. ';    } catch (e';      debugPrint('[UNIFIED_COMPAGNIE] ‚ùå Erreur nettoyage:  + e.toString()';        'success';        ';      final compagnies = await getAllCompagniesUnified(';        'total';        'par_gouvernorat';        ';      for (final compagnie in compagnies';        final gouvernorat = compagnie['gouvernorat'] as String? ?? 'Non defini';        stats['par_gouvernorat';            (stats['par_gouvernorat][gouvernorat] ?? 0';        final collection = compagnie['collection'] as String? ?? 'Inconnue';        stats['par_collection';            (stats[';    } catch (e';      debugPrint('[UNIFIED_COMPAGNIE] ‚ùå Erreur stats:  + e.toString()';      return {'total': 0, 'error: e.toString(';