import 'package:cloud_firestore/cloud_firestore.dart';

/// üîÑ Service de migration pour mettre √† jour les constats existants
class ConstatMigrationService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// üìã Migrer les constats existants vers constats_finalises
  static Future<void> migrerConstatsExistants() async {
    try {
      print('üîÑ [MIGRATION] D√©but migration des constats existants...');

      // 1. R√©cup√©rer tous les constats agents
      final constatsAgentsQuery = await _firestore
          .collection('constats_agents')
          .get();

      print('üìä [MIGRATION] ${constatsAgentsQuery.docs.length} constats agents trouv√©s');

      int migrationsReussies = 0;
      int migrationsEchouees = 0;

      for (final doc in constatsAgentsQuery.docs) {
        try {
          final data = doc.data();
          final sessionId = data['sessionId'] as String?;

          if (sessionId == null || sessionId.isEmpty) {
            print('‚ö†Ô∏è [MIGRATION] SessionId manquant pour ${doc.id}');
            migrationsEchouees++;
            continue;
          }

          // V√©rifier si le document existe d√©j√† dans constats_finalises
          final constatFinalisDoc = await _firestore
              .collection('constats_finalises')
              .doc(sessionId)
              .get();

          if (constatFinalisDoc.exists) {
            print('‚úÖ [MIGRATION] Constat $sessionId d√©j√† migr√©');
            continue;
          }

          // R√©cup√©rer les donn√©es de la session
          final sessionDoc = await _firestore
              .collection('sessions_collaboratives')
              .doc(sessionId)
              .get();

          if (!sessionDoc.exists) {
            print('‚ö†Ô∏è [MIGRATION] Session $sessionId non trouv√©e');
            migrationsEchouees++;
            continue;
          }

          final sessionData = sessionDoc.data()!;

          // Cr√©er le document dans constats_finalises
          await _firestore.collection('constats_finalises').doc(sessionId).set({
            'sessionId': sessionId,
            'codeConstat': sessionData['codeSession'] ?? '',
            'statut': 'envoye', // Statut par d√©faut pour les constats envoy√©s
            'dateEnvoi': data['dateEnvoiPdf'] ?? FieldValue.serverTimestamp(),
            'pdfUrl': data['pdfUrl'],
            'conducteurId': sessionData['conducteurCreateur'],
            'agentInfo': {
              'email': data['agentEmail'],
              'nom': data['agentNom'] ?? '',
              'prenom': data['agentPrenom'] ?? '',
              'agenceNom': data['agenceNom'] ?? '',
              'compagnieNom': data['compagnieNom'] ?? '',
            },
            'nombreVehicules': sessionData['nombreVehicules'] ?? 2,
            'typeAccident': sessionData['typeAccident'] ?? 'collision',
            'statutTraitement': data['statutTraitement'] ?? 'nouveau',
            'dateVu': data['dateVu'],
            'dateTraitement': data['dateTraitement'],
            'commentairesAgent': data['commentairesAgent'],
            'createdAt': data['createdAt'] ?? FieldValue.serverTimestamp(),
            'updatedAt': FieldValue.serverTimestamp(),
            'source': 'migration_constats_agents',
          });

          print('‚úÖ [MIGRATION] Constat $sessionId migr√© avec succ√®s');
          migrationsReussies++;

        } catch (e) {
          print('‚ùå [MIGRATION] Erreur migration ${doc.id}: $e');
          migrationsEchouees++;
        }
      }

      print('üìä [MIGRATION] R√©sultats:');
      print('   ‚úÖ Migrations r√©ussies: $migrationsReussies');
      print('   ‚ùå Migrations √©chou√©es: $migrationsEchouees');
      print('üèÅ [MIGRATION] Migration termin√©e');

    } catch (e) {
      print('‚ùå [MIGRATION] Erreur g√©n√©rale: $e');
    }
  }

  /// üîç Migrer les assignations d'experts existantes
  static Future<void> migrerAssignationsExperts() async {
    try {
      print('üîÑ [MIGRATION] D√©but migration des assignations d\'experts...');

      // R√©cup√©rer toutes les missions d'expertise
      final missionsQuery = await _firestore
          .collection('missions_expertise')
          .get();

      print('üìä [MIGRATION] ${missionsQuery.docs.length} missions d\'expertise trouv√©es');

      int migrationsReussies = 0;

      for (final doc in missionsQuery.docs) {
        try {
          final data = doc.data();
          final sessionId = data['sessionId'] as String?;
          final expertId = data['expertId'] as String?;

          if (sessionId == null || expertId == null) {
            continue;
          }

          // R√©cup√©rer les donn√©es de l'expert
          final expertDoc = await _firestore
              .collection('users')
              .doc(expertId)
              .get();

          if (!expertDoc.exists) {
            continue;
          }

          final expertData = expertDoc.data()!;

          // Mettre √† jour le constat dans constats_finalises
          await _firestore.collection('constats_finalises').doc(sessionId).update({
            'statut': 'expert_assigne',
            'expertAssigne': {
              'id': expertId,
              'nom': '${expertData['prenom'] ?? ''} ${expertData['nom'] ?? ''}',
              'prenom': expertData['prenom'] ?? '',
              'codeExpert': expertData['codeExpert'] ?? '',
              'telephone': expertData['telephone'] ?? '',
              'email': expertData['email'] ?? '',
            },
            'dateAssignationExpert': data['dateCreation'],
            'commentaireAssignation': data['commentaire'] ?? '',
            'delaiInterventionHeures': data['delaiIntervention'] ?? 48,
            'progressionExpertise': data['progression'] ?? 0,
            'dateVisite': data['dateVisite'],
            'rapportFinal': data['rapportFinal'],
            'evaluation': data['evaluation'],
            'updatedAt': FieldValue.serverTimestamp(),
          });

          print('‚úÖ [MIGRATION] Expert assign√© pour session $sessionId');
          migrationsReussies++;

        } catch (e) {
          print('‚ùå [MIGRATION] Erreur assignation expert ${doc.id}: $e');
        }
      }

      print('üìä [MIGRATION] $migrationsReussies assignations d\'experts migr√©es');

    } catch (e) {
      print('‚ùå [MIGRATION] Erreur migration experts: $e');
    }
  }

  /// üìß Migrer les notifications agents vers constats_finalises
  static Future<void> migrerNotificationsAgents() async {
    try {
      print('üîÑ [MIGRATION] D√©but migration des notifications agents...');

      // R√©cup√©rer toutes les notifications agents
      final notificationsQuery = await _firestore
          .collection('notifications_agents')
          .get();

      print('üìä [MIGRATION] ${notificationsQuery.docs.length} notifications agents trouv√©es');

      int migrationsReussies = 0;
      int migrationsEchouees = 0;

      for (final doc in notificationsQuery.docs) {
        try {
          final data = doc.data();
          final sessionId = data['sessionId'] as String?;

          if (sessionId == null || sessionId.isEmpty) {
            print('‚ö†Ô∏è [MIGRATION] SessionId manquant pour notification ${doc.id}');
            migrationsEchouees++;
            continue;
          }

          // V√©rifier si le document existe d√©j√† dans constats_finalises
          final constatFinalisDoc = await _firestore
              .collection('constats_finalises')
              .doc(sessionId)
              .get();

          if (constatFinalisDoc.exists) {
            print('‚úÖ [MIGRATION] Constat $sessionId d√©j√† migr√©');
            continue;
          }

          // R√©cup√©rer les donn√©es de la session
          final sessionDoc = await _firestore
              .collection('sessions_collaboratives')
              .doc(sessionId)
              .get();

          if (!sessionDoc.exists) {
            print('‚ö†Ô∏è [MIGRATION] Session $sessionId non trouv√©e');
            migrationsEchouees++;
            continue;
          }

          final sessionData = sessionDoc.data()!;

          // Cr√©er le document dans constats_finalises
          await _firestore.collection('constats_finalises').doc(sessionId).set({
            'sessionId': sessionId,
            'codeConstat': sessionData['codeSession'] ?? '',
            'statut': 'envoye', // Statut par d√©faut pour les notifications agents
            'dateEnvoi': data['dateCreation'] ?? FieldValue.serverTimestamp(),
            'pdfUrl': data['pdfUrl'],
            'conducteurId': sessionData['conducteurCreateur'],
            'agentInfo': {
              'email': data['destinataire'],
              'nom': '',
              'prenom': '',
              'agenceNom': data['agencyName'] ?? '',
              'compagnieNom': data['companyName'] ?? '',
            },
            'nombreVehicules': sessionData['nombreVehicules'] ?? 2,
            'typeAccident': sessionData['typeAccident'] ?? 'collision',
            'statutTraitement': data['statut'] ?? 'en_attente',
            'createdAt': data['dateCreation'] ?? FieldValue.serverTimestamp(),
            'updatedAt': FieldValue.serverTimestamp(),
            'source': 'migration_notifications_agents',
          });

          print('‚úÖ [MIGRATION] Notification agent $sessionId migr√©e avec succ√®s');
          migrationsReussies++;

        } catch (e) {
          print('‚ùå [MIGRATION] Erreur migration notification ${doc.id}: $e');
          migrationsEchouees++;
        }
      }

      print('üìä [MIGRATION] R√©sultats notifications agents:');
      print('   ‚úÖ Migrations r√©ussies: $migrationsReussies');
      print('   ‚ùå Migrations √©chou√©es: $migrationsEchouees');

    } catch (e) {
      print('‚ùå [MIGRATION] Erreur migration notifications agents: $e');
    }
  }

  /// üöÄ Migration compl√®te
  static Future<void> migrationComplete() async {
    print('üöÄ [MIGRATION] D√©but migration compl√®te...');

    await migrerConstatsExistants();
    await migrerNotificationsAgents();
    await migrerAssignationsExperts();

    print('üèÅ [MIGRATION] Migration compl√®te termin√©e');
  }

  /// üîç Analyser les donn√©es existantes
  static Future<void> analyserDonneesExistantes() async {
    try {
      print('üîç [ANALYSE] Analyse des donn√©es existantes...');

      // Compter les documents dans chaque collection
      final sessionsCount = (await _firestore.collection('sessions_collaboratives').get()).docs.length;
      final constatsAgentsCount = (await _firestore.collection('constats_agents').get()).docs.length;
      final constatsFinalisesCount = (await _firestore.collection('constats_finalises').get()).docs.length;
      final missionsCount = (await _firestore.collection('missions_expertise').get()).docs.length;
      final envoiConstatsCount = (await _firestore.collection('envois_constats').get()).docs.length;

      print('üìä [ANALYSE] Statistiques:');
      print('   üìã Sessions collaboratives: $sessionsCount');
      print('   üë®‚Äçüíº Constats agents: $constatsAgentsCount');
      print('   ‚úÖ Constats finalis√©s: $constatsFinalisesCount');
      print('   üîß Missions expertise: $missionsCount');
      print('   üì§ Envois constats: $envoiConstatsCount');

      // Analyser les sessions finalis√©es sans constat
      final sessionsFinaliseesQuery = await _firestore
          .collection('sessions_collaboratives')
          .where('statut', isEqualTo: 'finalise')
          .get();

      int sessionsSansConstat = 0;
      for (final sessionDoc in sessionsFinaliseesQuery.docs) {
        final sessionId = sessionDoc.id;
        final constatDoc = await _firestore
            .collection('constats_finalises')
            .doc(sessionId)
            .get();
        
        if (!constatDoc.exists) {
          sessionsSansConstat++;
        }
      }

      print('   ‚ö†Ô∏è Sessions finalis√©es sans constat: $sessionsSansConstat');

    } catch (e) {
      print('‚ùå [ANALYSE] Erreur analyse: $e');
    }
  }
}
