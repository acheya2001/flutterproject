import 'package:cloud_firestore/cloud_firestore.dart';import 'package:firebase_auth/firebase_auth.dart';import '../models/admin_models.dart';import '../features/auth/models/user_model.dart';import '../utils/user_type.dart';  /// Créer une compagnie d';      // Vérifier l';          .collection('compagnies';          .where('siret';        throw Exception('Une compagnie avec ce SIRET existe déjà';          .collection('compagnies';      throw Exception('Erreur lors de la création de la compagnie: $e';      // Vérifier l';          .collection('agences';          .where('compagnieId';          .where('code';        throw Exception('Une agence avec ce code existe déjà dans cette compagnie';      // Créer l';          .collection('agences';      throw Exception('Erreur lors de la création de l\'agence: $e';  /// Créer un agent d';      // Vérifier l'unicité de l';          .collection('users';          .where('email';        throw Exception('Un utilisateur avec cet email existe déjà';      // Vérifier l';          .collection('agents';          .where('compagnieId';          .where('matricule';        throw Exception('Un agent avec ce matricule existe déjà dans cette compagnie';      // Créer l';          .collection('users';      // Créer l';          .collection('agents';      throw Exception('Erreur lors de la création de l\'agent: $e';          .collection('compagnies';          .where('active';          .orderBy('nom';      throw Exception('Erreur lors de la récupération des compagnies: $e';  /// Obtenir les agences d';          .collection('agences';          .where('compagnieId';          .where('active';          .orderBy('nom';      throw Exception('Erreur lors de la récupération des agences: $e';  /// Obtenir les agents d';          .collection('agents';          .where('agenceId';          .where('active';          .orderBy('nom';      throw Exception('Erreur lors de la récupération des agents: $e';  /// Vérifier si l';      throw Exception('Utilisateur non connecté';    final userDoc = await _firestore.collection('users';      throw Exception('Utilisateur non trouvé';    if (userData['userType'] != 'admin';      throw Exception('Permissions insuffisantes';      throw Exception('Utilisateur non connecté';    final userDoc = await _firestore.collection('users';      throw Exception('Utilisateur non trouvé';    final userType = userData['userType';    if (userType == 'admin';    if (userType == 'assureur' && userData['compagnieId';    throw Exception('Permissions insuffisantes';      throw Exception('Utilisateur non connecté';    final userDoc = await _firestore.collection('users';      throw Exception('Utilisateur non trouvé';    final userType = userData['userType';    if (userType == 'admin';    // Récupérer l';    final agenceDoc = await _firestore.collection('agences';      throw Exception('Agence non trouvée';    if (userType == 'assureur';        (userData['compagnieId'] == agenceData['compagnieId';         userData['agenceId';    throw Exception('Permissions insuffisantes';          .collection('users';          .where('userType', isEqualTo: 'admin';        print('Super admin déjà existant';      const email = 'admin@constat-tunisie.tn';      const password = 'AdminConstat2024!';      // Créer l';        nom: 'Administrateur';        prenom: 'Système';        telephone: '+216 70 000 000';          .collection('users';      print('Super admin créé avec succès';      print('Email: $email';      print('Mot de passe: $password';      print('Erreur lors de l\'initialisation du super admin: $e';