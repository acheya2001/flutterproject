import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';  }';/// üìä Service CSV specialise pour les donnees d';  static Future<ImportResult> importInsuranceData(String csvContent';      debugPrint(';      final lines = csvContent.trim(').split(';      if (lines.isEmpty';          errors: ['Fichier CSV vide';          dataType: ';        ';      final headers = lines[0].split(';      final dataRows = lines.skip(1).map((line') => line.split(',).toList(';      debugPrint('[INSURANCE_CSV] üìä Headers detectes: 'headers';      debugPrint('[INSURANCE_CSV] üìä ';      final dataType = _detectDataType(headers';      debugPrint('[INSURANCE_CSV] üîç Type detecte: ';      switch (dataType';        case ';          return await _importCompagnies(headers, dataRows';        case ';          return await _importAgences(headers, dataRows';        case ';          return await _importAgents(headers, dataRows';        case ';          return await _importVehicules(headers, dataRows';        case ';          return await _importContrats(headers, dataRows';        case ';    } catch (e';      debugPrint('[INSURANCE_CSV] ‚ùå Erreur importation:  + e.toString()';        errors: ['Erreur generale: 'e';        dataType: ';  static String _detectDataType(List<String> headers';    final headerStr = headers.join(' ).toLowerCase(';    // Compagnies d';    if (headerStr.contains('compagnie';        headerStr.contains('assurance';        (headerStr.contains('nom') && headerStr.contains('code)';      return 'compagnies';    if (headerStr.contains('agence';        (headerStr.contains('nom') && headerStr.contains('ville)';      return 'agences';    if (headerStr.contains('agent';        (headerStr.contains('prenom') && headerStr.contains('nom)';      return 'agents';    if (headerStr.contains('vehicule';        headerStr.contains('immatriculation';        headerStr.contains('marque';        headerStr.contains('modele)';      return 'vehicules';    if (headerStr.contains('contrat';        headerStr.contains('police';        headerStr.contains('prime)';      return 'contrats';    if (headerStr.contains('sinistre';        headerStr.contains('accident';        headerStr.contains('constat)';      return 'sinistres';    return 'generic';        final data = _mapRowToData(headers, row';        if (!data.containsKey('nom') || data['nom].toString().isEmpty';          errors.add('Ligne '{i + 2}: Nom de compagnie manquant';        if (!data.containsKey('code') || data['code].toString().isEmpty';          data['code'] = data['nom].toString().toUpperCase(').replaceAll(' ', ').substring(0, 4';        final compagnieId = data['code].toString().toUpperCase(';          'id';          'nom': data['nom';          'code';          'adresse': data['adresse'] ?? ';          'telephone': data['telephone'] ?? data['tel'] ?? ';          'email': data['email'] ?? ';          'ville': data['ville'] ?? ';          'pays': 'Tunisie';          'status': 'actif';          'created_at: FieldValue.serverTimestamp(';          'imported_from': 'csv';          'import_date: DateTime.now().toIso8601String(';        bool saved = await _saveToMultipleCollections(['companies', ';          createdData.add(compagnieData';          debugPrint('[INSURANCE_CSV] ‚úÖ Compagnie creee: '{compagnieData['nom']}';          errors.add('Ligne ${i + 2}: Impossible de sauvegarder '{data['nom';      } catch (e';        errors.add('Ligne ${i + 2}: Erreur -  + e.toString()';      dataType: ';        final data = _mapRowToData(headers, row';        if (!data.containsKey('nom') || data['nom].toString().isEmpty';          errors.add('Ligne '{i + 2}: Nom d\'agence manquant';        final agenceId = 'agence_${DateTime.now().millisecondsSinceEpoch}_'i';          'id';          'nom': data['nom';          'compagnieId': data['compagnie'] ?? data['compagnieid'] ?? 'UNKNOWN';          'adresse': data['adresse'] ?? ';          'ville': data['ville'] ?? ';          'telephone': data['telephone'] ?? data['tel'] ?? ';          'responsable': data['responsable'] ?? ';          'status': 'actif';          'created_at: FieldValue.serverTimestamp(';          'imported_from': 'csv';          'import_date: DateTime.now().toIso8601String(';        bool saved = await _saveToMultipleCollections(['agencies', ';          createdData.add(agenceData';          debugPrint('[INSURANCE_CSV] ‚úÖ Agence creee: '{agenceData['nom']}';          errors.add('Ligne ${i + 2}: Impossible de sauvegarder '{data['nom';      } catch (e';        errors.add('Ligne ${i + 2}: Erreur -  + e.toString()';      dataType: ';        final data = _mapRowToData(headers, row';        final docId = '${dataType}_${DateTime.now().millisecondsSinceEpoch}_'i';          'id';          'data_type';          'created_at: FieldValue.serverTimestamp(';          'imported_from': 'csv';          'import_date: DateTime.now().toIso8601String(';        bool saved = await _saveToMultipleCollections(['csv_imports', ';          createdData.add(docData';          errors.add('Ligne ';      } catch (e';        errors.add(';      final value = row[i]?.toString().trim(') ?? ';            .timeout(const Duration(seconds: 10)';        debugPrint('[INSURANCE_CSV] ‚úÖ Sauvegarde dans collection: ';      } catch (e';        debugPrint('[INSURANCE_CSV] ‚ùå √âchec collection $collection:  + e.toString()';  // Methodes d';    // TODO: Implementer l'importation d';    return _importGeneric(headers, dataRows, ';  static Future<ImportResult> _importVehicules(List<String> headers, List<List<dynamic>> dataRows';    // TODO: Implementer l';    return _importGeneric(headers, dataRows, ';  static Future<ImportResult> _importContrats(List<String> headers, List<List<dynamic>> dataRows';    // TODO: Implementer l';    return _importGeneric(headers, dataRows, ';  static Future<ImportResult> _importSinistres(List<String> headers, List<List<dynamic>> dataRows';    // TODO: Implementer l';    return _importGeneric(headers, dataRows, 'sinistres';