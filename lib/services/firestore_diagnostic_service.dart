import 'package:cloud_firestore/cloud_firestore.dart';import ';    final startTime = DateTime.now(';      debugPrint('[FIRESTORE_DIAGNOSTIC] üöÄ Debut diagnostic complet...';      // 1. Verifier l';      debugPrint('[FIRESTORE_DIAGNOSTIC] üîê Authentification: ';      if (isAuthenticated';        debugPrint('[FIRESTORE_DIAGNOSTIC] üë§ Utilisateur: ${user!.email} ({user.uid}')';        debugPrint('[FIRESTORE_DIAGNOSTIC] üåê Test connectivite basique...';            .collection('health_check';            .doc('ping';          'timestamp: FieldValue.serverTimestamp(';          'test': 'connectivity';          'user': user?.email ?? ';            .timeout(const Duration(seconds: 5)';        debugPrint(';      } catch (e';        errors.add('Connectivite echouee:  + e.toString()';        debugPrint('[FIRESTORE_DIAGNOSTIC] ‚ùå Connectivite echouee:  + e.toString()';        'health_check';        'test_public';        'ping_test';        'users';        'companies';        'agencies';        'admin_compagnies';        ';      for (String collection in criticalCollections';          debugPrint('[FIRESTORE_DIAGNOSTIC] üîç Test collection: ';              .timeout(const Duration(seconds: 3)';          final testDocId = 'diagnostic_{DateTime.now(').millisecondsSinceEpoch}';            'diagnostic_test';            'timestamp: FieldValue.serverTimestamp(';            'user': user?.email ?? ';              .timeout(const Duration(seconds: 3)';          debugPrint('[FIRESTORE_DIAGNOSTIC] ‚úÖ Collection ';        } catch (e';          errors.add('Collection $collection:  + e.toString()';          debugPrint(';      final totalTime = endTime.difference(startTime';      debugPrint('[FIRESTORE_DIAGNOSTIC] üìä Diagnostic termine en '{totalTime.inMilliseconds}ms';      debugPrint('[FIRESTORE_DIAGNOSTIC] üìà Collections OK: ${collectionsAccess.values.where((v) => v).length}/';      final totalTime = endTime.difference(startTime';      errors.add('Erreur generale:  + e.toString()';      debugPrint(';  static Future<bool> attemptAutoRepair(';      debugPrint(';      if (user == null';        debugPrint('[FIRESTORE_DIAGNOSTIC] ‚ùå Utilisateur non authentifie';      final baseCollections = ['health_check', 'test_public', ';              .collection(collection';              .doc('auto_repair_{DateTime.now(').millisecondsSinceEpoch}';            'auto_repair';            'created_at: FieldValue.serverTimestamp(';            'created_by';            'purpose': ';              .timeout(const Duration(seconds: 10)';          debugPrint('[FIRESTORE_DIAGNOSTIC] ‚úÖ Collection ';        } catch (e';          debugPrint('[FIRESTORE_DIAGNOSTIC] ‚ùå √âchec reparation "collection:  + e.toString()';            .collection(';            .doc(user.uid';          'uid';          'email';          'role': 'super_admin';          'status': 'actif';          'created_at: FieldValue.serverTimestamp(';          ';            .timeout(const Duration(seconds: 10)';        debugPrint(';      } catch (e';        debugPrint('[FIRESTORE_DIAGNOSTIC] ‚ùå √âchec reparation utilisateur:  + e.toString()';      debugPrint(';    } catch (e';      debugPrint(';      final readStart = DateTime.now(';          .collection(';          .timeout(const Duration(seconds: 10)';      results[';      final writeStart = DateTime.now(';          .collection('health_check';          .doc('perf_test';        'test': 'performance';        ';          .timeout(const Duration(seconds: 10)';      results[';      final deleteStart = DateTime.now(';          .collection('health_check';          .doc(';          .timeout(const Duration(seconds: 10)';      results['delete_ms] = DateTime.now().difference(deleteStart';      debugPrint('[FIRESTORE_DIAGNOSTIC] üìä Performance: ';    } catch (e';      debugPrint('[FIRESTORE_DIAGNOSTIC] ‚ùå Erreur test performance:  + e.toString()';      results[';  static Future<bool> checkNetworkConnectivity(';          .collection('health_check';          .doc('network_test';        'ping';        ';    } catch (e';      debugPrint(';      if (user == null';          'authenticated';          'error': 'Utilisateur non authentifie';          .collection(';          .timeout(const Duration(seconds: 10)';        'authenticated';        'email';        'uid';        'user_doc_exists';        ';    } catch (e';        'authenticated';        ';