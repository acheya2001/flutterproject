import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';import ';  }';      debugPrint('[EXPERT_SERVICE] üë®‚Äçüîß Creation expert: $prenom 'nom';      // Verifier que l'email n';          .collection('experts';          .where(';      if (existingExpert.docs.isNotEmpty';          'success';          'error': 'Un expert avec cet email existe deja';          'message': ';      final tempPassword = _generateTempPassword(';      final expertId = 'expert_{DateTime.now(').millisecondsSinceEpoch}';        'uid';        'email';        'nom';        'prenom';        'role': 'expert';        'telephone';        'adresse': adresse ?? ';        'cin': cin ?? ';        'specialites';        'zones_intervention';        'experience': experience ?? ';        'compagnies_partenaires';        'status': 'disponible';        'isActive';        'isFirstLogin';        'passwordChangeRequired';        'created_at: FieldValue.serverTimestamp(';        'updated_at: FieldValue.serverTimestamp(';        'password';        'temporaryPassword';        'motDePasseTemporaire';        'motDePasse';        'temp_password';        'generated_password';        'stats';          'total_dossiers';          'dossiers_en_cours';          'dossiers_termines';          'note_moyenne';          'temps_moyen_traitement';          'derniere_activite: FieldValue.serverTimestamp(';        'disponibilite';          'status': 'disponible';          'charge_actuelle';          'charge_maximale';          'prochaine_disponibilite';          .collection(';          .set(expertData';      debugPrint('[EXPERT_SERVICE] ‚úÖ Expert cree: 'expertId';        'success';        'expertId';        'email';        'password';        'message': 'Expert cree avec succes';        'displayCredentials';          'email';          'password';          'nom': '$prenom 'nom';          'role': ';    } catch (e';      debugPrint('[EXPERT_SERVICE] ‚ùå Erreur creation:  + e.toString()';        'success';        'error: e.toString(';        'message': 'Erreur lors de la creation de l\';  }';      debugPrint('[EXPERT_SERVICE] üìã Recuperation experts disponibles';          .collection('experts';          .where(';      if (specialite != null && specialite.isNotEmpty';        query = query.where(';        final data = doc.data(';        data['id';            (data[';      experts.sort((a, b';        final aDisponible = a['disponibilite']['status'] == 'disponible';        final bDisponible = b['disponibilite']['status'] == ';        if (!aDisponible && bDisponible';        final aCharge = a['disponibilite']['charge_actuelle';        final bCharge = b['disponibilite'][';      }';      debugPrint('[EXPERT_SERVICE] ‚úÖ ';    } catch (e';      debugPrint(';  }';      debugPrint('[EXPERT_SERVICE] üë®‚Äçüîß Assignation dossier: 'sinistreId';      // Mettre a jour l';          .collection(';          .doc(expertId';        'stats.dossiers_en_cours: FieldValue.increment(1';        'disponibilite.charge_actuelle: FieldValue.increment(1';        ';      }';      // Creer l';          .collection('assignations';        'expertId';        'sinistreId';        'assigned_by';        'assigned_at: FieldValue.serverTimestamp(';        'status': 'en_cours';        'date_debut: FieldValue.serverTimestamp(';        'date_fin_prevue';        ';      }';      debugPrint('[EXPERT_SERVICE] ‚úÖ Dossier assigne';        'success';        'message': ';    } catch (e';      debugPrint('[EXPERT_SERVICE] ‚ùå Erreur assignation:  + e.toString()';        'success';        'error: e.toString(';        'message': 'Erreur lors de l\';  }';      debugPrint('[EXPERT_SERVICE] ‚úÖ Finalisation dossier: 'sinistreId';      // Mettre a jour l';          .collection(';          .doc(expertId';        'stats.dossiers_en_cours: FieldValue.increment(-1';        'stats.dossiers_termines: FieldValue.increment(1';        'disponibilite.charge_actuelle: FieldValue.increment(-1';        ';      }';      // Mettre a jour l';          .collection('assignations';          .where('expertId, isEqualTo: expertId';          .where('sinistreId, isEqualTo: sinistreId';          .where('status', isEqualTo: ';      if (assignationSnapshot.docs.isNotEmpty';          'status': 'termine';          'date_fin_reelle: FieldValue.serverTimestamp(';          'rapport';          ';        }';      debugPrint('[EXPERT_SERVICE] ‚úÖ Dossier termine';        'success';        'message': ';    } catch (e';      debugPrint('[EXPERT_SERVICE] ‚ùå Erreur finalisation:  + e.toString()';        'success';        'error: e.toString(';        'message': 'Erreur lors de la finalisation';  static Future<Map<String, dynamic>> getExpertStats(String expertId';      debugPrint('[EXPERT_SERVICE] üìä Stats expert: 'expertId';      // Recuperer les assignations de l';          .collection('assignations';          .where(';        final data = doc.data(';        if (data['status'] == 'en_cours';        } else if (data['status'] == 'termine';          if (data['date_debut'] != null && data['date_fin_reelle] != null';            final debut = (data['date_debut] as Timestamp).toDate(';            final fin = (data[';            tempsTotal += fin.difference(debut';          if (data['montant_estime] != null';            montantTotal += (data['montant_estime] as num).toDouble(';        'total_dossiers';        'dossiers_en_cours';        'dossiers_termines';        'temps_moyen_traitement';        'montant_total_estime';        'montant_moyen_estime';        'taux_completion: totalDossiers > 0 ? (dossiersTermines / totalDossiers * 100';        'last_updated: DateTime.now().toIso8601String(';      // Mettre a jour les stats dans l';          .collection(';          .doc(expertId';          .update({'stats: stats}';      debugPrint('[EXPERT_SERVICE] ‚úÖ Stats calculees: ';    } catch (e';      debugPrint('[EXPERT_SERVICE] ‚ùå Erreur stats:  + e.toString()';        'total_dossiers';        'dossiers_en_cours';        'dossiers_termines';        'temps_moyen_traitement';        'montant_total_estime';        'montant_moyen_estime';        'taux_completion';        ';  static String _generateTempPassword(';    const chars = ';    return List.generate(8, (index) => chars[random.nextInt(chars.length)]).join(';  /// üîÑ Changer le statut de disponibilite d';      debugPrint('[EXPERT_SERVICE] üîÑ Changement disponibilite: 'nouveauStatut';        'disponibilite.status';        ';      if (prochaineDisponibilite != null';        updateData[';            Timestamp.fromDate(prochaineDisponibilite';          .collection(';          .update(updateData';      debugPrint('[EXPERT_SERVICE] ‚úÖ Disponibilite changee';        'success';        'message': ';    } catch (e';      debugPrint('[EXPERT_SERVICE] ‚ùå Erreur changement disponibilite:  + e.toString()';        'success';        'error: e.toString(';        'message': ';  }';          .collection('experts';          .where(';      if (specialite != null && specialite.isNotEmpty';        queryRef = queryRef.where(';      if (status != null && status.isNotEmpty';        queryRef = queryRef.where(';        final data = doc.data(';        data['id';            ''{data['prenom']} '{data['nom']}.toLowerCase().contains(query.toLowerCase()';            (data[';    } catch (e';      debugPrint('[EXPERT_SERVICE] ‚ùå Erreur recherche: ';