import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:cloud_functions/cloud_functions.dart';

class EcheancesService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static final FirebaseFunctions _functions = FirebaseFunctions.instance;

  /// üìÖ Cr√©er l'√©ch√©ancier pour un contrat
  static Future<void> createEcheancier(String contratId, Map<String, dynamic> contratData) async {
    try {
      final frequencePaiement = contratData['frequencePaiement'] ?? 'annuel';
      final montantTotal = contratData['montantTotal'] ?? 0.0;
      final dateDebut = contratData['dateDebut']?.toDate() ?? DateTime.now();
      
      int nombreEcheances;
      int intervalleEnMois;
      
      switch (frequencePaiement) {
        case 'annuel':
          nombreEcheances = 1;
          intervalleEnMois = 12;
          break;
        case 'semestriel':
          nombreEcheances = 2;
          intervalleEnMois = 6;
          break;
        case 'trimestriel':
          nombreEcheances = 4;
          intervalleEnMois = 3;
          break;
        default:
          nombreEcheances = 1;
          intervalleEnMois = 12;
      }
      
      final montantParEcheance = montantTotal / nombreEcheances;
      
      // Cr√©er les √©ch√©ances
      for (int i = 0; i < nombreEcheances; i++) {
        final dateEcheance = DateTime(
          dateDebut.year,
          dateDebut.month + (i * intervalleEnMois),
          dateDebut.day,
        );
        
        await _firestore.collection('echeances').add({
          'contratId': contratId,
          'conducteurId': contratData['conducteurId'],
          'numeroEcheance': i + 1,
          'totalEcheances': nombreEcheances,
          'montant': montantParEcheance,
          'dateEcheance': Timestamp.fromDate(dateEcheance),
          'statut': i == 0 ? 'payee' : 'en_attente', // Premi√®re √©ch√©ance d√©j√† pay√©e
          'dateCreation': FieldValue.serverTimestamp(),
          'rappelEnvoye': false,
        });
      }
      
      print('‚úÖ √âch√©ancier cr√©√© pour le contrat $contratId: $nombreEcheances √©ch√©ances');
      
    } catch (e) {
      print('‚ùå Erreur cr√©ation √©ch√©ancier: $e');
      throw e;
    }
  }

  /// üîî V√©rifier et envoyer les rappels d'√©ch√©ances
  static Future<void> checkAndSendReminders() async {
    try {
      final now = DateTime.now();
      final dans7Jours = now.add(const Duration(days: 7));
      final aujourdhui = DateTime(now.year, now.month, now.day);
      
      // R√©cup√©rer les √©ch√©ances √† venir (dans 7 jours)
      final echeancesProches = await _firestore
          .collection('echeances')
          .where('statut', isEqualTo: 'en_attente')
          .where('rappelEnvoye', isEqualTo: false)
          .where('dateEcheance', isLessThanOrEqualTo: Timestamp.fromDate(dans7Jours))
          .get();

      for (final doc in echeancesProches.docs) {
        final data = doc.data();
        final dateEcheance = data['dateEcheance'].toDate();
        final joursRestants = dateEcheance.difference(aujourdhui).inDays;
        
        if (joursRestants <= 7) {
          await _sendEcheanceReminder(doc.id, data, joursRestants);
        }
      }
      
      // V√©rifier les √©ch√©ances en retard
      final echeancesEnRetard = await _firestore
          .collection('echeances')
          .where('statut', isEqualTo: 'en_attente')
          .where('dateEcheance', isLessThan: Timestamp.fromDate(aujourdhui))
          .get();

      for (final doc in echeancesEnRetard.docs) {
        final data = doc.data();
        await _sendRetardNotification(doc.id, data);
      }
      
    } catch (e) {
      print('‚ùå Erreur v√©rification √©ch√©ances: $e');
    }
  }

  /// üìß Envoyer un rappel d'√©ch√©ance
  static Future<void> _sendEcheanceReminder(String echeanceId, Map<String, dynamic> data, int joursRestants) async {
    try {
      final contratId = data['contratId'];
      final conducteurId = data['conducteurId'];
      final montant = data['montant'];
      final numeroEcheance = data['numeroEcheance'];
      
      String message;
      if (joursRestants == 0) {
        message = 'Votre √©ch√©ance n¬∞$numeroEcheance de ${montant.toStringAsFixed(0)} DT est due aujourd\'hui. Merci de vous pr√©senter √† l\'agence pour effectuer le paiement.';
      } else {
        message = 'Rappel: Votre √©ch√©ance n¬∞$numeroEcheance de ${montant.toStringAsFixed(0)} DT est due dans $joursRestants jour${joursRestants > 1 ? 's' : ''}. Merci de vous pr√©senter √† l\'agence.';
      }
      
      // Cr√©er la notification
      await _firestore.collection('notifications').add({
        'conducteurId': conducteurId,
        'type': 'echeance_rappel',
        'titre': 'Rappel d\'√©ch√©ance',
        'message': message,
        'contratId': contratId,
        'echeanceId': echeanceId,
        'montant': montant,
        'joursRestants': joursRestants,
        'dateCreation': FieldValue.serverTimestamp(),
        'lu': false,
      });
      
      // Marquer le rappel comme envoy√©
      await _firestore.collection('echeances').doc(echeanceId).update({
        'rappelEnvoye': true,
        'dateRappel': FieldValue.serverTimestamp(),
      });
      
      print('üìß Rappel d\'√©ch√©ance envoy√© pour l\'√©ch√©ance $echeanceId');
      
    } catch (e) {
      print('‚ùå Erreur envoi rappel: $e');
    }
  }

  /// ‚ö†Ô∏è Envoyer une notification de retard
  static Future<void> _sendRetardNotification(String echeanceId, Map<String, dynamic> data) async {
    try {
      final contratId = data['contratId'];
      final conducteurId = data['conducteurId'];
      final montant = data['montant'];
      final numeroEcheance = data['numeroEcheance'];
      final dateEcheance = data['dateEcheance'].toDate();
      final joursRetard = DateTime.now().difference(dateEcheance).inDays;
      
      // Mettre √† jour le statut de l'√©ch√©ance
      await _firestore.collection('echeances').doc(echeanceId).update({
        'statut': 'en_retard',
        'joursRetard': joursRetard,
      });
      
      // Cr√©er la notification de retard
      await _firestore.collection('notifications').add({
        'conducteurId': conducteurId,
        'type': 'echeance_retard',
        'titre': '√âch√©ance en retard',
        'message': 'Votre √©ch√©ance n¬∞$numeroEcheance de ${montant.toStringAsFixed(0)} DT est en retard de $joursRetard jour${joursRetard > 1 ? 's' : ''}. Merci de r√©gulariser votre situation rapidement.',
        'contratId': contratId,
        'echeanceId': echeanceId,
        'montant': montant,
        'joursRetard': joursRetard,
        'dateCreation': FieldValue.serverTimestamp(),
        'lu': false,
        'priorite': 'haute',
      });
      
      // Si retard > 30 jours, suspendre le contrat
      if (joursRetard > 30) {
        await _suspendContract(contratId, conducteurId);
      }
      
      print('‚ö†Ô∏è Notification de retard envoy√©e pour l\'√©ch√©ance $echeanceId ($joursRetard jours)');
      
    } catch (e) {
      print('‚ùå Erreur notification retard: $e');
    }
  }

  /// üö´ Suspendre un contrat pour non-paiement
  static Future<void> _suspendContract(String contratId, String conducteurId) async {
    try {
      // Mettre √† jour le statut du contrat
      await _firestore.collection('contrats').doc(contratId).update({
        'statut': 'suspendu',
        'motifSuspension': 'non_paiement',
        'dateSuspension': FieldValue.serverTimestamp(),
      });
      
      // Notification de suspension
      await _firestore.collection('notifications').add({
        'conducteurId': conducteurId,
        'type': 'contrat_suspendu',
        'titre': 'Contrat suspendu',
        'message': 'Votre contrat d\'assurance a √©t√© suspendu pour non-paiement. Contactez votre agence pour r√©gulariser votre situation.',
        'contratId': contratId,
        'dateCreation': FieldValue.serverTimestamp(),
        'lu': false,
        'priorite': 'critique',
      });
      
      print('üö´ Contrat $contratId suspendu pour non-paiement');
      
    } catch (e) {
      print('‚ùå Erreur suspension contrat: $e');
    }
  }

  /// üí≥ Marquer une √©ch√©ance comme pay√©e
  static Future<void> markEcheanceAsPaid(String echeanceId, String agentId) async {
    try {
      await _firestore.collection('echeances').doc(echeanceId).update({
        'statut': 'payee',
        'datePaiement': FieldValue.serverTimestamp(),
        'agentId': agentId,
      });
      
      // V√©rifier si c'√©tait la derni√®re √©ch√©ance en retard
      final echeanceData = await _firestore.collection('echeances').doc(echeanceId).get();
      final contratId = echeanceData.data()?['contratId'];
      
      if (contratId != null) {
        final echeancesEnRetard = await _firestore
            .collection('echeances')
            .where('contratId', isEqualTo: contratId)
            .where('statut', whereIn: ['en_retard', 'en_attente'])
            .get();
        
        // Si plus d'√©ch√©ances en retard, r√©activer le contrat
        if (echeancesEnRetard.docs.isEmpty) {
          await _firestore.collection('contrats').doc(contratId).update({
            'statut': 'actif',
            'motifSuspension': FieldValue.delete(),
            'dateSuspension': FieldValue.delete(),
            'dateReactivation': FieldValue.serverTimestamp(),
          });
          
          print('‚úÖ Contrat $contratId r√©activ√©');
        }
      }
      
      print('üí≥ √âch√©ance $echeanceId marqu√©e comme pay√©e');
      
    } catch (e) {
      print('‚ùå Erreur paiement √©ch√©ance: $e');
      throw e;
    }
  }

  /// üìä Obtenir les √©ch√©ances d'un contrat
  static Future<List<Map<String, dynamic>>> getEcheancesContrat(String contratId) async {
    try {
      final snapshot = await _firestore
          .collection('echeances')
          .where('contratId', isEqualTo: contratId)
          .orderBy('numeroEcheance')
          .get();
      
      return snapshot.docs.map((doc) {
        final data = doc.data();
        data['id'] = doc.id;
        return data;
      }).toList();
      
    } catch (e) {
      print('‚ùå Erreur r√©cup√©ration √©ch√©ances: $e');
      return [];
    }
  }

  /// üîÑ V√©rifier les contrats proches de l'expiration
  static Future<void> checkExpiringContracts() async {
    try {
      final now = DateTime.now();
      final dans30Jours = now.add(const Duration(days: 30));
      
      final contratsExpirants = await _firestore
          .collection('contrats')
          .where('statut', isEqualTo: 'actif')
          .where('dateFin', isLessThanOrEqualTo: Timestamp.fromDate(dans30Jours))
          .where('dateFin', isGreaterThan: Timestamp.fromDate(now))
          .get();

      for (final doc in contratsExpirants.docs) {
        final data = doc.data();
        final dateFin = data['dateFin'].toDate();
        final joursRestants = dateFin.difference(now).inDays;
        
        await _sendExpirationReminder(doc.id, data, joursRestants);
      }
      
    } catch (e) {
      print('‚ùå Erreur v√©rification expirations: $e');
    }
  }

  /// üìÖ Envoyer un rappel d'expiration
  static Future<void> _sendExpirationReminder(String contratId, Map<String, dynamic> data, int joursRestants) async {
    try {
      final conducteurId = data['conducteurId'];
      final numeroContrat = data['numeroContrat'];
      
      // V√©rifier si le rappel n'a pas d√©j√† √©t√© envoy√©
      final existingNotification = await _firestore
          .collection('notifications')
          .where('conducteurId', isEqualTo: conducteurId)
          .where('contratId', isEqualTo: contratId)
          .where('type', isEqualTo: 'expiration_proche')
          .get();
      
      if (existingNotification.docs.isNotEmpty) return;
      
      await _firestore.collection('notifications').add({
        'conducteurId': conducteurId,
        'type': 'expiration_proche',
        'titre': 'Contrat expire bient√¥t',
        'message': 'Votre contrat $numeroContrat expire dans $joursRestants jour${joursRestants > 1 ? 's' : ''}. Pensez √† le renouveler pour continuer √† √™tre couvert.',
        'contratId': contratId,
        'joursRestants': joursRestants,
        'dateCreation': FieldValue.serverTimestamp(),
        'lu': false,
      });
      
      print('üìÖ Rappel d\'expiration envoy√© pour le contrat $contratId ($joursRestants jours)');
      
    } catch (e) {
      print('‚ùå Erreur rappel expiration: $e');
    }
  }
}
