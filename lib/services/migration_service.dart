import 'package:cloud_firestore/cloud_firestore.dart';import ';  static Future<Map<String, dynamic>> migrateAgencesToHierarchy(';      debugPrint('[MIGRATION] üîÑ Debut migration agences vers structure hierarchique';          .collection(';      if (agencesSnapshot.docs.isEmpty';          'success';          'message': 'Aucune agence a migrer';          ';          final agenceData = agenceDoc.data(';          final compagnieId = agenceData[';          if (compagnieId == null || compagnieId.isEmpty';            errors.add('Agence 'agenceId: compagnieId manquant';              .collection(';          if (!compagnieDoc.exists';            // Creer la compagnie si elle n';          // Copier l';              .collection(';              .doc(compagnieId';              .collection(';              .doc(agenceId';            'migrated_at: FieldValue.serverTimestamp(';            'migration_source': ';          }';          debugPrint('[MIGRATION] ‚úÖ Agence migree: $agenceId ‚Üí companies/$compagnieId/agencies/';        } catch (e';          errors.add('Erreur agence ${agenceDoc.id}:  + e.toString()';          debugPrint('[MIGRATION] ‚ùå Erreur migration agence ${agenceDoc.id}:  + e.toString()';      debugPrint('[MIGRATION] üéâ Migration terminee: $migratedCount migrees, 'errorCount erreurs';        'success';        'message': 'Migration terminee';        'migrated';        'errors';        ';    } catch (e';      debugPrint('[MIGRATION] ‚ùå Erreur migration globale:  + e.toString()';        'success';        'error: e.toString(';        'message': 'Erreur lors de la migration';  static Future<void> _createCompagnieFromAgence(String compagnieId, Map<String, dynamic> agenceData';      // Extraire le nom de la compagnie a partir de l';      String compagnieNom = compagnieId.replaceAll('-', ' ).toUpperCase(';      // Si on peut deduire le nom de l'agence, l';      if (agenceData['nom] != null';        final agenceNom = agenceData[';        if (agenceNom.toLowerCase(').contains('gat)';          compagnieNom = ';        } else if (agenceNom.toLowerCase(').contains('maghrebia)';          compagnieNom = ';        } else if (agenceNom.toLowerCase(').contains('star)';          compagnieNom = 'Star Assurance';        'id';        'nom';        'code: compagnieId.toUpperCase(').replaceAll('-', ';        'adresse': agenceData['adresse'] ?? ';        'telephone': agenceData['telephone'] ?? ';        'email': agenceData['email'] ?? ';        'status': 'actif';        'isActive';        'created_at: FieldValue.serverTimestamp(';        'created_by': 'migration_service';        'updated_at: FieldValue.serverTimestamp(';        'migration_source': 'auto_created_from_agency';        'stats';          'total_agences';          'total_agents';          'total_contrats';          'total_sinistres';          'chiffre_affaires';          .collection(';          .set(compagnieData';      debugPrint('[MIGRATION] üè¢ Compagnie creee: ';    } catch (e';      debugPrint(';  static Future<Map<String, dynamic>> migrateUsersHierarchy(';      debugPrint('[MIGRATION] üîÑ Debut migration utilisateurs';          .collection(';          final userData = userDoc.data(';          final role = userData[';          switch (role';            case 'admin_compagnie';              if (userData['compagnieId] == null';                // Essayer de deduire la compagnie a partir de l';                final email = userData[';                if (email != null';                  if (email.contains('gat)';                    updates['compagnieId'] = 'gat-assurance';                  } else if (email.contains('maghrebia)';                    updates['compagnieId'] = 'maghrebia-assurance';            case 'admin_agence';              // S'assurer que l';              if (userData['agenceId'] != null && userData['compagnieId] == null';                // Recuperer la compagnie a partir de l';                final agenceId = userData['agenceId';                    .collection(';                  final agenceData = agenceDoc.data(';                  updates['compagnieId'] = agenceData['compagnieId';            case 'agent';              // S'assurer que l';              if (userData['agenceId'] != null && userData['compagnieId] == null';                final agenceId = userData['agenceId';                    .collection(';                  final agenceData = agenceDoc.data(';                  updates['compagnieId'] = agenceData[';          if (updates.isNotEmpty';            updates['migrated_at] = FieldValue.serverTimestamp(';            updates['migration_version'] = '1.0';                .collection(';                .update(updates';            debugPrint('[MIGRATION] ‚úÖ Utilisateur migre: ';        } catch (e';          debugPrint('[MIGRATION] ‚ùå Erreur migration utilisateur ${userDoc.id}:  + e.toString()';      debugPrint('[MIGRATION] üéâ Migration utilisateurs terminee: $migratedCount migres, 'errorCount erreurs';        'success';        'message': 'Migration utilisateurs terminee';        'migrated';        ';    } catch (e';      debugPrint('[MIGRATION] ‚ùå Erreur migration utilisateurs:  + e.toString()';        'success';        'error: e.toString(';        'message': ';  static Future<Map<String, dynamic>> cleanupOldCollections(';      debugPrint('[MIGRATION] üßπ Debut nettoyage anciennes collections';          .collection(';        await doc.reference.delete(';      debugPrint('[MIGRATION] üßπ Nettoyage termine: 'deletedCount agences supprimees';        'success';        'message': 'Nettoyage termine';        ';    } catch (e';      debugPrint('[MIGRATION] ‚ùå Erreur nettoyage:  + e.toString()';        'success';        'error: e.toString(';        'message': 'Erreur lors du nettoyage';  static Future<Map<String, dynamic>> verifyMigration(';      debugPrint('[MIGRATION] ‚úÖ Verification integrite migration';      // Compter les agences dans l';          .collection(';          .get(';          .collection(';      for (final companyDoc in companiesSnapshot.docs';            .collection(';            .get(';        'old_structure_agences';        'new_structure_agences';        'migration_complete';        'companies_count';      debugPrint('[MIGRATION] ‚úÖ Verification: 'verification';        'success';        ';    } catch (e';      debugPrint('[MIGRATION] ‚ùå Erreur verification:  + e.toString()';        'success';        ';