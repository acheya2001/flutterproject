import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';import ';  }';      debugPrint('[AGENT_SERVICE] üë§ Creation agent: $prenom 'nom';      // Verifier que l'email n';          .collection('users';          .where(';      if (existingAgent.docs.isNotEmpty';          'success';          'error': 'Un agent avec cet email existe deja';          'message': ';      final tempPassword = _generateTempPassword(';      final agentId = 'agent_${agenceId}_{DateTime.now(').millisecondsSinceEpoch}';        'uid';        'email';        'nom';        'prenom';        'role': 'agent';        'compagnieId';        'agenceId';        'telephone';        'adresse': adresse ?? ';        'cin': cin ?? ';        'specialite': specialite ?? 'General';        'status': 'actif';        'isActive';        'isFirstLogin';        'passwordChangeRequired';        'created_at: FieldValue.serverTimestamp(';        'created_by': createdBy ?? 'admin_compagnie';        'updated_at: FieldValue.serverTimestamp(';        'password';        'temporaryPassword';        'motDePasseTemporaire';        'motDePasse';        'temp_password';        'generated_password';        'stats';          'total_constats';          'constats_ce_mois';          'derniere_activite: FieldValue.serverTimestamp(';          'performance_score';        'permissions';          'create_constat';          'view_own_constats';          'update_own_profile';          .collection(';          .set(agentData';      debugPrint('[AGENT_SERVICE] ‚úÖ Agent cree: 'agentId';        'success';        'agentId';        'email';        'password';        'message': 'Agent cree avec succes';        'displayCredentials';          'email';          'password';          'nom': '$prenom 'nom';          'role': ';    } catch (e';      debugPrint('[AGENT_SERVICE] ‚ùå Erreur creation:  + e.toString()';        'success';        'error: e.toString(';        'message': 'Erreur lors de la creation de l\'agent';  static Future<List<Map<String, dynamic>>> getAgentsByAgence(String agenceId';      debugPrint('[AGENT_SERVICE] üìã Recuperation agents agence: 'agenceId';          .collection('users';          .where('role', isEqualTo: 'agent';          .where(';        final data = doc.data(';        data[';        agents.add(data';      // Trier c√¥te client en attendant l';      agents.sort((a, b) => (a['nom'] ?? ').compareTo(b['nom'] ?? ')';      debugPrint('[AGENT_SERVICE] ‚úÖ ';    } catch (e';      debugPrint('[AGENT_SERVICE] ‚ùå Erreur recuperation:  + e.toString()';  /// üìã Recuperer tous les agents d';      debugPrint('[AGENT_SERVICE] üìã Recuperation agents compagnie: 'compagnieId';          .collection('users';          .where('role', isEqualTo: 'agent';          .where(';        final data = doc.data(';        data[';        agents.add(data';      // Trier c√¥te client en attendant l';      agents.sort((a, b) => (a['nom'] ?? ').compareTo(b['nom'] ?? ')';      debugPrint('[AGENT_SERVICE] ‚úÖ ';    } catch (e';      debugPrint(';  }';      debugPrint('[AGENT_SERVICE] ‚úèÔ∏è Modification agent: 'agentId';      updates['updated_at] = FieldValue.serverTimestamp(';          .collection(';          .update(updates';      debugPrint('[AGENT_SERVICE] ‚úÖ Agent modifie';        'success';        'message': ';    } catch (e';      debugPrint('[AGENT_SERVICE] ‚ùå Erreur modification:  + e.toString()';        'success';        'error: e.toString(';        'message': 'Erreur lors de la modification';  static Future<Map<String, dynamic>> resetAgentPassword(String agentId';      debugPrint('[AGENT_SERVICE] üîê Reset password agent: ';      final newPassword = _generateTempPassword(';          .collection(';          .doc(agentId';        'password';        'temporaryPassword';        'motDePasseTemporaire';        'motDePasse';        'temp_password';        'generated_password';        'passwordChangeRequired';        'isFirstLogin';        'password_reset_at: FieldValue.serverTimestamp(';        ';      }';      debugPrint('[AGENT_SERVICE] ‚úÖ Password reset';        'success';        'newPassword';        'message': ';    } catch (e';      debugPrint('[AGENT_SERVICE] ‚ùå Erreur reset password:  + e.toString()';        'success';        'error: e.toString(';        'message': ';  static Future<Map<String, dynamic>> deactivateAgent(String agentId';      debugPrint('[AGENT_SERVICE] üóëÔ∏è Desactivation agent: 'agentId';          .collection(';          .doc(agentId';        'status': 'inactif';        'isActive';        'deactivated_at: FieldValue.serverTimestamp(';        ';      }';      debugPrint('[AGENT_SERVICE] ‚úÖ Agent desactive';        'success';        'message': ';    } catch (e';      debugPrint('[AGENT_SERVICE] ‚ùå Erreur desactivation:  + e.toString()';        'success';        'error: e.toString(';        'message': 'Erreur lors de la desactivation';  static Future<Map<String, dynamic>> getAgentStats(String agentId';      debugPrint('[AGENT_SERVICE] üìä Stats agent: 'agentId';      // Compter les constats de l';          .collection('constats';          .where(';            final data = doc.data(';            final createdAt = data[';          }';        'total_constats';        'constats_ce_mois';        'derniere_activite: FieldValue.serverTimestamp(';        'performance_score: _calculatePerformanceScore(constatsSnapshot.docs.length, constatsThisMonth';      // Mettre a jour les stats dans l';          .collection(';          .doc(agentId';          .update({'stats: stats}';      debugPrint('[AGENT_SERVICE] ‚úÖ Stats calculees: ';    } catch (e';      debugPrint('[AGENT_SERVICE] ‚ùå Erreur stats:  + e.toString()';        'total_constats';        'constats_ce_mois';        'derniere_activite: DateTime.now().toIso8601String(';        ';  static String _generateTempPassword(';    const chars = ';  static int _calculatePerformanceScore(int totalConstats, int constatsThisMonth';    // Score base sur l';          .collection('users';          .where('role', isEqualTo: ';      if (compagnieId != null';        queryRef = queryRef.where(';      if (agenceId != null';        queryRef = queryRef.where(';      if (status != null && status.isNotEmpty';        queryRef = queryRef.where(';        final data = doc.data(';        data['id';            ''{data['prenom']} '{data['nom';    } catch (e';      debugPrint('[AGENT_SERVICE] ‚ùå Erreur recherche:  + e.toString()';  /// üë§ Recuperer les Admin Agence d';      debugPrint('[AGENT_MANAGEMENT] üë§ Recuperation Admin Agence pour compagnie: 'compagnieId';          .collection('users';          .where('compagnieId, isEqualTo: compagnieId';          .where('role', isEqualTo: 'admin_agence';          .where(';        final data = doc.data(';        data['id';        // Recuperer le nom de l';        if (data['agenceId] != null';                .collection(';                .doc(compagnieId';                .collection('agencies';                .doc(data[';            if (agenceDoc.exists';              data['agenceNom] = agenceDoc.data(')!['nom';              data['agenceVille] = agenceDoc.data(')![';          } catch (e';            debugPrint(';      adminAgences.sort((a, b';        ''{a['prenom']} '{a['nom']}'.compareTo(''{b['prenom']} '{b['nom']})';      debugPrint('[AGENT_MANAGEMENT] ‚úÖ ';    } catch (e';      debugPrint('[AGENT_MANAGEMENT] ‚ùå Erreur recuperation Admin Agence: ';