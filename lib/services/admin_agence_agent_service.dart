import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import 'dart:math';

/// üë• Service de gestion des agents pour Admin Agence
class AdminAgenceAgentService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// üë§ Cr√©er un nouvel agent
  static Future<Map<String, dynamic>> createAgent({
    required String agenceId,
    required String agenceNom,
    required String compagnieId,
    required String compagnieNom,
    required String prenom,
    required String nom,
    required String telephone,
    required String cin,
    String? email,
    String? adresse,
  }) async {
    try {
      debugPrint('[ADMIN_AGENCE_AGENT] üë§ Cr√©ation agent: $prenom $nom');

      // V√©rifier si le CIN existe d√©j√†
      final existingCinQuery = await _firestore
          .collection('users')
          .where('cin', isEqualTo: cin)
          .where('role', isEqualTo: 'agent')
          .get();

      if (existingCinQuery.docs.isNotEmpty) {
        return {
          'success': false,
          'error': 'Un agent avec ce CIN existe d√©j√†',
        };
      }

      // G√©n√©rer l'email si non fourni
      final finalEmail = email ?? _generateAgentEmail(prenom, nom, agenceNom);
      
      // V√©rifier si l'email existe d√©j√†
      final existingEmailQuery = await _firestore
          .collection('users')
          .where('email', isEqualTo: finalEmail)
          .get();

      if (existingEmailQuery.docs.isNotEmpty) {
        return {
          'success': false,
          'error': 'Un utilisateur avec cet email existe d√©j√†',
        };
      }

      // G√©n√©rer un mot de passe
      final password = _generatePassword();

      // G√©n√©rer un UID unique
      final uid = _generateUID();

      // G√©n√©rer un code agent
      final codeAgent = _generateAgentCode(agenceNom, prenom, nom);

      // Donn√©es de l'agent
      final agentData = {
        'uid': uid,
        'email': finalEmail,
        'password': password,
        'prenom': prenom,
        'nom': nom,
        'telephone': telephone,
        'cin': cin,
        'adresse': adresse ?? '',
        'codeAgent': codeAgent,
        'role': 'agent',
        'agenceId': agenceId,
        'agenceNom': agenceNom,
        'compagnieId': compagnieId,
        'compagnieNom': compagnieNom,
        'isActive': true,
        'status': 'actif',
        'firebaseAuthCreated': false,
        'nombreConstats': 0,
        'dernierConstAt': null,
        'created_at': FieldValue.serverTimestamp(),
        'createdBy': 'admin_agence',
        'origin': 'admin_agence_creation',
      };

      // Cr√©er l'agent dans Firestore
      await _firestore.collection('users').doc(uid).set(agentData);

      // Mettre √† jour le compteur d'agents dans l'agence
      await _firestore.collection('agences').doc(agenceId).update({
        'nombreAgents': FieldValue.increment(1),
        'updatedAt': FieldValue.serverTimestamp(),
      });

      debugPrint('[ADMIN_AGENCE_AGENT] ‚úÖ Agent cr√©√©: $finalEmail');

      return {
        'success': true,
        'email': finalEmail,
        'password': password,
        'agentId': uid,
        'codeAgent': codeAgent,
        'displayName': '$prenom $nom',
        'message': 'Agent cr√©√© avec succ√®s',
      };

    } catch (e) {
      debugPrint('[ADMIN_AGENCE_AGENT] ‚ùå Erreur cr√©ation agent: $e');
      return {
        'success': false,
        'error': e.toString(),
        'message': 'Erreur lors de la cr√©ation de l\'agent',
      };
    }
  }

  /// üìã R√©cup√©rer les agents d'une agence
  static Future<List<Map<String, dynamic>>> getAgentsByAgence(String agenceId) async {
    try {
      debugPrint('[ADMIN_AGENCE_AGENT] üìã R√©cup√©ration agents pour agence: $agenceId');

      final agentsQuery = await _firestore
          .collection('users')
          .where('role', isEqualTo: 'agent')
          .where('agenceId', isEqualTo: agenceId)
          .orderBy('created_at', descending: true)
          .get();

      final agents = agentsQuery.docs.map((doc) {
        final data = doc.data();
        data['id'] = doc.id;
        return data;
      }).toList();

      debugPrint('[ADMIN_AGENCE_AGENT] ‚úÖ ${agents.length} agents r√©cup√©r√©s');
      return agents;

    } catch (e) {
      debugPrint('[ADMIN_AGENCE_AGENT] ‚ùå Erreur r√©cup√©ration agents: $e');
      return [];
    }
  }

  /// ‚úèÔ∏è Modifier un agent
  static Future<Map<String, dynamic>> updateAgent({
    required String agentId,
    required String prenom,
    required String nom,
    required String telephone,
    required String cin,
    String? email,
    String? adresse,
  }) async {
    try {
      debugPrint('[ADMIN_AGENCE_AGENT] ‚úèÔ∏è Modification agent: $agentId');

      final updateData = {
        'prenom': prenom,
        'nom': nom,
        'telephone': telephone,
        'cin': cin,
        'adresse': adresse ?? '',
        'updatedAt': FieldValue.serverTimestamp(),
      };

      if (email != null && email.isNotEmpty) {
        updateData['email'] = email;
      }

      await _firestore.collection('users').doc(agentId).update(updateData);

      debugPrint('[ADMIN_AGENCE_AGENT] ‚úÖ Agent modifi√©: $agentId');

      return {
        'success': true,
        'message': 'Agent modifi√© avec succ√®s',
      };

    } catch (e) {
      debugPrint('[ADMIN_AGENCE_AGENT] ‚ùå Erreur modification agent: $e');
      return {
        'success': false,
        'error': e.toString(),
        'message': 'Erreur lors de la modification de l\'agent',
      };
    }
  }

  /// üîÑ Activer/D√©sactiver un agent
  static Future<Map<String, dynamic>> toggleAgentStatus(String agentId, bool isActive) async {
    try {
      await _firestore.collection('users').doc(agentId).update({
        'isActive': isActive,
        'status': isActive ? 'actif' : 'inactif',
        'updatedAt': FieldValue.serverTimestamp(),
      });

      return {
        'success': true,
        'message': isActive ? 'Agent activ√©' : 'Agent d√©sactiv√©',
      };

    } catch (e) {
      debugPrint('[ADMIN_AGENCE_AGENT] ‚ùå Erreur toggle agent: $e');
      return {
        'success': false,
        'error': e.toString(),
      };
    }
  }

  /// üîë R√©initialiser le mot de passe d'un agent
  static Future<Map<String, dynamic>> resetAgentPassword(String agentId) async {
    try {
      debugPrint('[ADMIN_AGENCE_AGENT] üîë R√©initialisation mot de passe: $agentId');

      // G√©n√©rer un nouveau mot de passe
      final newPassword = _generatePassword();

      await _firestore.collection('users').doc(agentId).update({
        'password': newPassword,
        'firebaseAuthCreated': false, // Forcer la recr√©ation du compte Firebase Auth
        'passwordResetAt': FieldValue.serverTimestamp(),
        'updatedAt': FieldValue.serverTimestamp(),
      });

      debugPrint('[ADMIN_AGENCE_AGENT] ‚úÖ Mot de passe r√©initialis√©: $agentId');

      return {
        'success': true,
        'newPassword': newPassword,
        'message': 'Mot de passe r√©initialis√© avec succ√®s',
      };

    } catch (e) {
      debugPrint('[ADMIN_AGENCE_AGENT] ‚ùå Erreur r√©initialisation: $e');
      return {
        'success': false,
        'error': e.toString(),
        'message': 'Erreur lors de la r√©initialisation du mot de passe',
      };
    }
  }

  /// üóëÔ∏è Supprimer un agent
  static Future<Map<String, dynamic>> deleteAgent(String agentId, String agenceId) async {
    try {
      debugPrint('[ADMIN_AGENCE_AGENT] üóëÔ∏è Suppression agent: $agentId');

      // Supprimer l'agent
      await _firestore.collection('users').doc(agentId).delete();

      // D√©cr√©menter le compteur d'agents dans l'agence
      await _firestore.collection('agences').doc(agenceId).update({
        'nombreAgents': FieldValue.increment(-1),
        'updatedAt': FieldValue.serverTimestamp(),
      });

      debugPrint('[ADMIN_AGENCE_AGENT] ‚úÖ Agent supprim√©: $agentId');

      return {
        'success': true,
        'message': 'Agent supprim√© avec succ√®s',
      };

    } catch (e) {
      debugPrint('[ADMIN_AGENCE_AGENT] ‚ùå Erreur suppression agent: $e');
      return {
        'success': false,
        'error': e.toString(),
        'message': 'Erreur lors de la suppression de l\'agent',
      };
    }
  }

  /// üìä R√©cup√©rer les statistiques d'une agence
  static Future<Map<String, dynamic>> getAgenceStats(String agenceId) async {
    try {
      debugPrint('[ADMIN_AGENCE_AGENT] üìä R√©cup√©ration stats agence: $agenceId');

      // Compter les agents
      final agentsQuery = await _firestore
          .collection('users')
          .where('role', isEqualTo: 'agent')
          .where('agenceId', isEqualTo: agenceId)
          .get();

      final agentsActifs = agentsQuery.docs.where((doc) => doc.data()['isActive'] == true).length;
      final agentsInactifs = agentsQuery.docs.length - agentsActifs;

      // Compter les constats
      final constatsQuery = await _firestore
          .collection('constats')
          .where('agenceId', isEqualTo: agenceId)
          .get();

      final constatsEnAttente = constatsQuery.docs.where((doc) => doc.data()['statut'] == 'en_attente').length;
      final constatsValides = constatsQuery.docs.where((doc) => doc.data()['statut'] == 'valide').length;

      final stats = {
        'totalAgents': agentsQuery.docs.length,
        'agentsActifs': agentsActifs,
        'agentsInactifs': agentsInactifs,
        'totalConstats': constatsQuery.docs.length,
        'constatsEnAttente': constatsEnAttente,
        'constatsValides': constatsValides,
      };

      debugPrint('[ADMIN_AGENCE_AGENT] ‚úÖ Stats r√©cup√©r√©es: $stats');
      return stats;

    } catch (e) {
      debugPrint('[ADMIN_AGENCE_AGENT] ‚ùå Erreur stats: $e');
      return {
        'totalAgents': 0,
        'agentsActifs': 0,
        'agentsInactifs': 0,
        'totalConstats': 0,
        'constatsEnAttente': 0,
        'constatsValides': 0,
      };
    }
  }

  // M√©thodes utilitaires priv√©es
  static String _generateAgentEmail(String prenom, String nom, String agenceNom) {
    final prenomClean = prenom.toLowerCase().replaceAll(' ', '');
    final nomClean = nom.toLowerCase().replaceAll(' ', '');
    final agenceClean = agenceNom.toLowerCase().replaceAll(' ', '').replaceAll('agence', '');
    return '$prenomClean.$nomClean.$agenceClean@agent.tn';
  }

  static String _generateAgentCode(String agenceNom, String prenom, String nom) {
    final agenceCode = agenceNom.substring(0, 3).toUpperCase();
    final prenomCode = prenom.substring(0, 2).toUpperCase();
    final nomCode = nom.substring(0, 2).toUpperCase();
    final random = Random().nextInt(999).toString().padLeft(3, '0');
    return '$agenceCode-$prenomCode$nomCode-$random';
  }

  static String _generatePassword() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    final random = Random();
    return String.fromCharCodes(Iterable.generate(
      12, (_) => chars.codeUnitAt(random.nextInt(chars.length))
    ));
  }

  static String _generateUID() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    final random = Random();
    return String.fromCharCodes(Iterable.generate(
      20, (_) => chars.codeUnitAt(random.nextInt(chars.length))
    ));
  }
}
