import 'package:cloud_firestore/cloud_firestore.dart';
import 'dart:math';

/// üî¢ Service de g√©n√©ration automatique des num√©ros de contrat
class ContractNumberService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// üìã G√©n√©rer un num√©ro de contrat automatiquement
  /// Format: [COMP_CODE][AGENCE_CODE][YYYY][MM][NNNNNN]
  /// Exemple: STAR_TUN_2024_01_000001
  static Future<String> generateContractNumber({
    required String compagnieId,
    required String agenceId,
    String? typeContrat,
  }) async {
    try {
      print('üî¢ [CONTRACT_NUMBER] G√©n√©ration pour compagnie: $compagnieId, agence: $agenceId');

      // 1. R√©cup√©rer les codes de la compagnie et de l'agence
      final compagnieCode = await _getCompagnieCode(compagnieId);
      final agenceCode = await _getAgenceCode(agenceId);
      
      // 2. G√©n√©rer les composants du num√©ro
      final year = DateTime.now().year.toString();
      final month = DateTime.now().month.toString().padLeft(2, '0');
      
      // 3. G√©n√©rer le num√©ro s√©quentiel pour cette compagnie/agence/ann√©e/mois
      final sequentialNumber = await _getNextSequentialNumber(
        compagnieId: compagnieId,
        agenceId: agenceId,
        year: year,
        month: month,
      );
      
      // 4. Construire le num√©ro final
      final contractNumber = '${compagnieCode}_${agenceCode}_${year}_${month}_${sequentialNumber}';
      
      print('‚úÖ [CONTRACT_NUMBER] Num√©ro g√©n√©r√©: $contractNumber');
      return contractNumber;
      
    } catch (e) {
      print('‚ùå [CONTRACT_NUMBER] Erreur g√©n√©ration: $e');
      // Fallback avec timestamp
      return _generateFallbackNumber(typeContrat);
    }
  }

  /// üè¢ R√©cup√©rer le code de la compagnie
  static Future<String> _getCompagnieCode(String compagnieId) async {
    try {
      // Essayer plusieurs collections possibles
      final collections = ['compagnies_assurance', 'compagnies', 'companies'];
      
      for (String collection in collections) {
        try {
          final doc = await _firestore.collection(collection).doc(compagnieId).get();
          if (doc.exists) {
            final data = doc.data()!;
            
            // Chercher le code dans diff√©rents champs possibles
            String? code = data['code'] ?? data['codeCompagnie'] ?? data['abbreviation'];
            
            if (code != null && code.isNotEmpty) {
              return code.toUpperCase().substring(0, 4.clamp(0, code.length)).padRight(4, 'X');
            }
            
            // G√©n√©rer un code √† partir du nom
            String nom = data['nom'] ?? data['name'] ?? data['nomCompagnie'] ?? 'COMP';
            return _generateCodeFromName(nom, 4);
          }
        } catch (e) {
          print('‚ö†Ô∏è [CONTRACT_NUMBER] Erreur collection $collection: $e');
        }
      }
      
      // Fallback: utiliser l'ID
      return compagnieId.substring(0, 4.clamp(0, compagnieId.length)).toUpperCase().padRight(4, 'X');
      
    } catch (e) {
      print('‚ùå [CONTRACT_NUMBER] Erreur r√©cup√©ration code compagnie: $e');
      return 'COMP';
    }
  }

  /// üè¢ R√©cup√©rer le code de l'agence
  static Future<String> _getAgenceCode(String agenceId) async {
    try {
      // Essayer plusieurs collections possibles
      final collections = ['agences_assurance', 'agences', 'agencies'];
      
      for (String collection in collections) {
        try {
          final doc = await _firestore.collection(collection).doc(agenceId).get();
          if (doc.exists) {
            final data = doc.data()!;
            
            // Chercher le code dans diff√©rents champs possibles
            String? code = data['code'] ?? data['codeAgence'] ?? data['abbreviation'];
            
            if (code != null && code.isNotEmpty) {
              return code.toUpperCase().substring(0, 3.clamp(0, code.length)).padRight(3, 'X');
            }
            
            // G√©n√©rer un code √† partir du nom
            String nom = data['nom'] ?? data['name'] ?? data['nomAgence'] ?? 'AGE';
            return _generateCodeFromName(nom, 3);
          }
        } catch (e) {
          print('‚ö†Ô∏è [CONTRACT_NUMBER] Erreur collection $collection: $e');
        }
      }
      
      // Fallback: utiliser l'ID
      return agenceId.substring(0, 3.clamp(0, agenceId.length)).toUpperCase().padRight(3, 'X');
      
    } catch (e) {
      print('‚ùå [CONTRACT_NUMBER] Erreur r√©cup√©ration code agence: $e');
      return 'AGE';
    }
  }

  /// üî¢ Obtenir le prochain num√©ro s√©quentiel
  static Future<String> _getNextSequentialNumber({
    required String compagnieId,
    required String agenceId,
    required String year,
    required String month,
  }) async {
    try {
      // Cr√©er un pr√©fixe unique pour cette p√©riode
      final prefix = '${compagnieId}_${agenceId}_${year}_${month}';
      
      // Compter les contrats existants pour cette p√©riode
      final startOfMonth = DateTime(int.parse(year), int.parse(month), 1);
      final endOfMonth = DateTime(int.parse(year), int.parse(month) + 1, 0, 23, 59, 59);
      
      final existingContracts = await _firestore
          .collection('contrats')
          .where('compagnieId', isEqualTo: compagnieId)
          .where('agenceId', isEqualTo: agenceId)
          .where('createdAt', isGreaterThanOrEqualTo: Timestamp.fromDate(startOfMonth))
          .where('createdAt', isLessThanOrEqualTo: Timestamp.fromDate(endOfMonth))
          .get();

      final nextNumber = existingContracts.docs.length + 1;
      return nextNumber.toString().padLeft(6, '0');
      
    } catch (e) {
      print('‚ùå [CONTRACT_NUMBER] Erreur num√©ro s√©quentiel: $e');
      // Fallback avec timestamp
      final timestamp = DateTime.now().millisecondsSinceEpoch;
      return (timestamp % 1000000).toString().padLeft(6, '0');
    }
  }

  /// üî§ G√©n√©rer un code √† partir d'un nom
  static String _generateCodeFromName(String name, int length) {
    // Nettoyer le nom
    String cleanName = name
        .toUpperCase()
        .replaceAll(RegExp(r'[^A-Z0-9]'), '')
        .replaceAll(' ', '');
    
    if (cleanName.isEmpty) {
      cleanName = 'CODE';
    }
    
    // Prendre les premi√®res lettres ou compl√©ter
    if (cleanName.length >= length) {
      return cleanName.substring(0, length);
    } else {
      return cleanName.padRight(length, 'X');
    }
  }

  /// üÜò G√©n√©rer un num√©ro de fallback
  static String _generateFallbackNumber(String? typeContrat) {
    final typeCode = typeContrat?.substring(0, 2.clamp(0, typeContrat.length)).toUpperCase() ?? 'CT';
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    final year = DateTime.now().year;
    final random = Random().nextInt(9999).toString().padLeft(4, '0');
    
    return '${typeCode}_${year}_${timestamp.toString().substring(timestamp.toString().length - 6)}_$random';
  }

  /// üîç V√©rifier l'unicit√© d'un num√©ro de contrat
  static Future<bool> isContractNumberUnique(String numeroContrat) async {
    try {
      final existingContract = await _firestore
          .collection('contrats')
          .where('numeroContrat', isEqualTo: numeroContrat)
          .limit(1)
          .get();
      
      return existingContract.docs.isEmpty;
    } catch (e) {
      print('‚ùå [CONTRACT_NUMBER] Erreur v√©rification unicit√©: $e');
      return false;
    }
  }

  /// üîÑ G√©n√©rer un num√©ro unique (avec retry si collision)
  static Future<String> generateUniqueContractNumber({
    required String compagnieId,
    required String agenceId,
    String? typeContrat,
    int maxRetries = 5,
  }) async {
    for (int attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        final numeroContrat = await generateContractNumber(
          compagnieId: compagnieId,
          agenceId: agenceId,
          typeContrat: typeContrat,
        );
        
        final isUnique = await isContractNumberUnique(numeroContrat);
        
        if (isUnique) {
          print('‚úÖ [CONTRACT_NUMBER] Num√©ro unique g√©n√©r√© (tentative $attempt): $numeroContrat');
          return numeroContrat;
        } else {
          print('‚ö†Ô∏è [CONTRACT_NUMBER] Collision d√©tect√©e (tentative $attempt): $numeroContrat');
        }
      } catch (e) {
        print('‚ùå [CONTRACT_NUMBER] Erreur tentative $attempt: $e');
      }
    }
    
    // Dernier recours: timestamp + random
    final timestamp = DateTime.now().millisecondsSinceEpoch;
    final random = Random().nextInt(99999);
    final fallback = 'CTR_${timestamp}_$random';
    
    print('üÜò [CONTRACT_NUMBER] Utilisation fallback: $fallback');
    return fallback;
  }

  /// üìä Obtenir des statistiques sur les num√©ros de contrat
  static Future<Map<String, dynamic>> getContractNumberStats({
    required String compagnieId,
    required String agenceId,
  }) async {
    try {
      final currentYear = DateTime.now().year;
      final currentMonth = DateTime.now().month;
      
      // Contrats ce mois-ci
      final thisMonthStart = DateTime(currentYear, currentMonth, 1);
      final thisMonthEnd = DateTime(currentYear, currentMonth + 1, 0, 23, 59, 59);
      
      final thisMonthContracts = await _firestore
          .collection('contrats')
          .where('compagnieId', isEqualTo: compagnieId)
          .where('agenceId', isEqualTo: agenceId)
          .where('createdAt', isGreaterThanOrEqualTo: Timestamp.fromDate(thisMonthStart))
          .where('createdAt', isLessThanOrEqualTo: Timestamp.fromDate(thisMonthEnd))
          .get();
      
      // Contrats cette ann√©e
      final thisYearStart = DateTime(currentYear, 1, 1);
      final thisYearEnd = DateTime(currentYear, 12, 31, 23, 59, 59);
      
      final thisYearContracts = await _firestore
          .collection('contrats')
          .where('compagnieId', isEqualTo: compagnieId)
          .where('agenceId', isEqualTo: agenceId)
          .where('createdAt', isGreaterThanOrEqualTo: Timestamp.fromDate(thisYearStart))
          .where('createdAt', isLessThanOrEqualTo: Timestamp.fromDate(thisYearEnd))
          .get();
      
      return {
        'contratsThisMonth': thisMonthContracts.docs.length,
        'contratsThisYear': thisYearContracts.docs.length,
        'nextMonthlyNumber': thisMonthContracts.docs.length + 1,
        'nextYearlyNumber': thisYearContracts.docs.length + 1,
      };
    } catch (e) {
      print('‚ùå [CONTRACT_NUMBER] Erreur statistiques: $e');
      return {
        'contratsThisMonth': 0,
        'contratsThisYear': 0,
        'nextMonthlyNumber': 1,
        'nextYearlyNumber': 1,
      };
    }
  }
}
