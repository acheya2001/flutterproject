import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';/// 🚨 Service de Fallback pour Creation d';  static Future<bool> ensureBasicAdminsExist(';      debugPrint('🔍 Verification existence admins...';          .collection('users';          .where('role', isEqualTo: ';      if (snapshot.docs.isNotEmpty';        debugPrint('✅ Admins deja presents';      debugPrint('⚠️ Aucun admin trouve - Creation d\';    } catch (e';      debugPrint('❌ Erreur verification admins:  + e.toString()';  /// 🚨 Creer les admins d';        'id': 'emergency_admin_star';        'email': 'admin.star@assurance.tn';        'compagnieId': 'star-assurance';        'compagnieNom': 'STAR Assurance';        'id': 'emergency_admin_comar';        'email': 'admin.comar@assurance.tn';        'compagnieId': 'comar-assurance';        'compagnieNom': ';    for (final admin in admins';          'uid': admin['id';          'email': admin['email';          'nom': 'Admin';          'prenom': admin['compagnieNom';          'role': 'admin_compagnie';          'status': 'actif';          'compagnieId': admin['compagnieId';          'compagnieNom': admin['compagnieNom';          'password': 'TempAdmin2024!';          'isLegitimate';          'isActive';          'created_by': 'emergency_fallback';          'created_at: FieldValue.serverTimestamp(';          'source': 'emergency_creation';          'permissions': ['read_company_data', 'manage_agents';            .collection('users';            .doc(admin[';            .set(adminData, SetOptions(merge: true)';        debugPrint('✅ Admin d\'urgence cree: '{admin['email';      } catch (e';        debugPrint('❌ Échec creation urgence '{admin['email']}:  + e.toString()';  /// 🔧 Forcer la creation manuelle (pour interface d';      final adminId = 'manual_{DateTime.now(').millisecondsSinceEpoch}';        'uid';        'email';        'nom': 'Admin';        'prenom';        'role': 'admin_compagnie';        'status': 'actif';        'compagnieId';        'compagnieNom';        'password': 'ManualAdmin2024!';        'isLegitimate';        'isActive';        'created_by': 'manual_force';        'created_at: FieldValue.serverTimestamp(';        'source': 'manual_creation';        'permissions': ['read_company_data', 'manage_agents';          .collection(';          .set(adminData';      debugPrint('✅ Admin force cree: ';    } catch (e';      debugPrint(';  static Future<Map<String, dynamic>> getAdminStatus(';          .collection('users';          .where('role', isEqualTo: ';        final data = doc.data(';          'id';          'email': data['email'] ?? 'Email inconnu';          'compagnieNom': data['compagnieNom'] ?? 'Compagnie inconnue';          'status': data['status'] ?? 'inconnu';          'created_by': data['created_by'] ?? 'inconnu';          'source': data['source'] ?? ';      }).toList(';        'total';        'admins';        ';    } catch (e';      debugPrint('❌ Erreur statut admins:  + e.toString()';        'total';        'admins';        'hasAdmins';        'error: e.toString(';  /// 🧹 Nettoyer les doublons d';          .collection('users';          .where('role', isEqualTo: ';        final email = doc.data(')[';            final bData = b.data(';            final aTime = aData?['created_at';            final bTime = bData?[';            await entry.value[i].reference.delete(';            debugPrint('🗑️ Doublon supprime: '{entry.key}';      debugPrint('🧹 Nettoyage termine: ';    } catch (e';      debugPrint('❌ Erreur nettoyage: ';