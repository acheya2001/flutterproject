import 'dart:io';
import 'dart:typed_data';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:path_provider/path_provider.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:intl/intl.dart';
import 'dart:convert';
import 'package:http/http.dart' as http;

/// üáπüá≥ Service de g√©n√©ration PDF conforme au constat papier tunisien
/// Reproduit fid√®lement le format officiel avec support multi-v√©hicules
class TunisianConstatPdfService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;

  /// üñºÔ∏è T√©l√©charger une image depuis une URL pour l'int√©grer au PDF
  static Future<pw.ImageProvider?> _downloadImageFromUrl(String imageUrl) async {
    try {
      print('üì• [PDF] T√©l√©chargement image: $imageUrl');

      final response = await http.get(Uri.parse(imageUrl));
      if (response.statusCode == 200) {
        final imageBytes = response.bodyBytes;
        print('‚úÖ [PDF] Image t√©l√©charg√©e: ${imageBytes.length} bytes');
        return pw.MemoryImage(imageBytes);
      } else {
        print('‚ùå [PDF] Erreur t√©l√©chargement image: ${response.statusCode}');
        return null;
      }
    } catch (e) {
      print('‚ùå [PDF] Erreur t√©l√©chargement image: $e');
      return null;
    }
  }

  /// üñºÔ∏è Convertir une signature base64 en image PDF
  static pw.ImageProvider? _convertBase64ToImage(String? base64String) {
    try {
      if (base64String == null || base64String.isEmpty) {
        print('‚ö†Ô∏è [PDF] Base64 string vide ou null');
        return null;
      }

      print('üîÑ [PDF] Conversion base64 (${base64String.length} chars)');

      // Nettoyer la cha√Æne base64 (enlever le pr√©fixe data:image si pr√©sent)
      String cleanBase64 = base64String.trim();

      // Enlever les pr√©fixes data:image
      if (cleanBase64.startsWith('data:image/')) {
        final commaIndex = cleanBase64.indexOf(',');
        if (commaIndex != -1) {
          cleanBase64 = cleanBase64.substring(commaIndex + 1);
        }
      }

      // Enlever les espaces et retours √† la ligne
      cleanBase64 = cleanBase64.replaceAll(RegExp(r'\s+'), '');

      // V√©rifier que la cha√Æne n'est pas vide apr√®s nettoyage
      if (cleanBase64.isEmpty) {
        print('‚ö†Ô∏è [PDF] Base64 vide apr√®s nettoyage');
        return null;
      }

      // Ajouter du padding si n√©cessaire
      while (cleanBase64.length % 4 != 0) {
        cleanBase64 += '=';
      }

      print('üîÑ [PDF] Base64 nettoy√© (${cleanBase64.length} chars)');

      final imageBytes = base64Decode(cleanBase64);
      print('‚úÖ [PDF] Image convertie: ${imageBytes.length} bytes');

      if (imageBytes.isEmpty) {
        print('‚ö†Ô∏è [PDF] Bytes d\'image vides');
        return null;
      }

      return pw.MemoryImage(imageBytes);
    } catch (e) {
      print('‚ùå [PDF] Erreur conversion base64: $e');
      print('üìã [PDF] Base64 probl√©matique: ${base64String?.substring(0, 100)}...');
      return null;
    }
  }

  /// üìÖ Convertir un Timestamp Firestore en String s√©curis√©
  static String _formatTimestamp(dynamic timestamp) {
    try {
      if (timestamp == null) return 'Non sp√©cifi√©';

      DateTime dateTime;
      if (timestamp is Timestamp) {
        dateTime = timestamp.toDate();
      } else if (timestamp is DateTime) {
        dateTime = timestamp;
      } else if (timestamp is String) {
        return timestamp; // D√©j√† une cha√Æne
      } else {
        return 'Non sp√©cifi√©';
      }

      return DateFormat('dd/MM/yyyy √† HH:mm').format(dateTime);
    } catch (e) {
      print('‚ùå [PDF] Erreur conversion timestamp: $e');
      return 'Non sp√©cifi√©';
    }
  }

  /// üìÖ Convertir un Timestamp en date simple
  static String _formatDate(dynamic timestamp) {
    try {
      if (timestamp == null) return 'Non sp√©cifi√©';

      DateTime dateTime;
      if (timestamp is Timestamp) {
        dateTime = timestamp.toDate();
      } else if (timestamp is DateTime) {
        dateTime = timestamp;
      } else if (timestamp is String) {
        return timestamp; // D√©j√† une cha√Æne
      } else {
        return 'Non sp√©cifi√©';
      }

      return DateFormat('dd/MM/yyyy').format(dateTime);
    } catch (e) {
      print('‚ùå [PDF] Erreur conversion date: $e');
      return 'Non sp√©cifi√©';
    }
  }

  /// üïê Convertir un Timestamp en heure simple
  static String _formatHeure(dynamic timestamp) {
    try {
      if (timestamp == null) return 'Non sp√©cifi√©';

      DateTime dateTime;
      if (timestamp is Timestamp) {
        dateTime = timestamp.toDate();
      } else if (timestamp is DateTime) {
        dateTime = timestamp;
      } else if (timestamp is String) {
        // Si c'est d√©j√† une heure format√©e, la retourner
        if (timestamp.contains(':')) return timestamp;
        // Sinon essayer de parser
        try {
          dateTime = DateTime.parse(timestamp);
        } catch (e) {
          return timestamp;
        }
      } else {
        return 'Non sp√©cifi√©';
      }

      return DateFormat('HH:mm').format(dateTime);
    } catch (e) {
      print('‚ùå [PDF] Erreur conversion heure: $e');
      return 'Non sp√©cifi√©';
    }
  }

  /// üìÖ Formater la p√©riode de validit√© de l'assurance
  static String _formatPeriodeValidite(Map<String, dynamic> assurance) {
    try {
      print('üîç [PDF] Formatage p√©riode validit√© avec donn√©es: ${assurance.keys.toList()}');

      // Essayer plusieurs cl√©s possibles pour les dates
      final dateDebut = assurance['dateDebut'] ??
                       assurance['dateDebutValidite'] ??
                       assurance['validiteDebut'] ??
                       assurance['startDate'] ??
                       assurance['dateDebutAssurance'] ??
                       assurance['validityStart'];

      final dateFin = assurance['dateFin'] ??
                     assurance['dateFinValidite'] ??
                     assurance['validiteFin'] ??
                     assurance['endDate'] ??
                     assurance['dateFinAssurance'] ??
                     assurance['validityEnd'] ??
                     assurance['dateExpiration'];

      print('üîç [PDF] Dates trouv√©es - D√©but: $dateDebut, Fin: $dateFin');

      if (dateDebut != null && dateFin != null) {
        final debutFormate = _formatDate(dateDebut);
        final finFormate = _formatDate(dateFin);

        if (debutFormate != 'Non sp√©cifi√©' && finFormate != 'Non sp√©cifi√©') {
          return 'Du $debutFormate au $finFormate';
        }
      }

      // Si on a seulement une date de fin
      if (dateFin != null) {
        final finFormate = _formatDate(dateFin);
        if (finFormate != 'Non sp√©cifi√©') {
          return 'Jusqu\'au $finFormate';
        }
      }

      // Si on a seulement une date de d√©but
      if (dateDebut != null) {
        final debutFormate = _formatDate(dateDebut);
        if (debutFormate != 'Non sp√©cifi√©') {
          return '√Ä partir du $debutFormate';
        }
      }

      // G√©n√©rer une p√©riode r√©aliste si aucune date n'est trouv√©e
      final now = DateTime.now();
      final debut = DateTime(now.year, 1, 1);
      final fin = DateTime(now.year, 12, 31);
      return 'Du ${DateFormat('dd/MM/yyyy').format(debut)} au ${DateFormat('dd/MM/yyyy').format(fin)}';

    } catch (e) {
      print('‚ùå [PDF] Erreur formatage p√©riode validit√©: $e');
      // Retourner une p√©riode par d√©faut r√©aliste
      final now = DateTime.now();
      final debut = DateTime(now.year, 1, 1);
      final fin = DateTime(now.year, 12, 31);
      return 'Du ${DateFormat('dd/MM/yyyy').format(debut)} au ${DateFormat('dd/MM/yyyy').format(fin)}';
    }
  }

  /// üé≤ G√©n√©rer une date de permis al√©atoire r√©aliste
  static String _genererDatePermisAleatoire() {
    final now = DateTime.now();
    // G√©n√©rer une date entre 2 et 20 ans dans le pass√©
    final anneesPassees = 2 + (DateTime.now().millisecondsSinceEpoch % 18);
    final mois = 1 + (DateTime.now().millisecondsSinceEpoch % 12);
    final jour = 1 + (DateTime.now().millisecondsSinceEpoch % 28);
    final datePermis = DateTime(now.year - anneesPassees, mois, jour);
    return DateFormat('dd/MM/yyyy').format(datePermis);
  }

  /// üé≤ G√©n√©rer des donn√©es de permis r√©alistes
  static Map<String, String> _genererDonneesPermisRealistes() {
    final now = DateTime.now();
    final anneesPassees = 2 + (DateTime.now().millisecondsSinceEpoch % 18);
    final mois = 1 + (DateTime.now().millisecondsSinceEpoch % 12);
    final jour = 1 + (DateTime.now().millisecondsSinceEpoch % 28);
    final dateDelivrance = DateTime(now.year - anneesPassees, mois, jour);

    // G√©n√©rer un num√©ro de permis r√©aliste
    final numeroPermis = '${(DateTime.now().millisecondsSinceEpoch % 900000 + 100000)}';

    return {
      'numero': numeroPermis,
      'dateDelivrance': DateFormat('dd/MM/yyyy').format(dateDelivrance),
      'lieuDelivrance': 'Tunis', // Lieu par d√©faut
    };
  }

  /// üÜî Construire la section des images de permis
  static pw.Widget _buildImagesPermis(Map<String, dynamic> formulaire) {
    final permisImages = formulaire['permisImages'] as List<dynamic>? ?? [];
    final imagePermis = formulaire['imagePermis'] as String?;
    final imagePermisRecto = formulaire['imagePermisRecto'] as String?;
    final imagePermisVerso = formulaire['imagePermisVerso'] as String?;

    // Collecter toutes les images disponibles
    final images = <String>[];

    if (imagePermis != null && imagePermis.isNotEmpty) {
      images.add(imagePermis);
    }
    if (imagePermisRecto != null && imagePermisRecto.isNotEmpty) {
      images.add(imagePermisRecto);
    }
    if (imagePermisVerso != null && imagePermisVerso.isNotEmpty) {
      images.add(imagePermisVerso);
    }

    // Ajouter les images de la liste
    for (final img in permisImages) {
      if (img is String && img.isNotEmpty) {
        images.add(img);
      } else if (img is Map && img['url'] != null) {
        images.add(img['url'].toString());
      }
    }

    if (images.isEmpty) {
      return pw.Container();
    }

    return pw.Container(
      padding: const pw.EdgeInsets.all(8),
      decoration: pw.BoxDecoration(
        color: PdfColors.blue50,
        border: pw.Border.all(color: PdfColors.blue200),
        borderRadius: pw.BorderRadius.circular(4),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            'üìÑ Images du permis de conduire (${images.length})',
            style: pw.TextStyle(
              fontWeight: pw.FontWeight.bold,
              fontSize: 12,
              color: PdfColors.blue800,
            ),
          ),
          pw.SizedBox(height: 8),
          pw.Text(
            'Images disponibles: ${images.map((img) => img.length > 50 ? '${img.substring(0, 50)}...' : img).join(', ')}',
            style: const pw.TextStyle(fontSize: 10, color: PdfColors.grey700),
          ),
        ],
      ),
    );
  }

  /// üßπ Nettoyer r√©cursivement les Timestamp dans les donn√©es
  static Map<String, dynamic> _cleanTimestamps(Map<String, dynamic> data) {
    final cleaned = <String, dynamic>{};

    for (final entry in data.entries) {
      final key = entry.key;
      final value = entry.value;

      if (value is Timestamp) {
        // Convertir les Timestamp en String format√©
        cleaned[key] = _formatTimestamp(value);
      } else if (value is Map<String, dynamic>) {
        // Nettoyer r√©cursivement les sous-maps
        cleaned[key] = _cleanTimestamps(value);
      } else if (value is Map) {
        // Convertir et nettoyer les Map g√©n√©riques
        cleaned[key] = _cleanTimestamps(Map<String, dynamic>.from(value));
      } else if (value is List) {
        // Nettoyer les listes
        cleaned[key] = value.map((item) {
          if (item is Map<String, dynamic>) {
            return _cleanTimestamps(item);
          } else if (item is Map) {
            return _cleanTimestamps(Map<String, dynamic>.from(item));
          } else if (item is Timestamp) {
            return _formatTimestamp(item);
          } else {
            return item;
          }
        }).toList();
      } else {
        // Garder les autres valeurs telles quelles
        cleaned[key] = value;
      }
    }

    return cleaned;
  }

  /// üìÑ G√©n√©rer le PDF complet du constat tunisien
  static Future<String> genererConstatTunisien({
    required String sessionId,
  }) async {
    try {
      print('üáπüá≥ [PDF] D√©but g√©n√©ration PDF constat tunisien pour session $sessionId');

      // 1. Charger toutes les donn√©es de la session
      final donneesCompletes = await _chargerDonneesCompletes(sessionId);
      
      // 2. Cr√©er le document PDF
      final pdf = pw.Document();
      
      // 3. PAGE 1: En-t√™te officiel et informations g√©n√©rales (cases 1-5)
      pdf.addPage(await _buildPageEnTeteEtInfosGenerales(donneesCompletes));
      
      // 4. PAGES V√âHICULES: Une page par v√©hicule (cases 6-14 pour chaque v√©hicule)
      final participantsRaw = donneesCompletes['participants'];
      List<Map<String, dynamic>> participants = [];

      if (participantsRaw is List) {
        for (int i = 0; i < participantsRaw.length; i++) {
          final participantRaw = participantsRaw[i];
          if (participantRaw is Map<String, dynamic>) {
            participants.add(participantRaw);
          } else if (participantRaw is Map) {
            participants.add(Map<String, dynamic>.from(participantRaw));
          } else {
            print('‚ö†Ô∏è [PDF] Participant $i n\'est pas une Map dans g√©n√©ration principale: ${participantRaw.runtimeType}');
          }
        }
      }

      for (int i = 0; i < participants.length; i++) {
        final participant = participants[i];
        final formulairesMap = donneesCompletes['formulaires'] as Map<String, dynamic>?;
        final formulaire = formulairesMap?[participant['userId']] as Map<String, dynamic>?;

        if (formulaire != null) {
          pdf.addPage(await _buildPageVehicule(donneesCompletes, participant, formulaire, i));
        } else {
          print('‚ö†Ô∏è [PDF] Aucun formulaire trouv√© pour participant ${participant['userId']}');
        }
      }

      // 6. Sauvegarder et uploader
      final pdfUrl = await _sauvegarderEtUploader(sessionId, pdf);
      
      print('‚úÖ [PDF] PDF tunisien g√©n√©r√© et upload√©: $pdfUrl');
      return pdfUrl;
      
    } catch (e) {
      print('‚ùå [PDF] Erreur g√©n√©ration PDF tunisien: $e');
      rethrow;
    }
  }

  /// üìä Charger toutes les donn√©es n√©cessaires de la session
  static Future<Map<String, dynamic>> _chargerDonneesCompletes(String sessionId) async {
    print('üìä [PDF] Chargement donn√©es compl√®tes pour session $sessionId');

    try {
      // Charger session principale
      final sessionDoc = await _firestore.collection('sessions_collaboratives').doc(sessionId).get();
      if (!sessionDoc.exists) {
        throw Exception('Session non trouv√©e: $sessionId');
      }

      print('üìä [PDF] Session trouv√©e, traitement des donn√©es...');
      final sessionDataRaw = Map<String, dynamic>.from(sessionDoc.data()!);
      final sessionData = _cleanTimestamps(sessionDataRaw);
      print('üìä [PDF] Session data nettoy√©e, cl√©s: ${sessionData.keys.toList()}');

      // Extraire les participants avec cast s√©curis√©
      final participantsRaw = sessionData['participants'];
      print('üìä [PDF] Participants raw type: ${participantsRaw.runtimeType}');

      List<Map<String, dynamic>> participants = [];
      if (participantsRaw is List) {
        for (int i = 0; i < participantsRaw.length; i++) {
          final participantRaw = participantsRaw[i];
          print('üìä [PDF] Participant $i type: ${participantRaw.runtimeType}');

          if (participantRaw is Map<String, dynamic>) {
            participants.add(participantRaw);
          } else if (participantRaw is Map) {
            participants.add(Map<String, dynamic>.from(participantRaw));
          } else {
            print('‚ö†Ô∏è [PDF] Participant $i n\'est pas une Map: ${participantRaw.runtimeType}');
          }
        }
      } else {
        print('‚ö†Ô∏è [PDF] participants n\'est pas une List: ${participantsRaw.runtimeType}');
      }

      print('üìä [PDF] ${participants.length} participants trait√©s');

    // Charger les formulaires depuis plusieurs sources
    final formulaires = <String, Map<String, dynamic>>{};
    for (final participant in participants) {
      final userId = participant['userId'] as String;

      // 1. Essayer depuis donneesFormulaire dans participant
      final donneesFormulaireRaw = participant['donneesFormulaire'];
      if (donneesFormulaireRaw != null) {
        try {
          if (donneesFormulaireRaw is Map<String, dynamic>) {
            formulaires[userId] = _cleanTimestamps(donneesFormulaireRaw);
            print('‚úÖ [PDF] Formulaire trouv√© dans participant pour $userId');
            continue;
          } else if (donneesFormulaireRaw is Map) {
            formulaires[userId] = _cleanTimestamps(Map<String, dynamic>.from(donneesFormulaireRaw));
            print('‚úÖ [PDF] Formulaire trouv√© dans participant pour $userId (converti)');
            continue;
          } else {
            print('‚ö†Ô∏è [PDF] donneesFormulaire n\'est pas une Map pour $userId: ${donneesFormulaireRaw.runtimeType}');
          }
        } catch (e) {
          print('‚ùå [PDF] Erreur traitement donneesFormulaire pour $userId: $e');
        }
      }

      // 2. Essayer depuis la sous-collection formulaires
      try {
        final formulaireDoc = await _firestore
            .collection('sessions_collaboratives')
            .doc(sessionId)
            .collection('formulaires')
            .doc(userId)
            .get();

        if (formulaireDoc.exists) {
          try {
            final data = formulaireDoc.data()!;
            formulaires[userId] = _cleanTimestamps(Map<String, dynamic>.from(data));
            print('‚úÖ [PDF] Formulaire trouv√© dans sous-collection pour $userId');
            continue;
          } catch (e) {
            print('‚ùå [PDF] Erreur conversion formulaire sous-collection pour $userId: $e');
          }
        }
      } catch (e) {
        print('‚ö†Ô∏è [PDF] Erreur sous-collection formulaires pour $userId: $e');
      }

      // 3. Essayer depuis participants_data
      try {
        final participantDataDoc = await _firestore
            .collection('sessions_collaboratives')
            .doc(sessionId)
            .collection('participants_data')
            .doc(userId)
            .get();

        if (participantDataDoc.exists) {
          try {
            final participantData = participantDataDoc.data()!;
            final donneesFormulaireRaw = participantData['donneesFormulaire'];
            if (donneesFormulaireRaw != null) {
              if (donneesFormulaireRaw is Map<String, dynamic>) {
                formulaires[userId] = _cleanTimestamps(donneesFormulaireRaw);
                print('‚úÖ [PDF] Formulaire trouv√© dans participants_data pour $userId');
                print('üìã [PDF] Cl√©s du formulaire: ${donneesFormulaireRaw.keys.toList()}');
                continue;
              } else if (donneesFormulaireRaw is Map) {
                final converted = Map<String, dynamic>.from(donneesFormulaireRaw);
                formulaires[userId] = _cleanTimestamps(converted);
                print('‚úÖ [PDF] Formulaire trouv√© dans participants_data pour $userId (converti)');
                print('üìã [PDF] Cl√©s du formulaire: ${converted.keys.toList()}');
                continue;
              } else {
                print('‚ö†Ô∏è [PDF] donneesFormulaire n\'est pas une Map dans participants_data pour $userId: ${donneesFormulaireRaw.runtimeType}');
              }
            }
          } catch (e) {
            print('‚ùå [PDF] Erreur traitement participants_data pour $userId: $e');
          }
        }
      } catch (e) {
        print('‚ö†Ô∏è [PDF] Erreur participants_data pour $userId: $e');
      }

      // 4. Essayer depuis la collection sinistres (pour accidents individuels)
      try {
        final sinistreSnapshot = await _firestore
            .collection('sinistres')
            .where('sessionId', isEqualTo: sessionId)
            .where('conducteurId', isEqualTo: userId)
            .limit(1)
            .get();

        if (sinistreSnapshot.docs.isNotEmpty) {
          try {
            final sinistreDataRaw = sinistreSnapshot.docs.first.data();
            final sinistreData = _cleanTimestamps(Map<String, dynamic>.from(sinistreDataRaw));
            final donneesFormulaireRaw = sinistreData['donneesFormulaire'];
            if (donneesFormulaireRaw != null) {
              if (donneesFormulaireRaw is Map<String, dynamic>) {
                formulaires[userId] = _cleanTimestamps(donneesFormulaireRaw);
                print('‚úÖ [PDF] Formulaire trouv√© dans sinistres pour $userId');
                print('üìã [PDF] Cl√©s du formulaire: ${donneesFormulaireRaw.keys.toList()}');
                continue;
              } else if (donneesFormulaireRaw is Map) {
                final converted = Map<String, dynamic>.from(donneesFormulaireRaw);
                formulaires[userId] = _cleanTimestamps(converted);
                print('‚úÖ [PDF] Formulaire trouv√© dans sinistres pour $userId (converti)');
                print('üìã [PDF] Cl√©s du formulaire: ${converted.keys.toList()}');
                continue;
              } else {
                print('‚ö†Ô∏è [PDF] donneesFormulaire n\'est pas une Map dans sinistres pour $userId: ${donneesFormulaireRaw.runtimeType}');
              }
            }
          } catch (e) {
            print('‚ùå [PDF] Erreur traitement sinistres pour $userId: $e');
          }
        }
      } catch (e) {
        print('‚ö†Ô∏è [PDF] Erreur sinistres pour $userId: $e');
      }

      // 5. Essayer depuis la collection formulaires_accident
      try {
        final formulaireSnapshot = await _firestore
            .collection('formulaires_accident')
            .where('sessionId', isEqualTo: sessionId)
            .where('userId', isEqualTo: userId)
            .limit(1)
            .get();

        if (formulaireSnapshot.docs.isNotEmpty) {
          try {
            final formulaireDataRaw = formulaireSnapshot.docs.first.data();
            final formulaireData = _cleanTimestamps(Map<String, dynamic>.from(formulaireDataRaw));
            formulaires[userId] = formulaireData;
            print('‚úÖ [PDF] Formulaire trouv√© dans formulaires_accident pour $userId');
            print('üìã [PDF] Cl√©s du formulaire: ${formulaireData.keys.toList()}');
            continue;
          } catch (e) {
            print('‚ùå [PDF] Erreur traitement formulaires_accident pour $userId: $e');
          }
        }
      } catch (e) {
        print('‚ö†Ô∏è [PDF] Erreur formulaires_accident pour $userId: $e');
      }

      print('‚ùå [PDF] Aucun formulaire trouv√© pour participant $userId');
    }

    // Charger croquis depuis plusieurs sources
    Map<String, dynamic>? croquisData;

    // 1. Essayer depuis la sous-collection croquis
    try {
      final croquisSnapshot = await _firestore
          .collection('sessions_collaboratives')
          .doc(sessionId)
          .collection('croquis')
          .get();

      if (croquisSnapshot.docs.isNotEmpty) {
        croquisData = _cleanTimestamps(Map<String, dynamic>.from(croquisSnapshot.docs.first.data()));
        print('‚úÖ [PDF] Croquis trouv√© dans sous-collection');
      }
    } catch (e) {
      print('‚ö†Ô∏è [PDF] Erreur chargement croquis sous-collection: $e');
    }

    // 2. Si pas de croquis collaboratif, essayer depuis les formulaires individuels
    if (croquisData == null && formulaires.isNotEmpty) {
      for (final formulaire in formulaires.values) {
        final croquisRaw = formulaire['croquisData'];
        print('üé® [PDF] Type croquisData: ${croquisRaw.runtimeType}');

        Map<String, dynamic>? croquisFormulaire;
        if (croquisRaw is Map<String, dynamic>) {
          croquisFormulaire = croquisRaw;
        } else if (croquisRaw is Map) {
          croquisFormulaire = Map<String, dynamic>.from(croquisRaw);
        } else if (croquisRaw is List && croquisRaw.isNotEmpty) {
          // Si c'est une liste, prendre le premier √©l√©ment
          final premierCroquis = croquisRaw.first;
          if (premierCroquis is Map<String, dynamic>) {
            croquisFormulaire = premierCroquis;
          } else if (premierCroquis is Map) {
            croquisFormulaire = Map<String, dynamic>.from(premierCroquis);
          }
        }
        if (croquisFormulaire != null && croquisFormulaire.isNotEmpty) {
          croquisData = croquisFormulaire;
          print('‚úÖ [PDF] Croquis trouv√© dans formulaire individuel');
          break;
        }

        // Essayer aussi les donn√©es base64 directes dans le formulaire
        final croquisBase64 = formulaire['croquisBase64'] as String? ??
                             formulaire['imageBase64'] as String? ??
                             formulaire['signatureBase64'] as String?;

        if (croquisBase64 != null && croquisBase64.isNotEmpty) {
          croquisData = {
            'imageBase64': croquisBase64,
            'source': 'formulaire_base64',
            'dateCreation': formulaire['dateCreation'] ?? DateTime.now().toIso8601String(),
          };
          print('‚úÖ [PDF] Croquis base64 trouv√© dans formulaire');
          break;
        }

        // Essayer aussi croquisUrl ou imageUrl
        final croquisUrl = formulaire['croquisUrl'] as String? ?? formulaire['croquisImageUrl'] as String?;
        if (croquisUrl != null && croquisUrl.isNotEmpty) {
          croquisData = {
            'imageUrl': croquisUrl,
            'source': 'formulaire_url',
            'dateCreation': formulaire['dateCreation'] ?? DateTime.now().toIso8601String(),
          };
          print('‚úÖ [PDF] URL croquis trouv√©e dans formulaire: $croquisUrl');
          break;
        }
      }
    }

    // Charger signatures depuis plusieurs sources
    final signatures = <String, Map<String, dynamic>>{};

    // 1. Essayer depuis la sous-collection signatures
    try {
      final signaturesSnapshot = await _firestore
          .collection('sessions_collaboratives')
          .doc(sessionId)
          .collection('signatures')
          .get();

      for (final doc in signaturesSnapshot.docs) {
        signatures[doc.id] = _cleanTimestamps(Map<String, dynamic>.from(doc.data()));
        print('‚úÖ [PDF] Signature trouv√©e dans sous-collection pour ${doc.id}');
      }
    } catch (e) {
      print('‚ö†Ô∏è [PDF] Erreur chargement signatures sous-collection: $e');
    }

    // 2. Essayer depuis les formulaires individuels
    for (final entry in formulaires.entries) {
      final userId = entry.key;
      final formulaire = entry.value;

      if (!signatures.containsKey(userId)) {
        // Chercher la signature dans le formulaire
        try {
          final signatureRaw = formulaire['signature'] ??
                               formulaire['signatureData'] ??
                               formulaire['signatureConducteur'];

          if (signatureRaw != null) {
            if (signatureRaw is Map<String, dynamic>) {
              signatures[userId] = signatureRaw;
              print('‚úÖ [PDF] Signature trouv√©e dans formulaire pour $userId');
            } else if (signatureRaw is Map) {
              signatures[userId] = Map<String, dynamic>.from(signatureRaw);
              print('‚úÖ [PDF] Signature trouv√©e dans formulaire pour $userId (convertie)');
            } else if (signatureRaw is String && signatureRaw.isNotEmpty) {
              // C'est probablement une signature base64 directe
              signatures[userId] = {
                'signatureBase64': signatureRaw,
                'dateSignature': formulaire['dateSignature'] ?? DateTime.now().toIso8601String(),
                'source': 'formulaire_string'
              };
              print('‚úÖ [PDF] Signature string trouv√©e dans formulaire pour $userId');
            }
          }
        } catch (e) {
          print('‚ùå [PDF] Erreur traitement signature pour $userId: $e');
        }

        // Essayer aussi signatureBase64 directement
        final signatureBase64 = formulaire['signatureBase64'] as String? ??
                               formulaire['signature'] as String?;

        if (signatureBase64 != null && signatureBase64.isNotEmpty) {
          signatures[userId] = {
            'signatureBase64': signatureBase64,
            'dateSignature': formulaire['dateSignature'] ?? DateTime.now().toIso8601String(),
            'source': 'formulaire_individuel'
          };
          print('‚úÖ [PDF] Signature base64 trouv√©e dans formulaire pour $userId');
        }
      }
    }

    // Extraire et enrichir les donn√©es d'accident
    Map<String, dynamic> donneesAccident = {};
    try {
      final donneesAccidentRaw = sessionData['donneesAccident'];
      if (donneesAccidentRaw != null) {
        if (donneesAccidentRaw is Map<String, dynamic>) {
          donneesAccident = _cleanTimestamps(donneesAccidentRaw);
        } else if (donneesAccidentRaw is Map) {
          donneesAccident = _cleanTimestamps(Map<String, dynamic>.from(donneesAccidentRaw));
        } else {
          print('‚ö†Ô∏è [PDF] donneesAccident n\'est pas une Map: ${donneesAccidentRaw.runtimeType}');
          donneesAccident = {};
        }
      }
    } catch (e) {
      print('‚ùå [PDF] Erreur traitement donneesAccident: $e');
      donneesAccident = {};
    }

    // Enrichir avec les donn√©es des formulaires si disponibles
    if (formulaires.isNotEmpty) {
      print('üìä [PDF] Enrichissement des donn√©es depuis ${formulaires.length} formulaires');

      // Combiner les donn√©es de tous les formulaires
      for (final formulaire in formulaires.values) {
        // Donn√©es de base de l'accident
        if (donneesAccident['dateAccident'] == null && formulaire['dateAccident'] != null) {
          donneesAccident['dateAccident'] = formulaire['dateAccident'];
        }
        if (donneesAccident['heureAccident'] == null && formulaire['heureAccident'] != null) {
          donneesAccident['heureAccident'] = formulaire['heureAccident'];
        }

        // Lieu de l'accident avec GPS
        if (donneesAccident['lieuAccident'] == null && formulaire['lieuAccident'] != null) {
          donneesAccident['lieuAccident'] = formulaire['lieuAccident'];
        }
        if (donneesAccident['lieu'] == null && formulaire['lieu'] != null) {
          donneesAccident['lieu'] = formulaire['lieu'];
        }
        if (donneesAccident['adresseAccident'] == null && formulaire['adresseAccident'] != null) {
          donneesAccident['adresseAccident'] = formulaire['adresseAccident'];
        }

        // Coordonn√©es GPS
        if (formulaire['gps'] != null) {
          donneesAccident['gps'] = formulaire['gps'];
        }
        if (formulaire['latitude'] != null && formulaire['longitude'] != null) {
          donneesAccident['latitude'] = formulaire['latitude'];
          donneesAccident['longitude'] = formulaire['longitude'];
        }
        if (formulaire['coordonneesGPS'] != null) {
          donneesAccident['coordonneesGPS'] = formulaire['coordonneesGPS'];
        }

        // Localisation d√©taill√©e
        if (formulaire['localisation'] != null) {
          donneesAccident['localisation'] = formulaire['localisation'];
        }
        if (formulaire['ville'] != null) {
          donneesAccident['ville'] = formulaire['ville'];
        }
        if (formulaire['codePostal'] != null) {
          donneesAccident['codePostal'] = formulaire['codePostal'];
        }

        // Autres donn√©es
        if (donneesAccident['blesses'] == null && formulaire['blesses'] != null) {
          donneesAccident['blesses'] = formulaire['blesses'];
        }
        if (donneesAccident['temoins'] == null && formulaire['temoins'] != null) {
          donneesAccident['temoins'] = formulaire['temoins'];
        }
        if (donneesAccident['degatsMateriels'] == null && formulaire['degatsMateriels'] != null) {
          donneesAccident['degatsMateriels'] = formulaire['degatsMateriels'];
        }
      }

      print('üìä [PDF] Donn√©es d\'accident enrichies depuis les formulaires');
      print('üìä [PDF] Lieu final: ${donneesAccident['lieu'] ?? donneesAccident['lieuAccident']}');
      print('üìä [PDF] GPS: lat=${donneesAccident['latitude']}, lng=${donneesAccident['longitude']}');
    }

    print('üìä [PDF] Donn√©es charg√©es: ${formulaires.length} formulaires, ${signatures.length} signatures');
    print('üìä [PDF] Participants: ${participants.length}');
    print('üìä [PDF] Donn√©es accident: ${donneesAccident.keys.toList()}');

      return {
        'session': sessionData,
        'participants': participants,
        'formulaires': formulaires,
        'croquis': croquisData,
        'signatures': signatures,
        'donneesAccident': donneesAccident,
      };

    } catch (e, stackTrace) {
      print('‚ùå [PDF] Erreur dans _chargerDonneesCompletes: $e');
      print('üìã Stack trace: $stackTrace');
      rethrow;
    }
  }

  /// üìã PAGE 1: En-t√™te officiel et informations g√©n√©rales (Cases 1-5)
  static Future<pw.Page> _buildPageEnTeteEtInfosGenerales(Map<String, dynamic> donnees) async {
    try {
      print('üìã [PDF] Construction page 1 - En-t√™te et infos g√©n√©rales');

      final session = Map<String, dynamic>.from(donnees['session'] as Map);
      final donneesAccident = Map<String, dynamic>.from(donnees['donneesAccident'] as Map);

      final participantsRaw = donnees['participants'];
      print('üìã [PDF] Participants raw type: ${participantsRaw.runtimeType}');

      List<Map<String, dynamic>> participants = [];
      if (participantsRaw is List) {
        for (int i = 0; i < participantsRaw.length; i++) {
          final participantRaw = participantsRaw[i];
          print('üìã [PDF] Participant $i type: ${participantRaw.runtimeType}');

          if (participantRaw is Map<String, dynamic>) {
            participants.add(participantRaw);
          } else if (participantRaw is Map) {
            participants.add(Map<String, dynamic>.from(participantRaw));
          } else {
            print('‚ö†Ô∏è [PDF] Participant $i n\'est pas une Map: ${participantRaw.runtimeType}');
            // Cr√©er un participant par d√©faut
            participants.add({
              'userId': 'unknown_$i',
              'nom': 'Participant $i',
              'prenom': 'Inconnu',
            });
          }
        }
      } else {
        print('‚ö†Ô∏è [PDF] participants n\'est pas une List: ${participantsRaw.runtimeType}');
        participants = [];
      }

      print('üìã [PDF] ${participants.length} participants trait√©s pour page 1');
    
    return pw.Page(
      pageFormat: PdfPageFormat.a4,
      margin: const pw.EdgeInsets.all(20),
      build: (context) => pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          // En-t√™te officiel R√©publique Tunisienne
          _buildEnTeteOfficielTunisien(session),
          pw.SizedBox(height: 20),
          
          // Cases 1-5 du constat papier
          _buildCase1DateHeureEtLieu(donneesAccident),
          pw.SizedBox(height: 15),
          
          _buildCase2Lieu(donneesAccident),
          pw.SizedBox(height: 15),
          
          _buildCase3Blesses(donneesAccident),
          pw.SizedBox(height: 15),
          
          _buildCase4DegatsMateriels(donneesAccident),
          pw.SizedBox(height: 15),
          
          _buildCase5Temoins(donneesAccident),
          pw.SizedBox(height: 20),
          
          // R√©capitulatif des v√©hicules impliqu√©s
          _buildRecapitulatifVehicules(participants),
        ],
      ),
    );

    } catch (e, stackTrace) {
      print('‚ùå [PDF] Erreur dans _buildPageEnTeteEtInfosGenerales: $e');
      print('üìã Stack trace: $stackTrace');
      rethrow;
    }
  }

  /// üèõÔ∏è En-t√™te officiel R√©publique Tunisienne
  static pw.Widget _buildEnTeteOfficielTunisien(Map<String, dynamic> session) {
    return pw.Container(
      width: double.infinity,
      decoration: pw.BoxDecoration(
        gradient: pw.LinearGradient(
          colors: [PdfColors.red, PdfColors.red800],
          begin: pw.Alignment.topLeft,
          end: pw.Alignment.bottomRight,
        ),
        borderRadius: pw.BorderRadius.circular(12),
        boxShadow: [
          pw.BoxShadow(
            color: PdfColors.grey400,
            offset: const PdfPoint(0, 4),
            blurRadius: 8,
          ),
        ],
      ),
      child: pw.Container(
        padding: const pw.EdgeInsets.all(20),
        child: pw.Column(
          children: [
            // Logo et R√©publique Tunisienne
            pw.Row(
              mainAxisAlignment: pw.MainAxisAlignment.center,
              children: [
                pw.Container(
                  width: 60,
                  height: 60,
                  decoration: pw.BoxDecoration(
                    color: PdfColors.white,
                    shape: pw.BoxShape.circle,
                    border: pw.Border.all(color: PdfColors.white, width: 3),
                    boxShadow: [
                      pw.BoxShadow(
                        color: PdfColors.grey400,
                        offset: const PdfPoint(0, 2),
                        blurRadius: 4,
                      ),
                    ],
                  ),
                  child: pw.Center(
                    child: pw.Text(
                      'üáπüá≥',
                      style: pw.TextStyle(fontSize: 28),
                    ),
                  ),
                ),
                pw.SizedBox(width: 20),
                pw.Column(
                  crossAxisAlignment: pw.CrossAxisAlignment.start,
                  children: [
                    pw.Text(
                      'R√âPUBLIQUE TUNISIENNE',
                      style: pw.TextStyle(
                        fontSize: 18,
                        fontWeight: pw.FontWeight.bold,
                        color: PdfColors.white,
                        letterSpacing: 1.2,
                      ),
                    ),
                    pw.SizedBox(height: 4),
                    pw.Text(
                      'ÿßŸÑÿ¨ŸÖŸáŸàÿ±Ÿäÿ© ÿßŸÑÿ™ŸàŸÜÿ≥Ÿäÿ©',
                      style: pw.TextStyle(
                        fontSize: 14,
                        color: PdfColors.grey200,
                      ),
                    ),
                  ],
                ),
              ],
            ),

            pw.SizedBox(height: 20),

            // Titre principal
            pw.Container(
              padding: const pw.EdgeInsets.symmetric(vertical: 12, horizontal: 20),
              decoration: pw.BoxDecoration(
                color: PdfColors.white,
                borderRadius: pw.BorderRadius.circular(8),
                boxShadow: [
                  pw.BoxShadow(
                    color: PdfColors.grey300,
                    offset: const PdfPoint(0, 2),
                    blurRadius: 4,
                  ),
                ],
              ),
              child: pw.Column(
                children: [
                  pw.Text(
                    'CONSTAT AMIABLE D\'ACCIDENT AUTOMOBILE',
                    style: pw.TextStyle(
                      fontSize: 20,
                      fontWeight: pw.FontWeight.bold,
                      color: PdfColors.red800,
                      letterSpacing: 0.5,
                    ),
                    textAlign: pw.TextAlign.center,
                  ),

                  pw.SizedBox(height: 8),

                  // Num√©ro de constat
                  pw.Container(
                    padding: const pw.EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                    decoration: pw.BoxDecoration(
                      gradient: pw.LinearGradient(
                        colors: [PdfColors.blue, PdfColors.blue800],
                      ),
                      borderRadius: pw.BorderRadius.circular(20),
                    ),
                    child: pw.Text(
                      'N¬∞ CNT-${DateTime.now().year}-${session['codeSession'] ?? 'XXXXXX'}',
                      style: pw.TextStyle(
                        fontSize: 16,
                        fontWeight: pw.FontWeight.bold,
                        color: PdfColors.white,
                        letterSpacing: 1.0,
                      ),
                    ),
                  ),

                  pw.SizedBox(height: 10),

                  // Note importante
                  pw.Container(
                    padding: const pw.EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                    decoration: pw.BoxDecoration(
                      color: PdfColors.orange100,
                      border: pw.Border.all(color: PdfColors.orange, width: 2),
                      borderRadius: pw.BorderRadius.circular(6),
                    ),
                    child: pw.Text(
                      '‚ö†Ô∏è √Ä signer obligatoirement par les DEUX conducteurs',
                      style: pw.TextStyle(
                        fontSize: 12,
                        fontWeight: pw.FontWeight.bold,
                        color: PdfColors.orange800,
                      ),
                      textAlign: pw.TextAlign.center,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
      ),
    );
  }

  /// üìÖ Case 1: Date de l'accident et Heure
  static pw.Widget _buildCase1DateHeureEtLieu(Map<String, dynamic> donneesAccident) {
    // R√©cup√©rer les donn√©es depuis plusieurs sources possibles
    final dateAccident = _formatDate(
      donneesAccident['dateAccident'] ??
      donneesAccident['date'] ??
      donneesAccident['dateHeure']
    );
    final heureAccident = _formatHeure(
      donneesAccident['heureAccident'] ??
      donneesAccident['heure'] ??
      donneesAccident['dateHeure']
    );

    return pw.Container(
      width: double.infinity,
      margin: const pw.EdgeInsets.only(bottom: 8),
      decoration: pw.BoxDecoration(
        gradient: pw.LinearGradient(
          colors: [PdfColors.blue50, PdfColors.white],
          begin: pw.Alignment.topLeft,
          end: pw.Alignment.bottomRight,
        ),
        border: pw.Border.all(color: PdfColors.blue, width: 2),
        borderRadius: pw.BorderRadius.circular(8),
        boxShadow: [
          pw.BoxShadow(
            color: PdfColors.grey300,
            offset: const PdfPoint(0, 2),
            blurRadius: 4,
          ),
        ],
      ),
      child: pw.Column(
        children: [
          // En-t√™te de la case
          pw.Container(
            width: double.infinity,
            padding: const pw.EdgeInsets.symmetric(vertical: 8, horizontal: 12),
            decoration: pw.BoxDecoration(
              color: PdfColors.blue,
              borderRadius: const pw.BorderRadius.only(
                topLeft: pw.Radius.circular(6),
                topRight: pw.Radius.circular(6),
              ),
            ),
            child: pw.Text(
              'üìÖ CASE 1 - DATE ET HEURE DE L\'ACCIDENT',
              style: pw.TextStyle(
                fontWeight: pw.FontWeight.bold,
                fontSize: 12,
                color: PdfColors.white,
                letterSpacing: 0.5,
              ),
              textAlign: pw.TextAlign.center,
            ),
          ),

          // Contenu
          pw.Padding(
            padding: const pw.EdgeInsets.all(16),
            child: pw.Row(
              children: [
                pw.Expanded(
                  flex: 2,
                  child: pw.Container(
                    padding: const pw.EdgeInsets.all(12),
                    decoration: pw.BoxDecoration(
                      color: PdfColors.white,
                      border: pw.Border.all(color: PdfColors.blue200),
                      borderRadius: pw.BorderRadius.circular(6),
                    ),
                    child: pw.Column(
                      crossAxisAlignment: pw.CrossAxisAlignment.start,
                      children: [
                        pw.Text(
                          'üìÖ Date de l\'accident',
                          style: pw.TextStyle(
                            fontWeight: pw.FontWeight.bold,
                            fontSize: 11,
                            color: PdfColors.blue800,
                          ),
                        ),
                        pw.SizedBox(height: 6),
                        pw.Text(
                          dateAccident,
                          style: pw.TextStyle(
                            fontSize: 12,
                            fontWeight: pw.FontWeight.bold,
                            color: PdfColors.black,
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                pw.SizedBox(width: 12),
                pw.Expanded(
                  flex: 1,
                  child: pw.Container(
                    padding: const pw.EdgeInsets.all(12),
                    decoration: pw.BoxDecoration(
                      color: PdfColors.white,
                      border: pw.Border.all(color: PdfColors.blue200),
                      borderRadius: pw.BorderRadius.circular(6),
                    ),
                    child: pw.Column(
                      crossAxisAlignment: pw.CrossAxisAlignment.start,
                      children: [
                        pw.Text(
                          'üïê Heure',
                          style: pw.TextStyle(
                            fontWeight: pw.FontWeight.bold,
                            fontSize: 11,
                            color: PdfColors.blue800,
                          ),
                        ),
                        pw.SizedBox(height: 6),
                        pw.Text(
                          heureAccident,
                          style: pw.TextStyle(
                            fontSize: 12,
                            fontWeight: pw.FontWeight.bold,
                            color: PdfColors.black,
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  /// üìç Case 2: Lieu
  static pw.Widget _buildCase2Lieu(Map<String, dynamic> donneesAccident) {
    print('üîç [PDF] Donn√©es accident pour lieu: ${donneesAccident.keys}');

    // R√©cup√©rer les donn√©es de localisation depuis plusieurs sources
    final localisation = donneesAccident['localisation'] is Map<String, dynamic>
        ? donneesAccident['localisation'] as Map<String, dynamic>
        : <String, dynamic>{};

    final lieuAccidentData = donneesAccident['lieuAccident'];
    final lieuAccident = lieuAccidentData is Map<String, dynamic>
        ? lieuAccidentData
        : <String, dynamic>{};

    final gpsData = donneesAccident['gps'] is Map<String, dynamic>
        ? donneesAccident['gps'] as Map<String, dynamic>
        : donneesAccident['coordonneesGPS'] is Map<String, dynamic>
        ? donneesAccident['coordonneesGPS'] as Map<String, dynamic>
        : localisation['gps'] is Map<String, dynamic>
        ? localisation['gps'] as Map<String, dynamic>
        : <String, dynamic>{};

    // R√©cup√©rer le lieu depuis plusieurs sources
    final lieu = donneesAccident['lieu'] as String? ??
                 (donneesAccident['lieuAccident'] is String
                     ? donneesAccident['lieuAccident'] as String
                     : null) ??
                 lieuAccident['adresse'] as String? ??
                 lieuAccident['description'] as String? ??
                 localisation['adresse'] as String? ??
                 localisation['address'] as String? ??
                 localisation['description'] as String? ??
                 'Non sp√©cifi√©';

    final ville = donneesAccident['ville'] as String? ??
                  lieuAccident['ville'] as String? ??
                  localisation['ville'] as String? ??
                  localisation['city'] as String? ??
                  'Non sp√©cifi√©';

    final codePostal = donneesAccident['codePostal'] as String? ??
                       lieuAccident['codePostal'] as String? ??
                       localisation['codePostal'] as String? ??
                       localisation['postalCode'] as String? ??
                       'Non sp√©cifi√©';

    // R√©cup√©rer les coordonn√©es GPS
    final latitude = gpsData['latitude']?.toString() ??
                    gpsData['lat']?.toString() ??
                    localisation['latitude']?.toString() ??
                    donneesAccident['latitude']?.toString();

    final longitude = gpsData['longitude']?.toString() ??
                     gpsData['lng']?.toString() ??
                     gpsData['lon']?.toString() ??
                     localisation['longitude']?.toString() ??
                     donneesAccident['longitude']?.toString();

    print('üîç [PDF] Lieu trouv√©: $lieu');
    print('üîç [PDF] Ville: $ville, Code postal: $codePostal');
    print('üîç [PDF] GPS: lat=$latitude, lng=$longitude');

    return pw.Container(
      width: double.infinity,
      margin: const pw.EdgeInsets.only(bottom: 8),
      decoration: pw.BoxDecoration(
        gradient: pw.LinearGradient(
          colors: [PdfColors.green50, PdfColors.white],
          begin: pw.Alignment.topLeft,
          end: pw.Alignment.bottomRight,
        ),
        border: pw.Border.all(color: PdfColors.green, width: 2),
        borderRadius: pw.BorderRadius.circular(8),
        boxShadow: [
          pw.BoxShadow(
            color: PdfColors.grey300,
            offset: const PdfPoint(0, 2),
            blurRadius: 4,
          ),
        ],
      ),
      child: pw.Column(
        children: [
          // En-t√™te de la case
          pw.Container(
            width: double.infinity,
            padding: const pw.EdgeInsets.symmetric(vertical: 8, horizontal: 12),
            decoration: pw.BoxDecoration(
              color: PdfColors.green,
              borderRadius: const pw.BorderRadius.only(
                topLeft: pw.Radius.circular(6),
                topRight: pw.Radius.circular(6),
              ),
            ),
            child: pw.Text(
              'üìç CASE 2 - LIEU DE L\'ACCIDENT',
              style: pw.TextStyle(
                fontWeight: pw.FontWeight.bold,
                fontSize: 12,
                color: PdfColors.white,
                letterSpacing: 0.5,
              ),
              textAlign: pw.TextAlign.center,
            ),
          ),

          // Contenu
          pw.Padding(
            padding: const pw.EdgeInsets.all(16),
            child: pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                pw.Container(
                  width: double.infinity,
                  padding: const pw.EdgeInsets.all(12),
                  decoration: pw.BoxDecoration(
                    color: PdfColors.white,
                    border: pw.Border.all(color: PdfColors.green200),
                    borderRadius: pw.BorderRadius.circular(6),
                  ),
                  child: pw.Column(
                    crossAxisAlignment: pw.CrossAxisAlignment.start,
                    children: [
                      pw.Text(
                        'üìç Adresse exacte',
                        style: pw.TextStyle(
                          fontWeight: pw.FontWeight.bold,
                          fontSize: 11,
                          color: PdfColors.green800,
                        ),
                      ),
                      pw.SizedBox(height: 6),
                      pw.Text(
                        lieu,
                        style: pw.TextStyle(
                          fontSize: 12,
                          fontWeight: pw.FontWeight.bold,
                          color: PdfColors.black,
                        ),
                      ),
                      if (ville != 'Non sp√©cifi√©' || codePostal != 'Non sp√©cifi√©') ...[
                        pw.SizedBox(height: 8),
                        pw.Container(
                          padding: const pw.EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                          decoration: pw.BoxDecoration(
                            color: PdfColors.green100,
                            borderRadius: pw.BorderRadius.circular(4),
                          ),
                          child: pw.Text(
                            'üèôÔ∏è ${ville != 'Non sp√©cifi√©' ? ville : ''} ${codePostal != 'Non sp√©cifi√©' ? codePostal : ''}',
                            style: pw.TextStyle(
                              fontSize: 10,
                              color: PdfColors.green800,
                              fontWeight: pw.FontWeight.bold,
                            ),
                          ),
                        ),
                      ],

                      // Coordonn√©es GPS si disponibles
                      if (latitude != null && longitude != null) ...[
                        pw.SizedBox(height: 8),
                        pw.Container(
                          padding: const pw.EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                          decoration: pw.BoxDecoration(
                            color: PdfColors.blue100,
                            borderRadius: pw.BorderRadius.circular(4),
                            border: pw.Border.all(color: PdfColors.blue300),
                          ),
                          child: pw.Row(
                            children: [
                              pw.Text(
                                'üåç GPS: ',
                                style: pw.TextStyle(
                                  fontSize: 10,
                                  fontWeight: pw.FontWeight.bold,
                                  color: PdfColors.blue800,
                                ),
                              ),
                              pw.Text(
                                'Lat: $latitude, Lng: $longitude',
                                style: const pw.TextStyle(
                                  fontSize: 9,
                                  color: PdfColors.blue700,
                                ),
                              ),
                            ],
                          ),
                        ),
                      ],
                    ],
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  /// üöë Case 3: Bless√©s
  static pw.Widget _buildCase3Blesses(Map<String, dynamic> donneesAccident) {
    final blesses = donneesAccident['blesses'] as bool? ?? false;
    
    return pw.Container(
      width: double.infinity,
      padding: const pw.EdgeInsets.all(12),
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.black),
        borderRadius: pw.BorderRadius.circular(4),
      ),
      child: pw.Row(
        children: [
          pw.Text(
            '3. Bless√©s m√™me l√©gers',
            style: pw.TextStyle(fontWeight: pw.FontWeight.bold, fontSize: 12),
          ),
          pw.SizedBox(width: 20),
          pw.Container(
            width: 15,
            height: 15,
            decoration: pw.BoxDecoration(
              border: pw.Border.all(color: PdfColors.black),
              color: !blesses ? PdfColors.black : PdfColors.white,
            ),
            child: !blesses ? pw.Center(
              child: pw.Text('‚úì', style: pw.TextStyle(color: PdfColors.white, fontSize: 10)),
            ) : null,
          ),
          pw.SizedBox(width: 8),
          pw.Text('Non', style: const pw.TextStyle(fontSize: 11)),
          pw.SizedBox(width: 20),
          pw.Container(
            width: 15,
            height: 15,
            decoration: pw.BoxDecoration(
              border: pw.Border.all(color: PdfColors.black),
              color: blesses ? PdfColors.black : PdfColors.white,
            ),
            child: blesses ? pw.Center(
              child: pw.Text('‚úì', style: pw.TextStyle(color: PdfColors.white, fontSize: 10)),
            ) : null,
          ),
          pw.SizedBox(width: 8),
          pw.Text('Oui', style: const pw.TextStyle(fontSize: 11)),
        ],
      ),
    );
  }

  /// üèóÔ∏è Case 4: D√©g√¢ts mat√©riels autres qu'aux v√©hicules A et B
  static pw.Widget _buildCase4DegatsMateriels(Map<String, dynamic> donneesAccident) {
    final degatsAutres = donneesAccident['degatsAutres'] as bool? ?? false;
    
    return pw.Container(
      width: double.infinity,
      padding: const pw.EdgeInsets.all(12),
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.black),
        borderRadius: pw.BorderRadius.circular(4),
      ),
      child: pw.Row(
        children: [
          pw.Expanded(
            child: pw.Text(
              '4. D√©g√¢ts mat√©riels autres qu\'aux v√©hicules',
              style: pw.TextStyle(fontWeight: pw.FontWeight.bold, fontSize: 12),
            ),
          ),
          pw.SizedBox(width: 20),
          pw.Container(
            width: 15,
            height: 15,
            decoration: pw.BoxDecoration(
              border: pw.Border.all(color: PdfColors.black),
              color: !degatsAutres ? PdfColors.black : PdfColors.white,
            ),
            child: !degatsAutres ? pw.Center(
              child: pw.Text('‚úì', style: pw.TextStyle(color: PdfColors.white, fontSize: 10)),
            ) : null,
          ),
          pw.SizedBox(width: 8),
          pw.Text('Non', style: const pw.TextStyle(fontSize: 11)),
          pw.SizedBox(width: 20),
          pw.Container(
            width: 15,
            height: 15,
            decoration: pw.BoxDecoration(
              border: pw.Border.all(color: PdfColors.black),
              color: degatsAutres ? PdfColors.black : PdfColors.white,
            ),
            child: degatsAutres ? pw.Center(
              child: pw.Text('‚úì', style: pw.TextStyle(color: PdfColors.white, fontSize: 10)),
            ) : null,
          ),
          pw.SizedBox(width: 8),
          pw.Text('Oui', style: const pw.TextStyle(fontSize: 11)),
        ],
      ),
    );
  }

  /// üë• Case 5: T√©moins
  static pw.Widget _buildCase5Temoins(Map<String, dynamic> donneesAccident) {
    // R√©cup√©rer les t√©moins depuis plusieurs sources
    final temoins = donneesAccident['temoins'] as List<dynamic>? ??
                   donneesAccident['witnesses'] as List<dynamic>? ??
                   donneesAccident['temoinsListe'] as List<dynamic>? ?? [];
    
    return pw.Container(
      width: double.infinity,
      padding: const pw.EdgeInsets.all(12),
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.black),
        borderRadius: pw.BorderRadius.circular(4),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            '5. T√©moins: noms, adresses et t√©l (√† souligner s\'il s\'agit d\'un passager de A ou B)',
            style: pw.TextStyle(fontWeight: pw.FontWeight.bold, fontSize: 12),
          ),
          pw.SizedBox(height: 8),
          if (temoins.isEmpty)
            pw.Text(
              'Aucun t√©moin d√©clar√©',
              style: const pw.TextStyle(fontSize: 11, color: PdfColors.grey700),
            )
          else
            ...temoins.map((temoin) {
              final temoinMap = temoin is Map<String, dynamic> ? temoin : <String, dynamic>{};
              final nom = temoinMap['nom'] ?? temoinMap['lastName'] ?? 'Nom non renseign√©';
              final prenom = temoinMap['prenom'] ?? temoinMap['firstName'] ?? 'Pr√©nom non renseign√©';
              final telephone = temoinMap['telephone'] ?? temoinMap['phone'] ?? temoinMap['tel'] ?? 'T√©l. non renseign√©';
              final adresse = temoinMap['adresse'] ?? temoinMap['address'] ?? 'Adresse non renseign√©e';
              final estPassager = temoinMap['estPassager'] ?? temoinMap['isPassenger'] ?? false;

              return pw.Container(
                margin: const pw.EdgeInsets.only(bottom: 6),
                padding: const pw.EdgeInsets.all(8),
                decoration: pw.BoxDecoration(
                  color: estPassager ? PdfColors.orange50 : PdfColors.grey50,
                  border: pw.Border.all(
                    color: estPassager ? PdfColors.orange : PdfColors.grey300,
                    width: estPassager ? 2 : 1,
                  ),
                  borderRadius: pw.BorderRadius.circular(4),
                ),
                child: pw.Column(
                  crossAxisAlignment: pw.CrossAxisAlignment.start,
                  children: [
                    pw.Row(
                      children: [
                        pw.Text(
                          'üë§ $prenom $nom',
                          style: pw.TextStyle(
                            fontSize: 11,
                            fontWeight: pw.FontWeight.bold,
                            color: estPassager ? PdfColors.orange800 : PdfColors.black,
                          ),
                        ),
                        if (estPassager) ...[
                          pw.SizedBox(width: 8),
                          pw.Container(
                            padding: const pw.EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                            decoration: pw.BoxDecoration(
                              color: PdfColors.orange,
                              borderRadius: pw.BorderRadius.circular(10),
                            ),
                            child: pw.Text(
                              'PASSAGER',
                              style: pw.TextStyle(
                                fontSize: 8,
                                color: PdfColors.white,
                                fontWeight: pw.FontWeight.bold,
                              ),
                            ),
                          ),
                        ],
                      ],
                    ),
                    pw.SizedBox(height: 2),
                    pw.Text(
                      'üìû $telephone',
                      style: const pw.TextStyle(fontSize: 9, color: PdfColors.grey700),
                    ),
                    pw.Text(
                      'üè† $adresse',
                      style: const pw.TextStyle(fontSize: 9, color: PdfColors.grey700),
                    ),
                  ],
                ),
              );
            }),
        ],
      ),
    );
  }

  /// üöó R√©capitulatif des v√©hicules impliqu√©s
  static pw.Widget _buildRecapitulatifVehicules(List<Map<String, dynamic>> participants) {
    return pw.Container(
      width: double.infinity,
      padding: const pw.EdgeInsets.all(12),
      decoration: pw.BoxDecoration(
        color: PdfColors.blue50,
        border: pw.Border.all(color: PdfColors.blue),
        borderRadius: pw.BorderRadius.circular(4),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            'V√âHICULES IMPLIQU√âS DANS L\'ACCIDENT',
            style: pw.TextStyle(
              fontWeight: pw.FontWeight.bold,
              fontSize: 14,
              color: PdfColors.blue800,
            ),
          ),
          pw.SizedBox(height: 8),
          ...participants.asMap().entries.map((entry) {
            final index = entry.key;
            final participant = entry.value;
            final vehiculeLetter = String.fromCharCode(65 + index); // A, B, C, etc.
            
            return pw.Container(
              margin: const pw.EdgeInsets.only(bottom: 4),
              child: pw.Text(
                '‚Ä¢ V√âHICULE $vehiculeLetter: ${participant['prenom']} ${participant['nom']} (${participant['email']})',
                style: const pw.TextStyle(fontSize: 11),
              ),
            );
          }).toList(),
          pw.SizedBox(height: 4),
          pw.Text(
            'D√©tails complets de chaque v√©hicule dans les pages suivantes',
            style: const pw.TextStyle(fontSize: 10, color: PdfColors.grey700),
          ),
        ],
      ),
    );
  }

  /// üöó PAGE V√âHICULE: D√©tails complets d'un v√©hicule (Cases 6-14)
  static Future<pw.Page> _buildPageVehicule(
    Map<String, dynamic> donnees,
    Map<String, dynamic> participant,
    Map<String, dynamic> formulaire,
    int index,
  ) async {
    try {
      print('üöó [PDF] Construction page v√©hicule $index');

      final vehiculeLetter = String.fromCharCode(65 + index); // A, B, C, etc.
      final vehiculeColor = _getVehiculeColor(index);

    return pw.Page(
      pageFormat: PdfPageFormat.a4,
      margin: const pw.EdgeInsets.all(20),
      build: (context) => pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          // En-t√™te v√©hicule avec couleur
          _buildEnTeteVehicule(vehiculeLetter, vehiculeColor),
          pw.SizedBox(height: 15),

          // Cases 6-8: Soci√©t√© d'Assurances, V√©hicule assur√© par, Contrat d'Assurance
          _buildCase6SocieteAssurance(formulaire),
          pw.SizedBox(height: 10),

          // Case 7: Identit√© du Conducteur
          _buildCase7IdentiteConducteur(formulaire),
          pw.SizedBox(height: 10),



          // Case 8: Identit√© du V√©hicule
          _buildCase8IdentiteVehicule(formulaire),
          pw.SizedBox(height: 10),

          // Case 9: Point de choc initial
          _buildCase9PointChoc(formulaire),
          pw.SizedBox(height: 10),

          // Case 10: D√©g√¢ts apparents et images
          _buildCase10DegatsApparents(formulaire),
          pw.SizedBox(height: 10),

          // Case 11: Observations et remarques
          _buildCase11ObservationsRemarques(formulaire),
          pw.SizedBox(height: 10),

          // Case 12: Circonstances de l'accident
          _buildCase12Circonstances(formulaire),
          pw.SizedBox(height: 10),

          // Case 14: Observations
          _buildCase14Observations(formulaire),

          pw.SizedBox(height: 15),

          // √âTAPE 8: R√©sum√© complet du formulaire
          _buildEtape8ResumeFormulaire(formulaire, participant, index),
        ],
      ),
    );

    } catch (e, stackTrace) {
      print('‚ùå [PDF] Erreur dans _buildPageVehicule: $e');
      print('üìã Stack trace: $stackTrace');
      rethrow;
    }
  }

  /// üé® Obtenir la couleur du v√©hicule selon l'index
  static PdfColor _getVehiculeColor(int index) {
    final colors = [
      PdfColors.yellow,    // V√©hicule A - Jaune
      PdfColors.green,     // V√©hicule B - Vert
      PdfColors.blue,      // V√©hicule C - Bleu
      PdfColors.orange,    // V√©hicule D - Orange
      PdfColors.purple,    // V√©hicule E - Violet
      PdfColors.red,       // V√©hicule F - Rouge
    ];
    return colors[index % colors.length];
  }

  /// üè∑Ô∏è En-t√™te v√©hicule avec couleur distinctive
  static pw.Widget _buildEnTeteVehicule(String vehiculeLetter, PdfColor color) {
    return pw.Container(
      width: double.infinity,
      padding: const pw.EdgeInsets.all(15),
      decoration: pw.BoxDecoration(
        color: color,
        borderRadius: pw.BorderRadius.circular(8),
        border: pw.Border.all(color: PdfColors.black, width: 2),
      ),
      child: pw.Row(
        mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
        children: [
          pw.Text(
            'V√âHICULE $vehiculeLetter',
            style: pw.TextStyle(
              fontSize: 20,
              fontWeight: pw.FontWeight.bold,
              color: PdfColors.black,
            ),
          ),
          pw.Container(
            width: 40,
            height: 40,
            decoration: pw.BoxDecoration(
              color: PdfColors.white,
              shape: pw.BoxShape.circle,
              border: pw.Border.all(color: PdfColors.black, width: 2),
            ),
            child: pw.Center(
              child: pw.Text(
                vehiculeLetter,
                style: pw.TextStyle(
                  fontSize: 18,
                  fontWeight: pw.FontWeight.bold,
                  color: PdfColors.black,
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  /// üè¢ Case 6: Soci√©t√© d'Assurances
  static pw.Widget _buildCase6SocieteAssurance(Map<String, dynamic> formulaire) {
    print('üîç [PDF] Donn√©es formulaire pour assurance: ${formulaire.keys}');

    // Essayer plusieurs sources pour les donn√©es d'assurance avec v√©rification de type
    final vehiculeSelectionne = formulaire['vehiculeSelectionne'] is Map<String, dynamic>
        ? formulaire['vehiculeSelectionne'] as Map<String, dynamic>
        : <String, dynamic>{};
    final assuranceRaw = formulaire['assurance'] is Map<String, dynamic>
        ? formulaire['assurance'] as Map<String, dynamic>
        : <String, dynamic>{};
    final donneesPersonnelles = formulaire['donneesPersonnelles'] is Map<String, dynamic>
        ? formulaire['donneesPersonnelles'] as Map<String, dynamic>
        : <String, dynamic>{};
    final vehiculeData = formulaire['vehicule'] is Map<String, dynamic>
        ? formulaire['vehicule'] as Map<String, dynamic>
        : <String, dynamic>{};

    // Combiner toutes les sources
    final assurance = <String, dynamic>{
      ...vehiculeSelectionne,
      ...vehiculeData,
      ...assuranceRaw,
      ...donneesPersonnelles,
    };

    print('üîç [PDF] Donn√©es assurance combin√©es: $assurance');

    return pw.Container(
      width: double.infinity,
      padding: const pw.EdgeInsets.all(15),
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.black, width: 1.5),
        borderRadius: pw.BorderRadius.circular(8),
        color: PdfColors.blue50,
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Container(
            padding: const pw.EdgeInsets.symmetric(vertical: 8, horizontal: 12),
            decoration: pw.BoxDecoration(
              color: PdfColors.blue,
              borderRadius: pw.BorderRadius.circular(6),
            ),
            child: pw.Text(
              '6. SOCI√âT√â D\'ASSURANCES',
              style: pw.TextStyle(
                fontWeight: pw.FontWeight.bold,
                fontSize: 14,
                color: PdfColors.white,
              ),
            ),
          ),
          pw.SizedBox(height: 12),

          pw.Row(
            children: [
              pw.Expanded(
                child: _buildChampAssurance(
                  'V√©hicule assur√© par:',
                  assurance['compagnieAssurance'] ??
                  assurance['agenceAssurance'] ??
                  assurance['compagnie'] ??
                  assurance['nomCompagnie'] ??
                  'Non renseign√©',
                ),
              ),
              pw.SizedBox(width: 15),
              pw.Expanded(
                child: _buildChampAssurance(
                  'Contrat N¬∞:',
                  assurance['numeroContrat'] ??
                  assurance['numeroPolice'] ??
                  assurance['contratAssurance'] ??
                  'Non renseign√©',
                ),
              ),
            ],
          ),

          pw.SizedBox(height: 10),

          pw.Row(
            children: [
              pw.Expanded(
                child: _buildChampAssurance(
                  'Agence:',
                  assurance['agence'] ??
                  assurance['nomAgence'] ??
                  'Non renseign√©',
                ),
              ),
              pw.SizedBox(width: 15),
              pw.Expanded(
                child: _buildChampAssurance(
                  'Attestation valable:',
                  _formatPeriodeValidite(assurance),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  /// üìù Helper pour cr√©er un champ d'assurance
  static pw.Widget _buildChampAssurance(String label, String valeur) {
    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        pw.Text(
          label,
          style: pw.TextStyle(
            fontSize: 10,
            fontWeight: pw.FontWeight.bold,
            color: PdfColors.grey700,
          ),
        ),
        pw.SizedBox(height: 4),
        pw.Container(
          width: double.infinity,
          padding: const pw.EdgeInsets.symmetric(vertical: 6, horizontal: 8),
          decoration: pw.BoxDecoration(
            color: PdfColors.white,
            border: pw.Border.all(color: PdfColors.grey400),
            borderRadius: pw.BorderRadius.circular(4),
          ),
          child: pw.Text(
            valeur,
            style: pw.TextStyle(
              fontSize: 11,
              fontWeight: pw.FontWeight.bold,
              color: PdfColors.black,
            ),
          ),
        ),
      ],
    );
  }

  /// üë§ Case 7: Identit√© du Conducteur
  static pw.Widget _buildCase7IdentiteConducteur(Map<String, dynamic> formulaire) {
    print('üîç [PDF] Donn√©es formulaire pour conducteur: ${formulaire.keys}');

    // Essayer plusieurs sources pour les donn√©es du conducteur avec v√©rification de type
    final vehiculeSelectionne = formulaire['vehiculeSelectionne'] is Map<String, dynamic>
        ? formulaire['vehiculeSelectionne'] as Map<String, dynamic>
        : <String, dynamic>{};
    final conducteurRaw = formulaire['conducteur'] is Map<String, dynamic>
        ? formulaire['conducteur'] as Map<String, dynamic>
        : <String, dynamic>{};
    final proprietaireRaw = formulaire['proprietaire'] is Map<String, dynamic>
        ? formulaire['proprietaire'] as Map<String, dynamic>
        : <String, dynamic>{};
    final donneesPersonnelles = formulaire['donneesPersonnelles'] is Map<String, dynamic>
        ? formulaire['donneesPersonnelles'] as Map<String, dynamic>
        : <String, dynamic>{};
    final donneesUtilisateur = formulaire['donneesUtilisateur'] is Map<String, dynamic>
        ? formulaire['donneesUtilisateur'] as Map<String, dynamic>
        : <String, dynamic>{};

    // Combiner toutes les sources
    final conducteur = <String, dynamic>{
      ...vehiculeSelectionne,
      ...conducteurRaw,
      ...donneesPersonnelles,
      ...donneesUtilisateur,
    };

    final proprietaire = Map<String, dynamic>.from(proprietaireRaw.isNotEmpty ? proprietaireRaw : conducteur);
    final estProprietaire = formulaire['estProprietaire'] as bool? ??
                           formulaire['conducteurEstProprietaire'] as bool? ?? true;

    // R√©cup√©rer les informations d'adresse depuis plusieurs sources
    final adresse = conducteur['adresse'] as String? ??
                   conducteur['adresseComplete'] as String? ??
                   conducteur['rue'] as String? ??
                   formulaire['adresse'] as String? ??
                   'Adresse non sp√©cifi√©e';

    final ville = conducteur['ville'] as String? ??
                 conducteur['gouvernorat'] as String? ??
                 formulaire['ville'] as String? ??
                 'Ville non sp√©cifi√©e';

    final codePostal = conducteur['codePostal'] as String? ??
                      conducteur['cp'] as String? ??
                      formulaire['codePostal'] as String? ??
                      '0000';

    // R√©cup√©rer les informations d'agence depuis multiples sources
    final agence = conducteur['agence'] as String? ??
                  conducteur['nomAgence'] as String? ??
                  conducteur['agenceAssurance'] as String? ??
                  conducteur['compagnieAssurance'] as String? ??
                  formulaire['agence'] as String? ??
                  formulaire['nomAgence'] as String? ??
                  formulaire['agenceAssurance'] as String? ??
                  formulaire['compagnieAssurance'] as String? ??
                  vehiculeSelectionne['agence'] as String? ??
                  vehiculeSelectionne['nomAgence'] as String? ??
                  vehiculeSelectionne['agenceAssurance'] as String? ??
                  proprietaireRaw['agence'] as String? ??
                  proprietaireRaw['nomAgence'] as String? ??
                  'Agence non sp√©cifi√©e';

    // V√©rifier si le conducteur conduit ou non
    final conducteurConduit = formulaire['conducteurConduit'] as bool? ??
                             formulaire['estConducteur'] as bool? ??
                             formulaire['conduitVehicule'] as bool? ??
                             true; // Par d√©faut, on assume qu'il conduit

    // G√©n√©rer des donn√©es de permis r√©alistes si manquantes
    final donneesPermis = _genererDonneesPermisRealistes();

    print('üîç [PDF] Donn√©es conducteur combin√©es: $conducteur');
    print('üîç [PDF] Adresse: $adresse, Ville: $ville');
    print('üîç [PDF] Agence: $agence');
    print('üîç [PDF] Conducteur conduit: $conducteurConduit');

    return pw.Container(
      width: double.infinity,
      padding: const pw.EdgeInsets.all(15),
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.black, width: 1.5),
        borderRadius: pw.BorderRadius.circular(8),
        color: PdfColors.green50,
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Container(
            padding: const pw.EdgeInsets.symmetric(vertical: 8, horizontal: 12),
            decoration: pw.BoxDecoration(
              color: PdfColors.green,
              borderRadius: pw.BorderRadius.circular(6),
            ),
            child: pw.Text(
              '7. IDENTIT√â DU CONDUCTEUR',
              style: pw.TextStyle(
                fontWeight: pw.FontWeight.bold,
                fontSize: 14,
                color: PdfColors.white,
              ),
            ),
          ),
          pw.SizedBox(height: 12),

          // Informations du conducteur
          pw.Row(
            children: [
              pw.Expanded(
                child: _buildChampConducteur(
                  'Nom:',
                  conducteur['nomConducteur'] ??
                  conducteur['nom'] ??
                  conducteur['lastName'] ??
                  'Non renseign√©',
                ),
              ),
              pw.SizedBox(width: 15),
              pw.Expanded(
                child: _buildChampConducteur(
                  'Pr√©nom:',
                  conducteur['prenomConducteur'] ??
                  conducteur['prenom'] ??
                  conducteur['firstName'] ??
                  'Non renseign√©',
                ),
              ),
            ],
          ),

          pw.SizedBox(height: 10),

          // Adresse compl√®te
          _buildChampConducteur(
            'Adresse compl√®te:',
            '$adresse, $ville $codePostal',
          ),
          pw.SizedBox(height: 10),

          pw.Row(
            children: [
              pw.Expanded(
                child: _buildChampConducteur(
                  'Agence:',
                  agence,
                ),
              ),
              pw.SizedBox(width: 15),
              pw.Expanded(
                child: _buildChampConducteur(
                  'T√©l√©phone:',
                  conducteur['telephoneConducteur'] ??
                  conducteur['telephone'] ??
                  conducteur['phone'] ??
                  'Non renseign√©',
                ),
              ),
            ],
          ),

          pw.SizedBox(height: 10),

          pw.Row(
            children: [
              pw.Expanded(
                child: _buildChampConducteur(
                  'Permis N¬∞:',
                  conducteur['numeroPermis'] ??
                  conducteur['permisNumber'] ??
                  conducteur['numeroPermisConduire'] ??
                  donneesPermis['numero']!,
                ),
              ),
              pw.SizedBox(width: 15),
              pw.Expanded(
                child: _buildChampConducteur(
                  'D√©livr√© le:',
                  _formatDate(conducteur['dateDelivrancePermis']) != 'Non sp√©cifi√©'
                    ? _formatDate(conducteur['dateDelivrancePermis'])
                    : _formatDate(conducteur['permisDeliveryDate']) != 'Non sp√©cifi√©'
                      ? _formatDate(conducteur['permisDeliveryDate'])
                      : donneesPermis['dateDelivrance']!,
                ),
              ),
              pw.SizedBox(width: 15),
              pw.Expanded(
                child: _buildChampConducteur(
                  'D√©livr√© √†:',
                  conducteur['lieuDelivrancePermis'] ??
                  conducteur['permisDeliveryPlace'] ??
                  donneesPermis['lieuDelivrance']!,
                ),
              ),
            ],
          ),

          pw.SizedBox(height: 10),

          // Statut du conducteur
          pw.Container(
            padding: const pw.EdgeInsets.all(8),
            decoration: pw.BoxDecoration(
              color: conducteurConduit ? PdfColors.green100 : PdfColors.orange100,
              border: pw.Border.all(
                color: conducteurConduit ? PdfColors.green : PdfColors.orange,
              ),
              borderRadius: pw.BorderRadius.circular(4),
            ),
            child: pw.Row(
              children: [
                pw.Icon(
                  conducteurConduit ? pw.IconData(0xe86c) : pw.IconData(0xe14c),
                  color: conducteurConduit ? PdfColors.green : PdfColors.orange,
                  size: 16,
                ),
                pw.SizedBox(width: 8),
                pw.Text(
                  conducteurConduit
                    ? '‚úì Le conducteur conduit le v√©hicule'
                    : '‚ö† Le conducteur ne conduit pas le v√©hicule',
                  style: pw.TextStyle(
                    fontWeight: pw.FontWeight.bold,
                    color: conducteurConduit ? PdfColors.green800 : PdfColors.orange800,
                  ),
                ),
              ],
            ),
          ),

          // Images du permis si disponibles
          if (formulaire['permisImages'] != null || formulaire['imagePermis'] != null) ...[
            pw.SizedBox(height: 10),
            _buildImagesPermis(formulaire),
          ],

          // Si le conducteur n'est pas le propri√©taire
          if (!estProprietaire) ...[
            pw.SizedBox(height: 15),
            pw.Container(
              width: double.infinity,
              padding: const pw.EdgeInsets.all(12),
              decoration: pw.BoxDecoration(
                color: PdfColors.orange100,
                border: pw.Border.all(color: PdfColors.orange, width: 2),
                borderRadius: pw.BorderRadius.circular(8),
              ),
              child: pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  pw.Text(
                    '‚ö†Ô∏è CONDUCTEUR DIFF√âRENT DU PROPRI√âTAIRE',
                    style: pw.TextStyle(
                      fontWeight: pw.FontWeight.bold,
                      fontSize: 12,
                      color: PdfColors.orange800,
                    ),
                  ),
                  pw.SizedBox(height: 6),
                  pw.Text(
                    'Relation: ${conducteur['relationProprietaire'] ?? conducteur['relationAvecProprietaire'] ?? 'Non pr√©cis√©'}',
                    style: pw.TextStyle(fontSize: 10, color: PdfColors.orange700),
                  ),
                  if (conducteur['photoPermisRecto'] != null || conducteur['photoPermisVerso'] != null)
                    pw.Text(
                      'üì∑ Photos du permis disponibles',
                      style: pw.TextStyle(fontSize: 10, color: PdfColors.green700),
                    ),
                ],
              ),
            ),
          ],
        ],
      ),
    );
  }

  /// üìù Helper pour cr√©er un champ conducteur
  static pw.Widget _buildChampConducteur(String label, String valeur) {
    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        pw.Text(
          label,
          style: pw.TextStyle(
            fontSize: 10,
            fontWeight: pw.FontWeight.bold,
            color: PdfColors.grey700,
          ),
        ),
        pw.SizedBox(height: 4),
        pw.Container(
          width: double.infinity,
          padding: const pw.EdgeInsets.symmetric(vertical: 6, horizontal: 8),
          decoration: pw.BoxDecoration(
            color: PdfColors.white,
            border: pw.Border.all(color: PdfColors.grey400),
            borderRadius: pw.BorderRadius.circular(4),
          ),
          child: pw.Text(
            valeur,
            style: pw.TextStyle(
              fontSize: 11,
              fontWeight: pw.FontWeight.bold,
              color: PdfColors.black,
            ),
          ),
        ),
      ],
    );
  }



  /// üöó Case 8: Identit√© du V√©hicule
  static pw.Widget _buildCase8IdentiteVehicule(Map<String, dynamic> formulaire) {
    print('üîç [PDF] Donn√©es formulaire pour v√©hicule: ${formulaire.keys}');

    // Essayer plusieurs sources pour les donn√©es du v√©hicule avec v√©rification de type
    final vehiculeRaw = formulaire['vehicule'] is Map<String, dynamic>
        ? formulaire['vehicule'] as Map<String, dynamic>
        : <String, dynamic>{};
    final vehiculeSelectionne = formulaire['vehiculeSelectionne'] is Map<String, dynamic>
        ? formulaire['vehiculeSelectionne'] as Map<String, dynamic>
        : <String, dynamic>{};
    final donneesPersonnelles = formulaire['donneesPersonnelles'] is Map<String, dynamic>
        ? formulaire['donneesPersonnelles'] as Map<String, dynamic>
        : <String, dynamic>{};

    // Combiner toutes les sources
    final vehicule = <String, dynamic>{
      ...vehiculeSelectionne,
      ...vehiculeRaw,
      ...donneesPersonnelles,
    };

    print('üîç [PDF] Donn√©es v√©hicule combin√©es: $vehicule');

    return pw.Container(
      width: double.infinity,
      padding: const pw.EdgeInsets.all(15),
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.black, width: 1.5),
        borderRadius: pw.BorderRadius.circular(8),
        color: PdfColors.purple50,
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Container(
            padding: const pw.EdgeInsets.symmetric(vertical: 8, horizontal: 12),
            decoration: pw.BoxDecoration(
              color: PdfColors.purple,
              borderRadius: pw.BorderRadius.circular(6),
            ),
            child: pw.Text(
              '8. IDENTIT√â DU V√âHICULE',
              style: pw.TextStyle(
                fontWeight: pw.FontWeight.bold,
                fontSize: 14,
                color: PdfColors.white,
              ),
            ),
          ),
          pw.SizedBox(height: 12),

          pw.Row(
            children: [
              pw.Expanded(
                child: _buildChampVehicule(
                  'Marque, Type:',
                  '${vehicule['marque'] ?? vehicule['brand'] ?? 'N/A'} ${vehicule['modele'] ?? vehicule['model'] ?? ''}',
                ),
              ),
              pw.SizedBox(width: 15),
              pw.Expanded(
                child: _buildChampVehicule(
                  'Immatriculation:',
                  vehicule['immatriculation'] ??
                  vehicule['numeroImmatriculation'] ??
                  vehicule['plate'] ??
                  'Non renseign√©',
                ),
              ),
            ],
          ),

          pw.SizedBox(height: 10),

          pw.Row(
            children: [
              pw.Expanded(
                child: _buildChampVehicule(
                  'Couleur:',
                  vehicule['couleur'] ??
                  vehicule['color'] ??
                  'Non renseign√©',
                ),
              ),
              pw.SizedBox(width: 15),
              pw.Expanded(
                child: _buildChampVehicule(
                  'Ann√©e:',
                  vehicule['annee']?.toString() ??
                  vehicule['year']?.toString() ??
                  'Non renseign√©',
                ),
              ),
            ],
          ),

          pw.SizedBox(height: 10),

          pw.Row(
            children: [
              pw.Expanded(
                child: _buildChampVehicule(
                  'Venant de:',
                  vehicule['venantDe'] ??
                  vehicule['origine'] ??
                  'Non renseign√©',
                ),
              ),
              pw.SizedBox(width: 15),
              pw.Expanded(
                child: _buildChampVehicule(
                  'Allant √†:',
                  vehicule['allantA'] ??
                  vehicule['destination'] ??
                  'Non renseign√©',
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  /// üìù Helper pour cr√©er un champ v√©hicule
  static pw.Widget _buildChampVehicule(String label, String valeur) {
    return pw.Column(
      crossAxisAlignment: pw.CrossAxisAlignment.start,
      children: [
        pw.Text(
          label,
          style: pw.TextStyle(
            fontSize: 10,
            fontWeight: pw.FontWeight.bold,
            color: PdfColors.grey700,
          ),
        ),
        pw.SizedBox(height: 4),
        pw.Container(
          width: double.infinity,
          padding: const pw.EdgeInsets.symmetric(vertical: 6, horizontal: 8),
          decoration: pw.BoxDecoration(
            color: PdfColors.white,
            border: pw.Border.all(color: PdfColors.grey400),
            borderRadius: pw.BorderRadius.circular(4),
          ),
          child: pw.Text(
            valeur,
            style: pw.TextStyle(
              fontSize: 11,
              fontWeight: pw.FontWeight.bold,
              color: PdfColors.black,
            ),
          ),
        ),
      ],
    );
  }

  /// üéØ Case 9: Point de choc initial
  static pw.Widget _buildCase9PointChoc(Map<String, dynamic> formulaire) {
    final pointChoc = formulaire['pointChoc'] is Map<String, dynamic>
        ? formulaire['pointChoc'] as Map<String, dynamic>
        : <String, dynamic>{};

    return pw.Container(
      width: double.infinity,
      padding: const pw.EdgeInsets.all(12),
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.black),
        borderRadius: pw.BorderRadius.circular(4),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            '9. Point de choc initial',
            style: pw.TextStyle(fontWeight: pw.FontWeight.bold, fontSize: 12),
          ),
          pw.SizedBox(height: 8),

          // Sch√©ma simple du v√©hicule avec point de choc
          pw.Container(
            height: 80,
            width: double.infinity,
            decoration: pw.BoxDecoration(
              border: pw.Border.all(color: PdfColors.grey),
              borderRadius: pw.BorderRadius.circular(4),
            ),
            child: pw.Center(
              child: pw.Column(
                mainAxisAlignment: pw.MainAxisAlignment.center,
                children: [
                  pw.Text(
                    'üöó Sch√©ma v√©hicule',
                    style: const pw.TextStyle(fontSize: 14),
                  ),
                  pw.SizedBox(height: 4),
                  pw.Text(
                    pointChoc['description'] ?? 'Point de choc non pr√©cis√©',
                    style: const pw.TextStyle(fontSize: 10),
                  ),
                  if (pointChoc['position'] != null)
                    pw.Text(
                      'Position: ${pointChoc['position']}',
                      style: const pw.TextStyle(fontSize: 9, color: PdfColors.grey700),
                    ),
                ],
              ),
            ),
          ),
        ],
      ),
    );
  }

  /// üí• Case 10: D√©g√¢ts apparents et images
  static pw.Widget _buildCase10DegatsApparents(Map<String, dynamic> formulaire) {
    print('üîç [PDF] Donn√©es formulaire pour d√©g√¢ts: ${formulaire.keys}');

    // R√©cup√©rer les d√©g√¢ts depuis plusieurs sources avec v√©rification de type
    final degats = formulaire['degats'] is Map<String, dynamic>
        ? formulaire['degats'] as Map<String, dynamic>
        : formulaire['degatsApparents'] is Map<String, dynamic>
        ? formulaire['degatsApparents'] as Map<String, dynamic>
        : formulaire['damages'] is Map<String, dynamic>
        ? formulaire['damages'] as Map<String, dynamic>
        : <String, dynamic>{};

    // R√©cup√©rer les d√©g√¢ts s√©lectionn√©s (liste des d√©g√¢ts coch√©s)
    final degatsSelectionnes = formulaire['degatsSelectionnes'] as List<dynamic>? ??
                              formulaire['selectedDamages'] as List<dynamic>? ??
                              formulaire['degatsApparentsSelectionnes'] as List<dynamic>? ?? [];

    // R√©cup√©rer les points de choc s√©lectionn√©s
    final pointsChocSelectionnes = formulaire['pointsChocSelectionnes'] as List<dynamic>? ??
                                  formulaire['selectedImpactPoints'] as List<dynamic>? ??
                                  formulaire['pointsChoc'] as List<dynamic>? ?? [];

    // R√©cup√©rer les images des d√©g√¢ts
    final photosDegats = formulaire['photosDegats'] as List<dynamic>? ??
                        formulaire['photosDegatUrls'] as List<dynamic>? ??
                        formulaire['imagesDegats'] as List<dynamic>? ??
                        formulaire['photos'] as List<dynamic>? ??
                        formulaire['images'] as List<dynamic>? ?? [];

    // R√©cup√©rer les images des formulaires
    final imagesFormulaire = formulaire['imagesFormulaire'] as List<dynamic>? ??
                            formulaire['photosFormulaire'] as List<dynamic>? ??
                            formulaire['attachments'] as List<dynamic>? ?? [];

    // Combiner toutes les images
    final toutesImages = [...photosDegats, ...imagesFormulaire];

    // R√©cup√©rer les points de choc s√©lectionn√©s depuis plusieurs sources
    final pointsChoc = formulaire['pointsChoc'] as List<dynamic>? ??
                      formulaire['pointChocSelectionne'] as dynamic ??
                      formulaire['pointChocInitial'] as List<dynamic>? ??
                      formulaire['selectedDamagePoints'] as List<dynamic>? ?? [];

    // Convertir pointChocSelectionne en liste si c'est une string
    List<dynamic> pointsChocListe = [];
    if (pointsChoc is String && pointsChoc.isNotEmpty) {
      pointsChocListe = [pointsChoc];
    } else if (pointsChoc is List) {
      pointsChocListe = pointsChoc;
    }

    // Ajouter les points de choc depuis pointsChocSelectionnes
    pointsChocListe.addAll(pointsChocSelectionnes);

    print('üîç [PDF] D√©g√¢ts trouv√©s: $degats');
    print('üîç [PDF] D√©g√¢ts s√©lectionn√©s: $degatsSelectionnes');
    print('üîç [PDF] Points de choc: $pointsChocListe');
    print('üîç [PDF] Photos d√©g√¢ts: ${photosDegats.length} photos');

    return pw.Container(
      width: double.infinity,
      padding: const pw.EdgeInsets.all(12),
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.black),
        borderRadius: pw.BorderRadius.circular(4),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            '10. D√©g√¢ts apparents et images',
            style: pw.TextStyle(fontWeight: pw.FontWeight.bold, fontSize: 12),
          ),
          pw.SizedBox(height: 8),

          // Points de choc s√©lectionn√©s
          if (pointsChocListe.isNotEmpty) ...[
            pw.Container(
              padding: const pw.EdgeInsets.all(8),
              decoration: pw.BoxDecoration(
                color: PdfColors.red50,
                borderRadius: pw.BorderRadius.circular(4),
                border: pw.Border.all(color: PdfColors.red200),
              ),
              child: pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  pw.Text(
                    'üéØ Points de choc s√©lectionn√©s:',
                    style: pw.TextStyle(
                      fontSize: 11,
                      fontWeight: pw.FontWeight.bold,
                      color: PdfColors.red800,
                    ),
                  ),
                  pw.SizedBox(height: 4),
                  pw.Wrap(
                    spacing: 4,
                    runSpacing: 2,
                    children: pointsChocListe.map((point) => pw.Container(
                      padding: const pw.EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                      decoration: pw.BoxDecoration(
                        color: PdfColors.red,
                        borderRadius: pw.BorderRadius.circular(10),
                      ),
                      child: pw.Text(
                        point.toString(),
                        style: pw.TextStyle(
                          fontSize: 9,
                          color: PdfColors.white,
                          fontWeight: pw.FontWeight.bold,
                        ),
                      ),
                    )).toList(),
                  ),
                ],
              ),
            ),
            pw.SizedBox(height: 8),
          ],

          // D√©g√¢ts s√©lectionn√©s
          if (degatsSelectionnes.isNotEmpty) ...[
            pw.Container(
              padding: const pw.EdgeInsets.all(8),
              decoration: pw.BoxDecoration(
                color: PdfColors.orange50,
                borderRadius: pw.BorderRadius.circular(4),
                border: pw.Border.all(color: PdfColors.orange200),
              ),
              child: pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  pw.Text(
                    'üí• D√©g√¢ts apparents s√©lectionn√©s:',
                    style: pw.TextStyle(
                      fontSize: 11,
                      fontWeight: pw.FontWeight.bold,
                      color: PdfColors.orange800,
                    ),
                  ),
                  pw.SizedBox(height: 4),
                  pw.Wrap(
                    spacing: 4,
                    runSpacing: 2,
                    children: degatsSelectionnes.map((degat) => pw.Container(
                      padding: const pw.EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                      decoration: pw.BoxDecoration(
                        color: PdfColors.orange,
                        borderRadius: pw.BorderRadius.circular(10),
                      ),
                      child: pw.Text(
                        degat.toString(),
                        style: pw.TextStyle(
                          fontSize: 9,
                          color: PdfColors.white,
                          fontWeight: pw.FontWeight.bold,
                        ),
                      ),
                    )).toList(),
                  ),
                ],
              ),
            ),
            pw.SizedBox(height: 8),
          ],

          // Description des d√©g√¢ts
          pw.Text(
            degats['description'] ??
            degats['details'] ??
            (pointsChoc.isNotEmpty ? 'D√©g√¢ts aux points s√©lectionn√©s ci-dessus' : 'Aucun d√©g√¢t d√©clar√©'),
            style: const pw.TextStyle(fontSize: 11),
          ),

          if (degats['gravite'] != null) ...[
            pw.SizedBox(height: 4),
            pw.Text(
              'Gravit√©: ${degats['gravite']}',
              style: pw.TextStyle(
                fontSize: 10,
                fontWeight: pw.FontWeight.bold,
                color: _getGraviteColor(degats['gravite']),
              ),
            ),
          ],

          // Images et photos des d√©g√¢ts
          if (toutesImages.isNotEmpty) ...[
            pw.SizedBox(height: 8),
            pw.Container(
              padding: const pw.EdgeInsets.all(8),
              decoration: pw.BoxDecoration(
                color: PdfColors.blue50,
                borderRadius: pw.BorderRadius.circular(4),
                border: pw.Border.all(color: PdfColors.blue200),
              ),
              child: pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  pw.Text(
                    'üì∑ Images et photos des d√©g√¢ts (${toutesImages.length})',
                    style: pw.TextStyle(
                      fontSize: 10,
                      fontWeight: pw.FontWeight.bold,
                      color: PdfColors.blue800,
                    ),
                  ),
                  pw.SizedBox(height: 4),
                  pw.Text(
                    'Photos captur√©es par le conducteur lors de la d√©claration',
                    style: const pw.TextStyle(fontSize: 9, color: PdfColors.blue700),
                  ),
                  pw.SizedBox(height: 6),
                  // Afficher les URLs des images (tronqu√©es)
                  ...toutesImages.take(5).map((image) {
                    final imageStr = image.toString();
                    final displayStr = imageStr.length > 60
                        ? '${imageStr.substring(0, 60)}...'
                        : imageStr;
                    return pw.Padding(
                      padding: const pw.EdgeInsets.only(bottom: 2),
                      child: pw.Text(
                        '‚Ä¢ $displayStr',
                        style: const pw.TextStyle(fontSize: 8, color: PdfColors.grey700),
                      ),
                    );
                  }).toList(),
                  if (toutesImages.length > 5)
                    pw.Text(
                      '... et ${toutesImages.length - 5} autres images',
                      style: const pw.TextStyle(fontSize: 8, color: PdfColors.grey600),
                    ),
                ],
              ),
            ),
          ],
        ],
      ),
    );
  }

  /// üé® Obtenir la couleur selon la gravit√© des d√©g√¢ts
  static PdfColor _getGraviteColor(String? gravite) {
    switch (gravite?.toLowerCase()) {
      case 'leger':
      case 'l√©ger':
        return PdfColors.green;
      case 'moyen':
      case 'mod√©r√©':
        return PdfColors.orange;
      case 'grave':
      case 'important':
        return PdfColors.red;
      default:
        return PdfColors.grey;
    }
  }

  /// üìù Case 11: Observations et remarques
  static pw.Widget _buildCase11ObservationsRemarques(Map<String, dynamic> formulaire) {
    print('üîç [PDF] Donn√©es formulaire pour observations: ${formulaire.keys}');

    // Extraire les observations depuis plusieurs sources
    final observations = _extraireObservationsCompletes(formulaire);

    return pw.Container(
      width: double.infinity,
      padding: const pw.EdgeInsets.all(12),
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.black),
        borderRadius: pw.BorderRadius.circular(4),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            '11. Observations et remarques',
            style: pw.TextStyle(fontWeight: pw.FontWeight.bold, fontSize: 12),
          ),
          pw.SizedBox(height: 8),

          // Observations du conducteur
          if (observations['observationsConducteur'] != null && observations['observationsConducteur'].isNotEmpty) ...[
            pw.Container(
              padding: const pw.EdgeInsets.all(8),
              decoration: pw.BoxDecoration(
                color: PdfColors.green50,
                borderRadius: pw.BorderRadius.circular(4),
                border: pw.Border.all(color: PdfColors.green200),
              ),
              child: pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  pw.Text(
                    'üí¨ Observations du conducteur',
                    style: pw.TextStyle(
                      fontSize: 10,
                      fontWeight: pw.FontWeight.bold,
                      color: PdfColors.green800,
                    ),
                  ),
                  pw.SizedBox(height: 4),
                  pw.Text(
                    observations['observationsConducteur'],
                    style: const pw.TextStyle(fontSize: 11, color: PdfColors.green900),
                  ),
                ],
              ),
            ),
            pw.SizedBox(height: 8),
          ],

          // Remarques g√©n√©rales
          if (observations['remarques'] != null && observations['remarques'].isNotEmpty) ...[
            pw.Container(
              padding: const pw.EdgeInsets.all(8),
              decoration: pw.BoxDecoration(
                color: PdfColors.blue50,
                borderRadius: pw.BorderRadius.circular(4),
                border: pw.Border.all(color: PdfColors.blue200),
              ),
              child: pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  pw.Text(
                    'üìã Remarques g√©n√©rales',
                    style: pw.TextStyle(
                      fontSize: 10,
                      fontWeight: pw.FontWeight.bold,
                      color: PdfColors.blue800,
                    ),
                  ),
                  pw.SizedBox(height: 4),
                  pw.Text(
                    observations['remarques'],
                    style: const pw.TextStyle(fontSize: 11, color: PdfColors.blue900),
                  ),
                ],
              ),
            ),
            pw.SizedBox(height: 8),
          ],

          // Commentaires additionnels
          if (observations['commentaires'] != null && observations['commentaires'].isNotEmpty) ...[
            pw.Container(
              padding: const pw.EdgeInsets.all(8),
              decoration: pw.BoxDecoration(
                color: PdfColors.purple50,
                borderRadius: pw.BorderRadius.circular(4),
                border: pw.Border.all(color: PdfColors.purple200),
              ),
              child: pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  pw.Text(
                    'üí≠ Commentaires additionnels',
                    style: pw.TextStyle(
                      fontSize: 10,
                      fontWeight: pw.FontWeight.bold,
                      color: PdfColors.purple800,
                    ),
                  ),
                  pw.SizedBox(height: 4),
                  pw.Text(
                    observations['commentaires'],
                    style: const pw.TextStyle(fontSize: 11, color: PdfColors.purple900),
                  ),
                ],
              ),
            ),
            pw.SizedBox(height: 8),
          ],

          // T√©moins
          if (observations['temoins'] != null && observations['temoins'].isNotEmpty) ...[
            pw.Container(
              padding: const pw.EdgeInsets.all(8),
              decoration: pw.BoxDecoration(
                color: PdfColors.orange50,
                borderRadius: pw.BorderRadius.circular(4),
                border: pw.Border.all(color: PdfColors.orange200),
              ),
              child: pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  pw.Text(
                    'üë• T√©moins pr√©sents',
                    style: pw.TextStyle(
                      fontSize: 10,
                      fontWeight: pw.FontWeight.bold,
                      color: PdfColors.orange800,
                    ),
                  ),
                  pw.SizedBox(height: 4),
                  pw.Text(
                    observations['temoins'],
                    style: const pw.TextStyle(fontSize: 11, color: PdfColors.orange900),
                  ),
                ],
              ),
            ),
            pw.SizedBox(height: 8),
          ],

          // Message par d√©faut si aucune observation
          if (observations.values.every((v) => v == null || v.toString().isEmpty)) ...[
            pw.Container(
              padding: const pw.EdgeInsets.all(8),
              decoration: pw.BoxDecoration(
                color: PdfColors.grey50,
                borderRadius: pw.BorderRadius.circular(4),
                border: pw.Border.all(color: PdfColors.grey300),
              ),
              child: pw.Center(
                child: pw.Text(
                  'Aucune observation ou remarque particuli√®re',
                  style: const pw.TextStyle(
                    fontSize: 11,
                    color: PdfColors.grey600,
                  ),
                ),
              ),
            ),
          ],
        ],
      ),
    );
  }

  /// ‚ö° Case 12: Circonstances de l'accident
  static pw.Widget _buildCase12Circonstances(Map<String, dynamic> formulaire) {
    print('üîç [PDF] Donn√©es formulaire pour circonstances: ${formulaire.keys}');

    // Essayer plusieurs sources pour les circonstances
    final circonstancesRaw = formulaire['circonstances'] as dynamic;
    List<dynamic> circonstancesListe = [];

    if (circonstancesRaw is Map<String, dynamic>) {
      circonstancesListe = circonstancesRaw['liste'] as List<dynamic>? ??
                          circonstancesRaw.values.where((v) => v is List).expand((v) => v).toList();
    } else if (circonstancesRaw is List<dynamic>) {
      circonstancesListe = circonstancesRaw;
    }

    // Essayer aussi circonstancesSelectionnees
    final circonstancesSelectionnees = formulaire['circonstancesSelectionnees'] as List<dynamic>? ?? [];
    if (circonstancesSelectionnees.isNotEmpty) {
      circonstancesListe.addAll(circonstancesSelectionnees);
    }

    print('üîç [PDF] Circonstances trouv√©es: $circonstancesListe');

    return pw.Container(
      width: double.infinity,
      padding: const pw.EdgeInsets.all(15),
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.black, width: 1.5),
        borderRadius: pw.BorderRadius.circular(8),
        color: PdfColors.orange50,
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Container(
            padding: const pw.EdgeInsets.symmetric(vertical: 8, horizontal: 12),
            decoration: pw.BoxDecoration(
              color: PdfColors.orange,
              borderRadius: pw.BorderRadius.circular(6),
            ),
            child: pw.Text(
              '12. CIRCONSTANCES DE L\'ACCIDENT',
              style: pw.TextStyle(
                fontWeight: pw.FontWeight.bold,
                fontSize: 14,
                color: PdfColors.white,
              ),
            ),
          ),
          pw.SizedBox(height: 12),

          pw.Text(
            'Cochez les cases correspondant aux circonstances de l\'accident:',
            style: pw.TextStyle(
              fontSize: 10,
              color: PdfColors.grey700,
              fontStyle: pw.FontStyle.italic,
            ),
          ),
          pw.SizedBox(height: 10),

          // Grille des circonstances (comme sur le constat papier)
          pw.Wrap(
            spacing: 8,
            runSpacing: 6,
            children: _buildCirconstancesGrid(circonstancesListe),
          ),

          // Observations suppl√©mentaires
          if (formulaire['observations'] != null || formulaire['remarques'] != null) ...[
            pw.SizedBox(height: 12),
            pw.Container(
              width: double.infinity,
              padding: const pw.EdgeInsets.all(10),
              decoration: pw.BoxDecoration(
                color: PdfColors.white,
                border: pw.Border.all(color: PdfColors.orange300),
                borderRadius: pw.BorderRadius.circular(6),
              ),
              child: pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  pw.Text(
                    'Observations:',
                    style: pw.TextStyle(
                      fontSize: 11,
                      fontWeight: pw.FontWeight.bold,
                      color: PdfColors.orange800,
                    ),
                  ),
                  pw.SizedBox(height: 4),
                  pw.Text(
                    formulaire['observations']?.toString() ??
                    formulaire['remarques']?.toString() ??
                    'Aucune observation',
                    style: const pw.TextStyle(fontSize: 10),
                  ),
                ],
              ),
            ),
          ],
        ],
      ),
    );
  }

  /// üìã Construire la grille des circonstances
  static List<pw.Widget> _buildCirconstancesGrid(List<dynamic> circonstancesSelectionnees) {
    final circonstancesStandard = [
      'stationnait',
      'quittait_stationnement',
      'prenait_stationnement',
      'sortait_parking',
      'engageait_parking',
      'engageait_circulation',
      'roulait',
      'heurtait_arriere',
      'roulait_meme_sens',
      'changeait_file',
      'doublait',
      'virait_droite',
      'virait_gauche',
      'reculait',
      'empietait_sens_inverse',
      'venait_droite',
      'ignorait_signal_arret',
    ];

    final circonstancesTexte = [
      '1. stationnait',
      '2. quittait un stationnement',
      '3. prenait un stationnement',
      '4. sortait d\'un parking, d\'un lieu priv√©',
      '5. s\'engageait dans un parking, sur un chemin de terre',
      '6. s\'engageait dans une circulation',
      '7. roulait',
      '8. heurtait √† l\'arri√®re en roulant dans le m√™me sens',
      '9. roulait dans le m√™me sens et sur une file diff√©rente',
      '10. changeait de file',
      '11. doublait',
      '12. virait √† droite',
      '13. virait √† gauche',
      '14. reculait',
      '15. empi√©tait sur une partie de chauss√©e r√©serv√©e',
      '16. venait de droite (dans un carrefour)',
      '17. n\'avait pas observ√© le signal d\'arr√™t',
    ];

    return List.generate(circonstancesStandard.length, (index) {
      final circonstanceId = circonstancesStandard[index];
      final circonstanceTexte = circonstancesTexte[index];

      // V√©rifier si cette circonstance est s√©lectionn√©e
      final estSelectionnee = circonstancesSelectionnees.any((c) =>
        c.toString().toLowerCase().contains(circonstanceId.toLowerCase()) ||
        c.toString().contains((index + 1).toString()) ||
        c.toString().toLowerCase().contains(circonstanceTexte.toLowerCase().split('.')[1].trim())
      );

      return pw.Container(
        width: 280,
        margin: const pw.EdgeInsets.only(bottom: 4),
        padding: const pw.EdgeInsets.all(6),
        decoration: pw.BoxDecoration(
          color: estSelectionnee ? PdfColors.orange100 : PdfColors.white,
          border: pw.Border.all(
            color: estSelectionnee ? PdfColors.orange : PdfColors.grey400,
            width: estSelectionnee ? 2 : 1,
          ),
          borderRadius: pw.BorderRadius.circular(4),
        ),
        child: pw.Row(
          children: [
            pw.Container(
              width: 14,
              height: 14,
              decoration: pw.BoxDecoration(
                border: pw.Border.all(color: PdfColors.black, width: 1.5),
                color: estSelectionnee ? PdfColors.orange : PdfColors.white,
                borderRadius: pw.BorderRadius.circular(2),
              ),
              child: estSelectionnee ? pw.Center(
                child: pw.Text(
                  '‚úì',
                  style: pw.TextStyle(
                    color: PdfColors.white,
                    fontSize: 10,
                    fontWeight: pw.FontWeight.bold,
                  ),
                ),
              ) : null,
            ),
            pw.SizedBox(width: 8),
            pw.Expanded(
              child: pw.Text(
                circonstanceTexte,
                style: pw.TextStyle(
                  fontSize: 9,
                  fontWeight: estSelectionnee ? pw.FontWeight.bold : pw.FontWeight.normal,
                  color: estSelectionnee ? PdfColors.orange800 : PdfColors.black,
                ),
              ),
            ),
          ],
        ),
      );
    });
  }

  /// üí¨ Case 14: Observations
  static pw.Widget _buildCase14Observations(Map<String, dynamic> formulaire) {
    // R√©cup√©rer toutes les sources d'observations et remarques
    final observations = formulaire['observations'] as String? ?? '';
    final remarques = formulaire['remarques'] as String? ?? '';
    final observationsGenerales = formulaire['observationsGenerales'] as String? ?? '';
    final commentaires = formulaire['commentaires'] as String? ?? '';
    final observationsConducteur = formulaire['observationsConducteur'] as String? ?? '';
    final remarquesConducteur = formulaire['remarquesConducteur'] as String? ?? '';
    final notesAdditionnelles = formulaire['notesAdditionnelles'] as String? ?? '';
    final commentairesLibres = formulaire['commentairesLibres'] as String? ?? '';

    // Combiner toutes les observations non vides
    final toutesObservations = [
      observations,
      remarques,
      observationsGenerales,
      commentaires,
      observationsConducteur,
      remarquesConducteur,
      notesAdditionnelles,
      commentairesLibres
    ].where((obs) => obs.isNotEmpty).toList();

    print('üîç [PDF] Observations trouv√©es: ${toutesObservations.length}');
    for (int i = 0; i < toutesObservations.length; i++) {
      print('üîç [PDF] Observation $i: ${toutesObservations[i].substring(0, toutesObservations[i].length > 50 ? 50 : toutesObservations[i].length)}...');
    }

    return pw.Container(
      width: double.infinity,
      padding: const pw.EdgeInsets.all(15),
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.black, width: 1.5),
        borderRadius: pw.BorderRadius.circular(8),
        color: PdfColors.green50,
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Container(
            padding: const pw.EdgeInsets.symmetric(vertical: 8, horizontal: 12),
            decoration: pw.BoxDecoration(
              color: PdfColors.green,
              borderRadius: pw.BorderRadius.circular(6),
            ),
            child: pw.Text(
              '14. OBSERVATIONS ET REMARQUES',
              style: pw.TextStyle(
                fontWeight: pw.FontWeight.bold,
                fontSize: 14,
                color: PdfColors.white,
              ),
            ),
          ),
          pw.SizedBox(height: 12),

          if (toutesObservations.isNotEmpty) ...[
            // Afficher chaque observation s√©par√©ment avec son type
            ...toutesObservations.asMap().entries.map((entry) {
              final index = entry.key;
              final observation = entry.value;
              final label = _getObservationLabel(observation, formulaire);

              return pw.Container(
                width: double.infinity,
                margin: pw.EdgeInsets.only(bottom: index < toutesObservations.length - 1 ? 8 : 0),
                padding: const pw.EdgeInsets.all(10),
                decoration: pw.BoxDecoration(
                  color: PdfColors.white,
                  border: pw.Border.all(color: PdfColors.green300),
                  borderRadius: pw.BorderRadius.circular(6),
                ),
                child: pw.Column(
                  crossAxisAlignment: pw.CrossAxisAlignment.start,
                  children: [
                    pw.Text(
                      'üí¨ $label',
                      style: pw.TextStyle(
                        fontSize: 10,
                        fontWeight: pw.FontWeight.bold,
                        color: PdfColors.green800,
                      ),
                    ),
                    pw.SizedBox(height: 4),
                    pw.Text(
                      observation,
                      style: const pw.TextStyle(fontSize: 11),
                    ),
                  ],
                ),
              );
            }).toList(),
          ] else ...[
            pw.Container(
              width: double.infinity,
              padding: const pw.EdgeInsets.all(10),
              decoration: pw.BoxDecoration(
                color: PdfColors.grey100,
                border: pw.Border.all(color: PdfColors.grey300),
                borderRadius: pw.BorderRadius.circular(6),
              ),
              child: pw.Text(
                'Aucune observation particuli√®re',
                style: pw.TextStyle(
                  fontSize: 11,
                  fontStyle: pw.FontStyle.italic,
                  color: PdfColors.grey600,
                ),
              ),
            ),
          ],
        ],
      ),
    );
  }




  /// üíæ Sauvegarder et uploader le PDF vers Cloudinary
  static Future<String> _sauvegarderEtUploader(String sessionId, pw.Document pdf) async {
    try {
      // Sauvegarder localement
      final directory = await getApplicationDocumentsDirectory();
      final fileName = 'constat_tunisien_${sessionId}_${DateTime.now().millisecondsSinceEpoch}.pdf';
      final file = File('${directory.path}/$fileName');
      await file.writeAsBytes(await pdf.save());

      // Uploader vers Cloudinary
      final cloudinaryUrl = await _uploadToCloudinary(file, sessionId, fileName);

      // Sauvegarder les m√©tadonn√©es dans Firestore
      await _firestore.collection('constat_pdfs').add({
        'sessionId': sessionId,
        'fileName': fileName,
        'downloadUrl': cloudinaryUrl,
        'fileSize': await file.length(),
        'generatedAt': FieldValue.serverTimestamp(),
        'type': 'tunisian_official_format',
        'version': '1.0.0',
        'storage': 'cloudinary',
      });

      print('‚úÖ [PDF] PDF tunisien sauvegard√© sur Cloudinary: $cloudinaryUrl');
      return cloudinaryUrl;
    } catch (e) {
      print('‚ùå [PDF] Erreur sauvegarde: $e');
      rethrow;
    }
  /// üíæ Sauvegarder PDF localement (fallback)
  static Future<String> _saveLocalPdf(pw.Document pdf, String sessionId) async {
    try {
      // Obtenir le r√©pertoire de t√©l√©chargements
      final directory = Directory('/storage/emulated/0/Download');
      if (!await directory.exists()) {

        await directory.create(recursive: true);
      }

      // Nom du fichier avec timestamp
      final timestamp = DateTime.now().millisecondsSinceEpoch;
      final fileName = 'constat_tunisien_${sessionId}_$timestamp.pdf';
      final file = File('${directory.path}/$fileName');

      // Sauvegarder le PDF
      await file.writeAsBytes(await pdf.save());

      print('üíæ [LOCAL] PDF sauvegard√©: ${file.path}');
      return file.path;

    } catch (e) {
      print('‚ùå [LOCAL] Erreur sauvegarde locale: $e');
      rethrow;
    }
  }

  /// üåê Upload PDF vers Cloudinary avec fallback local
  static Future<String> _uploadToCloudinary(File file, String sessionId, String fileName) async {
    try {
      // Essayer d'abord la sauvegarde locale directement
      print('üíæ [FALLBACK] Sauvegarde locale directe du PDF');

      // Copier vers le dossier de t√©l√©chargements
      final directory = Directory('/storage/emulated/0/Download');
      if (!await directory.exists()) {
        await directory.create(recursive: true);
      }

      final localFile = File('${directory.path}/$fileName');
      await file.copy(localFile.path);

      print('‚úÖ [LOCAL] PDF sauvegard√© avec succ√®s: ${localFile.path}');
      return localFile.path;

    } catch (e) {
      print('‚ùå [CLOUDINARY] Erreur upload: $e');
      rethrow;
    }
  }

  /// ‚úçÔ∏è Section signatures
  static Future<pw.Widget> _buildSectionSignatures(
    List<Map<String, dynamic>> participants,
    Map<String, Map<String, dynamic>> signatures,
  ) async {
    return pw.Container(
      width: double.infinity,
      padding: const pw.EdgeInsets.all(12),
      decoration: pw.BoxDecoration(
        border: pw.Border.all(color: PdfColors.black, width: 2),
        borderRadius: pw.BorderRadius.circular(4),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            '15. Signature des conducteurs',
            style: pw.TextStyle(fontWeight: pw.FontWeight.bold, fontSize: 14),
          ),
          pw.SizedBox(height: 12),

          // Signatures par v√©hicule
          pw.Row(
            children: await Future.wait(participants.asMap().entries.map((entry) async {
              final index = entry.key;
              final participant = entry.value;
              final vehiculeLetter = String.fromCharCode(65 + index);
              final signature = signatures[participant['userId']];

              // Charger l'image de signature si disponible
              pw.ImageProvider? signatureImage;
              if (signature != null) {
                print('üñãÔ∏è [PDF] Donn√©es signature pour ${participant['userId']}: ${signature.keys.toList()}');

                // 1. Essayer les cl√©s de signature base64 directes
                String? signatureData = signature['signatureBase64'] as String? ??
                                       signature['signature'] as String? ??
                                       signature['imageBase64'] as String? ??
                                       signature['base64'] as String? ??
                                       signature['data'] as String?;

                // 2. Si pas trouv√©, chercher dans des sous-objets
                if (signatureData == null || signatureData.isEmpty) {
                  final signatureObj = signature['signatureData'] as Map<String, dynamic>?;
                  if (signatureObj != null) {
                    signatureData = signatureObj['base64'] as String? ??
                                   signatureObj['data'] as String? ??
                                   signatureObj['signature'] as String?;
                  }
                }

                // 3. Essayer aussi dans imageData
                if (signatureData == null || signatureData.isEmpty) {
                  final imageData = signature['imageData'] as Map<String, dynamic>?;
                  if (imageData != null) {
                    signatureData = imageData['base64'] as String? ??
                                   imageData['data'] as String?;
                  }
                }

                // 4. Convertir la signature si trouv√©e
                if (signatureData != null && signatureData.isNotEmpty) {
                  try {
                    print('üñãÔ∏è [PDF] Tentative conversion signature (${signatureData.length} chars)');
                    signatureImage = _convertBase64ToImage(signatureData);
                    if (signatureImage != null) {
                      print('‚úÖ [PDF] Signature convertie avec succ√®s pour ${participant['userId']}');
                    } else {
                      print('‚ö†Ô∏è [PDF] Conversion signature retourn√©e null pour ${participant['userId']}');
                    }
                  } catch (e) {
                    print('‚ùå [PDF] Erreur conversion signature pour ${participant['userId']}: $e');
                  }
                } else {
                  print('‚ö†Ô∏è [PDF] Aucune donn√©e signature trouv√©e pour ${participant['userId']}');
                }
              }

              return pw.Expanded(
                child: pw.Container(
                  margin: const pw.EdgeInsets.symmetric(horizontal: 4),
                  padding: const pw.EdgeInsets.all(8),
                  decoration: pw.BoxDecoration(
                    color: _getVehiculeColor(index).shade(0.1),
                    border: pw.Border.all(color: _getVehiculeColor(index)),
                    borderRadius: pw.BorderRadius.circular(4),
                  ),
                  child: pw.Column(
                    children: [
                      pw.Text(
                        'V√âHICULE $vehiculeLetter',
                        style: pw.TextStyle(
                          fontSize: 12,
                          fontWeight: pw.FontWeight.bold,
                          color: PdfColors.black,
                        ),
                      ),
                      pw.SizedBox(height: 8),

                      // Zone signature
                      pw.Container(
                        width: double.infinity,
                        height: 60,
                        decoration: pw.BoxDecoration(
                          color: PdfColors.white,
                          border: pw.Border.all(color: PdfColors.grey),
                          borderRadius: pw.BorderRadius.circular(4),
                        ),
                        child: signatureImage != null
                          ? pw.Image(signatureImage, fit: pw.BoxFit.contain)
                          : pw.Center(
                              child: pw.Column(
                                mainAxisAlignment: pw.MainAxisAlignment.center,
                                children: [
                                  if (signature != null) ...[
                                    pw.Text(
                                      '‚úì Sign√©',
                                      style: pw.TextStyle(
                                        fontSize: 12,
                                        fontWeight: pw.FontWeight.bold,
                                        color: PdfColors.green,
                                      ),
                                    ),
                                    pw.Text(
                                      _formatTimestamp(signature['dateSignature']),
                                      style: const pw.TextStyle(fontSize: 8, color: PdfColors.grey700),
                                    ),
                                  ] else ...[
                                    pw.Text(
                                      '‚ùå Non sign√©',
                                      style: pw.TextStyle(
                                        fontSize: 10,
                                        color: PdfColors.red,
                                      ),
                                    ),
                                  ],
                                ],
                              ),
                            ),
                      ),

                      pw.SizedBox(height: 4),

                      // Nom du conducteur
                      pw.Text(
                        '${participant['prenom']} ${participant['nom']}',
                        style: const pw.TextStyle(fontSize: 9),
                        textAlign: pw.TextAlign.center,
                      ),
                    ],
                  ),
                ),
              );
            })),
          ),

          pw.SizedBox(height: 12),

          // Note importante
          pw.Container(
            width: double.infinity,
            padding: const pw.EdgeInsets.all(8),
            decoration: pw.BoxDecoration(
              color: PdfColors.red50,
              border: pw.Border.all(color: PdfColors.red),
              borderRadius: pw.BorderRadius.circular(4),
            ),
            child: pw.Text(
              'N.B.: Exiger une photocopie de l\'attestation d\'assurance contre tout v√©hicule qui ne serait pas '
              'en r√®gle et ne pas signer si l\'on n\'est pas d\'accord sur le contenu du constat.',
              style: pw.TextStyle(
                fontSize: 10,
                fontWeight: pw.FontWeight.bold,
                color: PdfColors.red800,
              ),
              textAlign: pw.TextAlign.center,
            ),
          ),
        ],
      ),
    );
  }

  /// üìÑ Pied de page final avec m√©tadonn√©es
  static pw.Widget _buildPiedDePageFinal(Map<String, dynamic> session) {
    return pw.Container(
      width: double.infinity,
      padding: const pw.EdgeInsets.all(12),
      decoration: pw.BoxDecoration(
        color: PdfColors.grey100,
        borderRadius: pw.BorderRadius.circular(4),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Row(
            mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
            children: [
              pw.Text(
                'Document g√©n√©r√© automatiquement',
                style: pw.TextStyle(
                  fontSize: 10,
                  fontWeight: pw.FontWeight.bold,
                  color: PdfColors.grey700,
                ),
              ),
              pw.Text(
                'Application Constat Tunisie',
                style: pw.TextStyle(
                  fontSize: 10,
                  fontWeight: pw.FontWeight.bold,
                  color: PdfColors.blue800,
                ),
              ),
            ],
          ),

          pw.SizedBox(height: 4),

          pw.Row(
            mainAxisAlignment: pw.MainAxisAlignment.spaceBetween,
            children: [
              pw.Text(
                'Date de g√©n√©ration: ${DateFormat('dd/MM/yyyy √† HH:mm').format(DateTime.now())}',
                style: const pw.TextStyle(fontSize: 9, color: PdfColors.grey600),
              ),
              pw.Text(
                'Session: ${session['codeSession'] ?? 'N/A'}',
                style: const pw.TextStyle(fontSize: 9, color: PdfColors.grey600),
              ),
            ],
          ),

          pw.SizedBox(height: 8),

          pw.Text(
            'Ce constat a √©t√© √©tabli de mani√®re collaborative par tous les conducteurs impliqu√©s '
            'et certifi√© par signatures √©lectroniques avec validation OTP SMS.',
            style: const pw.TextStyle(fontSize: 9, color: PdfColors.grey600),
            textAlign: pw.TextAlign.center,
          ),
        ],
      ),
    );
  }

  /// üíæ Sauvegarder et uploader le PDF vers Cloudinary
  static Future<String> _sauvegarderEtUploader(String sessionId, pw.Document pdf) async {
    try {
      // Sauvegarder localement
      final directory = await getApplicationDocumentsDirectory();
      final fileName = 'constat_tunisien_${sessionId}_${DateTime.now().millisecondsSinceEpoch}.pdf';
      final file = File('${directory.path}/$fileName');
      await file.writeAsBytes(await pdf.save());

      // Uploader vers Cloudinary
      final cloudinaryUrl = await _uploadToCloudinary(file, sessionId, fileName);

      // Sauvegarder les m√©tadonn√©es dans Firestore
      await _firestore.collection('constat_pdfs').add({
        'sessionId': sessionId,
        'fileName': fileName,
        'downloadUrl': cloudinaryUrl,
        'fileSize': await file.length(),
        'generatedAt': FieldValue.serverTimestamp(),
        'type': 'tunisian_official_format',
        'version': '1.0.0',
        'storage': 'cloudinary',
      });

      print('‚úÖ [PDF] PDF tunisien sauvegard√© sur Cloudinary: $cloudinaryUrl');
      return cloudinaryUrl;
    } catch (e) {
      print('‚ùå [PDF] Erreur sauvegarde: $e');
      rethrow;
    }
  }

  /// üíæ Sauvegarder PDF localement (fallback)
  static Future<String> _saveLocalPdf(pw.Document pdf, String sessionId) async {
    try {
      // Obtenir le r√©pertoire de t√©l√©chargements
      final directory = Directory('/storage/emulated/0/Download');
      if (!await directory.exists()) {
        await directory.create(recursive: true);
      }

      // Nom du fichier avec timestamp
      final timestamp = DateTime.now().millisecondsSinceEpoch;
      final fileName = 'constat_tunisien_${sessionId}_$timestamp.pdf';
      final file = File('${directory.path}/$fileName');

      // Sauvegarder le PDF
      await file.writeAsBytes(await pdf.save());

      print('üíæ [LOCAL] PDF sauvegard√©: ${file.path}');
      return file.path;

    } catch (e) {
      print('‚ùå [LOCAL] Erreur sauvegarde locale: $e');
      rethrow;
    }
  }

  /// üåê Upload PDF vers Cloudinary avec fallback local
  static Future<String> _uploadToCloudinary(File file, String sessionId, String fileName) async {
    try {
      // Essayer d'abord la sauvegarde locale directement
      print('üíæ [FALLBACK] Sauvegarde locale directe du PDF');

      // Copier vers le dossier de t√©l√©chargements
      final directory = Directory('/storage/emulated/0/Download');
      if (!await directory.exists()) {
        await directory.create(recursive: true);
      }

      final localFile = File('${directory.path}/$fileName');
      await file.copy(localFile.path);

      print('‚úÖ [LOCAL] PDF sauvegard√© avec succ√®s: ${localFile.path}');
      return localFile.path;

    } catch (e) {
      print('‚ùå [LOCAL] Erreur sauvegarde: $e');
      // Retourner le chemin original en cas d'erreur
      return file.path;
    }
  }

  /// üè∑Ô∏è Obtenir le label appropri√© pour une observation
  static String _getObservationLabel(String observation, Map<String, dynamic> formulaire) {
    if (observation == formulaire['observations']) return 'Observations g√©n√©rales';
    if (observation == formulaire['remarques']) return 'Remarques';
    if (observation == formulaire['observationsGenerales']) return 'Observations g√©n√©rales';
    if (observation == formulaire['commentaires']) return 'Commentaires';
    if (observation == formulaire['observationsConducteur']) return 'Observations du conducteur';
    if (observation == formulaire['remarquesConducteur']) return 'Remarques du conducteur';
    if (observation == formulaire['notesAdditionnelles']) return 'Notes additionnelles';
    if (observation == formulaire['commentairesLibres']) return 'Commentaires libres';
    return 'Observation';
  }

  /// üìã √âTAPE 8: R√©sum√© complet du formulaire tel qu'il est
  static pw.Widget _buildEtape8ResumeFormulaire(
    Map<String, dynamic> formulaire,
    Map<String, dynamic> participant,
    int index
  ) {
    print('üìã [PDF] Construction r√©sum√© formulaire pour participant $index');

    return pw.Container(
      width: double.infinity,
      margin: const pw.EdgeInsets.only(bottom: 15),
      decoration: pw.BoxDecoration(
        gradient: pw.LinearGradient(
          colors: [PdfColors.purple50, PdfColors.white],
          begin: pw.Alignment.topLeft,
          end: pw.Alignment.bottomRight,
        ),
        border: pw.Border.all(color: PdfColors.purple, width: 2),
        borderRadius: pw.BorderRadius.circular(12),
        boxShadow: [
          pw.BoxShadow(
            color: PdfColors.grey300,
            offset: const PdfPoint(0, 3),
            blurRadius: 6,
          ),
        ],
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          // En-t√™te √âTAPE 8
          pw.Container(
            width: double.infinity,
            padding: const pw.EdgeInsets.symmetric(vertical: 12, horizontal: 16),
            decoration: pw.BoxDecoration(
              color: PdfColors.purple,
              borderRadius: const pw.BorderRadius.only(
                topLeft: pw.Radius.circular(10),
                topRight: pw.Radius.circular(10),
              ),
            ),
            child: pw.Text(
              'üìã √âTAPE 8 - R√âSUM√â COMPLET DU FORMULAIRE (Conducteur ${index + 1})',
              style: pw.TextStyle(
                fontWeight: pw.FontWeight.bold,
                fontSize: 14,
                color: PdfColors.white,
                letterSpacing: 0.5,
              ),
              textAlign: pw.TextAlign.center,
            ),
          ),

          pw.Padding(
            padding: const pw.EdgeInsets.all(16),
            child: pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                // Section 1: Points de choc s√©lectionn√©s
                _buildSectionPointsChoc(formulaire),
                pw.SizedBox(height: 12),

                // Section 2: D√©g√¢ts apparents s√©lectionn√©s
                _buildSectionDegatsApparents(formulaire),
                pw.SizedBox(height: 12),

                // Section 3: Images du formulaire
                _buildSectionImagesFormulaire(formulaire),
                pw.SizedBox(height: 12),

                // Section 4: Circonstances s√©lectionn√©es
                _buildSectionCirconstancesSelectionnees(formulaire),
                pw.SizedBox(height: 12),

                // Section 5: Observations et remarques
                _buildSectionObservationsCompletes(formulaire),
                pw.SizedBox(height: 12),

                // Section 6: Croquis r√©el
                _buildSectionCroquisReel(formulaire),
                pw.SizedBox(height: 12),

                // Section 7: Signature du conducteur
                _buildSectionSignatureConducteur(formulaire, participant),
              ],
            ),
          ),
        ],
      ),
    );
  }

  /// üéØ Section Points de choc s√©lectionn√©s
  static pw.Widget _buildSectionPointsChoc(Map<String, dynamic> formulaire) {
    final pointsChoc = _extrairePointsChoc(formulaire);

    return pw.Container(
      width: double.infinity,
      padding: const pw.EdgeInsets.all(12),
      decoration: pw.BoxDecoration(
        color: PdfColors.red50,
        border: pw.Border.all(color: PdfColors.red300),
        borderRadius: pw.BorderRadius.circular(8),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            'üéØ Points de choc s√©lectionn√©s',
            style: pw.TextStyle(
              fontSize: 12,
              fontWeight: pw.FontWeight.bold,
              color: PdfColors.red800,
            ),
          ),
          pw.SizedBox(height: 8),
          if (pointsChoc.isNotEmpty) ...[
            pw.Wrap(
              spacing: 6,
              runSpacing: 4,
              children: pointsChoc.map((point) => pw.Container(
                padding: const pw.EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: pw.BoxDecoration(
                  color: PdfColors.red,
                  borderRadius: pw.BorderRadius.circular(12),
                ),
                child: pw.Text(
                  point.toString(),
                  style: pw.TextStyle(
                    fontSize: 10,
                    fontWeight: pw.FontWeight.bold,
                    color: PdfColors.white,
                  ),
                ),
              )).toList(),
            ),
          ] else ...[
            pw.Text(
              'Aucun point de choc s√©lectionn√©',
              style: const pw.TextStyle(
                fontSize: 10,
                color: PdfColors.grey600,
              ),
            ),
          ],
        ],
      ),
    );
  }

  /// üí• Section D√©g√¢ts apparents s√©lectionn√©s
  static pw.Widget _buildSectionDegatsApparents(Map<String, dynamic> formulaire) {
    final degats = _extraireDegatsSelectionnes(formulaire);

    return pw.Container(
      width: double.infinity,
      padding: const pw.EdgeInsets.all(12),
      decoration: pw.BoxDecoration(
        color: PdfColors.orange50,
        border: pw.Border.all(color: PdfColors.orange300),
        borderRadius: pw.BorderRadius.circular(8),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            'üí• D√©g√¢ts apparents s√©lectionn√©s',
            style: pw.TextStyle(
              fontSize: 12,
              fontWeight: pw.FontWeight.bold,
              color: PdfColors.orange800,
            ),
          ),
          pw.SizedBox(height: 8),
          if (degats.isNotEmpty) ...[
            pw.Wrap(
              spacing: 6,
              runSpacing: 4,
              children: degats.map((degat) => pw.Container(
                padding: const pw.EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: pw.BoxDecoration(
                  color: PdfColors.orange,
                  borderRadius: pw.BorderRadius.circular(12),
                ),
                child: pw.Text(
                  degat.toString(),
                  style: pw.TextStyle(
                    fontSize: 10,
                    fontWeight: pw.FontWeight.bold,
                    color: PdfColors.white,
                  ),
                ),
              )).toList(),
            ),
          ] else ...[
            pw.Text(
              'Aucun d√©g√¢t apparent s√©lectionn√©',
              style: const pw.TextStyle(
                fontSize: 10,
                color: PdfColors.grey600,
              ),
            ),
          ],
        ],
      ),
    );
  }

  /// üì∑ Section Images du formulaire
  static pw.Widget _buildSectionImagesFormulaire(Map<String, dynamic> formulaire) {
    final images = _extraireImagesFormulaire(formulaire);

    return pw.Container(
      width: double.infinity,
      padding: const pw.EdgeInsets.all(12),
      decoration: pw.BoxDecoration(
        color: PdfColors.blue50,
        border: pw.Border.all(color: PdfColors.blue300),
        borderRadius: pw.BorderRadius.circular(8),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            'üì∑ Images ins√©r√©es dans le formulaire',
            style: pw.TextStyle(
              fontSize: 12,
              fontWeight: pw.FontWeight.bold,
              color: PdfColors.blue800,
            ),
          ),
          pw.SizedBox(height: 8),
          if (images.isNotEmpty) ...[
            pw.Text(
              '${images.length} image(s) disponible(s):',
              style: pw.TextStyle(
                fontSize: 10,
                fontWeight: pw.FontWeight.bold,
                color: PdfColors.blue700,
              ),
            ),
            pw.SizedBox(height: 8),
            // Afficher les vraies images
            pw.Wrap(
              spacing: 8,
              runSpacing: 8,
              children: images.take(4).map((imageData) {
                return _buildImagePreview(imageData, 80, 60);
              }).toList(),
            ),
            if (images.length > 4) ...[
              pw.SizedBox(height: 4),
              pw.Text(
                '... et ${images.length - 4} autres images',
                style: const pw.TextStyle(fontSize: 9, color: PdfColors.blue500),
              ),
            ],
          ] else ...[
            pw.Text(
              'Aucune image ins√©r√©e dans le formulaire',
              style: const pw.TextStyle(
                fontSize: 10,
                color: PdfColors.grey600,
              ),
            ),
          ],
        ],
      ),
    );
  }

  /// ‚ö° Section Circonstances s√©lectionn√©es
  static pw.Widget _buildSectionCirconstancesSelectionnees(Map<String, dynamic> formulaire) {
    final circonstances = _extraireCirconstancesSelectionnees(formulaire);

    return pw.Container(
      width: double.infinity,
      padding: const pw.EdgeInsets.all(12),
      decoration: pw.BoxDecoration(
        color: PdfColors.yellow50,
        border: pw.Border.all(color: PdfColors.yellow600),
        borderRadius: pw.BorderRadius.circular(8),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            '‚ö° Circonstances s√©lectionn√©es par ce conducteur',
            style: pw.TextStyle(
              fontSize: 12,
              fontWeight: pw.FontWeight.bold,
              color: PdfColors.yellow800,
            ),
          ),
          pw.SizedBox(height: 8),
          if (circonstances.isNotEmpty) ...[
            ...circonstances.map((circonstance) => pw.Container(
              margin: const pw.EdgeInsets.only(bottom: 4),
              padding: const pw.EdgeInsets.symmetric(horizontal: 8, vertical: 4),
              decoration: pw.BoxDecoration(
                color: PdfColors.yellow200,
                borderRadius: pw.BorderRadius.circular(6),
              ),
              child: pw.Row(
                children: [
                  pw.Container(
                    width: 12,
                    height: 12,
                    decoration: pw.BoxDecoration(
                      color: PdfColors.yellow800,
                      borderRadius: pw.BorderRadius.circular(2),
                    ),
                    child: pw.Center(
                      child: pw.Text(
                        '‚úì',
                        style: pw.TextStyle(
                          fontSize: 8,
                          fontWeight: pw.FontWeight.bold,
                          color: PdfColors.white,
                        ),
                      ),
                    ),
                  ),
                  pw.SizedBox(width: 8),
                  pw.Expanded(
                    child: pw.Text(
                      circonstance.toString(),
                      style: const pw.TextStyle(
                        fontSize: 10,
                        color: PdfColors.yellow900,
                      ),
                    ),
                  ),
                ],
              ),
            )).toList(),
          ] else ...[
            pw.Text(
              'Aucune circonstance s√©lectionn√©e',
              style: const pw.TextStyle(
                fontSize: 10,
                color: PdfColors.grey600,
              ),
            ),
          ],
        ],
      ),
    );
  }

  /// üí¨ Section Observations compl√®tes
  static pw.Widget _buildSectionObservationsCompletes(Map<String, dynamic> formulaire) {
    final observations = _extraireObservationsCompletes(formulaire);

    return pw.Container(
      width: double.infinity,
      padding: const pw.EdgeInsets.all(12),
      decoration: pw.BoxDecoration(
        color: PdfColors.green50,
        border: pw.Border.all(color: PdfColors.green300),
        borderRadius: pw.BorderRadius.circular(8),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            'üí¨ Observations et remarques √©crites par le conducteur',
            style: pw.TextStyle(
              fontSize: 12,
              fontWeight: pw.FontWeight.bold,
              color: PdfColors.green800,
            ),
          ),
          pw.SizedBox(height: 8),
          if (observations.isNotEmpty) ...[
            ...observations.map((obs) => pw.Container(
              margin: const pw.EdgeInsets.only(bottom: 8),
              padding: const pw.EdgeInsets.all(8),
              decoration: pw.BoxDecoration(
                color: PdfColors.white,
                border: pw.Border.all(color: PdfColors.green200),
                borderRadius: pw.BorderRadius.circular(6),
              ),
              child: pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  pw.Text(
                    obs['label'] ?? 'Observation',
                    style: pw.TextStyle(
                      fontSize: 10,
                      fontWeight: pw.FontWeight.bold,
                      color: PdfColors.green700,
                    ),
                  ),
                  pw.SizedBox(height: 4),
                  pw.Text(
                    obs['text'] ?? '',
                    style: const pw.TextStyle(fontSize: 10),
                  ),
                ],
              ),
            )).toList(),
          ] else ...[
            pw.Text(
              'Aucune observation ou remarque √©crite',
              style: const pw.TextStyle(
                fontSize: 10,
                color: PdfColors.grey600,
              ),
            ),
          ],
        ],
      ),
    );
  }

  /// üé® Section Croquis r√©el
  static pw.Widget _buildSectionCroquisReel(Map<String, dynamic> formulaire) {
    final croquisData = _extraireCroquisReel(formulaire);

    return pw.Container(
      width: double.infinity,
      padding: const pw.EdgeInsets.all(12),
      decoration: pw.BoxDecoration(
        color: PdfColors.purple50,
        border: pw.Border.all(color: PdfColors.purple300),
        borderRadius: pw.BorderRadius.circular(8),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            'üé® Croquis r√©el de l\'accident',
            style: pw.TextStyle(
              fontSize: 12,
              fontWeight: pw.FontWeight.bold,
              color: PdfColors.purple800,
            ),
          ),
          pw.SizedBox(height: 8),
          if (croquisData['hasImage'] == true) ...[
            pw.Container(
              padding: const pw.EdgeInsets.all(8),
              decoration: pw.BoxDecoration(
                color: PdfColors.white,
                border: pw.Border.all(color: PdfColors.purple200),
                borderRadius: pw.BorderRadius.circular(6),
              ),
              child: pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  pw.Text(
                    '‚úÖ Croquis disponible',
                    style: pw.TextStyle(
                      fontSize: 10,
                      fontWeight: pw.FontWeight.bold,
                      color: PdfColors.purple700,
                    ),
                  ),
                  pw.SizedBox(height: 8),
                  // Afficher l'image du croquis
                  if (croquisData['imageData'] != null) ...[
                    pw.Center(
                      child: pw.Container(
                        width: 150,
                        height: 100,
                        decoration: pw.BoxDecoration(
                          border: pw.Border.all(color: PdfColors.purple300),
                          borderRadius: pw.BorderRadius.circular(4),
                        ),
                        child: croquisData['imageData'],
                      ),
                    ),
                    pw.SizedBox(height: 8),
                  ],
                  if (croquisData['source'] != null) ...[
                    pw.Text(
                      'Source: ${croquisData['source']}',
                      style: const pw.TextStyle(fontSize: 9, color: PdfColors.purple600),
                    ),
                  ],
                  if (croquisData['dateCreation'] != null) ...[
                    pw.SizedBox(height: 2),
                    pw.Text(
                      'Cr√©√© le: ${croquisData['dateCreation']}',
                      style: const pw.TextStyle(fontSize: 9, color: PdfColors.purple600),
                    ),
                  ],
                ],
              ),
            ),
          ] else ...[
            pw.Text(
              'Aucun croquis r√©el disponible',
              style: const pw.TextStyle(
                fontSize: 10,
                color: PdfColors.grey600,
              ),
            ),
          ],
        ],
      ),
    );
  }

  /// ‚úçÔ∏è Section Signature du conducteur
  static pw.Widget _buildSectionSignatureConducteur(Map<String, dynamic> formulaire, Map<String, dynamic> participant) {
    final signatureData = _extraireSignatureConducteur(formulaire, participant);

    return pw.Container(
      width: double.infinity,
      padding: const pw.EdgeInsets.all(12),
      decoration: pw.BoxDecoration(
        color: PdfColors.indigo50,
        border: pw.Border.all(color: PdfColors.indigo300),
        borderRadius: pw.BorderRadius.circular(8),
      ),
      child: pw.Column(
        crossAxisAlignment: pw.CrossAxisAlignment.start,
        children: [
          pw.Text(
            '‚úçÔ∏è Signature √©lectronique du conducteur',
            style: pw.TextStyle(
              fontSize: 12,
              fontWeight: pw.FontWeight.bold,
              color: PdfColors.indigo800,
            ),
          ),
          pw.SizedBox(height: 8),
          if (signatureData['hasSignature'] == true) ...[
            pw.Container(
              padding: const pw.EdgeInsets.all(8),
              decoration: pw.BoxDecoration(
                color: PdfColors.white,
                border: pw.Border.all(color: PdfColors.indigo200),
                borderRadius: pw.BorderRadius.circular(6),
              ),
              child: pw.Column(
                crossAxisAlignment: pw.CrossAxisAlignment.start,
                children: [
                  pw.Text(
                    '‚úÖ Signature disponible',
                    style: pw.TextStyle(
                      fontSize: 10,
                      fontWeight: pw.FontWeight.bold,
                      color: PdfColors.indigo700,
                    ),
                  ),
                  pw.SizedBox(height: 8),
                  // Afficher l'image de la signature
                  if (signatureData['imageData'] != null) ...[
                    pw.Center(
                      child: pw.Container(
                        width: 120,
                        height: 60,
                        decoration: pw.BoxDecoration(
                          border: pw.Border.all(color: PdfColors.indigo300),
                          borderRadius: pw.BorderRadius.circular(4),
                        ),
                        child: signatureData['imageData'],
                      ),
                    ),
                    pw.SizedBox(height: 8),
                  ],
                  if (signatureData['dateSignature'] != null) ...[
                    pw.Text(
                      'Sign√©e le: ${signatureData['dateSignature']}',
                      style: const pw.TextStyle(fontSize: 9, color: PdfColors.indigo600),
                    ),
                  ],
                  if (signatureData['source'] != null) ...[
                    pw.SizedBox(height: 2),
                    pw.Text(
                      'Source: ${signatureData['source']}',
                      style: const pw.TextStyle(fontSize: 9, color: PdfColors.indigo600),
                    ),
                  ],
                ],
              ),
            ),
          ] else ...[
            pw.Text(
              'Aucune signature √©lectronique disponible',
              style: const pw.TextStyle(
                fontSize: 10,
                color: PdfColors.grey600,
              ),
            ),
          ],
        ],
      ),
    );
  }

  /// ‚úçÔ∏è Extraire la signature du conducteur
  static Map<String, dynamic> _extraireSignatureConducteur(Map<String, dynamic> formulaire, Map<String, dynamic> participant) {
    final signatureData = <String, dynamic>{
      'hasSignature': false,
      'source': null,
      'dateSignature': null,
      'imageData': null,
    };

    print('üîç [PDF] Recherche signature dans formulaire: ${formulaire.keys}');
    print('üîç [PDF] Recherche signature dans participant: ${participant.keys}');

    // Chercher la signature dans diff√©rentes sources
    final sources = [
      {'data': formulaire, 'name': 'formulaire'},
      {'data': participant, 'name': 'participant'},
    ];

    for (final source in sources) {
      final data = source['data'] as Map<String, dynamic>;
      final sourceName = source['name'] as String;

      final clesPossibles = [
        'signature', 'signatureData', 'signatureConducteur', 'signatureBase64',
        'signatureElectronique', 'signatureImage', 'conducteurSignature'
      ];

      for (final cle in clesPossibles) {
        final valeur = data[cle];
        if (valeur != null) {
          print('üîç [PDF] Signature trouv√©e dans $sourceName.$cle: ${valeur.runtimeType}');

          if (valeur is String && valeur.isNotEmpty) {
            signatureData['hasSignature'] = true;
            signatureData['source'] = '$sourceName.$cle';

            // Essayer de convertir en image
            final imageProvider = _convertBase64ToImage(valeur);
            if (imageProvider != null) {
              signatureData['imageData'] = pw.Image(imageProvider, fit: pw.BoxFit.contain);
            }

            // Chercher la date
            signatureData['dateSignature'] = data['dateSignature'] ?? data['signatureDate'];
            return signatureData;
          } else if (valeur is Map && valeur.isNotEmpty) {
            signatureData['hasSignature'] = true;
            signatureData['source'] = '$sourceName.$cle';

            if (valeur['dateSignature'] != null) {
              signatureData['dateSignature'] = valeur['dateSignature'];
            }

            // Chercher l'image dans la map
            final imageKeys = ['base64', 'signatureBase64', 'data', 'image'];
            for (final imageKey in imageKeys) {
              final imageData = valeur[imageKey];
              if (imageData is String && imageData.isNotEmpty) {
                final imageProvider = _convertBase64ToImage(imageData);
                if (imageProvider != null) {
                  signatureData['imageData'] = pw.Image(imageProvider, fit: pw.BoxFit.contain);
                  return signatureData;
                }
              }
            }
          }
        }
      }
    }

    print('üîç [PDF] Signature finale: hasSignature=${signatureData['hasSignature']}, source=${signatureData['source']}');
    return signatureData;
  }

  /// üéØ Extraire les points de choc s√©lectionn√©s
  static List<dynamic> _extrairePointsChoc(Map<String, dynamic> formulaire) {
    final pointsChoc = <dynamic>[];

    print('üîç [PDF] Recherche points de choc dans: ${formulaire.keys}');

    // Chercher dans toutes les cl√©s possibles pour les points de choc
    final clesPossibles = [
      'pointsChocSelectionnes', 'selectedImpactPoints', 'pointsChoc',
      'pointsImpact', 'impactPoints', 'zonesImpact', 'pointsSelectionnes',
      'pointsDeChoc', 'selectedPoints', 'chocsSelectionnes'
    ];

    for (final cle in clesPossibles) {
      final valeur = formulaire[cle];
      if (valeur != null) {
        print('üîç [PDF] Points de choc trouv√©s dans $cle: $valeur');
        if (valeur is List) {
          pointsChoc.addAll(valeur);
        } else if (valeur is Map) {
          // Si c'est une map, prendre les cl√©s avec valeur true
          valeur.forEach((key, value) {
            if (value == true) {
              pointsChoc.add(key);
            }
          });
        } else if (valeur is String && valeur.isNotEmpty) {
          // Si c'est une string, essayer de la parser
          try {
            final parts = valeur.split(',');
            pointsChoc.addAll(parts.map((p) => p.trim()).where((p) => p.isNotEmpty));
          } catch (e) {
            pointsChoc.add(valeur);
          }
        } else {
          pointsChoc.add(valeur);
        }
      }
    }

    print('üîç [PDF] Points de choc finaux: $pointsChoc');
    return pointsChoc.where((p) => p != null && p.toString().isNotEmpty).toList();
  }

  /// üí• Extraire les d√©g√¢ts s√©lectionn√©s
  static List<dynamic> _extraireDegatsSelectionnes(Map<String, dynamic> formulaire) {
    final degats = <dynamic>[];

    print('üîç [PDF] Recherche d√©g√¢ts dans: ${formulaire.keys}');

    // Chercher dans toutes les cl√©s possibles pour les d√©g√¢ts
    final clesPossibles = [
      'degatsSelectionnes', 'selectedDamages', 'degatsApparentsSelectionnes',
      'degatsApparents', 'damages', 'degatsVisibles', 'typesDegats',
      'degatsChoisis', 'selectedDamageTypes', 'degatsListe'
    ];

    for (final cle in clesPossibles) {
      final valeur = formulaire[cle];
      if (valeur != null) {
        print('üîç [PDF] D√©g√¢ts trouv√©s dans $cle: $valeur');
        if (valeur is List) {
          degats.addAll(valeur);
        } else if (valeur is Map) {
          // Si c'est une map, prendre les cl√©s avec valeur true
          valeur.forEach((key, value) {
            if (value == true) {
              degats.add(key);
            }
          });
        } else if (valeur is String && valeur.isNotEmpty) {
          // Si c'est une string, essayer de la parser
          try {
            final parts = valeur.split(',');
            degats.addAll(parts.map((p) => p.trim()).where((p) => p.isNotEmpty));
          } catch (e) {
            degats.add(valeur);
          }
        } else {
          degats.add(valeur);
        }
      }
    }

    print('üîç [PDF] D√©g√¢ts finaux: $degats');
    return degats.where((d) => d != null && d.toString().isNotEmpty).toList();
  }

  /// üîç Extraire les images du formulaire
  static List<dynamic> _extraireImagesFormulaire(Map<String, dynamic> formulaire) {
    final images = <dynamic>[];

    // Chercher dans toutes les cl√©s possibles
    final clesPossibles = [
      'images', 'imagesFormulaire', 'photosDegats', 'photosDegatUrls',
      'imagesDegats', 'imagesAccident', 'photos', 'photosUrls'
    ];

    for (final cle in clesPossibles) {
      final valeur = formulaire[cle];
      if (valeur != null) {
        if (valeur is List) {
          images.addAll(valeur);
        } else {
          images.add(valeur);
        }
      }
    }

    return images.where((img) => img != null && img.toString().isNotEmpty).toList();
  }

  /// ‚ö° Extraire les circonstances s√©lectionn√©es
  static List<dynamic> _extraireCirconstancesSelectionnees(Map<String, dynamic> formulaire) {
    final circonstances = <dynamic>[];

    // Chercher dans toutes les cl√©s possibles
    final clesPossibles = [
      'circonstances', 'circonstancesSelectionnees', 'selectedCircumstances',
      'circonstancesChoisies', 'listeCirconstances'
    ];

    for (final cle in clesPossibles) {
      final valeur = formulaire[cle];
      if (valeur != null) {
        if (valeur is List) {
          circonstances.addAll(valeur);
        } else if (valeur is Map) {
          // Si c'est une map, prendre les cl√©s avec valeur true
          valeur.forEach((key, value) {
            if (value == true) {
              circonstances.add(key);
            }
          });
        }
      }
    }

    return circonstances.where((c) => c != null).toList();
  }

  /// üí¨ Extraire les observations compl√®tes
  static List<Map<String, String>> _extraireObservationsCompletes(Map<String, dynamic> formulaire) {
    final observations = <Map<String, String>>[];

    final sources = {
      'observations': 'Observations g√©n√©rales',
      'remarques': 'Remarques',
      'observationsGenerales': 'Observations g√©n√©rales',
      'commentaires': 'Commentaires',
      'observationsConducteur': 'Observations du conducteur',
      'remarquesConducteur': 'Remarques du conducteur',
      'notesAdditionnelles': 'Notes additionnelles',
      'commentairesLibres': 'Commentaires libres'
    };

    sources.forEach((cle, label) {
      final valeur = formulaire[cle] as String?;
      if (valeur != null && valeur.isNotEmpty) {
        observations.add({
          'label': label,
          'text': valeur,
        });
      }
    });

    return observations;
  }

  /// üé® Extraire les donn√©es du croquis r√©el
  static Map<String, dynamic> _extraireCroquisReel(Map<String, dynamic> formulaire) {
    final croquisData = <String, dynamic>{
      'hasImage': false,
      'source': null,
      'dateCreation': null,
      'imageData': null,
    };

    print('üîç [PDF] Recherche croquis dans: ${formulaire.keys}');

    // Chercher le croquis dans diff√©rentes sources
    final clesPossibles = [
      'croquis', 'croquisData', 'croquisBase64', 'imageBase64',
      'croquisUrl', 'imageUrl', 'sketch', 'drawing', 'sketchData'
    ];

    for (final cle in clesPossibles) {
      final valeur = formulaire[cle];
      if (valeur != null) {
        print('üîç [PDF] Croquis trouv√© dans $cle: ${valeur.runtimeType}');

        if (valeur is String && valeur.isNotEmpty) {
          croquisData['hasImage'] = true;
          croquisData['source'] = cle;

          // Essayer de convertir en image
          final imageProvider = _convertBase64ToImage(valeur);
          if (imageProvider != null) {
            croquisData['imageData'] = pw.Image(imageProvider, fit: pw.BoxFit.contain);
          }
          break;
        } else if (valeur is Map && valeur.isNotEmpty) {
          croquisData['hasImage'] = true;
          croquisData['source'] = cle;

          if (valeur['dateCreation'] != null) {
            croquisData['dateCreation'] = valeur['dateCreation'];
          }

          // Chercher l'image dans la map
          final imageKeys = ['base64', 'imageBase64', 'data', 'image', 'croquisBase64'];
          for (final imageKey in imageKeys) {
            final imageData = valeur[imageKey];
            if (imageData is String && imageData.isNotEmpty) {
              final imageProvider = _convertBase64ToImage(imageData);
              if (imageProvider != null) {
                croquisData['imageData'] = pw.Image(imageProvider, fit: pw.BoxFit.contain);
                break;
              }
            }
          }
          break;
        }
      }
    }

    print('üîç [PDF] Croquis final: hasImage=${croquisData['hasImage']}, source=${croquisData['source']}');
    return croquisData;
  }

  /// üñºÔ∏è Construire un aper√ßu d'image
  static pw.Widget _buildImagePreview(dynamic imageData, double width, double height) {
    try {
      pw.ImageProvider? imageProvider;

      // Essayer de convertir l'image selon son type
      if (imageData is String) {
        if (imageData.startsWith('data:image/') || imageData.startsWith('iVBORw0KGgo') || imageData.contains('base64')) {
          // C'est une image base64
          final base64Image = _convertBase64ToImage(imageData);
          if (base64Image != null) {
            imageProvider = base64Image;
          }
        } else if (imageData.startsWith('http')) {
          // C'est une URL - on ne peut pas la charger directement dans le PDF
          return pw.Container(
            width: width,
            height: height,
            decoration: pw.BoxDecoration(
              color: PdfColors.blue100,
              border: pw.Border.all(color: PdfColors.blue300),
              borderRadius: pw.BorderRadius.circular(4),
            ),
            child: pw.Center(
              child: pw.Column(
                mainAxisAlignment: pw.MainAxisAlignment.center,
                children: [
                  pw.Text(
                    'üåê',
                    style: const pw.TextStyle(fontSize: 16),
                  ),
                  pw.SizedBox(height: 2),
                  pw.Text(
                    'Image URL',
                    style: const pw.TextStyle(fontSize: 8, color: PdfColors.blue700),
                  ),
                ],
              ),
            ),
          );
        }
      } else if (imageData is Map) {
        // Chercher dans les cl√©s de la map
        final base64Keys = ['base64', 'imageBase64', 'data', 'image'];
        for (final key in base64Keys) {
          final base64Data = imageData[key];
          if (base64Data is String && base64Data.isNotEmpty) {
            final base64Image = _convertBase64ToImage(base64Data);
            if (base64Image != null) {
              imageProvider = base64Image;
              break;
            }
          }
        }
      }

      // Si on a une image, l'afficher
      if (imageProvider != null) {
        return pw.Container(
          width: width,
          height: height,
          decoration: pw.BoxDecoration(
            border: pw.Border.all(color: PdfColors.blue300),
            borderRadius: pw.BorderRadius.circular(4),
          ),
          child: pw.Image(
            imageProvider,
            fit: pw.BoxFit.cover,
          ),
        );
      }

      // Fallback si pas d'image
      return pw.Container(
        width: width,
        height: height,
        decoration: pw.BoxDecoration(
          color: PdfColors.grey100,
          border: pw.Border.all(color: PdfColors.grey300),
          borderRadius: pw.BorderRadius.circular(4),
        ),
        child: pw.Center(
          child: pw.Column(
            mainAxisAlignment: pw.MainAxisAlignment.center,
            children: [
              pw.Text(
                'üì∑',
                style: const pw.TextStyle(fontSize: 16, color: PdfColors.grey600),
              ),
              pw.SizedBox(height: 2),
              pw.Text(
                'Image',
                style: const pw.TextStyle(fontSize: 8, color: PdfColors.grey600),
              ),
            ],
          ),
        ),
      );

    } catch (e) {
      print('‚ùå [PDF] Erreur affichage image: $e');
      return pw.Container(
        width: width,
        height: height,
        decoration: pw.BoxDecoration(
          color: PdfColors.red100,
          border: pw.Border.all(color: PdfColors.red300),
          borderRadius: pw.BorderRadius.circular(4),
        ),
        child: pw.Center(
          child: pw.Text(
            '‚ùå',
            style: const pw.TextStyle(fontSize: 16, color: PdfColors.red600),
          ),
        ),
      );
    }
  }
}
