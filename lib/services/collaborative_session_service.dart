import 'dart:math' as math;
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../models/collaborative_session_model.dart';
import 'collaborative_pdf_service.dart';
import 'modern_tunisian_pdf_service.dart';
import 'agent_notification_service.dart';
import '../models/guest_participant_model.dart';
import '../models/accident_session_complete.dart';

/// üéØ Service principal pour g√©rer les sessions collaboratives
class CollaborativeSessionService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static const String _sessionsCollection = 'sessions_collaboratives';
  static const String _guestDataCollection = 'guest_participants_data';

  /// üÜï Cr√©er une nouvelle session collaborative
  static Future<CollaborativeSession> creerSessionCollaborative({
    required String typeAccident,
    required int nombreVehicules,
    required String nomCreateur,
    required String prenomCreateur,
    required String emailCreateur,
    required String telephoneCreateur,
  }) async {
    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user == null) throw Exception('Utilisateur non connect√©');

      // G√©n√©rer code de session unique (6 caract√®res alphanum√©riques)
      final codeSession = _genererCodeSession();
      
      // G√©n√©rer donn√©es QR Code
      final qrCodeData = _genererQRCodeData(codeSession, typeAccident);

      // Cr√©er le participant cr√©ateur
      final participantCreateur = SessionParticipant(
        userId: user.uid,
        nom: nomCreateur,
        prenom: prenomCreateur,
        email: emailCreateur,
        telephone: telephoneCreateur,
        roleVehicule: 'A', // Le cr√©ateur est toujours v√©hicule A
        type: ParticipantType.inscrit,
        statut: ParticipantStatus.rejoint,
        estCreateur: true,
        dateRejoint: DateTime.now(),
      );

      // Cr√©er la session
      final session = CollaborativeSession(
        id: '', // Sera d√©fini apr√®s cr√©ation
        codeSession: codeSession,
        qrCodeData: qrCodeData,
        typeAccident: typeAccident,
        nombreVehicules: nombreVehicules,
        statut: SessionStatus.creation,
        conducteurCreateur: user.uid,
        participants: [participantCreateur],
        progression: SessionProgress(
          participantsRejoints: 1,
          formulairesTermines: 0,
          croquisValides: 0,
          signaturesEffectuees: 0,
          croquisCree: false,
          peutFinaliser: false,
        ),
        parametres: SessionSettings(),
        dateCreation: DateTime.now(),
      );

      // Sauvegarder en Firestore
      print('üíæ [CREATION] Sauvegarde dans collection: $_sessionsCollection');
      print('üíæ [CREATION] Code session: ${session.codeSession}');

      final docRef = await _firestore.collection(_sessionsCollection).add(session.toMap());

      print('‚úÖ Session collaborative cr√©√©e: ${docRef.id}');
      print('‚úÖ Code session g√©n√©r√©: ${session.codeSession}');

      // Retourner la session avec l'ID
      return CollaborativeSession(
        id: docRef.id,
        codeSession: session.codeSession,
        qrCodeData: session.qrCodeData,
        typeAccident: session.typeAccident,
        nombreVehicules: session.nombreVehicules,
        statut: session.statut,
        conducteurCreateur: session.conducteurCreateur,
        participants: session.participants,
        progression: session.progression,
        parametres: session.parametres,
        dateCreation: session.dateCreation,
      );
    } catch (e) {
      print('‚ùå Erreur cr√©ation session collaborative: $e');
      throw Exception('Impossible de cr√©er la session: $e');
    }
  }

  /// üîç Rejoindre une session par code
  static Future<CollaborativeSession?> rejoindreSession({
    required String codeSession,
    required String nom,
    required String prenom,
    required String email,
    required String telephone,
    required ParticipantType type,
    String? adresse,
    String? cin,
  }) async {
    try {
      print('üîç [REJOINDRE] D√©but recherche session avec code: $codeSession');
      final user = FirebaseAuth.instance.currentUser;
      if (user == null) throw Exception('Utilisateur non connect√©');

      // Rechercher la session par code
      print('üîç [REJOINDRE] Recherche dans collection: $_sessionsCollection');
      final querySnapshot = await _firestore
          .collection(_sessionsCollection)
          .where('codeSession', isEqualTo: codeSession)
          .limit(1)
          .get();

      print('üîç [REJOINDRE] R√©sultats trouv√©s: ${querySnapshot.docs.length}');

      if (querySnapshot.docs.isEmpty) {
        // Essayer de chercher toutes les sessions pour debug
        print('üîç [DEBUG] Recherche de toutes les sessions actives...');
        final allSessions = await _firestore
            .collection(_sessionsCollection)
            .where('statut', whereIn: ['creation', 'attente_participants', 'en_cours'])
            .get();

        print('üîç [DEBUG] Sessions actives trouv√©es: ${allSessions.docs.length}');
        for (var doc in allSessions.docs) {
          final data = doc.data();
          print('üîç [DEBUG] Session ${doc.id}: code=${data['codeSession']}, statut=${data['statut']}');
        }

        throw Exception('Session non trouv√©e avec ce code: $codeSession');
      }

      final sessionDoc = querySnapshot.docs.first;
      final session = CollaborativeSession.fromMap(sessionDoc.data(), sessionDoc.id);

      // V√©rifier si l'utilisateur n'est pas d√©j√† dans la session
      final existeDejaParticipant = session.participants.any((p) => p.userId == user.uid);
      if (existeDejaParticipant) {
        throw Exception('Vous participez d√©j√† √† cette session');
      }

      // V√©rifier si la session peut encore accepter des participants
      if (session.participants.length >= session.nombreVehicules) {
        throw Exception('Cette session est compl√®te');
      }

      // D√©terminer le r√¥le v√©hicule (A, B, C, etc.)
      final rolesUtilises = session.participants.map((p) => p.roleVehicule).toSet();
      final roleVehicule = _obtenirProchainRole(rolesUtilises, session.nombreVehicules);

      // Cr√©er le nouveau participant
      final nouveauParticipant = SessionParticipant(
        userId: user.uid,
        nom: nom,
        prenom: prenom,
        email: email,
        telephone: telephone,
        roleVehicule: roleVehicule,
        type: type,
        statut: ParticipantStatus.rejoint,
        estCreateur: false,
        dateRejoint: DateTime.now(),
        adresse: adresse,
        cin: cin,
      );

      // Mettre √† jour la session
      final participantsMisAJour = [...session.participants, nouveauParticipant];
      final progressionMiseAJour = SessionProgress(
        participantsRejoints: participantsMisAJour.length,
        formulairesTermines: session.progression.formulairesTermines,
        croquisValides: session.progression.croquisValides,
        signaturesEffectuees: session.progression.signaturesEffectuees,
        croquisCree: session.progression.croquisCree,
        peutFinaliser: session.progression.peutFinaliser,
      );

      // D√©terminer le nouveau statut
      SessionStatus nouveauStatut = session.statut;
      if (participantsMisAJour.length == session.nombreVehicules) {
        nouveauStatut = SessionStatus.en_cours;
      } else if (session.statut == SessionStatus.creation) {
        nouveauStatut = SessionStatus.attente_participants;
      }

      // Sauvegarder les modifications
      await _firestore.collection(_sessionsCollection).doc(session.id).update({
        'participants': participantsMisAJour.map((p) => p.toMap()).toList(),
        'progression': progressionMiseAJour.toMap(),
        'statut': nouveauStatut.name,
        'dateModification': Timestamp.fromDate(DateTime.now()),
      });

      // Retourner la session mise √† jour
      return CollaborativeSession(
        id: session.id,
        codeSession: session.codeSession,
        qrCodeData: session.qrCodeData,
        typeAccident: session.typeAccident,
        nombreVehicules: session.nombreVehicules,
        statut: nouveauStatut,
        conducteurCreateur: session.conducteurCreateur,
        participants: participantsMisAJour,
        progression: progressionMiseAJour,
        parametres: session.parametres,
        dateCreation: session.dateCreation,
        dateModification: DateTime.now(),
      );
    } catch (e) {
      print('‚ùå Erreur rejoindre session: $e');
      throw Exception('Impossible de rejoindre la session: $e');
    }
  }

  /// üìã Obtenir une session par ID
  static Future<CollaborativeSession?> obtenirSession(String sessionId) async {
    try {
      final doc = await _firestore.collection(_sessionsCollection).doc(sessionId).get();
      if (!doc.exists) return null;
      
      return CollaborativeSession.fromMap(doc.data()!, doc.id);
    } catch (e) {
      print('‚ùå Erreur obtenir session: $e');
      return null;
    }
  }

  /// üìã Obtenir une session par code
  static Future<CollaborativeSession?> obtenirSessionParCode(String codeSession) async {
    try {
      final querySnapshot = await _firestore
          .collection(_sessionsCollection)
          .where('codeSession', isEqualTo: codeSession)
          .limit(1)
          .get();

      if (querySnapshot.docs.isEmpty) return null;
      
      final doc = querySnapshot.docs.first;
      return CollaborativeSession.fromMap(doc.data(), doc.id);
    } catch (e) {
      print('‚ùå Erreur obtenir session par code: $e');
      return null;
    }
  }

  /// üîÑ Stream en temps r√©el d'une session
  static Stream<CollaborativeSession?> streamSession(String sessionId) {
    return _firestore
        .collection(_sessionsCollection)
        .doc(sessionId)
        .snapshots()
        .map((doc) {
      if (!doc.exists) return null;
      return CollaborativeSession.fromMap(doc.data()!, doc.id);
    });
  }

  /// üíæ Sauvegarder les donn√©es d'un participant invit√©
  static Future<void> sauvegarderDonneesInvite(GuestParticipant guestData) async {
    try {
      await _firestore
          .collection(_guestDataCollection)
          .doc('${guestData.sessionId}_${guestData.participantId}')
          .set(guestData.toMap());
    } catch (e) {
      print('‚ùå Erreur sauvegarde donn√©es invit√©: $e');
      throw Exception('Impossible de sauvegarder les donn√©es: $e');
    }
  }

  /// üìã Obtenir les donn√©es d'un participant invit√©
  static Future<GuestParticipant?> obtenirDonneesInvite(String sessionId, String participantId) async {
    try {
      final doc = await _firestore
          .collection(_guestDataCollection)
          .doc('${sessionId}_$participantId')
          .get();
      
      if (!doc.exists) return null;
      return GuestParticipant.fromMap(doc.data()!);
    } catch (e) {
      print('‚ùå Erreur obtenir donn√©es invit√©: $e');
      return null;
    }
  }

  /// üìä Mettre √† jour le statut d'un participant
  static Future<void> mettreAJourStatutParticipant({
    required String sessionId,
    required String userId,
    required ParticipantStatus nouveauStatut,
  }) async {
    try {
      print('üîÑ [STATUT] D√©but mise √† jour statut pour userId: $userId, nouveau statut: ${nouveauStatut.name}');
      final sessionDoc = await _firestore.collection(_sessionsCollection).doc(sessionId).get();

      if (!sessionDoc.exists) {
        throw Exception('Session non trouv√©e');
      }

      final sessionData = sessionDoc.data()!;

      // Gestion s√©curis√©e du type de participants
      List<Map<String, dynamic>> participants = [];
      final participantsData = sessionData['participants'];

      if (participantsData != null) {
        if (participantsData is List) {
          // Si c'est d√©j√† une liste, la convertir en s√©curit√©
          participants = participantsData.map((item) {
            if (item is Map<String, dynamic>) {
              return item;
            } else if (item is Map) {
              return Map<String, dynamic>.from(item);
            } else {
              print('‚ö†Ô∏è [STATUT] Participant ignor√© (type invalide): $item');
              return <String, dynamic>{};
            }
          }).where((item) => item.isNotEmpty).toList();
        } else if (participantsData is Map) {
          // Si c'est un Map, le convertir en liste
          print('üîÑ [STATUT] Conversion Map vers List pour participants');
          participants = [Map<String, dynamic>.from(participantsData)];
        } else {
          print('‚ö†Ô∏è [STATUT] Type de participants non support√©: ${participantsData.runtimeType}');
        }
      }

      print('üìä [STATUT] Participants charg√©s: ${participants.length}');

      // Trouver et mettre √† jour le participant
      bool participantTrouve = false;
      for (int i = 0; i < participants.length; i++) {
        if (participants[i]['userId'] == userId) {
          final ancienStatut = participants[i]['statut'];
          participants[i]['statut'] = nouveauStatut.name;
          if (nouveauStatut == ParticipantStatus.formulaire_fini) {
            participants[i]['dateFormulaireFini'] = Timestamp.fromDate(DateTime.now());
          } else if (nouveauStatut == ParticipantStatus.signe) {
            participants[i]['dateSignature'] = Timestamp.fromDate(DateTime.now());
          }
          print('üîÑ [STATUT] Participant $userId: $ancienStatut ‚Üí ${nouveauStatut.name}');
          participantTrouve = true;
          break;
        }
      }

      if (!participantTrouve) {
        throw Exception('Participant non trouv√© dans la session');
      }

      // Calculer la nouvelle progression avec sessionId pour comptage signatures
      final progression = await _calculerProgression(participants, sessionId);

      // D√©terminer le nouveau statut de session
      final nouveauStatutSession = _determinerStatutSession(participants, progression);

      // Mettre √† jour la session
      print('üîÑ [STATUT] Mise √† jour session avec ${participants.length} participants, ${progression.signaturesEffectuees} signatures');
      await _firestore.collection(_sessionsCollection).doc(sessionId).update({
        'participants': participants,
        'progression': progression.toMap(),
        'statut': nouveauStatutSession.name,
        'dateModification': Timestamp.fromDate(DateTime.now()),
      });
      print('‚úÖ [STATUT] Statut participant mis √† jour avec succ√®s');
    } catch (e) {
      print('‚ùå Erreur mise √† jour statut participant: $e');
      throw Exception('Impossible de mettre √† jour le statut: $e');
    }
  }

  /// üíæ Sauvegarder les donn√©es de formulaire d'un participant
  static Future<void> sauvegarderDonneesFormulaire({
    required String sessionId,
    required String userId,
    required Map<String, dynamic> donneesFormulaire,
  }) async {
    try {
      // Sauvegarder les donn√©es du formulaire
      await _firestore
          .collection(_sessionsCollection)
          .doc(sessionId)
          .collection('formulaires')
          .doc(userId)
          .set({
        ...donneesFormulaire,
        'userId': userId,
        'dateModification': Timestamp.fromDate(DateTime.now()),
        'complete': true,
      });

      // Mettre √† jour le statut du participant
      await mettreAJourStatutParticipant(
        sessionId: sessionId,
        userId: userId,
        nouveauStatut: ParticipantStatus.formulaire_fini,
      );
    } catch (e) {
      print('‚ùå Erreur sauvegarde formulaire: $e');
      throw Exception('Impossible de sauvegarder le formulaire: $e');
    }
  }

  /// üìã Obtenir les donn√©es de formulaire d'un participant
  static Future<Map<String, dynamic>?> obtenirDonneesFormulaire(String sessionId, String userId) async {
    try {
      final doc = await _firestore
          .collection(_sessionsCollection)
          .doc(sessionId)
          .collection('formulaires')
          .doc(userId)
          .get();

      return doc.exists ? doc.data() : null;
    } catch (e) {
      print('‚ùå Erreur obtenir donn√©es formulaire: $e');
      return null;
    }
  }

  /// üîÑ Stream des donn√©es de formulaire d'un participant
  static Stream<Map<String, dynamic>?> streamDonneesFormulaire(String sessionId, String userId) {
    return _firestore
        .collection(_sessionsCollection)
        .doc(sessionId)
        .collection('formulaires')
        .doc(userId)
        .snapshots()
        .map((doc) => doc.exists ? doc.data() : null);
  }

  /// üìä Stream de tous les formulaires d'une session
  static Stream<List<Map<String, dynamic>>> streamTousLesFormulaires(String sessionId) {
    return _firestore
        .collection(_sessionsCollection)
        .doc(sessionId)
        .collection('formulaires')
        .snapshots()
        .map((snapshot) => snapshot.docs.map((doc) => {
          'userId': doc.id,
          ...doc.data(),
        }).toList());
  }

  /// üìù Mettre √† jour les circonstances d'un participant
  static Future<void> mettreAJourCirconstances({
    required String sessionId,
    required String userId,
    required String roleVehicule,
    required List<String> circonstances,
  }) async {
    try {
      // Sauvegarder les circonstances dans la sous-collection
      await _firestore
          .collection(_sessionsCollection)
          .doc(sessionId)
          .collection('circonstances')
          .doc(userId)
          .set({
        'userId': userId,
        'roleVehicule': roleVehicule,
        'circonstances': circonstances,
        'dateModification': Timestamp.fromDate(DateTime.now()),
      });

      print('‚úÖ Circonstances sauvegard√©es pour $userId');
    } catch (e) {
      print('‚ùå Erreur sauvegarde circonstances: $e');
      throw Exception('Impossible de sauvegarder les circonstances: $e');
    }
  }

  /// üìã Obtenir les circonstances d'un participant
  static Future<Map<String, dynamic>?> obtenirCirconstances(String sessionId, String userId) async {
    try {
      final doc = await _firestore
          .collection(_sessionsCollection)
          .doc(sessionId)
          .collection('circonstances')
          .doc(userId)
          .get();

      return doc.exists ? doc.data() : null;
    } catch (e) {
      print('‚ùå Erreur obtenir circonstances: $e');
      return null;
    }
  }

  /// ‚úçÔ∏è Ajouter une signature
  static Future<void> ajouterSignature({
    required String sessionId,
    required String userId,
    required String signatureBase64,
    required String roleVehicule,
  }) async {
    try {
      print('üîÑ [SIGNATURE] D√©but ajout signature pour userId: $userId, sessionId: $sessionId');
      print('üîÑ [SIGNATURE] Collection: $_sessionsCollection');
      print('üîÑ [SIGNATURE] RoleVehicule: $roleVehicule');

      // V√©rifier que la session existe
      final sessionDoc = await _firestore
          .collection(_sessionsCollection)
          .doc(sessionId)
          .get();

      if (!sessionDoc.exists) {
        throw Exception('Session $sessionId non trouv√©e');
      }

      print('‚úÖ [SIGNATURE] Session trouv√©e: ${sessionDoc.id}');

      // Sauvegarder la signature dans la sous-collection
      final signatureData = {
        'userId': userId,
        'roleVehicule': roleVehicule,
        'signatureBase64': signatureBase64,
        'dateSignature': Timestamp.fromDate(DateTime.now()),
        'dateCreation': DateTime.now().toIso8601String(),
      };

      print('üîÑ [SIGNATURE] Sauvegarde dans: $_sessionsCollection/$sessionId/signatures/$userId');

      await _firestore
          .collection(_sessionsCollection)
          .doc(sessionId)
          .collection('signatures')
          .doc(userId)
          .set(signatureData);

      print('‚úÖ [SIGNATURE] Signature sauvegard√©e dans Firestore');

      // V√©rifier que la signature a √©t√© sauvegard√©e
      final signatureDoc = await _firestore
          .collection(_sessionsCollection)
          .doc(sessionId)
          .collection('signatures')
          .doc(userId)
          .get();

      if (signatureDoc.exists) {
        print('‚úÖ [SIGNATURE] V√©rification: signature bien enregistr√©e');
      } else {
        print('‚ùå [SIGNATURE] ERREUR: signature non trouv√©e apr√®s sauvegarde');
      }

      // Mettre √† jour le statut du participant
      print('üîÑ [SIGNATURE] Mise √† jour statut participant...');
      await mettreAJourStatutParticipant(
        sessionId: sessionId,
        userId: userId,
        nouveauStatut: ParticipantStatus.signe,
      );

      // V√©rifier √† nouveau apr√®s la mise √† jour
      print('üîÑ [SIGNATURE] V√©rification finale apr√®s mise √† jour...');
      final finalSignaturesSnapshot = await _firestore
          .collection(_sessionsCollection)
          .doc(sessionId)
          .collection('signatures')
          .get();

      print('üîç [SIGNATURE] Nombre de signatures apr√®s mise √† jour: ${finalSignaturesSnapshot.docs.length}');
      for (final doc in finalSignaturesSnapshot.docs) {
        print('üîç [SIGNATURE] - ID: ${doc.id}, Data: ${doc.data()}');
      }

      print('‚úÖ [SIGNATURE] Signature ajout√©e avec succ√®s pour $userId');

      // üîÑ Forcer la mise √† jour de la progression pour corriger le bug d'affichage
      try {
        await forcerMiseAJourProgressionSignatures(sessionId);
        print('üîÑ [SIGNATURE] Progression forc√©e mise √† jour automatiquement');
      } catch (e) {
        print('‚ö†Ô∏è [SIGNATURE] Erreur mise √† jour progression forc√©e: $e');
      }

    } catch (e) {
      print('‚ùå [SIGNATURE] Erreur ajout signature: $e');
      print('‚ùå [SIGNATURE] Stack trace: ${StackTrace.current}');
      throw Exception('Impossible d\'ajouter la signature: $e');
    }
  }

  /// üìã Obtenir toutes les signatures d'une session
  static Future<List<Map<String, dynamic>>> obtenirToutesLesSignatures(String sessionId) async {
    try {
      final snapshot = await _firestore
          .collection(_sessionsCollection)
          .doc(sessionId)
          .collection('signatures')
          .get();

      return snapshot.docs.map((doc) => {
        'id': doc.id,
        ...doc.data(),
      }).toList();
    } catch (e) {
      print('‚ùå Erreur obtenir signatures: $e');
      return [];
    }
  }

  /// üèÅ Finaliser la session et d√©clencher la g√©n√©ration PDF + envoi
  static Future<void> finaliserSession(String sessionId) async {
    try {
      print('üèÅ [FINALISATION] D√©but finalisation session $sessionId');

      // 1. R√©cup√©rer les donn√©es de la session
      final sessionDoc = await _firestore.collection(_sessionsCollection).doc(sessionId).get();
      if (!sessionDoc.exists) {
        throw Exception('Session non trouv√©e');
      }

      final sessionData = sessionDoc.data()!;
      final participants = List<Map<String, dynamic>>.from(sessionData['participants'] ?? []);

      // 2. V√©rifier que tout est pr√™t pour la finalisation
      final progression = await _calculerProgression(participants, sessionId);
      final nombreVehicules = sessionData['nombreVehicules'] ?? 2;

      // V√©rifier aussi les signatures dans la sous-collection
      final signaturesSnapshot = await _firestore
          .collection(_sessionsCollection)
          .doc(sessionId)
          .collection('signatures')
          .get();

      final signaturesEnSousCollection = signaturesSnapshot.docs.length;
      final signaturesMaximales = math.max(progression.signaturesEffectuees, signaturesEnSousCollection);

      print('üîç [FINALISATION] V√©rification signatures:');
      print('   - Participants: ${participants.length}');
      print('   - Nombre v√©hicules: $nombreVehicules');
      print('   - Signatures depuis statuts: ${progression.signaturesEffectuees}');
      print('   - Signatures en sous-collection: $signaturesEnSousCollection');
      print('   - Signatures maximales: $signaturesMaximales');

      if (signaturesMaximales < nombreVehicules) {
        throw Exception('Toutes les signatures ne sont pas encore effectu√©es ($signaturesMaximales/$nombreVehicules)');
      }

      // 3. Marquer la session comme finalis√©e
      await _firestore.collection(_sessionsCollection).doc(sessionId).update({
        'statut': 'finalise',
        'dateFinalisation': Timestamp.fromDate(DateTime.now()),
        'dateModification': Timestamp.fromDate(DateTime.now()),
      });

      // 4. R√©cup√©rer toutes les donn√©es n√©cessaires pour le PDF
      final donneesAccident = sessionData['donneesAccident'] ?? {};
      final participantsData = await _recupererDonneesParticipants(sessionId, participants);
      final croquisData = await _recupererDonneesCroquis(sessionId);

      // 5. G√©n√©rer le PDF au format tunisien officiel
      print('üìÑ [FINALISATION] G√©n√©ration du PDF format tunisien...');
      final pdfUrl = await ModernTunisianPdfService.genererConstatModerne(
        sessionId: sessionId,
      );

      // 6. Mettre √† jour la session avec l'URL du PDF
      await _firestore.collection(_sessionsCollection).doc(sessionId).update({
        'pdfUrl': pdfUrl,
        'dateModification': Timestamp.fromDate(DateTime.now()),
      });

      // 7. Envoyer aux agents d'assurance
      print('üìß [FINALISATION] Envoi aux agents...');
      await _envoyerAuxAgents(sessionId, participantsData, pdfUrl);

      // 8. Traiter les notifications en attente
      print('üìß [FINALISATION] Traitement des notifications...');
      await AgentNotificationService.traiterNotificationsConstats();

      print('‚úÖ [FINALISATION] Session finalis√©e avec succ√®s');

    } catch (e) {
      print('‚ùå [FINALISATION] Erreur: $e');
      rethrow;
    }
  }

  /// üìã R√©cup√©rer les donn√©es compl√®tes des participants
  static Future<List<Map<String, dynamic>>> _recupererDonneesParticipants(
    String sessionId,
    List<Map<String, dynamic>> participants
  ) async {
    final participantsData = <Map<String, dynamic>>[];

    for (final participant in participants) {
      final userId = participant['userId'] as String;

      // R√©cup√©rer le formulaire du participant
      final formulaireDoc = await _firestore
          .collection(_sessionsCollection)
          .doc(sessionId)
          .collection('formulaires')
          .doc(userId)
          .get();

      if (formulaireDoc.exists) {
        final donneesFormulaire = formulaireDoc.data()!;
        participantsData.add({
          ...participant,
          'donneesFormulaire': donneesFormulaire,
        });
      }
    }

    return participantsData;
  }

  /// üé® R√©cup√©rer les donn√©es du croquis
  static Future<Map<String, dynamic>> _recupererDonneesCroquis(String sessionId) async {
    try {
      final croquisDoc = await _firestore
          .collection(_sessionsCollection)
          .doc(sessionId)
          .collection('croquis')
          .doc('principal')
          .get();

      if (croquisDoc.exists) {
        return croquisDoc.data()!;
      }
    } catch (e) {
      print('‚ö†Ô∏è [FINALISATION] Erreur r√©cup√©ration croquis: $e');
    }

    return {};
  }

  /// üìß Envoyer le constat aux agents d'assurance responsables des v√©hicules
  static Future<void> _envoyerAuxAgents(String sessionId, List<Map<String, dynamic>> participantsData, String pdfUrl) async {
    try {
      for (final participant in participantsData) {
        final donneesFormulaire = participant['donneesFormulaire'] as Map<String, dynamic>? ?? {};
        final donneesVehicule = donneesFormulaire['donneesVehicule'] as Map<String, dynamic>? ?? {};
        final donneesAssurance = donneesFormulaire['donneesAssurance'] as Map<String, dynamic>? ?? {};

        final immatriculation = donneesVehicule['immatriculation'] as String?;
        final numeroPolice = donneesAssurance['numeroPolice'] as String?;

        if (immatriculation != null && numeroPolice != null) {
          // 1. Chercher le contrat par num√©ro de police et immatriculation
          final contratQuery = await _firestore
              .collection('contrats')
              .where('numeroPolice', isEqualTo: numeroPolice)
              .where('immatriculation', isEqualTo: immatriculation)
              .limit(1)
              .get();

          if (contratQuery.docs.isNotEmpty) {
            final contratData = contratQuery.docs.first.data();
            final agentId = contratData['agentId'] as String?;

            if (agentId != null) {
              // 2. R√©cup√©rer les informations de l'agent responsable
              final agentDoc = await _firestore
                  .collection('agents_assurance')
                  .doc(agentId)
                  .get();

              if (agentDoc.exists) {
                final agentData = agentDoc.data()!;
                final emailAgent = agentData['email'] as String?;

                if (emailAgent != null) {
                  // 3. Envoyer l'email √† l'agent responsable du contrat
                  await _envoyerEmailAgent(emailAgent, sessionId, participant, pdfUrl, contratQuery.docs.first.id);
                  print('üìß [FINALISATION] Email envoy√© √† $emailAgent pour contrat ${contratQuery.docs.first.id}');
                } else {
                  print('‚ö†Ô∏è [FINALISATION] Email agent non trouv√© pour agent $agentId');
                }
              } else {
                print('‚ö†Ô∏è [FINALISATION] Agent $agentId non trouv√©');
              }
            } else {
              print('‚ö†Ô∏è [FINALISATION] AgentId non d√©fini pour le contrat');
            }
          } else {
            print('‚ö†Ô∏è [FINALISATION] Contrat non trouv√© pour police $numeroPolice et immatriculation $immatriculation');
          }
        } else {
          print('‚ö†Ô∏è [FINALISATION] Donn√©es manquantes: immatriculation=$immatriculation, numeroPolice=$numeroPolice');
        }
      }
    } catch (e) {
      print('‚ùå [FINALISATION] Erreur envoi emails: $e');
    }
  }

  /// üìß Envoyer un email √† un agent sp√©cifique
  static Future<void> _envoyerEmailAgent(String emailAgent, String sessionId, Map<String, dynamic> participantData, String pdfUrl, String contratId) async {
    try {
      // Cr√©er une notification dans Firestore pour d√©clencher l'envoi d'email
      await _firestore.collection('notifications_agents').add({
        'destinataire': emailAgent,
        'type': 'constat_finalise',
        'sessionId': sessionId,
        'contratId': contratId,
        'participantData': participantData,
        'pdfUrl': pdfUrl,
        'dateCreation': Timestamp.fromDate(DateTime.now()),
        'statut': 'en_attente',
        'objet': 'Nouveau constat d\'accident finalis√© - Contrat $contratId',
        'message': 'Un nouveau constat d\'accident a √©t√© finalis√© pour un v√©hicule sous votre gestion. Le PDF du constat est disponible en pi√®ce jointe.',
      });

      print('‚úÖ [FINALISATION] Notification cr√©√©e pour $emailAgent');
    } catch (e) {
      print('‚ùå [FINALISATION] Erreur cr√©ation notification: $e');
    }
  }

  /// üêõ D√©boguer les signatures d'une session
  static Future<void> debuggerSignatures(String sessionId) async {
    try {
      print('üîç [DEBUG] === D√âBUT DEBUG SIGNATURES POUR SESSION $sessionId ===');

      // 1. R√©cup√©rer les donn√©es de la session
      final sessionDoc = await _firestore.collection(_sessionsCollection).doc(sessionId).get();
      if (!sessionDoc.exists) {
        print('‚ùå [DEBUG] Session non trouv√©e');
        return;
      }

      final sessionData = sessionDoc.data()!;
      final participants = List<Map<String, dynamic>>.from(sessionData['participants'] ?? []);
      final nombreVehicules = sessionData['nombreVehicules'] ?? 2;

      print('üîç [DEBUG] Nombre de v√©hicules: $nombreVehicules');
      print('üîç [DEBUG] Nombre de participants: ${participants.length}');

      // 2. Analyser chaque participant
      for (int i = 0; i < participants.length; i++) {
        final participant = participants[i];
        final statut = participant['statut'] as String?;
        final aSigne = participant['aSigne'] as bool? ?? false;
        final userId = participant['userId'] as String?;
        final nom = participant['nom'] as String? ?? 'Inconnu';

        print('üîç [DEBUG] Participant $i: $nom (ID: $userId)');
        print('   - Statut: $statut');
        print('   - A sign√©: $aSigne');
      }

      // 3. V√©rifier la sous-collection signatures
      final signaturesSnapshot = await _firestore
          .collection(_sessionsCollection)
          .doc(sessionId)
          .collection('signatures')
          .get();

      print('üîç [DEBUG] Signatures dans sous-collection: ${signaturesSnapshot.docs.length}');
      for (final doc in signaturesSnapshot.docs) {
        final data = doc.data();
        print('   - Signature ID: ${doc.id}');
        print('   - Donn√©es: $data');
      }

      // 4. Calculer la progression
      final progression = await _calculerProgression(participants, sessionId);
      print('üîç [DEBUG] Progression calcul√©e:');
      print('   - Participants rejoints: ${progression.participantsRejoints}');
      print('   - Formulaires termin√©s: ${progression.formulairesTermines}');
      print('   - Croquis valid√©s: ${progression.croquisValides}');
      print('   - Signatures effectu√©es: ${progression.signaturesEffectuees}');
      print('   - Peut finaliser: ${progression.peutFinaliser}');

      print('üîç [DEBUG] === FIN DEBUG SIGNATURES ===');
    } catch (e) {
      print('‚ùå [DEBUG] Erreur debug signatures: $e');
    }
  }

  /// üîç V√©rifier et corriger les statuts des participants
  static Future<void> verifierEtCorrigerStatuts(String sessionId) async {
    try {
      print('üîç [VERIFICATION] D√©but v√©rification statuts pour session $sessionId');

      final sessionDoc = await _firestore.collection(_sessionsCollection).doc(sessionId).get();
      if (!sessionDoc.exists) {
        print('‚ùå [VERIFICATION] Session non trouv√©e');
        return;
      }

      final sessionData = sessionDoc.data()!;
      final participants = List<Map<String, dynamic>>.from(sessionData['participants'] ?? []);
      bool misAJour = false;

      for (int i = 0; i < participants.length; i++) {
        final participant = participants[i];
        final userId = participant['userId'] as String;
        final statutActuel = participant['statut'] as String? ?? 'en_attente';

        // V√©rifier si le participant a un formulaire termin√©
        final formulaireDoc = await _firestore
            .collection(_sessionsCollection)
            .doc(sessionId)
            .collection('formulaires')
            .doc(userId)
            .get();

        if (formulaireDoc.exists && formulaireDoc.data()?['complete'] == true) {
          if (statutActuel == 'rejoint' || statutActuel == 'en_attente') {
            print('üîß [VERIFICATION] Correction statut $userId: $statutActuel ‚Üí formulaire_fini');
            participants[i]['statut'] = 'formulaire_fini';
            participants[i]['dateFormulaireFini'] = Timestamp.fromDate(DateTime.now());
            misAJour = true;
          }
        }
      }

      if (misAJour) {
        print('üîÑ [VERIFICATION] Mise √† jour des statuts corrig√©s');
        final progression = await _calculerProgression(participants, sessionId);
        final nouveauStatutSession = _determinerStatutSession(participants, progression);

        await _firestore.collection(_sessionsCollection).doc(sessionId).update({
          'participants': participants,
          'progression': progression.toMap(),
          'statut': nouveauStatutSession.name,
          'dateModification': Timestamp.fromDate(DateTime.now()),
        });
        print('‚úÖ [VERIFICATION] Statuts corrig√©s avec succ√®s');
      } else {
        print('‚úÖ [VERIFICATION] Aucune correction n√©cessaire');
      }
    } catch (e) {
      print('‚ùå [VERIFICATION] Erreur: $e');
    }
  }

  /// üîÑ Forcer la mise √† jour de la progression des signatures
  static Future<void> forcerMiseAJourProgressionSignatures(String sessionId) async {
    try {
      print('üîÑ [FORCE-UPDATE] D√©but mise √† jour forc√©e progression signatures');

      final sessionDoc = await _firestore.collection(_sessionsCollection).doc(sessionId).get();
      if (!sessionDoc.exists) {
        print('‚ùå [FORCE-UPDATE] Session non trouv√©e');
        return;
      }

      final sessionData = sessionDoc.data()!;
      final participants = List<Map<String, dynamic>>.from(sessionData['participants'] ?? []);

      // Compter les signatures r√©elles depuis la sous-collection
      final signaturesSnapshot = await _firestore
          .collection(_sessionsCollection)
          .doc(sessionId)
          .collection('signatures')
          .get();

      final signaturesReelles = signaturesSnapshot.docs.length;
      print('üîç [FORCE-UPDATE] Signatures r√©elles trouv√©es: $signaturesReelles');

      // Mettre √† jour les statuts des participants selon les signatures
      bool participantsMisAJour = false;
      for (int i = 0; i < participants.length; i++) {
        final userId = participants[i]['userId'] as String?;
        if (userId != null) {
          final signatureDoc = await _firestore
              .collection(_sessionsCollection)
              .doc(sessionId)
              .collection('signatures')
              .doc(userId)
              .get();

          if (signatureDoc.exists) {
            if (participants[i]['statut'] != 'signe') {
              participants[i]['statut'] = 'signe';
              participantsMisAJour = true;
              print('üîÑ [FORCE-UPDATE] Statut mis √† jour pour $userId: signe');
            }
            if (participants[i]['aSigne'] != true) {
              participants[i]['aSigne'] = true;
              participantsMisAJour = true;
              print('üîÑ [FORCE-UPDATE] aSigne mis √† jour pour $userId: true');
            }
          }
        }
      }

      // Recalculer la progression avec le comptage correct
      final progression = await _calculerProgression(participants, sessionId);
      final nouveauStatutSession = _determinerStatutSession(participants, progression);

      print('üîç [FORCE-UPDATE] Nouvelle progression: ${progression.signaturesEffectuees}/${participants.length}');

      // Mettre √† jour la session
      await _firestore.collection(_sessionsCollection).doc(sessionId).update({
        'participants': participants,
        'progression': progression.toMap(),
        'statut': nouveauStatutSession.name,
        'dateModification': Timestamp.fromDate(DateTime.now()),
      });

      print('‚úÖ [FORCE-UPDATE] Progression signatures mise √† jour avec succ√®s');

    } catch (e) {
      print('‚ùå [FORCE-UPDATE] Erreur: $e');
      rethrow;
    }
  }

  /// üîß Forcer la recalculation compl√®te du statut de session
  static Future<void> forcerRecalculStatutSession(String sessionId) async {
    try {
      print('üîß [RECALCUL-STATUT] D√©but recalcul statut pour session $sessionId');

      final sessionDoc = await _firestore.collection(_sessionsCollection).doc(sessionId).get();
      if (!sessionDoc.exists) {
        print('‚ùå [RECALCUL-STATUT] Session non trouv√©e');
        return;
      }

      final sessionData = sessionDoc.data()!;
      final participants = List<Map<String, dynamic>>.from(sessionData['participants'] ?? []);

      print('üîç [RECALCUL-STATUT] Participants trouv√©s: ${participants.length}');

      // Recalculer la progression avec la nouvelle logique
      final progression = await _calculerProgression(participants, sessionId);
      final nouveauStatutSession = _determinerStatutSession(participants, progression);

      print('üîç [RECALCUL-STATUT] Ancienne progression: ${sessionData['progression']}');
      print('üîç [RECALCUL-STATUT] Nouvelle progression: ${progression.toMap()}');
      print('üîç [RECALCUL-STATUT] Ancien statut: ${sessionData['statut']}');
      print('üîç [RECALCUL-STATUT] Nouveau statut: ${nouveauStatutSession.name}');

      // Mettre √† jour la session avec le nouveau statut
      await _firestore.collection(_sessionsCollection).doc(sessionId).update({
        'progression': progression.toMap(),
        'statut': nouveauStatutSession.name,
        'dateModification': Timestamp.fromDate(DateTime.now()),
      });

      print('‚úÖ [RECALCUL-STATUT] Statut session recalcul√© avec succ√®s');
      print('‚úÖ [RECALCUL-STATUT] Nouveau statut: ${nouveauStatutSession.name}');

    } catch (e) {
      print('‚ùå [RECALCUL-STATUT] Erreur: $e');
      rethrow;
    }
  }

  /// üö® CORRECTION DIRECTE - M√©thode pour corriger imm√©diatement le probl√®me de statut
  static Future<void> corrigerStatutSessionProblematique() async {
    try {
      print('üö® CORRECTION DIRECTE - Recherche des sessions probl√©matiques...');

      // Rechercher les sessions avec statut "finalise" mais progression incompl√®te
      final sessionsQuery = await _firestore
          .collection(_sessionsCollection)
          .where('statut', isEqualTo: 'finalise')
          .get();

      print('üîç Sessions "finalis√©es" trouv√©es: ${sessionsQuery.docs.length}');

      for (final sessionDoc in sessionsQuery.docs) {
        final sessionData = sessionDoc.data();
        final sessionId = sessionDoc.id;
        final participants = List<Map<String, dynamic>>.from(sessionData['participants'] ?? []);

        print('\nüìã Analyse session: $sessionId');
        print('   ‚Ä¢ Participants: ${participants.length}');

        // Calculer la vraie progression
        final progression = await _calculerProgression(participants, sessionId);
        final total = participants.length;

        // V√©rifier si la session est vraiment finalis√©e
        final vraimementFinalisee = progression.formulairesTermines == total &&
                                   progression.croquisValides == total &&
                                   progression.signaturesEffectuees == total &&
                                   total > 0;

        print('   ‚Ä¢ Formulaires: ${progression.formulairesTermines}/$total');
        print('   ‚Ä¢ Croquis: ${progression.croquisValides}/$total');
        print('   ‚Ä¢ Signatures: ${progression.signaturesEffectuees}/$total');
        print('   ‚Ä¢ Vraiment finalis√©e? ${vraimementFinalisee ? "‚úÖ Oui" : "‚ùå Non"}');

        if (!vraimementFinalisee) {
          // Cette session a un statut incorrect, la corriger
          final nouveauStatut = _determinerStatutSession(participants, progression);

          print('   üîß CORRECTION N√âCESSAIRE:');
          print('      ‚Ä¢ Ancien statut: finalise ‚ùå');
          print('      ‚Ä¢ Nouveau statut: ${nouveauStatut.name} ‚úÖ');

          // Mettre √† jour le statut et la progression
          await _firestore.collection(_sessionsCollection).doc(sessionId).update({
            'statut': nouveauStatut.name,
            'progression': progression.toMap(),
            'dateModification': Timestamp.fromDate(DateTime.now()),
            'correctionAppliquee': true,
            'correctionDate': Timestamp.fromDate(DateTime.now()),
          });

          print('   ‚úÖ Session corrig√©e avec succ√®s!');
        } else {
          print('   ‚úÖ Session correctement finalis√©e, aucune correction n√©cessaire');
        }
      }

      print('\nüéâ CORRECTION DIRECTE TERMIN√âE!');
      print('   Toutes les sessions probl√©matiques ont √©t√© corrig√©es.');

    } catch (e) {
      print('‚ùå Erreur lors de la correction directe: $e');
      rethrow;
    }
  }

  /// üîß M√©thodes utilitaires priv√©es
  static Future<SessionProgress> _calculerProgression(List<Map<String, dynamic>> participants, [String? sessionId]) async {
    int participantsRejoints = 0;
    int formulairesTermines = 0;
    int croquisValides = 0;
    int signaturesEffectuees = 0;

    print('üîç [PROGRESSION] ===== CALCUL PROGRESSION D√âTAILL√â =====');

    for (final participant in participants) {
      final statut = participant['statut'] as String?;
      final aSigne = participant['aSigne'] as bool? ?? false;
      final formulaireStatus = participant['formulaireStatus'] as String?;
      final formulaireComplete = participant['formulaireComplete'] as bool? ?? false;
      final userId = participant['userId'] as String? ?? 'inconnu';

      print('üîç [PROGRESSION] Participant $userId:');
      print('   - statut: $statut');
      print('   - formulaireStatus: $formulaireStatus');
      print('   - formulaireComplete: $formulaireComplete');
      print('   - aSigne: $aSigne');

      if (statut != null && statut != 'en_attente') {
        participantsRejoints++;
      }

      // üî• CORRECTION: Utiliser formulaireStatus et formulaireComplete pour d√©terminer si termin√©
      if (formulaireStatus == 'termine' || formulaireComplete == true || statut == 'formulaire_fini') {
        formulairesTermines++;
        print('   ‚úÖ Formulaire termin√©');
      } else {
        print('   ‚ùå Formulaire non termin√©');
      }

      // üî• CORRECTION: Si le participant a sign√©, cela implique qu'il a valid√© le croquis
      if (statut == 'croquis_valide' || statut == 'signe' || (statut == 'formulaire_fini' && aSigne)) {
        croquisValides++;
        print('   ‚úÖ Croquis valid√© (statut: $statut, aSigne: $aSigne)');
      } else {
        print('   ‚ùå Croquis non valid√© (statut: $statut, aSigne: $aSigne)');
      }

      // Compter les signatures depuis le statut OU le champ aSigne
      if (statut == 'signe' || aSigne) {
        signaturesEffectuees++;
        print('   ‚úÖ Signature effectu√©e');
      } else {
        print('   ‚ùå Signature non effectu√©e');
      }
    }

    print('üîç [PROGRESSION] R√âSULTATS:');
    print('   - Participants rejoints: $participantsRejoints/${participants.length}');
    print('   - Formulaires termin√©s: $formulairesTermines/${participants.length}');
    print('   - Croquis valid√©s: $croquisValides/${participants.length}');
    print('   - Signatures effectu√©es: $signaturesEffectuees/${participants.length}');

    // üî• CORRECTION: Compter aussi depuis la sous-collection signatures si sessionId fourni
    if (sessionId != null) {
      try {
        final signaturesSnapshot = await _firestore
            .collection(_sessionsCollection)
            .doc(sessionId)
            .collection('signatures')
            .get();

        final signaturesEnSousCollection = signaturesSnapshot.docs.length;

        // Utiliser le maximum entre les deux m√©thodes de comptage
        signaturesEffectuees = math.max(signaturesEffectuees, signaturesEnSousCollection);

        print('üîç [PROGRESSION] Signatures depuis statuts: ${signaturesEffectuees - signaturesEnSousCollection + signaturesEffectuees}');
        print('üîç [PROGRESSION] Signatures depuis sous-collection: $signaturesEnSousCollection');
        print('üîç [PROGRESSION] Signatures finales: $signaturesEffectuees');
      } catch (e) {
        print('‚ùå [PROGRESSION] Erreur comptage signatures: $e');
      }
    }

    return SessionProgress(
      participantsRejoints: participantsRejoints,
      formulairesTermines: formulairesTermines,
      croquisValides: croquisValides,
      signaturesEffectuees: signaturesEffectuees,
      croquisCree: false, // Sera mis √† jour s√©par√©ment
      peutFinaliser: signaturesEffectuees == participants.length,
    );
  }

  static SessionStatus _determinerStatutSession(List<Map<String, dynamic>> participants, SessionProgress progression) {
    final total = participants.length;

    print('üîç [STATUT] ===== CALCUL STATUT SESSION =====');
    print('üîç [STATUT] Total participants: $total');
    print('üîç [STATUT] Formulaires termin√©s: ${progression.formulairesTermines}/$total');
    print('üîç [STATUT] Croquis valid√©s: ${progression.croquisValides}/$total');
    print('üîç [STATUT] Signatures effectu√©es: ${progression.signaturesEffectuees}/$total');

    // üî• CORRECTION: V√©rifier si TOUT est termin√© avant de finaliser
    if (progression.formulairesTermines == total &&
        progression.croquisValides == total &&
        progression.signaturesEffectuees == total &&
        total > 0) {
      print('‚úÖ [STATUT] TOUTES CONDITIONS REMPLIES ‚Üí finalise');
      print('‚úÖ [STATUT] D√©tail: formulaires(${progression.formulairesTermines}/$total), croquis(${progression.croquisValides}/$total), signatures(${progression.signaturesEffectuees}/$total)');
      return SessionStatus.finalise;
    }
    // V√©rifier si tous ont sign√© (mais pas tout termin√©)
    else if (progression.signaturesEffectuees == total && total > 0) {
      print('üîÑ [STATUT] SIGNATURES COMPL√àTES mais session incompl√®te');
      print('üîÑ [STATUT] Manque: formulaires(${progression.formulairesTermines}/$total), croquis(${progression.croquisValides}/$total)');
      print('üîÑ [STATUT] R√©sultat: signe (pas finalise)');
      return SessionStatus.signe; // Garder statut "sign√©" jusqu'√† finalisation compl√®te
    }
    // V√©rifier si tous ont valid√© le croquis
    else if (progression.croquisValides == total && total > 0) {
      print('üîÑ [STATUT] CROQUIS VALID√âS ‚Üí pret_signature');
      return SessionStatus.pret_signature;
    }
    // V√©rifier si tous ont termin√© leur formulaire
    else if (progression.formulairesTermines == total && total > 0) {
      print('üîÑ [STATUT] FORMULAIRES TERMIN√âS ‚Üí validation_croquis');
      return SessionStatus.validation_croquis;
    }
    // V√©rifier si tous ont rejoint
    else if (progression.participantsRejoints == total && total > 0) {
      print('üîÑ [STATUT] PARTICIPANTS REJOINTS ‚Üí en_cours');
      return SessionStatus.en_cours;
    }
    // Quelques participants ont rejoint
    else if (progression.participantsRejoints > 0) {
      print('üîÑ [STATUT] QUELQUES PARTICIPANTS REJOINTS ‚Üí attente_participants');
      print('üîÑ [STATUT] Rejoints: ${progression.participantsRejoints}/$total');
      return SessionStatus.attente_participants;
    }
    // Aucun participant
    else {
      print('üîÑ [STATUT] AUCUN PARTICIPANT ‚Üí creation');
      return SessionStatus.creation;
    }
  }

  static String _genererCodeSession() {
    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    final random = math.Random();
    return String.fromCharCodes(Iterable.generate(6, (_) => chars.codeUnitAt(random.nextInt(chars.length))));
  }

  static String _genererQRCodeData(String codeSession, String typeAccident) {
    return 'CONSTAT_TUNISIE:$codeSession:$typeAccident:${DateTime.now().millisecondsSinceEpoch}';
  }

  /// üìù Sauvegarder les informations g√©n√©rales d'une session collaborative
  static Future<void> sauvegarderInfosGenerales({
    required String sessionId,
    required DateTime dateAccident,
    required String heureAccident,
    required String lieuAccident,
    required String lieuGps,
    required bool blesses,
    required String detailsBlesses,
    required List<Map<String, dynamic>> temoins,
  }) async {
    try {
      await _firestore.collection(_sessionsCollection).doc(sessionId).update({
        'donneesCommunes': {
          'dateAccident': dateAccident.toIso8601String(),
          'heureAccident': heureAccident,
          'lieuAccident': lieuAccident,
          'lieuGps': lieuGps,
          'blesses': blesses,
          'detailsBlesses': detailsBlesses,
          'temoins': temoins,
          'dateModification': DateTime.now().toIso8601String(),
        },
        'dateModification': DateTime.now().toIso8601String(),
      });
    } catch (e) {
      print('‚ùå Erreur sauvegarde infos g√©n√©rales: $e');
      throw Exception('Impossible de sauvegarder les informations g√©n√©rales: $e');
    }
  }

  /// üîç Rechercher des sessions par code
  static Future<List<CollaborativeSession>> getSessionsByCode(String code) async {
    try {
      print('üîç [RECHERCHE] Recherche session avec code: $code');

      final querySnapshot = await _firestore
          .collection(_sessionsCollection)
          .where('codeSession', isEqualTo: code.toUpperCase())
          .where('statut', whereIn: ['creation', 'attente_participants', 'en_cours', 'validation_croquis', 'pret_signature'])
          .get();

      print('üîç [RECHERCHE] Sessions trouv√©es: ${querySnapshot.docs.length}');

      final sessions = querySnapshot.docs.map((doc) {
        final data = doc.data();
        print('üîç [RECHERCHE] Session ${doc.id}: code=${data['codeSession']}, statut=${data['statut']}');
        return CollaborativeSession.fromMap(data, doc.id);
      }).toList();

      return sessions;
    } catch (e) {
      print('‚ùå Erreur recherche session par code: $e');
      return [];
    }
  }

  /// üìù Mettre √† jour l'√©tat du formulaire d'un participant
  static Future<void> mettreAJourEtatFormulaire({
    required String sessionId,
    required String userId,
    required FormulaireStatus nouvelEtat,
  }) async {
    try {
      print('üìù [FORMULAIRE] Mise √† jour √©tat: $userId ‚Üí ${nouvelEtat.name}');

      final sessionRef = _firestore.collection(_sessionsCollection).doc(sessionId);
      final sessionDoc = await sessionRef.get();

      if (!sessionDoc.exists) {
        print('‚ùå Session non trouv√©e: $sessionId');
        return;
      }

      final sessionData = sessionDoc.data()!;
      final participants = List<Map<String, dynamic>>.from(sessionData['participants'] ?? []);

      // Trouver et mettre √† jour le participant
      bool participantTrouve = false;
      for (int i = 0; i < participants.length; i++) {
        final userId_participant = participants[i]['userId'];
        print('üîç [DEBUG] Comparaison userId: $userId_participant (${userId_participant.runtimeType}) vs $userId (${userId.runtimeType})');

        // Conversion s√©curis√©e pour √©viter les erreurs de cast
        final userIdParticipantStr = userId_participant?.toString() ?? '';
        final userIdStr = userId.toString();

        if (userIdParticipantStr == userIdStr) {
          participants[i]['formulaireStatus'] = nouvelEtat.name;
          participants[i]['formulaireComplete'] = nouvelEtat == FormulaireStatus.termine;

          // Mettre √† jour les dates selon l'√©tat
          if (nouvelEtat == FormulaireStatus.termine) {
            participants[i]['dateFormulaireFini'] = DateTime.now().toIso8601String();
            participants[i]['statut'] = ParticipantStatus.formulaire_fini.name; // üî• Utiliser l'enum correct
            print('‚úÖ [STATUT] Participant ${participants[i]['nom']} ${participants[i]['prenom']} marqu√© comme FORMULAIRE_FINI');
          } else if (nouvelEtat == FormulaireStatus.en_cours) {
            participants[i]['statut'] = ParticipantStatus.rejoint.name; // üî• Utiliser l'enum correct
            print('‚úÖ [STATUT] Participant ${participants[i]['nom']} ${participants[i]['prenom']} marqu√© comme REJOINT');
          }

          print('üîç [DEBUG] Statut final du participant: ${participants[i]['statut']}');

          participantTrouve = true;
          break;
        }
      }

      if (!participantTrouve) {
        print('‚ùå Participant non trouv√©: $userId');
        return;
      }

      // Calculer la progression globale
      final formulairesTermines = participants.where((p) =>
        p['formulaireStatus'] == FormulaireStatus.termine.name
      ).length;

      final progression = sessionData['progression'] as Map<String, dynamic>? ?? {};
      progression['formulairesTermines'] = formulairesTermines;

      // D√©terminer si la session peut passer au statut suivant
      SessionStatus nouveauStatut = SessionStatus.values.firstWhere(
        (s) => s.name == sessionData['statut'],
        orElse: () => SessionStatus.en_cours,
      );

      if (formulairesTermines == participants.length) {
        nouveauStatut = SessionStatus.validation_croquis;
      }

      // Sauvegarder les modifications
      await sessionRef.update({
        'participants': participants,
        'progression': progression,
        'statut': nouveauStatut.name,
        'dateModification': DateTime.now().toIso8601String(),
      });

      print('‚úÖ √âtat formulaire mis √† jour: ${nouvelEtat.name}');
      print('üìä Progression: $formulairesTermines/${participants.length} termin√©s');

    } catch (e) {
      print('‚ùå Erreur mise √† jour √©tat formulaire: $e');
      throw Exception('Impossible de mettre √† jour l\'√©tat du formulaire: $e');
    }
  }

  static String _obtenirProchainRole(Set<String> rolesUtilises, int nombreVehicules) {
    const roles = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O'];
    for (int i = 0; i < nombreVehicules && i < roles.length; i++) {
      if (!rolesUtilises.contains(roles[i])) {
        return roles[i];
      }
    }
    return 'Z'; // Fallback
  }
}
