import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';import ';  }';      debugPrint('[SINISTRE_SERVICE] üìù Creation sinistre';      final sinistreId = 'sinistre_{DateTime.now(').millisecondsSinceEpoch}';        'id';        'numeroSinistre';        'compagnieId';        'agenceId';        'agentId';        'conducteurId';        'vehiculeId';        'contratId';        // Informations de l';        'dateAccident': accidentData['dateAccident';        'heureAccident': accidentData['heureAccident';        'lieuAccident': accidentData['lieuAccident';        'typeAccident': accidentData['typeAccident'] ?? 'Collision';        'gravite': accidentData['gravite'] ?? 'Leger';        'conditions_meteo': accidentData['conditions_meteo'] ?? 'Beau temps';        'etat_route': accidentData['etat_route'] ?? 'Seche';        'circulation': accidentData['circulation'] ?? 'Normale';        'description': circumstancesData['description';        'responsabilite': circumstancesData['responsabilite'] ?? '√Ä determiner';        'temoins': circumstancesData['temoins';        'degats_vehicule': circumstancesData['degats_vehicule'] ?? ';        'degats_tiers': circumstancesData['degats_tiers'] ?? ';        'blesses': circumstancesData['blesses';        'nombre_blesses': circumstancesData['nombre_blesses';        'photos';        'croquis';        'pv_police': circumstancesData['pv_police';        'numero_pv': circumstancesData['numero_pv';        'status': 'nouveau';        'priorite: _calculatePriorite(accidentData, circumstancesData';        'expertId';        'montant_estime';        'montant_reel';        'date_cloture';        'created_at: FieldValue.serverTimestamp(';        'created_by';        'updated_at: FieldValue.serverTimestamp(';        'version';          .collection(';          .set(sinistreData';      // Creer l';        'creation';        ';      ';      debugPrint('[SINISTRE_SERVICE] ‚úÖ Sinistre cree: 'sinistreId';        'success';        'sinistreId';        'numeroSinistre';        'message': ';    } catch (e';      debugPrint('[SINISTRE_SERVICE] ‚ùå Erreur creation:  + e.toString()';        'success';        'error: e.toString(';        'message': ';  static Future<List<Map<String, dynamic>>> getSinistresByAgence(String agenceId';      debugPrint('[SINISTRE_SERVICE] üìã Recuperation sinistres agence: 'agenceId';          .collection('sinistres';          .where('agenceId, isEqualTo: agenceId';          .orderBy(';        final data = doc.data(';        data[';        sinistres.add(data';      debugPrint('[SINISTRE_SERVICE] ‚úÖ ';    } catch (e';      debugPrint(';  static Future<List<Map<String, dynamic>>> getSinistresByCompagnie(String compagnieId';      debugPrint('[SINISTRE_SERVICE] üìã Recuperation sinistres compagnie: 'compagnieId';          .collection('sinistres';          .where('compagnieId, isEqualTo: compagnieId';          .orderBy(';        final data = doc.data(';        data[';        sinistres.add(data';      debugPrint('[SINISTRE_SERVICE] ‚úÖ ';    } catch (e';      debugPrint(';  }';      debugPrint('[SINISTRE_SERVICE] üë®‚Äçüîß Assignation expert: 'expertId';          .collection(';          .doc(sinistreId';        'expertId';        'status': 'en_cours';        'date_assignation: FieldValue.serverTimestamp(';        'assigned_by';        ';      }';      // Creer l';        'assignation_expert';        'Expert assigne';        {';      ';      debugPrint('[SINISTRE_SERVICE] ‚úÖ Expert assigne';        'success';        'message': ';    } catch (e';      debugPrint('[SINISTRE_SERVICE] ‚ùå Erreur assignation:  + e.toString()';        'success';        'error: e.toString(';        'message': 'Erreur lors de l\'assignation';  }';      debugPrint('[SINISTRE_SERVICE] üîÑ Changement statut: 'nouveauStatut';        'status';        'updated_at: FieldValue.serverTimestamp(';        ';      if (commentaire != null';        updateData[';      if (montantReel != null';        updateData['montant_reel';      if (nouveauStatut == 'termine';        updateData['date_cloture] = FieldValue.serverTimestamp(';          .collection(';          .update(updateData';      // Creer l';        'changement_statut';        'Statut change vers: 'nouveauStatut';        {'ancien_statut': 'previous', ';      ';      debugPrint('[SINISTRE_SERVICE] ‚úÖ Statut change';        'success';        'message': ';    } catch (e';      debugPrint('[SINISTRE_SERVICE] ‚ùå Erreur changement statut:  + e.toString()';        'success';        'error: e.toString(';        'message': ';  }';      debugPrint('[SINISTRE_SERVICE] üìä Recuperation stats sinistres';      Query query = _firestore.collection(';      if (compagnieId != null';        query = query.where(';      if (agenceId != null';        query = query.where(';        final data = doc.data(';        switch (data['status]';          case 'nouveau';          case 'en_cours';          case 'termine';        if (data['priorite'] == 'urgente';        if (data['montant_reel] != null';          montantTotal += (data['montant_reel] as num).toDouble(';        'total_sinistres';        'nouveaux';        'en_cours';        'termines';        'urgents';        'montant_total';        'montant_moyen';        'taux_resolution: totalSinistres > 0 ? (termines / totalSinistres * 100';        'last_updated: DateTime.now().toIso8601String(';      debugPrint('[SINISTRE_SERVICE] ‚úÖ Stats calculees: ';    } catch (e';      debugPrint('[SINISTRE_SERVICE] ‚ùå Erreur stats:  + e.toString()';        'total_sinistres';        'nouveaux';        'en_cours';        'termines';        'urgents';        'montant_total';        'montant_moyen';        'taux_resolution';        ';    final month = DateTime.now().month.toString(').padLeft(2, ';    final day = DateTime.now().day.toString(').padLeft(2, ';    final random = Random().nextInt(999).toString(').padLeft(3, ';    final compagnieCode = compagnieId.toUpperCase().substring(0, 3.clamp(0, compagnieId.length)';    return 'SIN-$compagnieCode-$year$month$day-'random';  ';    if (circumstancesData['blesses] == true';      return 'urgente';    if (accidentData['gravite'] == 'Grave';      return 'elevee';    return 'normale';  ]';          .collection(';          .doc(sinistreId';          .collection('historique';        'action';        'description';        'userId';        'metadata';        ';    } catch (e';      debugPrint('[SINISTRE_SERVICE] ‚ùå Erreur historique:  + e.toString()';  /// üìã Recuperer l';  static Future<List<Map<String, dynamic>>> getHistoriqueSinistre(String sinistreId';          .collection(';          .doc(sinistreId';          .collection('historique';          .orderBy(';        final data = doc.data(';        data[';    } catch (e';      debugPrint('[SINISTRE_SERVICE] ‚ùå Erreur historique:  + e.toString()';