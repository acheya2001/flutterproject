import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';/// 📊 Resultat d';  }';/// 📊 Service specialise pour les donnees d';  static Future<InsuranceImportResult> importInsuranceData(String csvContent';      debugPrint(';      final lines = csvContent.trim(').split(';      if (lines.isEmpty';          errors: ['Fichier CSV vide';          dataType: ';        ';      final headers = lines[0].split(';      final dataRows = lines.skip(1).map((line') => line.split(',).toList(';      debugPrint('[INSURANCE_DATA] 📊 Headers: 'headers';      debugPrint('[INSURANCE_DATA] 📊 ';      final dataType = _detectInsuranceDataType(headers';      debugPrint('[INSURANCE_DATA] 🔍 Type detecte: ';      switch (dataType';        case ';          return await _importCompagniesAssurance(headers, dataRows';        case ';          return await _importAgencesAssurance(headers, dataRows';        case ';          return await _importAgentsAssurance(headers, dataRows';        case ';          return await _importVehiculesAssures(headers, dataRows';        case ';          return await _importContratsAssurance(headers, dataRows';        case ';          return await _importSinistresAccidents(headers, dataRows';        case ';    } catch (e';      debugPrint('[INSURANCE_DATA] ❌ Erreur importation:  + e.toString()';        errors: ['Erreur generale: 'e';        dataType: ';      ';  /// 🔍 Detecter le type de donnees d';    final headerStr = headers.join(' ).toLowerCase(';    // Compagnies d';    if (headerStr.contains('compagnie';        headerStr.contains('assurance';        headerStr.contains('assureur';        (headerStr.contains('nom') && headerStr.contains('code)';      return 'compagnies';    if (headerStr.contains('agence';        (headerStr.contains('nom') && headerStr.contains('ville)';      return 'agences';    if (headerStr.contains('agent';        (headerStr.contains('prenom') && headerStr.contains('nom)';      return 'agents';    if (headerStr.contains('vehicule';        headerStr.contains('immatriculation';        headerStr.contains('marque';        headerStr.contains('modele';        headerStr.contains('voiture)';      return 'vehicules';    if (headerStr.contains('contrat';        headerStr.contains('police';        headerStr.contains('prime';        headerStr.contains('assure)';      return 'contrats';    if (headerStr.contains('sinistre';        headerStr.contains('accident';        headerStr.contains('constat';        headerStr.contains('declaration)';      return 'sinistres';    if (headerStr.contains('conducteur';        headerStr.contains('permis';        headerStr.contains('cin)';      return 'conducteurs';    return 'donnees_assurance';        final data = _mapRowToData(headers, row';        if (!data.containsKey('nom') || data['nom].toString().isEmpty';          errors.add('Ligne '{i + 2}: Nom de compagnie manquant';        String code = data['code]?.toString(') ?? ';        if (code.isEmpty';          code = data['nom].toString().toUpperCase(';              .replaceAll(' ', ';              .replaceAll('ASSURANCE', 'ASS';              .substring(0, 4.clamp(0, data[';        final compagnieId = code.toUpperCase(';          'id';          'nom': data['nom';          'code';          'adresse': data['adresse'] ?? data['address'] ?? ';          'telephone': data['telephone'] ?? data['tel'] ?? data['phone'] ?? ';          'email': data['email'] ?? data['mail'] ?? ';          'ville': data['ville'] ?? data['city'] ?? ';          'pays': 'Tunisie';          'status': 'actif';          'type': 'compagnie_assurance';          'created_at: FieldValue.serverTimestamp(';          'imported_from': 'csv';          'import_date: DateTime.now().toIso8601String(';        final collections = ['companies', 'compagnies_assurance', ';                .timeout(const Duration(seconds: 10)';            debugPrint('[INSURANCE_DATA] ✅ Compagnie sauvee dans: ';          } catch (e';            debugPrint(';          createdData.add(compagnieData';          errors.add('Ligne ${i + 2}: Impossible de sauvegarder '{data['nom';      } catch (e';        errors.add('Ligne ${i + 2}: Erreur -  + e.toString()';      dataType: ';    ';  /// 🏪 Importer des agences d';        if (!data.containsKey('nom') || data['nom].toString().isEmpty';          errors.add('Ligne '{i + 2}: Nom d\'agence manquant';        final agenceId = 'agence_${DateTime.now().millisecondsSinceEpoch}_'i';          'id';          'nom': data['nom';          'compagnieId': data['compagnie'] ?? data['compagnieid'] ?? data['assureur'] ?? 'UNKNOWN';          'adresse': data['adresse'] ?? data['address'] ?? ';          'ville': data['ville'] ?? data['city'] ?? ';          'telephone': data['telephone'] ?? data['tel'] ?? data['phone'] ?? ';          'responsable': data['responsable'] ?? data['manager'] ?? ';          'email': data['email'] ?? data['mail'] ?? ';          'status': 'actif';          'type': 'agence_assurance';          'created_at: FieldValue.serverTimestamp(';          'imported_from': 'csv';          'import_date: DateTime.now().toIso8601String(';        final collections = ['agencies', 'agences', ';          createdData.add(agenceData';          errors.add('Ligne ${i + 2}: Impossible de sauvegarder '{data['nom';      } catch (e';        errors.add('Ligne ${i + 2}: Erreur -  + e.toString()';      dataType: ';    ';  /// 📊 Importation generique de donnees d';        final docId = ${dataType}_${DateTime.now(').millisecondsSinceEpoch}_'i';          'id';          'data_type';          'created_at: FieldValue.serverTimestamp(';          'imported_from': 'csv';          ';          createdData.add(docData';          errors.add('Ligne ';      } catch (e';        errors.add(';    ';  /// 🗂️ Obtenir les collections pour un type de donnees d';      case 'compagnies';        return ['companies', 'compagnies_assurance', 'assurance_companies';      case 'agences';        return ['agencies', 'agences', 'insurance_agencies';      case 'agents';        return ['agents', 'insurance_agents', 'users';      case 'vehicules';        return ['vehicles', 'vehicules', 'cars', 'vehicules_assures';      case 'contrats';        return ['contracts', 'contrats', 'insurance_contracts', 'polices';      case 'sinistres';        return ['claims', 'sinistres', 'accidents', 'declarations';      case 'conducteurs';        return ['drivers', 'conducteurs', 'users';        return ['insurance_data', 'csv_imports', ';      final value = row[i]?.toString().trim(') ?? ';      if (value.isNotEmpty';  // Methodes d';    return _importGenericInsuranceData(headers, dataRows, ';  static Future<InsuranceImportResult> _importVehiculesAssures(List<String> headers, List<List<dynamic>> dataRows';    return _importGenericInsuranceData(headers, dataRows, ';  static Future<InsuranceImportResult> _importContratsAssurance(List<String> headers, List<List<dynamic>> dataRows';    return _importGenericInsuranceData(headers, dataRows, ';  static Future<InsuranceImportResult> _importSinistresAccidents(List<String> headers, List<List<dynamic>> dataRows';    return _importGenericInsuranceData(headers, dataRows, ';  static Future<InsuranceImportResult> _importConducteurs(List<String> headers, List<List<dynamic>> dataRows';    return _importGenericInsuranceData(headers, dataRows, ';