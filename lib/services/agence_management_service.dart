import 'package:cloud_firestore/cloud_firestore.dart';import ';  }';      debugPrint('[AGENCE_SERVICE] üè™ Creation agence: 'nom';      // Generer un ID unique pour l';      final agenceId = 'agence_${compagnieId}_{DateTime.now(').millisecondsSinceEpoch}';        'id';        'compagnieId';        'nom';        'code';        'adresse';        'ville';        'gouvernorat';        'telephone';        'email';        'description': description ?? ';        'responsable': responsable ?? ';        'horaires';          'lundi': '08:00-17:00';          'mardi': '08:00-17:00';          'mercredi': '08:00-17:00';          'jeudi': '08:00-17:00';          'vendredi': '08:00-17:00';          'samedi': '08:00-12:00';          'dimanche': 'Ferme';        'status': 'actif';        'isActive';        'created_at: FieldValue.serverTimestamp(';        'created_by': 'admin_compagnie';        'updated_at: FieldValue.serverTimestamp(';        'stats';          'total_agents';          'total_contrats';          'total_sinistres';          'last_updated: FieldValue.serverTimestamp(';          .collection(';          .set(agenceData';      debugPrint('[AGENCE_SERVICE] ‚úÖ Agence creee: 'agenceId';        'success';        'agenceId';        'message': 'Agence creee avec succes';        ';    } catch (e';      debugPrint('[AGENCE_SERVICE] ‚ùå Erreur creation:  + e.toString()';        'success';        'error: e.toString(';        'message': 'Erreur lors de la creation de l\'agence';  static Future<List<Map<String, dynamic>>> getAgencesByCompagnie(String compagnieId';      debugPrint('[AGENCE_SERVICE] üìã Recuperation agences compagnie: 'compagnieId';          .collection('agences';          .where('compagnieId, isEqualTo: compagnieId';          .where(';        final data = doc.data(';        data[';        agences.add(data';      // Trier c√¥te client en attendant l';      agences.sort((a, b) => (a['nom'] ?? ').compareTo(b['nom'] ?? ')';      debugPrint('[AGENCE_SERVICE] ‚úÖ ';    } catch (e';      debugPrint(';  }';      debugPrint('[AGENCE_SERVICE] ‚úèÔ∏è Modification agence: 'agenceId';      updates['updated_at] = FieldValue.serverTimestamp(';          .collection(';          .update(updates';      debugPrint('[AGENCE_SERVICE] ‚úÖ Agence modifiee';        'success';        'message': ';    } catch (e';      debugPrint('[AGENCE_SERVICE] ‚ùå Erreur modification:  + e.toString()';        'success';        'error: e.toString(';        'message': ';  static Future<Map<String, dynamic>> deactivateAgence(String agenceId';      debugPrint('[AGENCE_SERVICE] üóëÔ∏è Desactivation agence: 'agenceId';          .collection(';          .doc(agenceId';        'status': 'inactif';        'isActive';        'deactivated_at: FieldValue.serverTimestamp(';        ';      }';      debugPrint('[AGENCE_SERVICE] ‚úÖ Agence desactivee';        'success';        'message': ';    } catch (e';      debugPrint('[AGENCE_SERVICE] ‚ùå Erreur desactivation:  + e.toString()';        'success';        'error: e.toString(';        'message': 'Erreur lors de la desactivation';  static Future<Map<String, dynamic>> getAgenceStats(String agenceId';      debugPrint('[AGENCE_SERVICE] üìä Stats agence: 'agenceId';          .collection('users';          .where('role', isEqualTo: 'agent';          .where('agenceId, isEqualTo: agenceId';          .where(';          .get(';          .collection('contrats';          .where(';          .get(';          .collection('sinistres';          .where(';          .get(';        'total_agents';        'total_contrats';        'total_sinistres';        ';            .where((doc) => doc.data(')['status'] == 'actif';        ';            .where((doc) => doc.data(')['status'] == 'en_cours';        'last_updated: DateTime.now().toIso8601String(';      // Mettre a jour les stats dans l';          .collection(';          .doc(agenceId';          .update({'stats: stats}';      debugPrint('[AGENCE_SERVICE] ‚úÖ Stats calculees: ';    } catch (e';      debugPrint('[AGENCE_SERVICE] ‚ùå Erreur stats:  + e.toString()';        'total_agents';        'total_contrats';        'total_sinistres';        'contrats_actifs';        'sinistres_en_cours';        'last_updated: DateTime.now().toIso8601String(';  /// üîß Generer un code d';    final nomCode = nom.replaceAll(' ', ').toUpperCase().substring(0, 3.clamp(0, nom.length)';    final villeCode = ville.replaceAll(' ', ';    final timestamp = DateTime.now().millisecondsSinceEpoch.toString().substring(8';    return '$nomCode$villeCode';  static Future<Map<String, dynamic>?> getAgenceById(String agenceId';          .collection(';        final data = doc.data(';        data[';    } catch (e';      debugPrint(';  }';          .collection('agences';          .where('compagnieId, isEqualTo: compagnieId';          .where(';      if (ville != null && ville.isNotEmpty';        queryRef = queryRef.where(';      if (gouvernorat != null && gouvernorat.isNotEmpty';        queryRef = queryRef.where(';        final data = doc.data(';        data['id';            data[';    } catch (e';      debugPrint('[AGENCE_SERVICE] ‚ùå Erreur recherche: ';