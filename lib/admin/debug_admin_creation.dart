import 'package:flutter/material.dart';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';import ';  State<DebugAdminCreationScreen> createState() => _DebugAdminCreationScreenState(';  String _status = ';    setState((';      _status = ';      setState((';        _status = 'üè¢ DIAGNOSTIC DES COMPAGNIES\n\n';        _status += 'üìä STATISTIQUES:\n';        _status += '‚Ä¢ Total compagnies unifiees: '{stats['total']}\n';        _status += '‚Ä¢ Collections trouvees: '{(stats['par_collection] as Map').keys.join(', ')}\n\n';        _status += 'üîç ANALYSE DES DOUBLONS:\n';        _status += '‚Ä¢ Total documents trouves: '{cleanResult['total_found']}\n';        _status += '‚Ä¢ Groupes uniques: '{cleanResult['unique_groups']}\n';        _status += '‚Ä¢ Doublons detectes: '{cleanResult['duplicates_detected']}\n\n';        if (cleanResult['duplicates_detected] > 0';          _status += '‚ö†Ô∏è DOUBLONS TROUV√âS:\n';          final duplicates = cleanResult[';          for (final entry in duplicates.entries';            _status += '‚Ä¢ ${entry.key}: {(entry.value as List').length} copies\n';          _status += '‚úÖ Aucun doublon detecte !';        _status += '\nüí° RECOMMANDATION:\n';        _status += ';      setState((';        _status = '‚ùå Erreur diagnostic: ';    setState((';      _status = ';    }';          .collection('users';          .where('role', isEqualTo: ';      setState((';        _status = 'Trouve {adminsQuery.docs.length} Admin Compagnie(s'):\n\n';          final password = data['password';                          data['temporaryPassword';                          data['motDePasseTemporaire';          final status = data['status';          final isActive = data['isActive';          final isDeleted = status == 'supprime' || status == 'deleted';          _status += 'üìß '{data['email']}\n';          _status += 'üè¢ '{data['compagnieNom'] ?? 'Non definie'}\n';          _status += 'üîë Mot de passe: '{password ?? '‚ùå NON D√âFINI'}\n';          _status += 'üìä Statut: '{status ?? 'Non defini'} '{isDeleted ? '‚ùå SUPPRIM√â' : '}\n';          _status += 'üîÑ Actif: ';          if (isDeleted';            _status += '‚ö†Ô∏è  COMPTE SUPPRIM√â - Ne peut pas se connecter\n';          _status += 'üîß Champs mot de passe:\n';          _status += '   - password: '{data['password'] ?? '‚ùå'}\n';          _status += '   - temporaryPassword: '{data['temporaryPassword'] ?? '‚ùå'}\n';          _status += '   - motDePasseTemporaire: '{data['motDePasseTemporaire'] ?? '‚ùå'}\n';          _status += '   - motDePasse: '{data['motDePasse'] ?? '‚ùå'}\n';          _status += '   - temp_password: '{data['temp_password'] ?? '‚ùå'}\n';          _status += '   - generated_password: '{data['generated_password'] ?? '‚ùå'}\n';          _status += ';        if (adminsQuery.docs.isEmpty';          _status += ';      setState((';        _status = '‚ùå Erreur: ';    setState((';      _status = ';    }';      // Creer d';          'id': 'star_assurance';          'nom': 'STAR Assurance';          'code': 'STAR';          'email': 'admin.star@assurance.tn';          'password': 'Star123';          'id': 'comar_assurance';          'nom': 'COMAR Assurance';          'code': 'COMAR';          'email': 'admin.comar@assurance.tn';          'password': 'Comar123';          'id': 'maghrebia_assurance';          'nom': 'Maghrebia Assurance';          'code': 'MAGHREBIA';          'email': 'admin.maghrebia@assurance.tn';          'password': ';      for (final compagnie in compagnies';            .collection('compagnies_assurance';            .doc(compagnie['id]';          'nom': compagnie['nom';          'code': compagnie['code';          'status': 'actif';          'created_at: FieldValue.serverTimestamp(';          'created_by': 'debug_script';          'adresse': 'Tunis, Tunisie';          'telephone': '+216 71 123 456';          'email': compagnie[';        }';        // 2. Creer l';        final adminId = 'admin_'{compagnie['id']}';            .collection(';            .doc(adminId';          'uid';          'email': compagnie['email';          'nom': 'Admin';          'prenom': compagnie['nom';          'role': 'admin_compagnie';          'status': 'actif';          'isActive';          'compagnieId': compagnie['id';          'compagnieNom': compagnie['nom';          'password': compagnie['password';          'temporaryPassword': compagnie['password';          'created_at: FieldValue.serverTimestamp(';          'created_by': 'debug_script';          'source': 'debug_creation';          'phone': '+216 71 123 456';          'address': 'Tunis, Tunisie';          'isLegitimate';          'accountType': ';        setState((';          _status = 'Cree $created/';      setState((';        _status = '‚úÖ 'created Admin Compagnie crees avec succes !\n\n';        _status += ';        for (final compagnie in compagnies';          _status += '\nüè¢ '{compagnie['nom']}\n';          _status += 'üìß '{compagnie['email']}\n';          _status += 'üîë '{compagnie['password';      setState((';        _status = '‚ùå Erreur lors de la creation: ';    setState((';      _status = ';    }';          .collection('users';          .where('role', isEqualTo: ';        final data = doc.data(';        final status = data['status';        if (status == 'supprime' || status == 'deleted';            'status': 'actif';            'isActive';            'deletedAt: FieldValue.delete(';            'reactivatedAt: FieldValue.serverTimestamp(';            'reactivatedBy': 'debug_script';            ';          setState((';            _status = 'Reactive ';      setState((';        _status = '‚úÖ ';        if (reactivated > 0';          _status += 'Les comptes peuvent maintenant se connecter.\n';          _status += 'Utilisez "Verifier Admin Existants" pour voir les changements.';          _status += ';      setState((';        _status = '‚ùå Erreur lors de la reactivation: ';    setState((';      _status = ';    }';          .collection('users';          .where('role', isEqualTo: ';        final data = doc.data(';        // Trouver le mot de passe dans n';        final password = data['password';                        data['temporaryPassword';                        data['motDePasseTemporaire';                        data['motDePasse';                        data['temp_password';                        data[';        if (password != null';            'password';            'temporaryPassword';            'motDePasseTemporaire';            'motDePasse';            'temp_password';            'generated_password';            'password_synced_at: FieldValue.serverTimestamp(';            'password_synced_by': 'debug_sync';            ';          setState((';            _status = 'Synchronise ';      setState((';        _status = '‚úÖ ';        if (synced > 0';          _status += 'Tous les champs de mot de passe sont maintenant identiques.\n';          _status += 'Les connexions devraient maintenant fonctionner.';          _status += ';      setState((';        _status = '‚ùå Erreur lors de la synchronisation: ';    setState((';      _status = ';    }';          .collection('users';          .where('role', isEqualTo: ';        final data = doc.data(';        final password = data['password';                        data['temporaryPassword';                        data[';        if (password == null';          final compagnieNom = data['compagnieNom';              ? ''{compagnieNom.replaceAll(' ', ')}123';              : 'Admin123';            'password';            'temporaryPassword';            'motDePasseTemporaire';            'updated_at: FieldValue.serverTimestamp(';            'updated_by': ';          setState((';            _status = 'Corrige ';      setState((';        _status = '‚úÖ ';        if (fixed > 0';          _status += 'Mots de passe generes automatiquement.\n';          _status += 'Utilisez "Verifier Admin Existants" pour voir les nouveaux mots de passe.';          _status += ';      setState((';        _status = '‚ùå Erreur lors de la correction: ';    setState((';      _status = ';    }';          .collection('users';          .where('role', isEqualTo: 'admin_compagnie';          .where('source', isEqualTo: ';        await doc.reference.delete(';          .collection('compagnies_assurance';          .where('created_by', isEqualTo: ';      setState((';        _status = ';      setState((';        _status = '‚ùå Erreur lors de la suppression: ';  Widget build(BuildContext context';        title: const Text(';      body: (1')')';              label: const Text(';              icon: const Icon(Icons.info')')';              label: const Text(';              icon: const Icon(Icons.info')')';              label: const Text(';              icon: const Icon(Icons.info')')';              label: const Text(';              icon: const Icon(Icons.info')')';              label: const Text(';              icon: const Icon(Icons.info')')';              label: const Text(';              icon: const Icon(Icons.info')')';              label: const Text(';                              const SizedBox(height: 16')')';                              const Text(';')')