import 'package:flutter/material.dart';import 'package:flutter_riverpod/flutter_riverpod.dart';import '../services/admin_firestore_service.dart';  const Text(';  Widget build(BuildContext context')')';        title: const Text(';                          ')')';                    label: const Text(_isRunningTests ? 'Tests en cours...' : ';                  icon: const Icon(Icons.info';                  label: const Text(';                      itemBuilder: (context, index')')';                        final isSuccess = result.startsWith('✅';                        final isError = result.startsWith(';    }';    _addResult(';      await _testRoleBasedFiltering(';      _addResult(';    } catch (e';      _addResult(';  Future<void> _testCompagniesCollection(';    _addResult(';      final compagnies = await AdminFirestoreService.getAllCompagnies(';      _addResult('✅ Compagnies chargees: ';      if (compagnies.isNotEmpty';        _addResult('✅ Premiere compagnie: ${firstCompagnie.nom} (ID: {firstCompagnie.id}')';      _addResult(';  Future<void> _testAgencesCollection(';    _addResult(';      final agences = await AdminFirestoreService.getAllAgences(';      _addResult('✅ Agences chargees: ';      if (agences.isNotEmpty';        _addResult('✅ Premiere agence: ${firstAgence.nom} (Compagnie: {firstAgence.compagnieId}')';      _addResult(';  Future<void> _testUsersCollection(';    _addResult(';      final users = await AdminFirestoreService.getAllUsers(';      _addResult('✅ Utilisateurs charges: ';      roleCount.forEach((role, count';        _addResult('✅ Rôle $role: ';    } catch (e';      _addResult(';  Future<void> _testContractsCollection(';    _addResult(';      final contrats = await AdminFirestoreService.getAllContracts(';      _addResult('✅ Contrats charges: ';      if (contrats.isNotEmpty';        _addResult('✅ Premier contrat: ${firstContrat.numeroContrat} (Agence: {firstContrat.agenceId}')';      _addResult(';  Future<void> _testDataRelationships(';    _addResult(';        final agencesDeCompagnie = agences.where((a) => a.compagnieId == firstCompagnie.id).toList(';        _addResult('✅ Relation Compagnie-Agences: ${firstCompagnie.nom} a ';          final usersDeAgence = users.where((u) => u.agenceId == firstAgence.id).toList(';          _addResult('✅ Relation Agence-Users: ${firstAgence.nom} a ';    } catch (e';      _addResult(';  Future<void> _testRoleBasedFiltering(';    _addResult(';        final agencesFiltrees = await AdminFirestoreService.getAgencesByCompagnie(firstCompagnie.id';        _addResult('✅ Filtrage agences par compagnie: ${agencesFiltrees.length} agences pour ';          final usersFiltres = await AdminFirestoreService.getUsersByAgence(firstAgence.id';          _addResult('✅ Filtrage users par agence: ${usersFiltres.length} utilisateurs pour ';    } catch (e';      _addResult('❌ Erreur filtrage: ';