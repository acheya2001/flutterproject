import 'package:cloud_firestore/cloud_firestore.dart';import ';  static Future<Map<String, dynamic>> cleanDuplicateCompagnies(';      debugPrint('[DUPLICATE_CLEANUP] üîç Recherche des compagnies dupliquees...';          .collection(';      if (snapshot.docs.isEmpty';          'success';          'duplicatesFound';          'duplicatesRemoved';          'message': ';        final data = doc.data(';        final nom = (data['nom] as String?)?.trim().toLowerCase(') ?? ';      if (duplicateGroups.isEmpty';        debugPrint('[DUPLICATE_CLEANUP] ‚úÖ Aucun doublon detecte';          'success';          'duplicatesFound';          'duplicatesRemoved';          'message': 'Aucun doublon detecte';      debugPrint('[DUPLICATE_CLEANUP] üìä ';      for (final group in duplicateGroups';        debugPrint('[DUPLICATE_CLEANUP] üîÑ Traitement: $compagnieName ({duplicates.length} doublons')';          'totalFound';          'removed';          'keptDocId';        debugPrint('[DUPLICATE_CLEANUP] ‚úÖ $compagnieName: '{docsToDelete.length} doublons supprimes';      debugPrint('[DUPLICATE_CLEANUP] üéâ Nettoyage termine: 'totalDuplicatesRemoved doublons supprimes';        'success';        'duplicatesFound';        'duplicatesRemoved';        'details';        'message': '';    } catch (e';      debugPrint('[DUPLICATE_CLEANUP] ‚ùå Erreur:  + e.toString()';        'success';        'error: e.toString(';        'message': ';    final data = doc.data(';    // +10 points si ce n';    if (data[';      if (value != null && value.toString().trim().isNotEmpty';    if (data['created_at] != null';    if (data['code'] != null && data[';  static Future<Map<String, dynamic>> analyzeDuplicateCompagnies(';      debugPrint('[DUPLICATE_CLEANUP] üîç Analyse des doublons...';          .collection(';      if (snapshot.docs.isEmpty';          'success';          'totalCompagnies';          'duplicateGroups';          'totalDuplicates';          ';        final data = doc.data(';        final nom = (data['nom] as String?)?.trim().toLowerCase(') ?? ';          compagniesByName.putIfAbsent(nom, () => []';            'id';            'nom': data['nom';            'code': data['code';            'isFakeData': data['isFakeData';            'created_at': data[';          .map((entry';            'name';            'count';            ';        (sum, group') => sum + (group[';      ';        'success';        'totalCompagnies';        'duplicateGroups';        'totalDuplicates';        ';    } catch (e';      debugPrint('[DUPLICATE_CLEANUP] ‚ùå Erreur analyse:  + e.toString()';        'success';        ';  }';      debugPrint('[DUPLICATE_CLEANUP] üîç Nettoyage collection: ';      if (snapshot.docs.isEmpty';          'success';          'duplicatesFound';          'duplicatesRemoved';          'message': ';        final key = (data[groupByField] as String?)?.trim().toLowerCase(') ?? ';      if (duplicateGroups.isEmpty';          'success';          'duplicatesFound';          'duplicatesRemoved';          'message': ';        await batch.commit(';        'success';        'duplicatesFound: duplicateGroups.fold<int>(0, (sum, group) => sum + group.value.length - 1';        'duplicatesRemoved';        'message': '$totalRemoved doublons supprimes de ';    } catch (e';      debugPrint('[DUPLICATE_CLEANUP] ‚ùå Erreur collection $collectionName:  + e.toString()';        'success';        'error: e.toString(';        'message': 'Erreur lors du nettoyage de ';