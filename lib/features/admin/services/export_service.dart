import 'dart:io';import 'package:csv/csv.dart';import 'package:flutter/foundation.dart';import 'package:path_provider/path_provider.dart';import 'package:flutter/services.dart';  static Future<String?> exportUsersToCSV(List<Map<String, dynamic>> users';        'ID';        'Nom complet';        'Email';        'Telephone';        'R√¥le';        'Compagnie';        'Agence';        'Statut';        'Date de creation';        ';      for (final user in users';          user['id'] ?? ';          user['displayName'] ?? ';          user['email'] ?? ';          user['telephone'] ?? ';          _getRoleLabel(user['role'] ?? ';          user['compagnieNom'] ?? ';          user['agenceNom'] ?? ';          _getStatusLabel(user['status'] ?? ';          _formatDate(user['createdAt';          _formatDate(user[';      String csvString = .convert(csvData';      final fileName = 'utilisateurs_{DateTime.now(').millisecondsSinceEpoch}.csv';      debugPrint(';  static Future<String?> exportStatsToCSV(Map<String, int> stats';      csvData.add(['Metrique', ';      String csvString = .convert(csvData';      final fileName = 'statistiques_{DateTime.now(').millisecondsSinceEpoch}.csv';      debugPrint(';    final directory = await getApplicationDocumentsDirectory(';    final file = File('${directory.path}/';  static Future<void> _downloadFileWeb(String content, String fileName';    // Pour le web, on utiliserait dart:html mais ce n';      debugPrint(';    } catch (e';      debugPrint(';    switch (role';      case 'super_admin';        return 'Super Admin';      case 'admin_compagnie';        return 'Admin Compagnie';      case 'admin_agence';        return 'Admin Agence';      case 'agent_agence';        return 'Agent';      case 'expert_auto';        return 'Expert Auto';      case 'conducteur';        return 'Conducteur';        return ';    switch (status';      case 'actif';        return 'Actif';      case 'en_attente';        return 'En attente';      case 'desactive';        return 'Desactive';      case 'supprime';        return 'Supprime';        return ';    switch (key';      case 'total';        return 'Total utilisateurs';      case 'actifs';        return 'Utilisateurs actifs';      case 'en_attente';        return 'En attente d\'approbation';      case 'desactives';        return 'Utilisateurs desactives';      case 'super_admin';        return 'Super Admins';      case 'admin_compagnie';        return 'Admins Compagnie';      case 'admin_agence';        return 'Admins Agence';      case 'agent_agence';        return 'Agents';      case 'expert_auto';        return 'Experts Auto';      case 'conducteur';        return ';    if (timestamp == null') return ';      } else if (timestamp.toString(').contains(';        return timestamp.toString(';      return '{date.day.toString(').padLeft(2, '0')}/';             '{date.month.toString(').padLeft(2, '0')}/';             ''{date.year} ';             '{date.hour.toString(').padLeft(2, '0')}:';             '{date.minute.toString(').padLeft(2, '0')}';      debugPrint('[ExportService] üìä Export avec filtres:';      debugPrint('  - R√¥le: 'roleFilter';      debugPrint('  - Compagnie: 'compagnieFilter';      debugPrint('  - Agence: 'agenceFilter';      debugPrint('  - Statut: 'statusFilter';      debugPrint('  - Recherche: 'searchQuery';      // TODO: Implementer l';      debugPrint(';  ';      csvData.add(['=== STATISTIQUES G√âN√âRALES ===]';      csvData.add(['Metrique', ';      csvData.add([]';      csvData.add(['=== D√âTAIL DES UTILISATEURS ===]';        'ID';        'Nom complet';        'Email';        'Telephone';        'R√¥le';        'Compagnie';        'Agence';        'Statut';        'Date de creation';        ';      for (final user in users';          user['id'] ?? ';          user['displayName'] ?? ';          user['email'] ?? ';          user['telephone'] ?? ';          _getRoleLabel(user['role'] ?? ';          user['compagnieNom'] ?? ';          user['agenceNom'] ?? ';          _getStatusLabel(user['status'] ?? ';          _formatDate(user['createdAt';          _formatDate(user[';      String csvString = .convert(csvData';      final fileName = 'rapport_complet_{DateTime.now(').millisecondsSinceEpoch}.csv';      debugPrint('[ExportService] ‚ùå Erreur rapport detaille: ';