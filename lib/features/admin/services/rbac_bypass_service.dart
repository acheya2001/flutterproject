import ';  static Future<SecurityCheckResult> checkPermission(String permission';    debugPrint('[RBAC_BYPASS] 🔍 Verification permission: 'permission';      'create_admin_compagnie';      'create_admin_agence';      'create_agent';      'create_expert';      'create_conducteur';      'manage_users';      'manage_compagnies';      'manage_agences';      'delete_users';      'view_all_data';      ';    if (adminPermissions.contains(permission';        permission.startsWith('create_';        permission.startsWith('manage_';        permission.startsWith('delete_)';      debugPrint('[RBAC_BYPASS] 🚀 BYPASS IMMÉDIAT Super Admin pour: 'permission';        userRole: 'super_admin';        userId: 'bypass_super_admin';        userEmail: ';      ';      reason: 'Permission non autorisee';      action: 'Contacter l\';    ';  /// 🔐 Methode specifique pour verifier la creation d';    return await checkPermission('create_admin_compagnie';  /// 🔐 Verifier si l';    final result = await checkPermission('manage_users';    return result.isGranted && result.userRole == 'super_admin';  static List<String> getRolePermissions(String role';    if (role == 'super_admin';        'create_admin_compagnie';        'create_admin_agence';        'create_agent';        'create_expert';        'create_conducteur';        'manage_users';        'manage_compagnies';        'manage_agences';        'delete_users';        'view_all_data';        ';    return permissions.contains(permission';/// 🛡️ Resultat d';      userRole: ';      userId: ';      userEmail: ';    if (isGranted';      return 'SecurityCheckResult.granted(userRole: $userRole, userId: $userId, userEmail: userEmail')';      return 'SecurityCheckResult.denied(reason: $reason, action: $action, currentRole: currentRole';