import 'package:cloud_firestore/cloud_firestore.dart';import ';  static Future<Map<String, dynamic>> radicalCleanUsers(';      debugPrint('[RADICAL_CLEANUP] üî• === NETTOYAGE RADICAL COLLECTION USERS ===';      final snapshot = await _firestore.collection('users).get(';      debugPrint('[RADICAL_CLEANUP] üìä Total utilisateurs trouves: ';        final data = doc.data(';        final email = data['email'] as String? ?? ';        final role = data['role'] as String? ?? ';        final status = data['status'] as String? ?? ';        final shouldKeep = _shouldKeepUser(doc.id, data';        debugPrint('[RADICAL_CLEANUP] üîç √âvaluation utilisateur: '{doc.id}';        debugPrint('[RADICAL_CLEANUP]   - Email: 'email';        debugPrint('[RADICAL_CLEANUP]   - Role: 'role';        debugPrint('[RADICAL_CLEANUP]   - Status: 'status';        debugPrint('[RADICAL_CLEANUP]   - ShouldKeep: ';        if (shouldKeep';          debugPrint('[RADICAL_CLEANUP] ‚úÖ GARD√â: ${doc.id} (email')';          keptUsers.add('$email (role')';          debugPrint('[RADICAL_CLEANUP] üóëÔ∏è SUPPRESSION EN COURS: ${doc.id} (email')';          deletedUsers.add('$email (role')';            debugPrint('[RADICAL_CLEANUP] ‚úÖ SUPPRIM√â AVEC SUCC√àS: ';          } catch (e';            debugPrint('[RADICAL_CLEANUP] ‚ùå ERREUR SUPPRESSION ${doc.id}:  + e.toString()';      debugPrint('[RADICAL_CLEANUP] ‚úÖ === NETTOYAGE TERMIN√â ===';      debugPrint('[RADICAL_CLEANUP] üìä Utilisateurs gardes: 'kept';      debugPrint('[RADICAL_CLEANUP] üìä Utilisateurs supprimes: 'deleted';        'success';        'totalProcessed';        'kept';        'deleted';        'keptUsers';        'deletedUsers';        'message': ';    } catch (e';      debugPrint('[RADICAL_CLEANUP] ‚ùå Erreur:  + e.toString()';        'success';        'error: e.toString(';        'message': ';  static bool _shouldKeepUser(String docId, Map<String, dynamic> data';    final email = (data['email'] as String? ?? ').toLowerCase(';    final role = data['role'] as String? ?? ';    final status = data['status'] as String? ?? ';    if (role != 'admin_compagnie';      debugPrint('[RADICAL_CLEANUP] ‚ùå R√¥le non admin_compagnie: 'role';    if (status != 'actif';      debugPrint('[RADICAL_CLEANUP] ‚ùå Statut non actif: 'status';    // 3. Email doit √™tre un vrai email d';      debugPrint('[RADICAL_CLEANUP] ‚ùå Email non legitime: 'email';    if (data['isFakeData] == true';      debugPrint('[RADICAL_CLEANUP] ‚ùå Marque comme fake data';    final compagnieId = data['compagnieId'] as String? ?? ';    if (compagnieId.isEmpty';      debugPrint('[RADICAL_CLEANUP] ‚ùå Pas de compagnieId';    debugPrint('[RADICAL_CLEANUP] ‚úÖ Utilisateur legitime: 'email';  /// üìß Verifier si l';      'admin.star@assurance.tn';      'admin.comar@assurance.tn';      'admin.gat@assurance.tn';      'admin.maghrebia@assurance.tn';      'admin.lloyd@assurance.tn';      'admin.ctama@assurance.tn';      'admin.zitouna@assurance.tn';      'admin.salim@assurance.tn';    if (legitimateEmails.contains(email)';    // Verifier le pattern des emails d';    if (email.endsWith('@assurance.tn') && email.startsWith('admin.)';      final companyName = email.substring(6, email.indexOf('@)';      if (companyName.contains('test';          companyName.contains('fake';          companyName.contains('example';          RegExp(r'^[a-z0-9]{10,}';  static Future<Map<String, dynamic>> analyzeUsersCollection(';      debugPrint('[RADICAL_CLEANUP] üîç === ANALYSE COLLECTION USERS ===';      final snapshot = await _firestore.collection(';        final data = doc.data(';        final email = data['email'] as String? ?? ';        final role = data['role'] as String? ?? ';        final status = data['status'] as String? ?? ';        if (_shouldKeepUser(doc.id, data)';          toKeep.add('$email ($role, status')';          toDelete.add('$email ($role, status')';        'total';        'byRole';        'byStatus';        'toKeep';        'toDelete';        'legitimateCount';        'testCount';      debugPrint('[RADICAL_CLEANUP] üìä Analyse terminee:';      debugPrint('[RADICAL_CLEANUP]   - Total: '{analysis['total']}';      debugPrint('[RADICAL_CLEANUP]   - √Ä garder: '{analysis['legitimateCount']}';      debugPrint('[RADICAL_CLEANUP]   - √Ä supprimer: '{analysis['testCount']}';      debugPrint('[RADICAL_CLEANUP]   - Par r√¥le: '{analysis['byRole']}';      debugPrint('[RADICAL_CLEANUP]   - Par statut: '{analysis['byStatus';    } catch (e';      debugPrint('[RADICAL_CLEANUP] ‚ùå Erreur analyse:  + e.toString()';      return {';  static Future<Map<String, dynamic>> keepOnlyLegitimateAdmins(';      debugPrint('[RADICAL_CLEANUP] üéØ === GARDER SEULEMENT LES ADMINS L√âGITIMES ===';      // D';      if (analysis.containsKey('error)';      debugPrint('[RADICAL_CLEANUP] ‚ö†Ô∏è ATTENTION: Cette action va supprimer '{analysis['testCount']} utilisateurs !';      debugPrint('[RADICAL_CLEANUP] ‚úÖ Utilisateurs qui seront gardes:';      for (final user in analysis['toKeep]';        debugPrint('[RADICAL_CLEANUP]   - ';    } catch (e';      debugPrint('[RADICAL_CLEANUP] ‚ùå Erreur:  + e.toString()';        'success';        ';  static Future<Map<String, dynamic>> recreateMissingAdmins(';      debugPrint('[RADICAL_CLEANUP] üîÑ === RECR√âATION ADMINS MANQUANTS ===';        {'id': 'star-assurance', 'name': 'STAR Assurance', 'email': 'admin.star@assurance.tn';        {'id': 'comar-assurance', 'name': 'COMAR Assurance', 'email': 'admin.comar@assurance.tn';        {'id': 'gat-assurance', 'name': 'GAT Assurance', 'email': 'admin.gat@assurance.tn';        {'id': 'maghrebia-assurance', 'name': 'Maghrebia Assurance', 'email': ';      for (final company in mainCompanies';        // Verifier si l';            .collection('users';            .where('email', isEqualTo: company['email]';            .where('status', isEqualTo: ';        if (existingQuery.docs.isEmpty';          // Creer l';          final adminId = 'admin_'{company['id']}_{DateTime.now(').millisecondsSinceEpoch}';            'uid';            'email': company['email';            'nom': 'Admin';            'prenom': company['name';            'role': 'admin_compagnie';            'status': 'actif';            'compagnieId': company['id';            'compagnieNom': company['name';            'created_at: FieldValue.serverTimestamp(';            'created_by': 'radical_cleanup_service';            'source': 'auto_recreation';            'isLegitimate';          await _firestore.collection('users).doc(adminId).set(adminData';          debugPrint('[RADICAL_CLEANUP] ‚úÖ Admin cree: '{company['email']}';          createdAdmins.add(company['email]!';          debugPrint('[RADICAL_CLEANUP] ‚ÑπÔ∏è Admin existe deja: '{company['email']}';        'success';        'created';        'createdAdmins';        'message': 'created Admin(s) Compagnie cree(s')';      debugPrint('[RADICAL_CLEANUP] ‚ùå Erreur recreation:  + e.toString()';        'success';        ';