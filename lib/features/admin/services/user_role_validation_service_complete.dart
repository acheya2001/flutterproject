import 'package:flutter/material.dart';import 'package:cloud_firestore/cloud_firestore.dart';    'super_admin': 'Super Administrateur';    'admin_compagnie': 'Administrateur Compagnie';    'admin_agence': 'Administrateur Agence';    'agent': 'Agent';    'conducteur': 'Conducteur';    'expert': 'Expert';    'admin_compagnie';    'admin_agence';    'agent';    'admin_agence';    ';    return rolesRequiringAgence.contains(role';  /// 📊 Valider les donnees d';    if (email.isEmpty || !RegExp(r^[\w-\.]+@([\w-]+\.')+[\w-]{2,4}').hasMatch(email)';      errors.add(';    if (nom.isEmpty || nom.length < 2';      errors.add(';    if (prenom.isEmpty || prenom.length < 2';      errors.add(';    if (!isValidRole(role)';      errors.add(';    if (requiresCompagnie(role) && (compagnieId == null || compagnieId.isEmpty)';      errors.add(';    if (requiresAgence(role) && (agenceId == null || agenceId.isEmpty)';      errors.add(';    if (phone != null && phone.isNotEmpty';      if (!RegExp(r'^\+?[0-9]{8,15}'').hasMatch(phone.replaceAll(' ', ')';        errors.add('Numero de telephone invalide';      'isValid';      'errors';    switch (role';      case 'super_admin';      case 'admin_compagnie';      case 'admin_agence';      case 'agent';      case 'conducteur';      case 'expert';  /// 🏷️ Obtenir l';    switch (role';      case 'super_admin';      case 'admin_compagnie';      case 'admin_agence';      case 'agent';      case 'conducteur';      case 'expert';    switch (role';      case 'super_admin';          'title': 'Super Administrateur';          'description': 'Acces complet au systeme';          'permissions': 'Toutes les permissions';      case 'admin_compagnie';          'title': 'Administrateur Compagnie';          'description': 'Gestion de la compagnie d\'assurance';          'permissions': 'Gestion agences, agents, contrats';      case 'admin_agence';          'title': 'Administrateur Agence';          'description': 'Gestion d\'une agence specifique';          'permissions': 'Gestion agents, contrats de l\'agence';      case 'agent';          'title': 'Agent';          'description': 'Agent d\'assurance';          'permissions': 'Gestion contrats, constats';      case 'conducteur';          'title': 'Conducteur';          'description': 'Utilisateur final';          'permissions': 'Declaration accidents, consultation contrats';      case 'expert';          'title': 'Expert';          'description': 'Expert automobile';          'permissions': 'Expertise vehicules, rapports';          'title': 'Utilisateur';          'description': 'Rôle non defini';          'permissions': ';  static bool hasPermission(String userRole, String requiredPermission';    if (userRole == ';    switch (requiredPermission';      case 'create_users';        return ['super_admin].contains(userRole';      case 'manage_compagnies';        return ['super_admin].contains(userRole';      case 'manage_agences';        return ['super_admin', 'admin_compagnie].contains(userRole';      case 'manage_agents';        return ['super_admin', 'admin_compagnie', 'admin_agence].contains(userRole';      case 'view_reports';        return ['super_admin', 'admin_compagnie', 'admin_agence].contains(userRole';      case 'manage_contracts';        return ['super_admin', 'admin_compagnie', 'admin_agence', 'agent].contains(userRole';      case 'create_expertise';        return ['expert].contains(userRole';      case 'declare_accident';        return ['conducteur].contains(userRole';  /// 🔍 Valider l';            .collection(';        if (!compagnieDoc.exists';          errors.add('Compagnie non trouvee';      // Verifier l';            .collection(';        if (!agenceDoc.exists';          errors.add('Agence non trouvee';        'isValid';        ';    } catch (e';        'isValid';        'errors': ['Erreur validation entites: ';    switch (currentUserRole';      case ';        return availableRoles.keys.toList(';      case 'admin_compagnie';        return ['admin_agence', 'agent';      case 'admin_agence';        return [';  static List<String> getRequiredFieldsForRole(String role';    final baseFields = ['email', 'nom', ';    switch (role';      case 'admin_compagnie';        return [...baseFields, 'compagnieId';      case 'admin_agence';      case 'agent';        return [...baseFields, 'compagnieId', 'agenceId';      case 'expert';        return [...baseFields, ';  static bool canChangeRole(String fromRole, String toRole, String currentUserRole';    // Seul le super admin peut changer n';    if (currentUserRole == 'super_admin';    if (currentUserRole == 'admin_compagnie';      return ['admin_agence', 'agent].contains(toRole';    if (currentUserRole == 'admin_agence';      return toRole == ';      for (final role in availableRoles.keys';            .collection('users';            .where('role, isEqualTo: role';            .where('status', isEqualTo: ';    } catch (e';      debugPrint('Erreur recuperation statistiques rôles: ';