import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';  /// üè¢ Compagnies d';      'id': 'star-assurance';      'nom': 'STAR Assurance';      'email': 'admin.star@assurance.tn';      'code': 'STAR';      'id': 'comar-assurance';      'nom': 'COMAR Assurance';      'email': 'admin.comar@assurance.tn';      'code': 'COMAR';      'id': 'gat-assurance';      'nom': 'GAT Assurance';      'email': 'admin.gat@assurance.tn';      'code': 'GAT';      'id': 'maghrebia-assurance';      'nom': 'Maghrebia Assurance';      'email': 'admin.maghrebia@assurance.tn';      'code': 'MAGHREBIA';      'id': 'lloyd-assurance';      'nom': 'Lloyd Tunisien';      'email': 'admin.lloyd@assurance.tn';      'code': 'LLOYD';      'id': 'ctama-assurance';      'nom': 'CTAMA';      'email': 'admin.ctama@assurance.tn';      'code': ';  static Future<Map<String, dynamic>> recreateAllAdmins(';      debugPrint('[ADMIN_RECREATION] üîÑ === RECR√âATION ADMINS COMPAGNIE ===';      // 1. D';          final result = await _createAdminForCompany(company';          if (result['created]';            createdAdmins.add(company['email]!';            debugPrint('[ADMIN_RECREATION] ‚úÖ Admin cree: '{company['email']}';            existingAdmins.add(company['email]!';            debugPrint('[ADMIN_RECREATION] ‚ÑπÔ∏è Admin existe deja: '{company['email';        } catch (e';          errors.add(''{company['email']}:  + e.toString()';          debugPrint('[ADMIN_RECREATION] ‚ùå Erreur pour '{company['email']}:  + e.toString()';      debugPrint('[ADMIN_RECREATION] ‚úÖ === RECR√âATION TERMIN√âE ===';      debugPrint('[ADMIN_RECREATION] üìä Crees: $created, Existants: $existing, Erreurs: '{errors.length}';        'success';        'created';        'existing';        'total';        'createdAdmins';        'existingAdmins';        'errors';        'message': 'Recreation terminee: $created crees, ';    } catch (e';      debugPrint('[ADMIN_RECREATION] ‚ùå Erreur generale:  + e.toString()';        'success';        'error: e.toString(';        'message': 'Erreur lors de la recreation des admins';  /// üè¢ Creer les compagnies d';  static Future<void> _createCompaniesIfNeeded(';      debugPrint(';      for (final company in _mainCompanies';            .collection('compagnies_assurance';            .doc(company[';        if (!companyDoc.exists';              .collection('compagnies_assurance';              .doc(company['id]';            'nom': company['nom';            'code': company['code';            'email': company['email';            'status': 'actif';            'type': 'assurance_auto';            'created_at: FieldValue.serverTimestamp(';            'created_by': 'admin_recreation_service';            'adresse': 'Tunis, Tunisie';            'telephone': '+216 71 XXX XXX';            'description': 'Compagnie d\';          }';          debugPrint('[ADMIN_RECREATION] üè¢ Compagnie creee: '{company['nom';    } catch (e';      debugPrint(';  static Future<Map<String, dynamic>> _createAdminForCompany(Map<String, String> company';      // Verifier si l';          .collection('users';          .where('email', isEqualTo: company['email]';          .where('role', isEqualTo: 'admin_compagnie';          .where('status', isEqualTo: ';      if (existingQuery.docs.isNotEmpty';        return {'created': false, 'reason': 'already_exists';      // Generer un ID unique pour l';      final adminId = 'admin_'{company['id']}_{DateTime.now(').millisecondsSinceEpoch}';      // Donnees de l';        'uid';        'email': company['email';        'nom': 'Admin';        'prenom': company['nom';        'role': 'admin_compagnie';        'status': 'actif';        'compagnieId': company['id';        'compagnieNom': company['nom';        'compagnieCode': company['code';        'created_at: FieldValue.serverTimestamp(';        'created_by': 'admin_recreation_service';        'source': 'auto_recreation';        'isLegitimate';        'permissions';          'manage_agents';          'view_contracts';          'manage_agencies';          'view_reports';        'lastLogin';        'profileComplete';      debugPrint('[ADMIN_RECREATION] üîÑ Creation admin '{company['email']} avec ID: 'adminId';      await _firestore.collection('users).doc(adminId).set(adminData, SetOptions(merge: false)';      debugPrint('[ADMIN_RECREATION] ‚úÖ Admin cree dans Firestore: 'adminId';      final verification = await _firestore.collection(';      if (verification.exists';        debugPrint('[ADMIN_RECREATION] ‚úÖ Verification reussie: document existe';        return {'created': true, 'adminId';        debugPrint('[ADMIN_RECREATION] ‚ùå Verification echouee: document n\'existe pas';        throw Exception(';    } catch (e';      debugPrint('[ADMIN_RECREATION] ‚ùå Erreur creation admin '{company['email']}:  + e.toString()';  /// üìä Verifier l';      debugPrint('[ADMIN_RECREATION] üìä Verification etat des admins...';        'total_companies';        'existing_admins';        'missing_admins';        'existing_list';        ';      for (final company in _mainCompanies';            .collection('users';            .where('email', isEqualTo: company['email]';            .where('role', isEqualTo: 'admin_compagnie';            .where('status', isEqualTo: ';        if (existingQuery.docs.isNotEmpty';          status['existing_admins';          status['existing_list'].add(company['email]!';          status['missing_admins';          status['missing_list'].add(company['email]!';      debugPrint('[ADMIN_RECREATION] üìä √âtat: '{status['existing_admins']} existants, '{status['missing_admins';    } catch (e';      debugPrint('[ADMIN_RECREATION] ‚ùå Erreur verification:  + e.toString()';      return {';  static Future<Map<String, dynamic>> cleanAndRecreate(';      debugPrint('[ADMIN_RECREATION] üßπ Nettoyage et recreation...';          .collection('users';          .where('role', isEqualTo: ';        await batch.commit(';        debugPrint('[ADMIN_RECREATION] üóëÔ∏è ';      final result = await recreateAllAdmins(';        'success';        'cleaned';        'recreated': result['created';        'message': ';    } catch (e';      debugPrint('[ADMIN_RECREATION] ‚ùå Erreur nettoyage:  + e.toString()';        'success';        ';