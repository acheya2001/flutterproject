import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';import '../models/compagnie_assurance.dart';/// üè¢ Service de gestion des compagnies d';  static const String _collection = 'compagnies_assurance';          .collection(_collection';          .orderBy(';      return snapshot.docs.map((doc';        ';    } catch (e';      debugPrint(';    Query query = _firestore.collection(_collection';    // Tri par nom (sans filtre isActive pour eviter l'erreur dindex';    query = query.orderBy(';          final data = doc.data(';          // Verifier si c';          return !doc.id.startsWith('test_') && !(data[';    } catch (e';      debugPrint('[CompagnieService] Erreur getCompagnieById:  + e.toString()';  /// üîç Verifier l';          .where(';      if (excludeId != null';        // Exclure l';      debugPrint(';  Future<String?> createCompagnie(CompagnieAssurance compagnie';      // Verifier l';        throw Exception('Le code "';      final docRef = await _firestore.collection(_collection).add(compagnie.toFirestore()';      debugPrint('[CompagnieService] Compagnie creee: ';    } catch (e';      debugPrint(';  Future<void> updateCompagnie(String id, CompagnieAssurance compagnie';      // Verifier l';      if (!isUnique';        throw Exception('Le code "';      final updatedData = compagnie.toFirestore(';      updatedData[';      await _firestore.collection(_collection).doc(id).update(updatedData';      debugPrint('[CompagnieService] Compagnie modifiee: ';    } catch (e';      debugPrint(';  Future<void> deleteCompagnie(String id';      // Verifier s';        throw Exception('Impossible de supprimer: agencesCount agence(s) liee(s')';        'isActive';        ';      }';      debugPrint('[CompagnieService] Compagnie supprimee (soft): ';    } catch (e';      debugPrint(';  Future<void> hardDeleteCompagnie(String id';      // Verifier s';        throw Exception('Impossible de supprimer: agencesCount agence(s) liee(s')';      debugPrint('[CompagnieService] Compagnie supprimee definitivement: ';    } catch (e';      debugPrint(';      await _firestore.collection(_collection).doc(id';        'isActive';        ';      }';      debugPrint('[CompagnieService] Compagnie restauree: ';    } catch (e';      debugPrint('[CompagnieService] Erreur restoreCompagnie:  + e.toString()';  /// üìä Obtenir le nombre d';          .collection('agences';          .where('compagnieId, isEqualTo: compagnieId';          .where(';    } catch (e';      debugPrint('[CompagnieService] Erreur getAgencesCount:  + e.toString()';  /// üìä Obtenir les statistiques d';        // Nombre d';            .collection('agences';            .where('compagnieId, isEqualTo: compagnieId';            .where(';            .get(';        // Nombre d';            .collection('agents_assurance';            .where('compagnieId, isEqualTo: compagnieId';            .where(';            .get(';            .collection('contrats';            .where('compagnieId, isEqualTo: compagnieId';            .where(';      ]';        'agences';        'agents';        'contrats';        ';    } catch (e';      debugPrint('[CompagnieService] Erreur getCompagnieStats:  + e.toString()';        'agences';        'agents';        'contrats';        ';          doc.data(')['isActive] == true';        'total';        'actives';        'inactives';        ';    } catch (e';      debugPrint('[CompagnieService] Erreur getGlobalStats:  + e.toString()';        'total';        'actives';        'inactives';        ';          .collection(_collection';          .where(';    } catch (e';      debugPrint(';          .collection(_collection';          .where('isFakeData, isEqualTo: false';          .orderBy(';          .get(';      // Utiliser un Set pour eviter les doublons bases sur l';          'id';          'nom': data['nom'] ?? ';          'code': data['code'] ?? ';    } catch (e';      debugPrint(';            .collection(_collection';            .orderBy(';          final data = doc.data(';          if (data['isFakeData] == true';            'id';            'nom': data['nom'] ?? ';            'code': data['code'] ?? ';      } catch (fallbackError';        debugPrint('[CompagnieService] Erreur fallback: ';          .collection(_collection';          .where('isFakeData, isEqualTo: false';          .orderBy(';          final data = doc.data(';            'id';            'nom': data['nom'] ?? ';            'code': data['code'] ?? ';    } catch (e';      debugPrint(';          .collection(_collection';          .orderBy(';          final data = doc.data(';          if (data['isFakeData] == true';            'id';            'nom': data['nom'] ?? ';            'code': data['code'] ?? ';