import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';import '../models/agent_admin_model.dart';import ';/// üë®‚Äçüíº Service pour la gestion des agents (Admin System';  static const String _collection = 'agents_assurance';  static const String _usersCollection = ';  }';      debugPrint('[AGENT_SERVICE] üì• Recuperation agents - limit: $limit, agence: ';      Query query = _firestore.collection(_collection';      if (agenceId != null && agenceId.isNotEmpty && agenceId != 'Toutes';        query = query.where('agenceId, isEqualTo: agenceId';      if (compagnieId != null && compagnieId.isNotEmpty && compagnieId != 'Toutes';        query = query.where('compagnieId, isEqualTo: compagnieId';      if (statut != null && statut.isNotEmpty && statut != 'Tous';        query = query.where(';      if (activeOnly == true';        query = query.where(';        final searchLower = searchQuery.toLowerCase(';            .where('nom, isGreaterThanOrEqualTo: searchLower';            .where('nom', isLessThan: searchLower + ';        query = query.startAfterDocument(startAfter';          .orderBy(';      return query.snapshots().map((snapshot';        debugPrint('[AGENT_SERVICE] ‚úÖ ';    } catch (e';      debugPrint(';      return Stream.value([]';  /// üìã Obtenir les agents d';      debugPrint(';  static Future<String?> createAgent(AgentAdmin agent, String password';      debugPrint('[AGENT_SERVICE] ‚ûï Creation agent: ';      if (validationError != null';      // Verifier l';      if (emailExists';        return 'Cet email est deja utilise';      if (matriculeExists';        return ';      ';      // Creer l';      // Creer l';      await _firestore.collection(_collection).doc(userId).set(agentWithUserId.toFirestore()';      debugPrint(';    } catch (e';      debugPrint('[AGENT_SERVICE] ‚ùå Erreur creation agent:  + e.toString()';      return 'Erreur lors de la creation: ';  static Future<String?> updateAgent(AgentAdmin agent';      debugPrint('[AGENT_SERVICE] ‚úèÔ∏è Modification agent: ';      if (validationError != null';      // Mettre a jour l';      debugPrint(';    } catch (e';      debugPrint('[AGENT_SERVICE] ‚ùå Erreur modification agent:  + e.toString()';      return 'Erreur lors de la modification: ';  static Future<String?> deleteAgent(String agentId';      debugPrint('[AGENT_SERVICE] üóëÔ∏è Suppression agent: ';      await _firestore.collection(_collection).doc(agentId';        'isActive';        'statut': 'inactif';        ';      await _firestore.collection(_usersCollection).doc(agentId';        'isActive';        ';      }';      debugPrint(';    } catch (e';      debugPrint('[AGENT_SERVICE] ‚ùå Erreur suppression agent:  + e.toString()';      return 'Erreur lors de la suppression: ';  static Future<String?> restoreAgent(String agentId';      debugPrint('[AGENT_SERVICE] üîÑ Restauration agent: ';      await _firestore.collection(_collection).doc(agentId';        'isActive';        'statut': 'actif';        ';      await _firestore.collection(_usersCollection).doc(agentId';        'isActive';        ';      }';      debugPrint(';    } catch (e';      debugPrint('[AGENT_SERVICE] ‚ùå Erreur restauration agent:  + e.toString()';      return 'Erreur lors de la restauration: 'e';  static Future<Map<String, dynamic>> getAgenceAgentsStats(String agenceId';      debugPrint('[AGENT_SERVICE] üìä Recuperation stats agents agence: ';          .collection(_collection';          .where(';      final agents = snapshot.docs.map((doc) => AgentAdmin.fromFirestore(doc).toList(';        'totalAgents';        'agentsActifs: agents.where((a') => a.statut == 'actif';        'agentsSuspendus: agents.where((a') => a.statut == 'suspendu';        'agentsInactifs: agents.where((a') => a.statut == 'inactif';        'agentsEnFormation: agents.where((a') => a.statut == 'en_formation';        'agentsAvecContrats: agents.where((a) => a.peutCreerContrats';        'agentsAvecSinistres: agents.where((a) => a.peutValiderSinistres';      debugPrint('[AGENT_SERVICE] ‚úÖ Stats calculees: ';    } catch (e';      debugPrint(';  static Future<String> generateMatricule(String compagnieId, String agenceId';      // Obtenir le code de la compagnie et de l';      final compagnieDoc = await _firestore.collection('compagnies_assurance).doc(compagnieId).get(';      final agenceDoc = await _firestore.collection(';      final compagnieCode = compagnieDoc.data(')?['code'] ?? ';      final agenceCode = agenceDoc.data(')?['code'] ?? ';          .collection(_collection';          .where(';      final nextNumber = (agentsSnapshot.docs.length + 1).toString(').padLeft(3, '0';      return '$compagnieCode-$agenceCode-';    } catch (e';      debugPrint('[AGENT_SERVICE] ‚ùå Erreur generation matricule:  + e.toString()';      return 'AG-{DateTime.now(').millisecondsSinceEpoch}';        .where(';        .collection(_collection';        .where('matricule, isEqualTo: matricule';        .where(';  static Future<void> _createUserAccount(String userId, AgentAdmin agent';      role: ';    await _firestore.collection(_usersCollection).doc(agent.userId';      'fullName';      'phone';      ';