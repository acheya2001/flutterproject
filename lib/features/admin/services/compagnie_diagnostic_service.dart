import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';/// üîç Service de diagnostic pour les compagnies d';  static Future<Map<String, dynamic>> diagnoseCompagnies(';      debugPrint('[COMPAGNIE_DIAGNOSTIC] üîç Debut du diagnostic...';          .collection(';          .get(';      debugPrint('[COMPAGNIE_DIAGNOSTIC] üìä Total compagnies: ';      if (totalCompagnies == 0';          'success';          'totalCompagnies';          'realCompagnies';          'fakeCompagnies';          'message': 'Aucune compagnie trouvee dans la base de donnees';          'recommendation': 'Creez d\'abord des compagnies d\'assurance';          ';        final data = doc.data(';        final isFake = data['isFakeData';        final nom = data['nom';        final code = data[';        if (code == null || code.trim().isEmpty';          'id';          'nom': nom ?? 'Sans nom';          'code': code ?? 'Sans code';          'isFakeData';          'hasName: nom != null && nom.trim(';          'hasCode: code != null && code.trim(';          'created_at': data['created_at';          'ville': data['ville';          'gouvernorat': data[';        }';      debugPrint('[COMPAGNIE_DIAGNOSTIC] üìä Compagnies reelles: 'realCompagnies';      debugPrint('[COMPAGNIE_DIAGNOSTIC] üìä Compagnies fake: 'fakeCompagnies';      String dropdownError = ';            .collection('compagnies_assurance';            .where('isFakeData, isEqualTo: false';            .orderBy(';          final data = doc.data(';            'id';            'nom': data['nom'] ?? ';            'code': data['code'] ?? ';        }).toList(';        debugPrint('[COMPAGNIE_DIAGNOSTIC] ‚úÖ Requ√™te dropdown reussie: ';        dropdownError = e.toString(';        debugPrint('[COMPAGNIE_DIAGNOSTIC] ‚ùå Erreur requ√™te dropdown:  + e.toString()';              .collection('compagnies_assurance';              .orderBy(';            final data = doc.data(';            if (data['isFakeData] != true';                'id';                'nom': data['nom'] ?? ';                'code': data['code'] ?? ';              }';          debugPrint('[COMPAGNIE_DIAGNOSTIC] ‚úÖ Fallback reussi: ';        } catch (fallbackError';          debugPrint('[COMPAGNIE_DIAGNOSTIC] ‚ùå Erreur fallback: ';      if (realCompagnies == 0';        recommendations.add('Creez des compagnies d\';      if (fakeCompagnies > 0';        recommendations.add('Supprimez les ';      if (compagniesWithoutName > 0';        recommendations.add(''compagniesWithoutName compagnies n\';      if (compagniesWithoutCode > 0';        recommendations.add(''compagniesWithoutCode compagnies n\';      if (dropdownError.isNotEmpty';        recommendations.add('Probleme avec la requ√™te dropdown: ';      if (dropdownResults.isEmpty && realCompagnies > 0';        recommendations.add('Les compagnies reelles ne sont pas accessibles via dropdown';        'success';        'totalCompagnies';        'realCompagnies';        'fakeCompagnies';        'compagniesWithoutName';        'compagniesWithoutCode';        'dropdownResults';        'dropdownError';        'recommendations';        'compagnies';        'dropdownData';        'message';            ? 'Toutes les compagnies sont correctement configurees';            : ';    } catch (e';      debugPrint('[COMPAGNIE_DIAGNOSTIC] ‚ùå Erreur diagnostic:  + e.toString()';        'success';        'error: e.toString(';        'message': ';  static Future<Map<String, dynamic>> createTestCompagnies(';      debugPrint('[COMPAGNIE_DIAGNOSTIC] üèóÔ∏è Creation de compagnies de test...';          'nom': 'STAR Assurance';          'code': 'STAR';          'ville': 'Tunis';          'gouvernorat': 'Tunis';          'type': 'mixte';          'email': 'contact@star.tn';          'telephone': '+216 71 123 456';          'adresse': 'Avenue Habib Bourguiba, Tunis';          'isFakeData';          'created_at: FieldValue.serverTimestamp(';          'nom': 'GAT Assurance';          'code': 'GAT';          'ville': 'Tunis';          'gouvernorat': 'Tunis';          'type': 'mixte';          'email': 'contact@gat.tn';          'telephone': '+216 71 234 567';          'adresse': 'Avenue de la Liberte, Tunis';          'isFakeData';          'created_at: FieldValue.serverTimestamp(';          'nom': 'COMAR';          'code': 'COMAR';          'ville': 'Tunis';          'gouvernorat': 'Tunis';          'type': 'mixte';          'email': 'contact@comar.tn';          'telephone': '+216 71 345 678';          'adresse': 'Avenue Mohamed V, Tunis';          'isFakeData';          ';      for (final compagnieData in testCompagnies';        final docRef = _firestore.collection(';      await batch.commit(';      debugPrint('[COMPAGNIE_DIAGNOSTIC] ‚úÖ '{testCompagnies.length} compagnies de test creees';        'success';        'created';        'ids';        'message': '';    } catch (e';      debugPrint('[COMPAGNIE_DIAGNOSTIC] ‚ùå Erreur creation compagnies test:  + e.toString()';        'success';        'error: e.toString(';        'message': ';  static Future<Map<String, dynamic>> cleanTestCompagnies(';      debugPrint('[COMPAGNIE_DIAGNOSTIC] üßπ Nettoyage des compagnies de test...';          .collection('compagnies_assurance';          .where('code', whereIn: ['STAR', 'GAT', ';      if (snapshot.docs.isEmpty';          'success';          'deleted';          'message': ';      await batch.commit(';      debugPrint('[COMPAGNIE_DIAGNOSTIC] ‚úÖ '{snapshot.docs.length} compagnies de test supprimees';        'success';        'deleted';        'message': '';    } catch (e';      debugPrint('[COMPAGNIE_DIAGNOSTIC] ‚ùå Erreur nettoyage:  + e.toString()';        'success';        'error: e.toString(';        'message': ';      final result = await diagnoseCompagnies(';      if (!result['success]';        return 'Erreur: '{result['message']}';      final total = result['totalCompagnies';      final real = result['realCompagnies';      final fake = result['fakeCompagnies';      final dropdown = result['dropdownResults';      return 'Total: $total | Reelles: $real | Fake: $fake | Dropdown: ';    } catch (e';      return 'Erreur: ';