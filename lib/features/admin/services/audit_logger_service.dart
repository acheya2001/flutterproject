import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/material.dart';import 'dart:io';import 'package:flutter/foundation.dart';/// üîç Service centralise pour l';  static const String _auditLogsCollection = 'audit_logs';  /// üìù Types d';  static const String ACTION_USER_CREATED = 'user_created';  static const String ACTION_USER_UPDATED = 'user_updated';  static const String ACTION_USER_DELETED = 'user_deleted';  static const String ACTION_PASSWORD_RESET = 'password_reset';  static const String ACTION_ACCOUNT_LOCKED = 'account_locked';  static const String ACTION_ACCOUNT_UNLOCKED = 'account_unlocked';  static const String ACTION_ROLE_CHANGED = 'role_changed';  static const String ACTION_LOGIN_SUCCESS = 'login_success';  static const String ACTION_LOGIN_FAILED = 'login_failed';  static const String ACTION_LOGOUT = 'logout';  static const String ACTION_BULK_OPERATION = 'bulk_operation';  static const String ACTION_DATA_EXPORT = 'data_export';  static const String ACTION_COMPANY_CREATED = 'company_created';  static const String ACTION_COMPANY_UPDATED = 'company_updated';  static const String ACTION_COMPANY_DELETED = 'company_deleted';  static const String ACTION_AGENCY_CREATED = 'agency_created';  static const String ACTION_AGENCY_UPDATED = 'agency_updated';  static const String ACTION_AGENCY_DELETED = 'agency_deleted';  static const String ACTION_PERMISSION_CHANGED = 'permission_changed';  static const String ACTION_SENSITIVE_DATA_ACCESS = 'sensitive_data_access';  static const String LEVEL_LOW = 'low';  static const String LEVEL_MEDIUM = 'medium';  static const String LEVEL_HIGH = 'high';  static const String LEVEL_CRITICAL = 'critical';  }';      debugPrint('[AUDIT_LOGGER] üìù Enregistrement: $action par ';      final logId = _firestore.collection(_auditLogsCollection).doc(';        'id';        'action';        'performedBy';        'targetUserId';        'targetUserEmail';        'details';        'level';        'timestamp: FieldValue.serverTimestamp(';        'ipAddress: ipAddress ?? await _getClientInfo(';        'userAgent: userAgent ?? await _getUserAgent(';        'platform: _getPlatformInfo(';        'sessionId: _generateSessionId(';        ';          .set(logData';      debugPrint('[AUDIT_LOGGER] ‚úÖ Log enregistre avec ID: ';    } catch (e';      debugPrint(';  }';      'category': 'password_security';      ';  }';      'category': ';    ';    String organizationType = 'company', // 'company' ou ';  }';      'category': 'organization_management';      'organizationType';      'organizationId';      ';  }';      'category': 'bulk_operation';      'operation';      'targetCount';      ';  }';      'category': 'authentication';      'success';      ';    ';  /// üìã Recuperer les logs d';          .orderBy(';      if (performedBy != null && performedBy.isNotEmpty';        query = query.where(';      if (targetUserId != null && targetUserId.isNotEmpty';        query = query.where(';      if (action != null && action.isNotEmpty';        query = query.where(';      if (level != null && level.isNotEmpty';        query = query.where(';      if (startDate != null';        query = query.where(';      if (endDate != null';        query = query.where(';          .map((doc';                'id';                ';    } catch (e';      debugPrint(';      if (startDate != null';        query = query.where(';      if (endDate != null';        query = query.where(';      final logs = snapshot.docs.map((doc) => doc.data() as Map<String, dynamic>).toList(';        'total';        'byAction';        'byLevel';        'byPerformedBy';        ';      for (final log in logs';        final action = log['action'] as String? ?? 'unknown';        stats['byAction'][action] = (stats['byAction][action] ?? 0';        final level = log['level'] as String? ?? 'unknown';        stats['byLevel'][level] = (stats['byLevel][level] ?? 0';        final performedBy = log['performedBy'] as String? ?? 'unknown';        stats['byPerformedBy'][performedBy] = (stats['byPerformedBy][performedBy] ?? 0';        final timestamp = log[';          final date = timestamp.toDate(';          final dayKey = '${date.year}-{date.month.toString(').padLeft(2, '0')}-'{date.day.toString().padLeft(2, '0')}';          stats['byDay'][dayKey] = (stats[';    } catch (e';      debugPrint(';  static Future<String> _getClientInfo(';    // TODO: Implementer la recuperation de l';    // Pour l';    return ';  static Future<String> _getUserAgent(';    return ';    if (kIsWeb';      return ';      } catch (e';        return ';          .collection(_auditLogsCollection';          .where(';        await batch.commit(';        debugPrint('[AUDIT_LOGGER] üßπ ';    } catch (e';      debugPrint('[AUDIT_LOGGER] ‚ùå Erreur nettoyage logs: ';