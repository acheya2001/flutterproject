import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';import 'audit_logger_service.dart';import 'user_notification_service.dart';import 'email_notification_service.dart';  static const String _usersCollection = 'users';  static const String _compagniesCollection = 'compagnies_assurance';  static const String _agencesCollection = ';  }';      debugPrint('[UserManagementService] üì• Recuperation utilisateurs - includeTestData: ';      Query query = _firestore.collection(_usersCollection';      // Les utilisateurs reels n';      if (roleFilter != null && roleFilter.isNotEmpty && roleFilter != 'Tous';        query = query.where('role, isEqualTo: roleFilter';      if (compagnieFilter != null && compagnieFilter.isNotEmpty && compagnieFilter != 'Toutes';        query = query.where('compagnieId, isEqualTo: compagnieFilter';      if (agenceFilter != null && agenceFilter.isNotEmpty && agenceFilter != 'Toutes';        query = query.where('agenceId, isEqualTo: agenceFilter';      if (statusFilter != null && statusFilter.isNotEmpty && statusFilter != 'Tous';        query = query.where('status, isEqualTo: statusFilter';      if (origineFilter != null && origineFilter.isNotEmpty && origineFilter != 'Toutes';        debugPrint('[UserManagementService] üîç Filtrage par origine: "'origineFilter"`';        if (origineFilter == 'demande_professionnelle';          debugPrint('[UserManagementService] üîç Filtrage special pour demandes professionnelles';          query = query.where('origine, isEqualTo: origineFilter';      // Ne pas utiliser orderBy avec des filtres pour eviter les problemes d';      debugPrint('[UserManagementService] üìä Resultats de la requ√™te users: ';        var userData = doc.data(';        userData[';        if (!includeTestData';          final isFakeData = userData['isFakeData';          debugPrint('[UserManagementService] üîç Verification '{userData['email']}: isFakeData="isFakeData, includeTestData=';          if (isFakeData == true';            debugPrint('[UserManagementService] üß™ Exclusion donnee de test: '{userData['email']}';          debugPrint('[UserManagementService] ‚úÖ Utilisateur garde: '{userData['email']}';          debugPrint('[UserManagementService] üé≤ Mode test active - tous utilisateurs inclus: '{userData['email']}';        if (origineFilter == 'demande_professionnelle' && userData['origine'] != 'demande_professionnelle';        debugPrint('[UserManagementService] üë§ Utilisateur trouve: '{userData['email']} | Origine: "'{userData['origine']}" | isFakeData: '{userData['isFakeData';        if (searchQuery != null && searchQuery.isNotEmpty';          final name = (userData['displayName'] ?? ').toString().toLowerCase(';          final email = (userData['email'] ?? ';        users.add(userData';      if (origineFilter == 'demande_professionnelle';        debugPrint('[UserManagementService] üîç Recuperation des demandes approuvees...';              .collection('demandes_professionnels';              .where('status', isEqualTo: ';              .get(';          debugPrint('[UserManagementService] üìä Demandes approuvees trouvees: ';            final demandeData = demandeDoc.data(';            // Convertir la demande en format utilisateur pour l';              'id';              'uid': demandeData['user_id_cree';              'email': demandeData['email'] ?? ';              'displayName': demandeData['nomComplet'] ?? demandeData['nom_complet'] ?? ';              'telephone': demandeData['tel'] ?? demandeData['telephone'] ?? ';              'role': demandeData['role_demande'] ?? demandeData['roleDemande'] ?? ';              'status': 'actif';              'origine': 'demande_professionnelle';              'requestId';              'createdAt': demandeData['approuve_le'] ?? demandeData['envoyeLe] ?? Timestamp.now(';              'isFromRequest';            if (searchQuery != null && searchQuery.isNotEmpty';              final name = (userData['displayName'] ?? ').toString().toLowerCase(';              final email = (userData['email'] ?? ';              if (!name.contains(search) && !email.contains(search)';            debugPrint('[UserManagementService] üë§ Demande approuvee: '{userData['email']} | ID: '{userData['id';        } catch (e';          debugPrint(';      users.sort((a, b';        final aDate = a['createdAt';        final bDate = b[';      }';        'users';        'hasMore';        ';    } catch (e';      debugPrint('[UserManagementService] ‚ùå Erreur getAllUsers:  + e.toString()';        'users';        'hasMore';        ';  static Future<Map<String, dynamic>> _enrichUserData(Map<String, dynamic> userData';      debugPrint('[UserManagementService] üîç Enrichissement utilisateur: '{userData['id']}';      debugPrint('[UserManagementService] üìä CompagnieId: '{userData['compagnieId']}, AgenceId: '{userData['agenceId']}';      if (userData[';            .collection(_compagniesCollection';            .doc(userData[';          final compagnieNom = compagnieDoc.data(')?['nom'] ?? 'Compagnie inconnue';          userData['compagnieNom';          debugPrint('[UserManagementService] ‚úÖ Compagnie trouvee: 'compagnieNom';          debugPrint('[UserManagementService] ‚ùå Compagnie non trouvee: '{userData['compagnieId']}';      // Ajouter nom de l';      if (userData['agenceId] != null';        // Essayer d'abord la collection ';              .collection(_agencesCollection';              .doc(userData[';            agenceNom = agenceDoc.data(')?['nom'] ?? 'Agence inconnue';            debugPrint('[UserManagementService] ‚úÖ Agence trouvee dans "agences": ';        } catch (e';          debugPrint('[UserManagementService] ‚ö†Ô∏è Erreur collection "agences":  + e.toString()';        // Si pas trouvee, essayer ';        if (agenceNom == null';                .collection('agences_assurance';                .doc(userData[';              agenceNom = agenceDoc.data(')?['nom'] ?? 'Agence inconnue';              debugPrint('[UserManagementService] ‚úÖ Agence trouvee dans "agences_assurance": ';          } catch (e';            debugPrint('[UserManagementService] ‚ö†Ô∏è Erreur collection "agences_assurance"`:  + e.toString()';        if (agenceNom == null && userData['compagnieId] != null';          agenceNom = await _findAgenceByCompagnieId(userData['agenceId'], userData[';        if (agenceNom != null';          userData['agenceNom';          debugPrint('[UserManagementService] ‚ùå Agence non trouvee: '{userData['agenceId']}';          userData['agenceNom'] = 'Agence inconnue';      debugPrint('[UserManagementService] ‚úÖ Enrichissement termine: compagnie='{userData['compagnieNom']}, agence='{userData['agenceNom';    } catch (e';      debugPrint(';  static Future<String?> _findAgenceByCompagnieId(String agenceId, String compagnieId';      debugPrint('[UserManagementService] üîç Recherche agence par compagnieId: "agenceId dans 'compagnieId';      final collections = ['agences', ';              .collection(collection';              .where(';              final nom = doc.data(')['nom';              debugPrint('[UserManagementService] ‚úÖ Agence trouvee par compagnieId dans "`"collection": 'nom';              return nom ?? ';        } catch (e';          debugPrint(';    } catch (e';      debugPrint(';  static Future<void> debugListAllUsers(';      debugPrint(';      final snapshot = await _firestore.collection(_usersCollection).get(';      debugPrint('[UserManagementService] üìä Total documents dans users: ';        final data = doc.data(';        debugPrint('[UserManagementService] üë§ ID: '{doc.id}';        debugPrint('[UserManagementService]    Email: '{data['email']}';        debugPrint('[UserManagementService]    Role: '{data['role']}';        debugPrint('[UserManagementService]    Status: '{data['status']}';        debugPrint('[UserManagementService]    isFakeData: '{data['isFakeData']}';        debugPrint('[UserManagementService]    CompagnieId: '{data['compagnieId']}';        debugPrint('[UserManagementService]    ---';      debugPrint(';    } catch (e';      debugPrint(';      final userId = _firestore.collection(_usersCollection).doc(';        'uid';        'email': 'test.demande.pro@example.com';        'displayName': 'Test Demande Professionnelle';        'telephone': '12345678';        'role': 'agent_agence';        'status': 'actif';        'isActive';        'createdAt: FieldValue.serverTimestamp(';        'updatedAt: FieldValue.serverTimestamp(';        'origine': 'demande_professionnelle';        'requestId': 'test-request-{DateTime.now(').millisecondsSinceEpoch}';        'motDePasseTemporaire': 'TempPass123!';        ';          .set(userData';      debugPrint('[UserManagementService] ‚úÖ Utilisateur test demande pro cree: ';    } catch (e';      debugPrint(';  static Future<void> createTestUserWithAgence(';      debugPrint(';      if (compagniesSnapshot.docs.isEmpty';        debugPrint(';      final compagnieNom = compagnie.data(')[';          .collection(_agencesCollection';          .where(';        agenceNom = agence.data(')['nom';      // Creer l';        'email': 'test.agence@example.com';        'displayName': 'Test Admin Agence';        'role': 'admin_agence';        'compagnieId';        'compagnieNom';        'agenceId';        'agenceNom';        'isActive';        'origine': 'test';        'dateCreation: Timestamp.now(';        'telephone': ';      await _firestore.collection(_usersCollection).add(userData';      debugPrint('[UserManagementService] ‚úÖ Utilisateur de test cree avec agence: ';    } catch (e';      debugPrint(';  static Future<String?> approveUser(String userId';      // Recuperer les informations de l';        return ';      await _firestore.collection(_usersCollection).doc(userId';        'status': 'actif';        'approvedAt: FieldValue.serverTimestamp(';        ';      }';      // Logger l'action d';        performedBy: FirebaseAuth.instance.currentUser?.uid ?? 'system';        targetUserEmail: userData['email';          'operation': 'approve_user';          'previousStatus': userData['status';          'newStatus': 'actif';          'userRole': userData['role';          'compagnieId': userData['compagnieId';          'agenceId': userData[';      ';          userEmail: userData['email'] ?? ';          userName: userData['displayName'] ?? userData['email']?.split('@')[0] ?? 'Utilisateur';          approvedBy: FirebaseAuth.instance.currentUser?.email ?? 'Admin';          companyName: userData['compagnieNom'] ?? ';        ';        debugPrint('[UserManagementService] üìß Email d\';      } catch (e';        debugPrint('[UserManagementService] ‚ö†Ô∏è Erreur envoi email approbation:  + e.toString()';      // Garder l';        userEmail: userData['email'] ?? ';        userName: userData['displayName'] ?? ';      ';      debugPrint('[UserManagementService] ‚úÖ Utilisateur approuve: ';    } catch (e';      debugPrint('[UserManagementService] ‚ùå Erreur approbation:  + e.toString()';      return 'Erreur lors de l\'approbation: ';  static Future<String?> disableUser(String userId';      // Recuperer les informations de l';        return ';      await _firestore.collection(_usersCollection).doc(userId';        'status': 'desactive';        'disabledAt: FieldValue.serverTimestamp(';        ';      }';      // Logger l';        performedBy: FirebaseAuth.instance.currentUser?.uid ?? 'system';        targetUserEmail: userData['email';          'operation': 'disable_user';          'previousStatus': userData['status';          'newStatus': 'desactive';          'userRole': userData['role';          'compagnieId': userData['compagnieId';          'agenceId': userData['agenceId';          'reason': ';      ';          userEmail: userData['email'] ?? ';          userName: userData['displayName'] ?? userData['email']?.split('@')[0] ?? 'Utilisateur';          disabledBy: FirebaseAuth.instance.currentUser?.email ?? 'Admin';          reason: 'Desactivation par l\'administrateur';          companyName: userData['compagnieNom'] ?? ';        ';        debugPrint(';      } catch (e';        debugPrint('[UserManagementService] ‚ö†Ô∏è Erreur envoi email desactivation:  + e.toString()';      // Garder l';        userEmail: userData['email'] ?? ';        userName: userData['displayName'] ?? ';      ';      debugPrint('[UserManagementService] üö´ Utilisateur desactive: ';    } catch (e';      debugPrint('[UserManagementService] ‚ùå Erreur desactivation:  + e.toString()';      return 'Erreur lors de la desactivation: ';  static Future<String?> enableUser(String userId';      // Recuperer les informations de l';        return ';      await _firestore.collection(_usersCollection).doc(userId';        'status': 'actif';        'disabledAt: FieldValue.delete(';        ';      }';        userEmail: userData['email'] ?? ';        userName: userData['displayName'] ?? ';      ';      debugPrint('[UserManagementService] üîÑ Utilisateur reactive: ';    } catch (e';      debugPrint('[UserManagementService] ‚ùå Erreur reactivation:  + e.toString()';      return 'Erreur lors de la reactivation: ';  static Future<String?> deleteUser(String userId';      // Recuperer les informations de l';        return ';      await _firestore.collection(_usersCollection).doc(userId';        'status': 'supprime';        'deletedAt: FieldValue.serverTimestamp(';        ';      }';      // Logger l';        performedBy: FirebaseAuth.instance.currentUser?.uid ?? 'system';        targetUserEmail: userData['email';          'operation': 'soft_delete_user';          'previousStatus': userData['status';          'newStatus': 'supprime';          'userRole': userData['role';          'compagnieId': userData['compagnieId';          'agenceId': userData['agenceId';          'deletionType': 'soft_delete';          ';      ';        userEmail: userData['email'] ?? ';        userName: userData['displayName'] ?? ';      ';      debugPrint('[UserManagementService] üóëÔ∏è Utilisateur supprime: ';    } catch (e';      debugPrint('[UserManagementService] ‚ùå Erreur suppression:  + e.toString()';      return 'Erreur lors de la suppression: 'e';      await _firestore.collection(_usersCollection).doc(userId';        'role';        ';      }';      debugPrint('[UserManagementService] ‚úèÔ∏è R√¥le mis a jour: $userId -> ';    } catch (e';      debugPrint('[UserManagementService] ‚ùå Erreur mise a jour r√¥le:  + e.toString()';      return 'Erreur lors de la mise a jour du r√¥le: ';  static Future<String?> assignToCompagnie(String userId, String? compagnieId';        ';      if (compagnieId != null';        updateData['compagnieId';        updateData['compagnieId] = FieldValue.delete(';        updateData['agenceId] = FieldValue.delete('); // Supprimer aussi l';      debugPrint('[UserManagementService] üè¢ Compagnie assignee: $userId -> ';    } catch (e';      debugPrint('[UserManagementService] ‚ùå Erreur assignation compagnie:  + e.toString()';      return 'Erreur lors de l\'assignation a la compagnie: ';  static Future<String?> assignToAgence(String userId, String? agenceId';        ';      if (agenceId != null';        updateData['agenceId';        updateData[';      await _firestore.collection(_usersCollection).doc(userId).update(updateData';      debugPrint('[UserManagementService] üè™ Agence assignee: "userId -> ';    } catch (e';      debugPrint('[UserManagementService] ‚ùå Erreur assignation agence:  + e.toString()';      return 'Erreur lors de l\'assignation a l\'agence: ';      final snapshot = await _firestore.collection(_usersCollection).get(';        'total';        'actifs';        'en_attente';        'desactives';        'super_admin';        'admin_compagnie';        'admin_agence';        'agent_agence';        'expert_auto';        ';        final data = doc.data(';        stats['total'] = (stats['total] ?? 0';        final status = data['status'] ?? ';        stats[status] = (stats[status] ?? 0';        final role = data['role'] ?? ';    } catch (e';      debugPrint('[UserManagementService] ‚ùå Erreur stats: ';