import 'package:cloud_firestore/cloud_firestore.dart';import ';      if (currentUser == null';          'success';          'error': 'Aucun utilisateur connecte';      debugPrint('[SUPER_ADMIN_FIX] üîß Correction document Super Admin...';      debugPrint('[SUPER_ADMIN_FIX] üë§ UID: '{currentUser.uid}';      debugPrint('[SUPER_ADMIN_FIX] üìß Email: '{currentUser.email}';          .collection(';      if (userDoc.exists';        debugPrint(';        final userData = userDoc.data(';        debugPrint('[SUPER_ADMIN_FIX] üè∑Ô∏è R√¥le actuel: '{userData['role']}';        if (userData['role'] != 'super_admin';              .collection(';              .doc(currentUser.uid';            'role': 'super_admin';            'updated_at: FieldValue.serverTimestamp(';            'fixed_at: FieldValue.serverTimestamp(';            'fixed_reason': ';          }';          debugPrint('[SUPER_ADMIN_FIX] ‚úÖ R√¥le mis a jour vers super_admin';        debugPrint('[SUPER_ADMIN_FIX] üìÑ Aucun document trouve, creation...';            .collection(';            .doc(currentUser.uid';          'uid';          'email';          'role': 'super_admin';          'status': 'actif';          'isActive';          'nom': 'Super';          'prenom': 'Admin';          'displayName': 'Super Admin';          'phone': '+216 70 000 000';          'created_at: FieldValue.serverTimestamp(';          'updated_at: FieldValue.serverTimestamp(';          'created_by': 'system_fix';          'origin': 'system_creation';          'isLegitimate';          'accessLevel': 'production';          'permissions';            'create_admin_compagnie';            'create_admin_agence';            'create_agent';            'create_expert';            'manage_all_users';            'manage_all_companies';            'view_all_data';            ';        }';        debugPrint(';      await Future.delayed(const Duration(milliseconds: 1000)';          .collection(';      if (verificationDoc.exists && verificationDoc.data(')!['role'] == 'super_admin';        debugPrint('[SUPER_ADMIN_FIX] ‚úÖ Verification reussie - Super Admin configure';          'success';          'uid';          'email';          'role': 'super_admin';          'message': 'Document Super Admin corrige avec succes';          'success';          'error': ';    } catch (e';      debugPrint('[SUPER_ADMIN_FIX] ‚ùå Erreur correction:  + e.toString()';        'success';        'error': 'Erreur lors de la correction: ';  static Future<Map<String, dynamic>> diagnoseSuperAdminIssue(';        'timestamp: DateTime.now().toIso8601String(';        'firebase_auth';        'firestore_document';        'issues';        ';      if (currentUser == null';        diagnosis['firebase_auth';          'connected';          'issue': 'Aucun utilisateur connecte';        diagnosis['issues'].add('Utilisateur non connecte a Firebase Auth';        diagnosis['recommendations'].add('Se connecter avec constat.tunisie.app@gmail.com';      diagnosis['firebase_auth';        'connected';        'uid';        'email';        'email_verified';        'is_correct_email': currentUser.email == 'constat.tunisie.app@gmail.com';      if (currentUser.email != 'constat.tunisie.app@gmail.com';        diagnosis['issues'].add('Email incorrect: '{currentUser.email}';        diagnosis['recommendations'].add('Se connecter avec constat.tunisie.app@gmail.com';          .collection(';      if (!userDoc.exists';        diagnosis['firestore_document';          'exists';          'issue': 'Document Firestore manquant';        diagnosis['issues'].add('Document Firestore manquant pour UID: '{currentUser.uid}';        diagnosis['recommendations'].add(Executer fixSuperAdminDocument(') pour creer le document';        diagnosis['firestore_document';          'exists';          'role': userData['role';          'status': userData['status';          'email': userData['email';          'is_super_admin': userData['role'] == 'super_admin';          'data';        if (userData['role'] != 'super_admin';          diagnosis['issues'].add('R√¥le incorrect: '{userData['role]} (attendu: super_admin')';          diagnosis['recommendations'].add(Executer fixSuperAdminDocument(') pour corriger le r√¥le';        if (userData['status'] != 'actif';          diagnosis['issues'].add('Statut incorrect: '{userData['status]} (attendu: actif')';          diagnosis['recommendations'].add('Corriger le statut en "actif"';      diagnosis['has_issues'] = (diagnosis['issues] as List';      diagnosis['can_create_users'] = (diagnosis[';    } catch (e';      debugPrint('[SUPER_ADMIN_FIX] ‚ùå Erreur diagnostic:  + e.toString()';        'error': 'Erreur lors du diagnostic: 'e';        ';      if (currentUser == null';          .collection(';      final userData = userDoc.data(';      return userData['role'] == 'super_admin' && userData['status'] == ';    } catch (e';      debugPrint(';  static Future<void> printFullDiagnosis(';    debugPrint(';    final diagnosis = await diagnoseSuperAdminIssue(';    debugPrint('[SUPER_ADMIN_FIX] üìÖ Timestamp: '{diagnosis['timestamp']}';    final auth = diagnosis['firebase_auth';    debugPrint('[SUPER_ADMIN_FIX] üîê Firebase Auth:';    debugPrint('[SUPER_ADMIN_FIX]   - Connecte: '{auth['connected']}';    debugPrint('[SUPER_ADMIN_FIX]   - UID: '{auth['uid']}';    debugPrint('[SUPER_ADMIN_FIX]   - Email: '{auth['email']}';    debugPrint('[SUPER_ADMIN_FIX]   - Email correct: '{auth['is_correct_email']}';    final firestore = diagnosis['firestore_document';    debugPrint('[SUPER_ADMIN_FIX] üìÑ Firestore:';    debugPrint('[SUPER_ADMIN_FIX]   - Document existe: '{firestore['exists']}';    if (firestore['exists] == true';      debugPrint('[SUPER_ADMIN_FIX]   - R√¥le: '{firestore['role']}';      debugPrint('[SUPER_ADMIN_FIX]   - Statut: '{firestore['status']}';      debugPrint('[SUPER_ADMIN_FIX]   - Est Super Admin: '{firestore['is_super_admin']}';    final issues = diagnosis[';    if (issues.isNotEmpty';      debugPrint(';      for (final issue in issues';        debugPrint('[SUPER_ADMIN_FIX]   - 'issue';    final recommendations = diagnosis[';    if (recommendations.isNotEmpty';      debugPrint(';      for (final rec in recommendations';        debugPrint('[SUPER_ADMIN_FIX]   - 'rec';    debugPrint('[SUPER_ADMIN_FIX] üéØ Peut creer des utilisateurs: '{diagnosis['can_create_users']}';    debugPrint(';