import 'package:flutter/foundation.dart';import 'admin_creation_service.dart';import 'email_notification_service.dart';/// üß™ Service de test pour la creation d';  }';      debugPrint('[USER_CREATION_TEST] üß™ Test creation Admin Compagnie...';      debugPrint('[USER_CREATION_TEST]   - Email: 'email';      debugPrint('[USER_CREATION_TEST]   - Nom: $prenom 'nom';      debugPrint('[USER_CREATION_TEST]   - Compagnie: $compagnieNom (compagnieId')';      debugPrint('[USER_CREATION_TEST] üîë Mot de passe genere: ';      ';      if (result['success] != true';          'success';          'error': '√âchec creation compte: '{result['error']}';          'step': 'account_creation';      debugPrint('[USER_CREATION_TEST] ‚úÖ Compte cree - UID: '{result['uid']}';      // 3. Envoyer l';        userName: '$prenom 'nom';        role: ';      ';        'success';        'uid': result['uid';        'email';        'temporaryPassword';        'emailSent';        'compagnieId';        ';    } catch (e';      debugPrint('[USER_CREATION_TEST] ‚ùå Erreur test:  + e.toString()';        'success';        'error': 'Erreur systeme: 'e';        'step': 'unknown';  }';      debugPrint(';      ';      if (result['success] != true';          'success';          'error': '√âchec creation compte: '{result['error']}';          'step': 'account_creation';      // 3. Envoyer l';        userName: '$prenom 'nom';        role: 'Administrateur d\'Agence';        companyName: 'Compagnie Test';        agencyName: ';      ';        'success';        'uid': result['uid';        'email';        'temporaryPassword';        'emailSent';        'compagnieId';        ';    } catch (e';      debugPrint('[USER_CREATION_TEST] ‚ùå Erreur test admin agence:  + e.toString()';        'success';        'error': 'Erreur systeme: 'e';        'step': ';    final randomString = random.toString().substring(8';    return 'Test';  static Map<String, dynamic> getTestReport(Map<String, dynamic> result';      'success': result['success';      'uid': result['uid';      'email': result['email';      'passwordGenerated': result['temporaryPassword';      'emailSent': result['emailSent';      'error': result['error';      'step': result['step';      ';  static Future<bool> cleanupTestData(String uid';      debugPrint('[USER_CREATION_TEST] üßπ Nettoyage donnees test pour UID: 'uid';      debugPrint(';    } catch (e';      debugPrint('[USER_CREATION_TEST] ‚ùå Erreur nettoyage: ';