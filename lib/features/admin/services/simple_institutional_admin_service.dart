import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';import 'dart:math';  }';      debugPrint('[SIMPLE_ADMIN] üöÄ Creation simplifiee...';      debugPrint('[SIMPLE_ADMIN] üè¢ Compagnie: $compagnieName (compagnieId')';      // üîç Verifier qu'il n';      debugPrint('[SIMPLE_ADMIN] üîç Verification unicite Admin Compagnie...';          .collection('users';          .where('role', isEqualTo: 'admin_compagnie';          .where('compagnieId, isEqualTo: compagnieId';          .where(';        final existingAdmin = existingAdminQuery.docs.first.data(';        final existingEmail = existingAdmin['email'] ?? 'Email inconnu';        debugPrint('[SIMPLE_ADMIN] ‚ùå Admin Compagnie existe deja: 'existingEmail';          'success';          'error': 'ADMIN_ALREADY_EXISTS';          'message': 'Un Admin Compagnie existe deja pour cette compagnie';          'existingEmail';          'compagnieName';      debugPrint(';      final password = customPassword ?? _generateSimplePassword(';      final userId = 'admin_${compagnieId}_{DateTime.now(').millisecondsSinceEpoch}';      debugPrint('[SIMPLE_ADMIN] üìß Email: 'email';      debugPrint('[SIMPLE_ADMIN] üÜî UserID: 'userId';        'uid';        'email';        'nom': 'Admin';        'prenom';        'role': 'admin_compagnie';        'compagnieId';        'compagnieNom';        'accountType': 'institutional';        'isActive';        'status': 'actif';        'created_at: DateTime.now().toIso8601String(';        'created_by': 'super_admin';        'source': 'simple_creation';        'authMethod': 'firestore_only';        'password';        'temporaryPassword';        'motDePasseTemporaire';        'motDePasse';        'temp_password';        'generated_password';      debugPrint('[SIMPLE_ADMIN] üìù Donnees: 'userData';      debugPrint('[SIMPLE_ADMIN] üíæ √âcriture Firestore...';          .collection(';          .set(userData';      debugPrint('[SIMPLE_ADMIN] ‚úÖ √âcriture reussie';      debugPrint('[SIMPLE_ADMIN] üîç Verification...';          .collection(';      if (!doc.exists';        throw Exception('Document non cree';      debugPrint('[SIMPLE_ADMIN] ‚úÖ Document verifie';        'success';        'userId';        'email';        'password';        'compagnieId';        'compagnieName';        'message': 'Admin Compagnie cree avec succes';        'displayCredentials';          'email';          'password';          'compagnie';          'role': ';    } catch (e, stackTrace';      debugPrint('[SIMPLE_ADMIN] ‚ùå Erreur:  + e.toString()';      debugPrint('[SIMPLE_ADMIN] ‚ùå Stack: 'stackTrace';        'success';        'error: e.toString(';        'stackTrace: stackTrace.toString(';        'message': 'Erreur lors de la creation: ';    final cleanId = compagnieId.toLowerCase(';        .replaceAll(RegExp(r'[^a-z0-9]'), ';        .replaceAll('assurance', ';        .replaceAll('insurance', ';    return 'admin.';    final random = Random(';    final chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';    String password = ';      password += chars[random.nextInt(chars.length';    return '';  static Future<Map<String, dynamic>> testSimpleCreation(';      debugPrint('[SIMPLE_ADMIN] üß™ Test de creation simple...';        compagnieId: 'test_simple';        compagnieName: ';      ';      if (result['success]';        debugPrint('[SIMPLE_ADMIN] ‚úÖ Test reussi';        debugPrint('[SIMPLE_ADMIN] üìß Email: '{result['email']}';        debugPrint('[SIMPLE_ADMIN] üîê Password: '{result['password']}';              .collection('users';              .doc(result[';              .delete(';          debugPrint(';        } catch (e';          debugPrint('[SIMPLE_ADMIN] ‚ö†Ô∏è Erreur nettoyage:  + e.toString()';        debugPrint('[SIMPLE_ADMIN] ‚ùå Test echoue: '{result['message';    } catch (e';      debugPrint('[SIMPLE_ADMIN] ‚ùå Erreur test:  + e.toString()';        'success';        'error: e.toString(';        'message': ';  static Future<Map<String, dynamic>> listInstitutionalAccounts(';      debugPrint('[SIMPLE_ADMIN] üìä Liste des comptes institutionnels...';          .collection('users';          .where('accountType', isEqualTo: ';        final data = doc.data(';          'id';          'email': data['email';          'compagnieNom': data['compagnieNom';          'compagnieId': data['compagnieId';          'isActive': data['isActive';          'created_at': data[';      }).toList(';      debugPrint('[SIMPLE_ADMIN] üìä '{accounts.length} comptes trouves';        'success';        'accounts';        'count';        'message': '';    } catch (e';      debugPrint('[SIMPLE_ADMIN] ‚ùå Erreur liste:  + e.toString()';        'success';        'error: e.toString(';        'message': ';  static Future<Map<String, dynamic>> deleteInstitutionalAccount(String userId';      debugPrint('[SIMPLE_ADMIN] üóëÔ∏è Suppression compte: 'userId';      // Verifier que c';          .collection(';      if (!doc.exists';          'success';          'message': ';      final data = doc.data(';      if (data['accountType'] != 'institutional';          'success';          'message': 'Ce n\'est pas un compte institutionnel';          .collection(';          .delete(';      debugPrint('[SIMPLE_ADMIN] ‚úÖ Compte supprime';        'success';        'message': 'Compte institutionnel supprime';        'deletedAccount';          'id';          'email': data['email';          'compagnie': data[';    } catch (e';      debugPrint('[SIMPLE_ADMIN] ‚ùå Erreur suppression:  + e.toString()';        'success';        'error: e.toString(';        'message': 'Erreur lors de la suppression';  static Future<Map<String, dynamic>> regenerateAccountPassword(String userId';      debugPrint('[SIMPLE_ADMIN] üîÑ Regeneration mot de passe: 'userId';          .collection(';      if (!doc.exists';          'success';          'message': ';      final data = doc.data(';      if (data['accountType'] != 'institutional';          'success';          'message': 'Ce n\';      // Mettre a jour (on pourrait stocker un hash du mot de passe';          .collection(';          .doc(userId';        'lastPasswordChange: DateTime.now().toIso8601String(';        ';      }';      debugPrint('[SIMPLE_ADMIN] ‚úÖ Mot de passe regenere';        'success';        'newPassword';        'email': data['email';        'compagnie': data['compagnieNom';        'message': ';    } catch (e';      debugPrint('[SIMPLE_ADMIN] ‚ùå Erreur regeneration:  + e.toString()';        'success';        'error: e.toString(';        'message': ';