import 'package:cloud_firestore/cloud_firestore.dart';import ';  static Future<Map<String, dynamic>> cleanAllTestData(';      debugPrint(';      final usersResult = await _cleanUsersCollection(';      results[';      final compagniesResult = await _cleanCompagniesCollection(';      results[';      final agencesResult = await _cleanAgencesCollection(';      results[';      final agentsResult = await _cleanAgentsCollection(';      results[';      final expertsResult = await _cleanExpertsCollection(';      results[';      final demandesResult = await _cleanDemandesCollection(';      results['demandes_professionnels';      debugPrint('[CLEANUP] ‚úÖ === NETTOYAGE TERMIN√â ===';      debugPrint('[CLEANUP] üìä Total supprime: 'totalDeleted documents';      debugPrint('[CLEANUP] üìã Details par collection: 'results';        'success';        'totalDeleted';        'details';        'message': ';    } catch (e';      debugPrint('[CLEANUP] ‚ùå Erreur lors du nettoyage:  + e.toString()';        'success';        'error: e.toString(';        'message': ';  static Future<int> _cleanUsersCollection(';      debugPrint('[CLEANUP] üßπ Nettoyage collection users...';      final snapshot = await _firestore.collection(';        if (shouldDelete';          debugPrint('[CLEANUP] üóëÔ∏è Suppression user: ${doc.id} ('{data['email]}')';      debugPrint('[CLEANUP] ‚úÖ Users supprimes: ';    } catch (e';      debugPrint(';  static Future<int> _cleanCompagniesCollection(';      debugPrint('[CLEANUP] üßπ Nettoyage collection compagnies_assurance...';      final snapshot = await _firestore.collection(';        if (shouldDelete';          debugPrint('[CLEANUP] üóëÔ∏è Suppression compagnie: ${doc.id} ('{data['nom]}')';      debugPrint('[CLEANUP] ‚úÖ Compagnies supprimees: ';    } catch (e';      debugPrint(';  static Future<int> _cleanAgencesCollection(';      debugPrint('[CLEANUP] üßπ Nettoyage collection agences_assurance...';      final snapshot = await _firestore.collection(';        if (shouldDelete';          debugPrint('[CLEANUP] üóëÔ∏è Suppression agence: ${doc.id} ('{data['nom]}')';      debugPrint('[CLEANUP] ‚úÖ Agences supprimees: ';    } catch (e';      debugPrint(';  static Future<int> _cleanAgentsCollection(';      debugPrint('[CLEANUP] üßπ Nettoyage collection agents_assurance...';      final snapshot = await _firestore.collection(';        if (shouldDelete';          debugPrint('[CLEANUP] üóëÔ∏è Suppression agent: ${doc.id} ('{data['email]}')';      debugPrint('[CLEANUP] ‚úÖ Agents supprimes: ';    } catch (e';      debugPrint(';  static Future<int> _cleanExpertsCollection(';      debugPrint('[CLEANUP] üßπ Nettoyage collection experts...';      final snapshot = await _firestore.collection(';        if (shouldDelete';          debugPrint('[CLEANUP] üóëÔ∏è Suppression expert: ${doc.id} ('{data['email]}')';      debugPrint('[CLEANUP] ‚úÖ Experts supprimes: ';    } catch (e';      debugPrint(';  static Future<int> _cleanDemandesCollection(';      debugPrint('[CLEANUP] üßπ Nettoyage collection demandes_professionnels...';      final snapshot = await _firestore.collection(';        if (shouldDelete';          debugPrint('[CLEANUP] üóëÔ∏è Suppression demande: ${doc.id} ('{data['email]}')';      debugPrint('[CLEANUP] ‚úÖ Demandes supprimees: ';    } catch (e';      debugPrint(';  static bool _shouldDeleteUser(String docId, Map<String, dynamic> data';    if (data['isFakeData] == true';    if (docId.startsWith('test_)';    final email = (data['email'] as String? ?? ').toLowerCase(';    if (email.contains('test') || email.contains('fake') || email.contains('example)';    final origine = (data['origine'] as String? ?? ').toLowerCase(';    if (origine == ';  static bool _shouldDeleteCompagnie(String docId, Map<String, dynamic> data';    if (data['isFakeData] == true';    if (docId.startsWith('test_)';    final nom = (data['nom'] as String? ?? ').toLowerCase(';    if (nom.contains('test') || nom.contains(';  static bool _shouldDeleteAgence(String docId, Map<String, dynamic> data';    if (data['isFakeData] == true';    if (docId.startsWith('test_)';    final nom = (data['nom'] as String? ?? ').toLowerCase(';    if (nom.contains('test') || nom.contains(';  static bool _shouldDeleteAgent(String docId, Map<String, dynamic> data';    if (data['isFakeData] == true';    if (docId.startsWith('test_)';    final email = (data['email'] as String? ?? ').toLowerCase(';    if (email.contains('test') || email.contains('fake') || email.contains(';  static bool _shouldDeleteExpert(String docId, Map<String, dynamic> data';    if (data['isFakeData] == true';    if (docId.startsWith('test_)';    final email = (data['email'] as String? ?? ').toLowerCase(';    if (email.contains('test') || email.contains('fake') || email.contains(';  static bool _shouldDeleteDemande(String docId, Map<String, dynamic> data';    if (data['isFakeData] == true';    if (docId.startsWith('test_)';    final email = (data['email'] as String? ?? ').toLowerCase(';    if (email.contains('test') || email.contains('fake') || email.contains(';