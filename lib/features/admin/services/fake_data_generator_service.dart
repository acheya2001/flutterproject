import 'dart:math';import 'package:flutter/material.dart';import 'package:cloud_firestore/cloud_firestore.dart';import ';  static Future<void> generateAllFakeData(';      debugPrint(';      await _generateUsers(';      // 3. Generer les logs d';      await _generateEmailLogs(';      debugPrint(';    } catch (e';      debugPrint(';  static Future<void> _generateCompaniesAndAgencies(';    debugPrint('[FAKE_DATA] 🏢 Generation compagnies et agences...';      'STAR Assurance';      'GAT Assurance';      'Maghrebia Assurance';      'Assurances Salim';      'CTAMA Assurance';      'Lloyd Tunisien';      'Assurances Hayett';      'ZITOUNA Assurance';      'AMI Assurance';      'Assurances BIAT';      'Agence Centre-Ville';      'Agence Nord';      'Agence Sud';      'Agence Est';      'Agence Ouest';      'Agence Menzah';      'Agence Lac';      'Agence Ariana';      'Agence Sfax';      ';    for (int i = 0; i < companyNames.length; i++';      final companyId = 'test_company_'{i + 1}';      await _firestore.collection('compagnies_assurance).doc(companyId';        'nom';        'code': 'TC{(i + 1).toString(').padLeft(3, '0')}';        'type: _random.nextBool(') ? 'vie' : 'dommages';        'email': '{companyName.toLowerCase(').replaceAll(' ', '.')}@test.com';        'telephone': '+216 {20000000 + _random.nextInt(99999999')}';        'adresse': 'Avenue '{companyName.split(' ')[0]}, Tunis';        'created_at: _getRandomTimestamp(30';        'status: _getRandomStatus(';        ';      for (int j = 0; j < agencyCount; j++';        final agencyId = 'test_agency_${i + 1}_'{j + 1}';        final agencyName = '${agencyPrefixes[j % agencyPrefixes.length]} '{companyName.split(' ')[0]}';            .collection(';            .doc(companyId';            .collection(';            .doc(agencyId';          'nom';          'code': 'AG{(i + 1).toString(').padLeft(2, '0')}'{(j + 1).toString().padLeft(2, '0')}';          'compagnie_id';          'compagnie_nom';          'email': '{agencyName.toLowerCase(').replaceAll(' ', '.')}@test.com';          'telephone': '+216 {70000000 + _random.nextInt(9999999')}';          'adresse': 'Rue '{agencyName.split(' ')[1]}, '{_getRandomCity()}';          'created_at: _getRandomTimestamp(25';          'status: _getRandomStatus(';          ';        }';        await _firestore.collection('agences_assurance).doc(agencyId';          'nom';          'code': 'AG{(i + 1).toString(').padLeft(2, '0')}'{(j + 1).toString().padLeft(2, '0')}';          'compagnie_id';          'compagnie_nom';          'email': '{agencyName.toLowerCase(').replaceAll(' ', '.')}@test.com';          'telephone': '+216 {70000000 + _random.nextInt(9999999')}';          'adresse': 'Rue '{agencyName.split(' ')[1]}, '{_getRandomCity()}';          'created_at: _getRandomTimestamp(25';          'status: _getRandomStatus(';          ';        }';      debugPrint('[FAKE_DATA] ✅ Compagnie "`"companyName"` creee avec ';  static Future<void> _generateUsers(';    debugPrint('[FAKE_DATA] 👥 Generation utilisateurs...';      'super_admin';      'admin_compagnie';      'admin_agence';      'agent';      'conducteur';      'expert';    final statuses = ['actif', 'inactif', 'bloque', 'desactive';    final origins = ['creation_directe', 'demande_professionnelle';      'Ahmed', 'Mohamed', 'Fatma', 'Aisha', 'Omar', 'Leila', 'Karim', 'Salma';      'Youssef', 'Nour', 'Sami', 'Ines', 'Mehdi', 'Rim', 'Tarek', 'Amira';      'Hedi', 'Sonia', 'Rami', 'Dorra', 'Fares', 'Mariem', 'Walid', 'Nesrine';      'Ben Ali', 'Trabelsi', 'Bouazizi', 'Chaieb', 'Dridi', 'Essid', 'Ferjani';      'Gharbi', 'Hamdi', 'Jebali', 'Karray', 'Lassoued', 'Maaloul', 'Nasri';      'Ouali', 'Pasha', 'Qadri', 'Riahi', 'Sassi', 'Touati', 'Usman', ';      final origin = origins[_random.nextInt(origins.length';      final userId = 'test_user_{(i + 1).toString(').padLeft(3, '0')}';      await _firestore.collection('users).doc(userId';        'nom';        'prenom';        'email': ${firstName.toLowerCase(')}.'{lastName.toLowerCase().replaceAll(' ', ')}@test.com';        'telephone': '+216 {20000000 + _random.nextInt(79999999')}';        'role';        'status';        'origin';        'compagnie': role.contains('admin') || role == 'agent' ? 'test_company_{1 + _random.nextInt(10')}';        'agence': role == 'admin_agence' || role == 'agent' ? test_agency_${1 + _random.nextInt(10')}_'{1 + _random.nextInt(5)}';        'created_at: _getRandomTimestamp(30';        'last_login': status == 'actif ? _getRandomTimestamp(7';        ';      if (i % 50 == 0';        debugPrint('[FAKE_DATA] 📊 '{i + 1}/250 utilisateurs crees...';    debugPrint('[FAKE_DATA] ✅ 250 utilisateurs crees';  /// 📋 Generer des logs d';    debugPrint('[FAKE_DATA] 📋 Generation logs d\'audit...';      'user_created', 'user_updated', 'user_deleted', 'user_blocked', 'user_unblocked';      'password_reset', 'account_locked', 'account_unlocked', 'role_changed';      'company_created', 'company_updated', 'agency_created', 'agency_updated';      'login_success', 'login_failed', 'logout', 'data_export', ';    for (int i = 0; i < 500; i++') { // 500 logs d';      final userId = 'test_user_{1 + _random.nextInt(250')}';      await _firestore.collection('audit_logs).doc(logId';        'action';        'user_id';        'user_email': 'user{1 + _random.nextInt(250')}@test.com';        'timestamp: _getRandomTimestamp(30';        'ip_address': 192.168.${1 + _random.nextInt(254')}.'{1 + _random.nextInt(254)}';        'user_agent': Mozilla/5.0 (Test Browser')';        'details';          'target': action.contains('user') ? 'user' : 'system';          'success: _random.nextDouble(';        ';      }';    debugPrint('[FAKE_DATA] ✅ 500 logs d\'audit crees';  /// 📧 Generer des logs d';    debugPrint('[FAKE_DATA] 📧 Generation logs d\'emails...';      'password_reset', 'account_created', 'account_blocked', 'role_changed';      'welcome', 'notification', 'reminder', ';      final success = _random.nextDouble(';      await _firestore.collection('email_logs).doc(logId';        'type';        'to': 'user{1 + _random.nextInt(250')}@test.com';        'subject': 'Test Email - 'emailType';        'status': success ? 'sent' : 'failed';        'timestamp: _getRandomTimestamp(30';        'error': success ? null : 'Test error message';        ';      }';    debugPrint('[FAKE_DATA] ✅ 300 logs d\';  static Future<void> clearAllFakeData(';    debugPrint('[FAKE_DATA] 🗑️ Suppression donnees de test...';      'users';      'compagnies_assurance';      'agences_assurance';      'audit_logs';      ';          .collection(collectionName';          .where(';        await batch.commit(';        debugPrint('[FAKE_DATA] 🗑️ "{snapshot.docs.length} documents supprimes de 'collectionName';        .collection('compagnies_assurance';        .where(';    for (final companyDoc in companiesSnapshot.docs';      final agenciesSnapshot = await companyDoc.reference.collection(';        await batch.commit(';    debugPrint(';  static String _getRandomStatus(';    final statuses = ['actif', 'inactif', 'bloque', ';  static String _getRandomCity(';      'Tunis', 'Sfax', 'Sousse', 'Kairouan', 'Bizerte', 'Gabes';      'Ariana', 'Gafsa', 'Monastir', 'Ben Arous', 'Kasserine', ';