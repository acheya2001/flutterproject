import 'package:cloud_firestore/cloud_firestore.dart';import ';  static Future<Map<String, dynamic>> cleanAllFakeData(';      debugPrint('[FAKE_CLEANUP] üßπ Debut du nettoyage des donnees fake...';        'users';        'compagnies_assurance';        'audit_logs';        'email_logs';        'agences_assurance';        'agents_assurance';        'experts';        'sinistres';        'contrats';        ';        final deleted = await _cleanFakeDataFromCollection(collection';        debugPrint('[FAKE_CLEANUP] ‚úÖ $collection: 'deleted documents supprimes';      debugPrint('[FAKE_CLEANUP] üéâ Nettoyage termine: 'totalDeleted documents supprimes au total';        'success';        'totalDeleted';        'details';        'message': ';    } catch (e';      debugPrint('[FAKE_CLEANUP] ‚ùå Erreur lors du nettoyage:  + e.toString()';        'success';        'error: e.toString(';        'message': 'Erreur lors du nettoyage des donnees fake';  static Future<int> _cleanFakeDataFromCollection(String collectionName';      debugPrint('[FAKE_CLEANUP] üîç Nettoyage de la collection: ';          .collection(collectionName';          .where(';      if (querySnapshot.docs.isEmpty';        debugPrint('[FAKE_CLEANUP] ‚ÑπÔ∏è Aucune donnee fake trouvee dans 'collectionName';      debugPrint('[FAKE_CLEANUP] üìä ${querySnapshot.docs.length} documents fake trouves dans ';          await batch.commit(';          debugPrint('[FAKE_CLEANUP] üì¶ Batch de $batchCount documents supprimes de 'collectionName';      // Executer le dernier batch s';        debugPrint('[FAKE_CLEANUP] üì¶ Dernier batch de $batchCount documents supprimes de ';    } catch (e';      debugPrint(';  static Future<Map<String, dynamic>> countFakeData(';      debugPrint('[FAKE_CLEANUP] üìä Comptage des donnees fake...';        'users';        'compagnies_assurance';        'audit_logs';        'email_logs';        'agences_assurance';        'agents_assurance';        'experts';        'sinistres';        'contrats';        ';        final count = await _countFakeDataInCollection(collection';        'success';        'totalFake';        ';    } catch (e';      debugPrint('[FAKE_CLEANUP] ‚ùå Erreur comptage:  + e.toString()';        'success';        ';          .collection(collectionName';          .where(';    } catch (e';      debugPrint(';  static Future<Map<String, dynamic>> cleanSpecificCollection(String collectionName';      debugPrint('[FAKE_CLEANUP] üßπ Nettoyage specifique: ';      final deleted = await _cleanFakeDataFromCollection(collectionName';        'success';        'deleted';        'collection';        'message': '$deleted documents fake supprimes de ';    } catch (e';      debugPrint('[FAKE_CLEANUP] ‚ùå Erreur nettoyage $collectionName:  + e.toString()';        'success';        'error: e.toString(';        'collection';        'message': 'Erreur lors du nettoyage de 'collectionName';    if (!confirmDeletion';        'success';        'message': 'Suppression non confirmee - parametre confirmDeletion requis';      debugPrint('[FAKE_CLEANUP] ‚ö†Ô∏è SUPPRESSION TOTALE de la collection: ';      if (querySnapshot.docs.isEmpty';          'success';          'deleted';          'message': 'Collection ';        await batch.commit(';      debugPrint('[FAKE_CLEANUP] ‚ö†Ô∏è SUPPRESSION TOTALE terminee: 'totalDeleted documents supprimes';        'success';        'deleted';        'collection';        'message': 'TOUS les documents de ';    } catch (e';      debugPrint('[FAKE_CLEANUP] ‚ùå Erreur suppression totale $collectionName:  + e.toString()';        'success';        'error: e.toString(';        'collection';        'message': 'Erreur lors de la suppression totale de 'collectionName';      final countResult = await countFakeData(';      if (!countResult['success]';      final totalFake = countResult['totalFake';      final details = countResult['details';        'success';        'hasFakeData';        'totalFake';        'details';        ';    } catch (e';      debugPrint('[FAKE_CLEANUP] ‚ùå Erreur verification statut:  + e.toString()';        'success';        ';