import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/material.dart';import '../../../core/services/password_generation_service.dart';import ';  }';      debugPrint('[USER_MANAGEMENT] üìä Recuperation utilisateurs...';      Query query = _firestore.collection('users';      if (roleFilter != null && roleFilter != 'tous';        query = query.where('role, isEqualTo: roleFilter';      if (statusFilter != null && statusFilter != 'tous';        query = query.where('status, isEqualTo: statusFilter';      if (compagnieFilter != null && compagnieFilter != 'toutes';        query = query.where('compagnieId, isEqualTo: compagnieFilter';      if (agenceFilter != null && agenceFilter != 'toutes';        query = query.where('agenceId, isEqualTo: agenceFilter';      query = query.orderBy(';        final data = doc.data(';          ';      }).toList(';      debugPrint('[USER_MANAGEMENT] ‚úÖ '{users.length} utilisateurs recuperes';        'users';        'lastDocument';        ';    } catch (e';      debugPrint('[USER_MANAGEMENT] ‚ùå Erreur recuperation:  + e.toString()';        'users';        'lastDocument';        'hasMore';        ';  }';      debugPrint('[USER_MANAGEMENT] üë§ Creation utilisateur: ';      } catch (authError';        debugPrint('[USER_MANAGEMENT] ‚ùå Erreur Firebase Auth: 'authError';          'success';          'error': 'Erreur creation compte: {authError.toString(')}';        'email';        'nom';        'prenom';        'role';        'status': 'actif';        'compagnieId';        'agenceId';        'phone';        'address';        'created_at: FieldValue.serverTimestamp(';        'updated_at: FieldValue.serverTimestamp(';        'created_by';        'created_by_email';        'password_reset_required';        'last_login';        'isFakeData';        'isLegitimate';        'accessLevel': 'production';      await _firestore.collection('users).doc(user.uid).set(userData';      // Envoyer l';        // Simuler l'envoi d';        debugPrint('[USER_MANAGEMENT] üìß Email simule envoye a: 'email';        debugPrint('[USER_MANAGEMENT] üîë Mot de passe: 'tempPassword';        debugPrint(';      } catch (emailError';        debugPrint('[USER_MANAGEMENT] ‚ö†Ô∏è Erreur envoi email: 'emailError';        // Le compte est cree mais l';      // Logger l';        action: 'user_created';        performedBy: _auth.currentUser?.uid ?? 'unknown';          'role';          'compagnieId';          ';      ';      debugPrint('[USER_MANAGEMENT] ‚úÖ Utilisateur cree: '{user.uid}';        'success';        'uid';        'email';        'tempPassword';        ';    } catch (e';      debugPrint('[USER_MANAGEMENT] ‚ùå Erreur creation:  + e.toString()';        'success';        ';  }';      debugPrint('[USER_MANAGEMENT] ‚úèÔ∏è Mise a jour utilisateur: 'uid';      final currentDoc = await _firestore.collection(';      if (!currentDoc.exists';          'success';          'error': ';      final currentData = currentDoc.data(';        'updated_at: FieldValue.serverTimestamp(';        'updated_by';        ';      if (nom != null') updateData[';      if (prenom != null') updateData[';      if (phone != null') updateData[';      if (address != null') updateData[';      if (role != null') updateData[';      if (status != null') updateData[';      if (compagnieId != null') updateData[';      if (agenceId != null') updateData[';      if (additionalData != null) updateData.addAll(additionalData';      await _firestore.collection('users).doc(uid).update(updateData';      // Logger l';        action: 'user_updated';        performedBy: _auth.currentUser?.uid ?? 'unknown';        targetUserEmail: currentData['email';          'changes';          'previousRole': currentData['role';          ';      ';      debugPrint('[USER_MANAGEMENT] ‚úÖ Utilisateur mis a jour: 'uid';        'success';        'uid';        ';    } catch (e';      debugPrint('[USER_MANAGEMENT] ‚ùå Erreur mise a jour:  + e.toString()';        'success';        ';  static Future<Map<String, dynamic>> deleteUser(String uid';      debugPrint('[USER_MANAGEMENT] üóëÔ∏è Suppression utilisateur: 'uid';      final userDoc = await _firestore.collection(';      if (!userDoc.exists';          'success';          'error': ';      final userData = userDoc.data(';      final userEmail = userData['email';      await _firestore.collection('users).doc(uid).delete(';      // Logger l';        action: 'user_deleted';        performedBy: _auth.currentUser?.uid ?? 'unknown';          ';      ';      debugPrint('[USER_MANAGEMENT] ‚úÖ Utilisateur supprime: 'uid';        'success';        'uid';        ';    } catch (e';      debugPrint('[USER_MANAGEMENT] ‚ùå Erreur suppression:  + e.toString()';        'success';        ';  static Future<Map<String, dynamic>> resetUserPassword(String uid';      debugPrint('[USER_MANAGEMENT] üîÑ Reinitialisation mot de passe: 'uid';      // Recuperer l'email de l';      final userDoc = await _firestore.collection(';      if (!userDoc.exists';          'success';          'error': ';      final userData = userDoc.data(';      final email = userData[';      final newPassword = PasswordGenerationService.generateSecurePassword(';      await _firestore.collection('users).doc(uid';        'password_reset_required';        'password_reset_at: FieldValue.serverTimestamp(';        'password_reset_by';        ';      }';      // Envoyer l';        // Simuler l'envoi d';        debugPrint('[USER_MANAGEMENT] üìß Email reinitialisation simule envoye a: 'email';        debugPrint('[USER_MANAGEMENT] üîë Nouveau mot de passe: 'newPassword';        debugPrint(';      } catch (emailError';        debugPrint('[USER_MANAGEMENT] ‚ö†Ô∏è Erreur envoi email: 'emailError';      // Logger l';        action: 'password_reset';        performedBy: _auth.currentUser?.uid ?? 'unknown';          'resetMethod': ';      ';      debugPrint('[USER_MANAGEMENT] ‚úÖ Mot de passe reinitialise: 'uid';        'success';        'uid';        'newPassword';        ';    } catch (e';      debugPrint('[USER_MANAGEMENT] ‚ùå Erreur reinitialisation:  + e.toString()';        'success';        ';