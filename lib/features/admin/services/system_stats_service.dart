import 'package:cloud_firestore/cloud_firestore.dart';import ';  static Future<void> debugFirestoreStructure(';      debugPrint('[DEBUG] üîç === STRUCTURE FIRESTORE ===';      final companiesSnapshot = await _firestore.collection('compagnies_assurance).get(';      debugPrint('[DEBUG] üè¢ Collection compagnies_assurance: ';        final data = doc.data(';        final nom = data['nom';        debugPrint('[DEBUG] üìã Compagnie: $nom (ID: {doc.id}')';        final agenciesSnapshot = await doc.reference.collection('agences).get(';        debugPrint('[DEBUG] üèõÔ∏è   ‚îî‚îÄ Agences: ';          final agencyData = agencyDoc.data(';          final agencyNom = agencyData['nom';          debugPrint('[DEBUG] üèõÔ∏è     ‚îî‚îÄ $agencyNom (ID: {agencyDoc.id}')';        final directAgenciesSnapshot = await _firestore.collection('agences_assurance).get(';        debugPrint('[DEBUG] üèõÔ∏è Collection directe agences_assurance: ';          final data = doc.data(';          final nom = data['nom';          debugPrint('[DEBUG] üèõÔ∏è   ‚îî‚îÄ $nom (ID: {doc.id}')';        debugPrint('[DEBUG] ‚ö†Ô∏è Collection agences_assurance non accessible:  + e.toString()';      debugPrint(';    } catch (e';      debugPrint(';  static Future<Map<String, dynamic>> getGlobalStats(';      debugPrint(';      ]';        'users';        'companies';        'activity';        'security';        'lastUpdated: DateTime.now().toIso8601String(';      debugPrint(';    } catch (e';      debugPrint(';  static Future<Map<String, dynamic>> _getUserStats(';      final usersSnapshot = await _firestore.collection(';        final data = doc.data(';        final role = data['role'] as String? ?? ';        roleStats[role] = (roleStats[role] ?? 0';        final status = data['status'] as String? ?? ';        statusStats[status] = (statusStats[status] ?? 0';        final origin = data['origine'] as String? ?? ';        switch (status';          case 'actif';          case 'inactif';          case 'bloque';          case 'desactive';        'total';        'active';        'inactive';        'blocked';        'disabled';        'byRole';        'byStatus';        ';    } catch (e';      debugPrint('[SYSTEM_STATS] ‚ùå Erreur statistiques utilisateurs:  + e.toString()';        'total';        'active';        'inactive';        'blocked';        'disabled';        'byRole';        'byStatus';        ';  static Future<Map<String, dynamic>> _getCompanyStats(';      debugPrint('[SYSTEM_STATS] üè¢ Recuperation statistiques compagnies...';      final companiesSnapshot = await _firestore.collection('compagnies_assurance).get(';      debugPrint('[SYSTEM_STATS] üìä Trouve ';        final data = doc.data(';        final companyName = data['nom';        final agenciesSnapshot = await doc.reference.collection('agences).get(';        debugPrint('[SYSTEM_STATS] üèõÔ∏è Compagnie "`"companyName"`: 'agencyCount agences';        final type = data['type'] as String? ?? ';        companiesByType[type] = (companiesByType[type] ?? 0';        final directAgenciesSnapshot = await _firestore.collection('agences_assurance).get(';        debugPrint('[SYSTEM_STATS] üèõÔ∏è Collection directe agences_assurance: 'directAgencyCount agences';        // Si la collection directe a plus d';        if (directAgencyCount > totalAgencies';          debugPrint(';      } catch (e';        debugPrint('[SYSTEM_STATS] ‚ö†Ô∏è Collection agences_assurance non trouvee:  + e.toString()';      debugPrint('[SYSTEM_STATS] üìä Total final: $totalCompanies compagnies, 'totalAgencies agences';        'totalCompanies';        'totalAgencies';        'averageAgenciesPerCompany: totalCompanies > 0 ? (totalAgencies / totalCompanies).round(';        ';    } catch (e';      debugPrint('[SYSTEM_STATS] ‚ùå Erreur statistiques compagnies:  + e.toString()';        'totalCompanies';        'totalAgencies';        'averageAgenciesPerCompany';        'byType';      final last30days = now.subtract(const Duration(days: 30)';      // Logs d';          .collection('audit_logs';          .where(';        final data = doc.data(';        final action = data['action'] as String? ?? ';        actionStats[action] = (actionStats[action] ?? 0';          .collection('email_logs';          .where(';        final data = doc.data(';        final success = data[';        if (success';        'auditLogs24h';        'actionStats';        'emailsSent24h';        'emailsSuccess24h';        'emailsFailed24h';        ';    } catch (e';      debugPrint('[SYSTEM_STATS] ‚ùå Erreur statistiques activite:  + e.toString()';        'auditLogs24h';        'actionStats';        'emailsSent24h';        'emailsSuccess24h';        'emailsFailed24h';        ';      final last24h = now.subtract(const Duration(hours: 24)';        'password_reset';        'account_locked';        'account_unlocked';        'user_deleted';        'role_changed';          .collection('audit_logs';          .where('action, whereIn: sensitiveActions';          .where(';        final data = doc.data(';        final action = data['action'] as String? ?? ';        securityActionStats[action] = (securityActionStats[action] ?? 0';        'sensitiveActions24h';        ';    } catch (e';      debugPrint('[SYSTEM_STATS] ‚ùå Erreur statistiques securite:  + e.toString()';        'sensitiveActions24h';        'securityActionStats';      final startDate = now.subtract(Duration(days: days)';          .collection('users';          .where('created_at, isGreaterThan: Timestamp.fromDate(startDate)';          .orderBy(';        final data = doc.data(';        final createdAt = (data['created_at] as Timestamp?)?.toDate(';        final dateKey = '${createdAt.year}-{createdAt.month.toString(').padLeft(2, '0')}-'{createdAt.day.toString().padLeft(2, '0')}';        final dateKey = '"{date.year}-{date.month.toString(').padLeft(2, '0')}-'{date.day.toString().padLeft(2, '0')}';          'date';          'count';          ';    } catch (e';      debugPrint(';  static Map<String, dynamic> _getEmptyStats(';      'users';        'total';        'active';        'inactive';        'blocked';        'disabled';        'byRole';        'byStatus';        'byOrigin';      'companies';        'totalCompanies';        'totalAgencies';        'averageAgenciesPerCompany';        'byType';      'activity';        'auditLogs24h';        'actionStats';        'emailsSent24h';        'emailsSuccess24h';        'emailsFailed24h';        'emailSuccessRate';      'security';        'sensitiveActions24h';        'securityActionStats';      ';