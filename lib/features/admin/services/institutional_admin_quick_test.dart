import 'package:flutter/foundation.dart';import 'institutional_admin_creation_service.dart';import ';  static Future<Map<String, dynamic>> runCompleteTest(';      debugPrint('[QUICK_TEST] 🚀 Debut du test complet...';      debugPrint(';      final compagniesDiag = await CompagnieDiagnosticService.diagnoseCompagnies(';      results['compagniesDiagnostic';      if (!compagniesDiag['success'] || compagniesDiag['realCompagnies] == 0';        debugPrint(';        final createResult = await CompagnieDiagnosticService.createTestCompagnies(';        results['compagniesCreation';        if (createResult[';          final newDiag = await CompagnieDiagnosticService.diagnoseCompagnies(';          results['compagniesNewDiagnostic';      // 2. Test de creation dAdmin Compagnie (mode Firestore uniquement';      debugPrint('[QUICK_TEST] 🏢 Test 2: Creation Admin Compagnie...';        compagnieId: 'test_star';        compagnieName: 'STAR Assurance Test';        nom: 'Admin Test';        prenom: ';      ';      results['adminCreation';      // 3. Test des suggestions d';      debugPrint('[QUICK_TEST] 📧 Test 3: Suggestions d\'email...';        'star_assurance';        ';      ';      results['emailSuggestions';        'success';        'suggestions';        'count';      debugPrint(';      final stats = await InstitutionalAdminCreationService.getInstitutionalAccountsStats(';      results['stats';      final success = compagniesDiag['success';                     createAdminResult['success';                     stats['success';      results['summary';        'success';        'testsRun';        'message';            ? 'Tous les tests sont passes avec succes';            : 'Certains tests ont echoue';        'timestamp: DateTime.now().toIso8601String(';      debugPrint('[QUICK_TEST] '{success ? '✅' : '❌';    } catch (e';      debugPrint('[QUICK_TEST] ❌ Erreur test complet:  + e.toString()';        'success';        'error: e.toString(';        'message': ';  static Future<Map<String, dynamic>> runRepairTest(';      debugPrint('[QUICK_TEST] 🔧 Debut du test de reparation...';      debugPrint('[QUICK_TEST] 🧹 Nettoyage des donnees fake...';      debugPrint(';      final createResult = await CompagnieDiagnosticService.createTestCompagnies(';      results['compagniesCreation';      debugPrint(';      final finalCheck = await CompagnieDiagnosticService.diagnoseCompagnies(';      results['finalCheck';      final success = createResult['success';                     finalCheck['success';                     finalCheck['realCompagnies';      results['summary';        'success';        'message';            ? 'Systeme repare avec succes';            : 'Échec de la reparation du systeme';        'compagniesCreated': createResult['created';        'realCompagnies': finalCheck[';    } catch (e';      debugPrint('[QUICK_TEST] ❌ Erreur reparation:  + e.toString()';        'success';        'error: e.toString(';        'message': ';      final stats = await InstitutionalAdminCreationService.getInstitutionalAccountsStats(';      final institutionalAccounts = stats['success'] ? stats['totalAccounts';      return 'Compagnies: $compagniesSummary | Comptes institutionnels: ';    } catch (e';      return 'Erreur: ';  static Future<Map<String, dynamic>> testFirestoreOnlyCreation(';      debugPrint('[QUICK_TEST] 🎯 Test creation Firestore uniquement...';        compagnieId: 'test_firestore_{DateTime.now(').millisecondsSinceEpoch}';        compagnieName: 'Test Firestore Only';        nom: 'Test';        prenom: ';      ';      if (result['success]';        debugPrint('[QUICK_TEST] ✅ Creation Firestore reussie';        debugPrint('[QUICK_TEST] 📧 Email: '{result['email']}';        debugPrint('[QUICK_TEST] 🔐 Password: '{result['password']}';        debugPrint('[QUICK_TEST] 🆔 UserID: '{result['userId']}';        debugPrint('[QUICK_TEST] ❌ Échec creation Firestore: '{result['message';    } catch (e';      debugPrint('[QUICK_TEST] ❌ Erreur test Firestore:  + e.toString()';        'success';        'error: e.toString(';        'message': ';  static Future<Map<String, dynamic>> testFirebaseAuthCreation(';      debugPrint('[QUICK_TEST] 🧪 Test creation avec Firebase Auth...';        compagnieId: 'test_auth_{DateTime.now(').millisecondsSinceEpoch}';        compagnieName: 'Test Firebase Auth';        nom: 'Test';        prenom: ';      ';      if (result['success]';        debugPrint('[QUICK_TEST] ✅ Creation Firebase Auth reussie';        debugPrint('[QUICK_TEST] ❌ Échec creation Firebase Auth: '{result['message';    } catch (e';      debugPrint('[QUICK_TEST] ❌ Erreur test Firebase Auth:  + e.toString()';        'success';        'error: e.toString(';        'message': ';  static void printDetailedReport(Map<String, dynamic> testResults';    debugPrint('\n' + '=*50';    debugPrint('📊 RAPPORT DE TEST DÉTAILLÉ';    debugPrint(';    testResults.forEach((key, value';      debugPrint('\n🔹 ';        value.forEach((subKey, subValue';          debugPrint('  • $subKey: ';        }';        debugPrint('  ';    }';    debugPrint('\n' + ';