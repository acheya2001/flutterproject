import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';import 'dart:math';/// üè¢ Service de creation d';/// Ce service cree des comptes Admin Compagnie pour les compagnies d';/// SANS envoi automatique d';  }';      debugPrint('[INSTITUTIONAL_ADMIN] üè¢ Creation Admin Compagnie institutionnel...';      debugPrint('[INSTITUTIONAL_ADMIN] üè¢ Compagnie: $compagnieName (compagnieId')';      // üîç Verifier qu'il n';      debugPrint('[INSTITUTIONAL_ADMIN] üîç Verification unicite Admin Compagnie...';          .collection('users';          .where('role', isEqualTo: 'admin_compagnie';          .where('compagnieId, isEqualTo: compagnieId';          .where(';        final existingAdmin = existingAdminQuery.docs.first.data(';        final existingEmail = existingAdmin['email'] ?? 'Email inconnu';        debugPrint('[INSTITUTIONAL_ADMIN] ‚ùå Admin Compagnie existe deja: 'existingEmail';          'success';          'error': 'ADMIN_ALREADY_EXISTS';          'message': 'Un Admin Compagnie existe deja pour cette compagnie';          'existingEmail';          'compagnieName';      debugPrint(';      final password = customPassword ?? _generateSecurePassword(';      final adminNom = nom ?? 'Admin';      debugPrint('[INSTITUTIONAL_ADMIN] üìß Email genere: 'email';      debugPrint('[INSTITUTIONAL_ADMIN] üîë Mot de passe genere: 'password';      // Creer le compte avec ou sans Firebase Auth selon l';          debugPrint(';          if (userCredential.user == null';            throw Exception('Utilisateur Firebase Auth null apres creation';          debugPrint('[INSTITUTIONAL_ADMIN] ‚úÖ Compte Firebase Auth cree: ';        } catch (authError';          debugPrint('[INSTITUTIONAL_ADMIN] ‚ùå Erreur Firebase Auth: 'authError';          debugPrint('[INSTITUTIONAL_ADMIN] üîÑ Fallback: creation sans Firebase Auth...';          userId = 'institutional_${DateTime.now().millisecondsSinceEpoch}_{email.hashCode.abs(')}';          debugPrint('[INSTITUTIONAL_ADMIN] üÜî ID genere: ';        // Mode Firestore uniquement (plus fiable';        debugPrint('[INSTITUTIONAL_ADMIN] üìÑ Mode Firestore uniquement...';        userId = 'institutional_${DateTime.now().millisecondsSinceEpoch}_{email.hashCode.abs(')}';        debugPrint('[INSTITUTIONAL_ADMIN] üÜî ID genere: 'userId';        debugPrint('[INSTITUTIONAL_ADMIN] üìÑ Creation document Firestore...';          'uid';          'email';          'nom';          'prenom';          'role': 'admin_compagnie';          'compagnieId';          'compagnieNom';          'accountType': 'institutional';          'isFirstLogin';          'isActive';          'status': 'actif';          'created_at: DateTime.now().toIso8601String(';          'created_by': 'super_admin';          'source': 'institutional_creation';          'passwordChangeRequired';          'lastPasswordChange: DateTime.now().toIso8601String(';          'authMethod': userCredential != null ? 'firebase_auth' : 'firestore_only';          'loginMethod': 'institutional';          'password';          'temporaryPassword';          'motDePasseTemporaire';          'motDePasse';          'temp_password';          'generated_password';        debugPrint('[INSTITUTIONAL_ADMIN] üìù Donnees a ecrire: 'userData';            .collection(';            .set(userData';        debugPrint('[INSTITUTIONAL_ADMIN] ‚úÖ Document Firestore cree avec succes';          debugPrint('[INSTITUTIONAL_ADMIN] üîç Verification avec timeout...';              .collection(';          if (verificationDoc.exists';            debugPrint('[INSTITUTIONAL_ADMIN] ‚úÖ Document verifie dans Firestore';            debugPrint('[INSTITUTIONAL_ADMIN] ‚ö†Ô∏è Document non trouve mais creation probablement reussie';            // Ne pas lever d';          debugPrint([INSTITUTIONAL_ADMIN] ‚ö†Ô∏è Timeout verification (probablement OK'): 'timeoutError';          // Ne pas lever d';      } catch (firestoreError';        debugPrint('[INSTITUTIONAL_ADMIN] ‚ùå Erreur Firestore: ';            await userCredential.user?.delete(';            debugPrint(';          } catch (cleanupError';            debugPrint('[INSTITUTIONAL_ADMIN] ‚ö†Ô∏è Erreur nettoyage: 'cleanupError';        throw Exception('Erreur creation document Firestore: 'firestoreError';        'success';        'userId';        'email';        'password';        'compagnieId';        'compagnieName';        'accountType': 'institutional';        'message': 'Compte Admin Compagnie institutionnel cree avec succes';        'displayCredentials';          'email';          'password';          'compagnie';          'role': ';    } catch (e';      debugPrint('[INSTITUTIONAL_ADMIN] ‚ùå Erreur creation:  + e.toString()';        'success';        'error: e.toString(';        'message': ';  static String _generateInstitutionalEmail(String compagnieId';    // Nettoyer l';    final cleanId = compagnieId.toLowerCase(';        .replaceAll(RegExp(r'[^a-z0-9]'), ';        .replaceAll('assurance', ';        .replaceAll('insurance', ';    return 'admin.';      password += chars[random.nextInt(chars.length';    final passwordList = password.split(')..shuffle(random';    return passwordList.join(';  static Future<bool> isInstitutionalEmailExists(String email';          .collection('users';          .where('email, isEqualTo: email';          .where('accountType', isEqualTo: ';    } catch (e';      debugPrint('[INSTITUTIONAL_ADMIN] ‚ùå Erreur verification email:  + e.toString()';  /// üè¢ Obtenir les suggestions d';        .replaceAll(RegExp(r'[^a-z0-9]'), ';        .replaceAll('assurance', ';        .replaceAll('insurance', ';    final cleanName = compagnieName.toLowerCase(';        .replaceAll(RegExp(r'[^a-z0-9]'), ';        .replaceAll('assurance', ';        .replaceAll('insurance', ';      'admin.'cleanId@assurance.tn';      'admin.'cleanName@assurance.tn';      'direction.'cleanId@assurance.tn';      'gestion.'cleanId@assurance.tn';      '';  }';      debugPrint('[INSTITUTIONAL_ADMIN] üîÑ Regeneration mot de passe pour: ';        await user.updatePassword(newPassword';          .collection(';          .doc(userId';        'lastPasswordChange: DateTime.now().toIso8601String(';        ';      }';        'success';        'newPassword';        'message': ';    } catch (e';      debugPrint('[INSTITUTIONAL_ADMIN] ‚ùå Erreur regeneration:  + e.toString()';        'success';        'error: e.toString(';        'message': 'Erreur lors de la regeneration du mot de passe';  }';      debugPrint('[INSTITUTIONAL_ADMIN] üîê Verification identifiants institutionnels...';          .collection('users';          .where('email, isEqualTo: email';          .where('accountType', isEqualTo: ';      if (querySnapshot.docs.isEmpty';          'success';          'error': 'Compte institutionnel non trouve';          'message': ';      final userData = userDoc.data(';        'success';        'userId';        'userData';        'message': ';    } catch (e';      debugPrint('[INSTITUTIONAL_ADMIN] ‚ùå Erreur verification:  + e.toString()';        'success';        'error: e.toString(';        'message': ';  static Future<Map<String, dynamic>> getInstitutionalAccountsStats(';          .collection('users';          .where('accountType', isEqualTo: ';        final data = doc.data(';        final compagnieId = data['compagnieId';        final isActive = data[';        if (isActive';        'success';        'totalAccounts';        'activeAccounts';        'inactiveAccounts';        ';    } catch (e';      debugPrint('[INSTITUTIONAL_ADMIN] ‚ùå Erreur stats:  + e.toString()';        'success';        ';