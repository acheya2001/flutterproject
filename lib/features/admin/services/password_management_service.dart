import 'dart:math';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/material.dart';import 'package:crypto/crypto.dart';import 'dart:convert';import 'audit_logger_service.dart';import 'email_notification_service.dart';  static const String _usersCollection = ';      password += chars[random.nextInt(chars.length';    List<String> passwordList = password.split(';    passwordList.shuffle(random';    return passwordList.join(';  /// üîÑ Reinitialiser le mot de passe d';      debugPrint('[PASSWORD_MANAGEMENT] üîÑ Reinitialisation mot de passe pour: ';      await _firestore.collection(_usersCollection).doc(userId';        'motDePasseTemporaire';        'doitChangerMotDePasse';        'motDePasseReinitialisePar';        'motDePasseReinitialiseLE: FieldValue.serverTimestamp(';        ';      }';      // Logger l'action avec le nouveau service d';          'forceChange';          'passwordHash: hashedPassword.substring(0, 16';          'customPassword';          'method': ';      ';          userName: userEmail.split('@';          adminName: adminId, // TODO: Recuperer le nom de l';          companyName: ';        ';        debugPrint(';      } catch (e';        debugPrint('[PASSWORD_MANAGEMENT] ‚ö†Ô∏è Erreur envoi email:  + e.toString()';        // Ne pas faire echouer l'operation si l';      debugPrint('[PASSWORD_MANAGEMENT] ‚úÖ Mot de passe reinitialise avec succes';        'success';        'temporaryPassword';        'message': ';    } catch (e';      debugPrint('[PASSWORD_MANAGEMENT] ‚ùå Erreur reinitialisation:  + e.toString()';        'success';        'error: e.toString(';        'message': ';  }';      debugPrint('[PASSWORD_MANAGEMENT] üîì Deblocage compte: ';      await _firestore.collection(_usersCollection).doc(userId';        'isLocked';        'lockReason';        'lockedAt';        'unlockedBy';        'unlockedAt: FieldValue.serverTimestamp(';        ';      }';      // Logger l'action avec le nouveau service d';          'reason': 'Admin unlock';          'method': ';      ';          userName: userEmail.split('@';          unlockedBy: adminId, // TODO: Recuperer le nom de l';          companyName: ';        ';        debugPrint(';      } catch (e';        debugPrint('[PASSWORD_MANAGEMENT] ‚ö†Ô∏è Erreur envoi email deblocage:  + e.toString()';        'success';        'message': ';    } catch (e';      debugPrint('[PASSWORD_MANAGEMENT] ‚ùå Erreur deblocage:  + e.toString()';        'success';        'error: e.toString(';        'message': ';  }';      debugPrint('[PASSWORD_MANAGEMENT] üîí Blocage compte: ';      await _firestore.collection(_usersCollection).doc(userId';        'isLocked';        'lockReason';        'lockedBy';        'lockedAt: FieldValue.serverTimestamp(';        ';      }';      // Logger l'action avec le nouveau service d';          'reason';          'method': ';      ';          userName: userEmail.split('@';          lockedBy: adminId, // TODO: Recuperer le nom de l';          companyName: ';        ';        debugPrint(';      } catch (e';        debugPrint('[PASSWORD_MANAGEMENT] ‚ö†Ô∏è Erreur envoi email blocage:  + e.toString()';        'success';        'message': ';    } catch (e';      debugPrint('[PASSWORD_MANAGEMENT] ‚ùå Erreur blocage:  + e.toString()';        'success';        'error: e.toString(';        'message': 'Erreur lors du blocage du compte';  }';      // Temporaire : recuperer tous les logs sans filtre pour eviter l'erreur d';    } catch (e';      debugPrint(';      final data = doc.data(';      return data[';    } catch (e';      debugPrint('[PASSWORD_MANAGEMENT] ‚ùå Erreur verification:  + e.toString()';  /// üîç Valider la force d';    final hasUppercase = password.contains(RegExp(r'[A-Z])';    final hasLowercase = password.contains(RegExp(r'[a-z])';    final hasNumbers = password.contains(RegExp(r'[0-9])';    final hasSpecialChars = password.contains(RegExp(r'[!@#%^&*('),.?":{}|<>]';        strength = 'Faible';        strength = 'Moyen';        strength = 'Fort';        strength = 'Tres fort';        strength = 'Faible';      'score';      'strength';      'color';      'isValid';      'criteria';        'hasUppercase';        'hasLowercase';        'hasNumbers';        'hasSpecialChars';        ';