import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';  static const String _usersCollection = ';      final stopwatch = Stopwatch()..start(';      debugPrint(';      Query query = _firestore.collection(_usersCollection';      if (roleFilter != null && roleFilter != 'Tous';        query = query.where('role, isEqualTo: roleFilter';      if (statusFilter != null && statusFilter != 'Tous';        query = query.where(';      final snapshot = await query.get(';      debugPrint('[OPTIMIZED_USER] üìä Requ√™te Firestore: ';        var userData = doc.data(';        userData['id';        if (!includeTestData && userData[';      stopwatch.stop(';      debugPrint('[OPTIMIZED_USER] ‚úÖ Total traitement: '{stopwatch.elapsedMilliseconds}ms';        'users';        'hasMore';        'lastDocument';        ';    } catch (e';      debugPrint('[OPTIMIZED_USER] ‚ùå Erreur:  + e.toString()';        'users';        'hasMore';        'lastDocument';        ';  static Future<Map<String, dynamic>> _enrichUserDataOptimized(Map<String, dynamic> userData';      final compagnieId = userData['compagnieId';      final agenceId = userData[';      if (compagnieId != null && _compagniesCache.containsKey(compagnieId)';        userData['compagnieNom'] = _compagniesCache[compagnieId]![';      if (agenceId != null && _agencesCache.containsKey(agenceId)';        userData['agenceNom'] = _agencesCache[agenceId]![';    } catch (e';      debugPrint(';  static Future<void> _refreshCache(';      debugPrint('[OPTIMIZED_USER] üîÑ Rafra√Æchissement du cache...';      final compagniesSnapshot = await _firestore.collection(';        _compagniesCache[doc.id] = doc.data(';      final agencesSnapshot = await _firestore.collection(';      _lastCacheUpdate = DateTime.now(';      debugPrint('[OPTIMIZED_USER] ‚úÖ Cache rafra√Æchi: ${_compagniesCache.length} compagnies, ';    } catch (e';      debugPrint(';  static Future<Map<String, int>> getQuickStats(';      debugPrint(';        _firestore.collection(_usersCollection').where('role', isEqualTo: ';        _firestore.collection(_usersCollection').where('status', isEqualTo: ';      ]';        'adminCompagnie';        'actifs';        ';    } catch (e';      debugPrint('[OPTIMIZED_USER] ‚ùå Erreur statistiques:  + e.toString()';      return {'total': 0, 'actifs': 0, ';      if (query.length < 2';      debugPrint('[OPTIMIZED_USER] üîç Recherche: "';          .collection(_usersCollection';          .where('email, isGreaterThanOrEqualTo: query.toLowerCase()';          .where('email', isLessThan: '{query.toLowerCase(')}z';        userData[';    } catch (e';      debugPrint(';  static Future<Map<String, dynamic>> optimizedCleanup(';      debugPrint(';        _firestore.collection(_usersCollection').where('status', isEqualTo: ';        _firestore.collection(_usersCollection').where(';        await batch.commit(';        debugPrint('[OPTIMIZED_USER] ‚úÖ Suppression batch: 'deleted documents';        'success';        'deleted';        'message': ';    } catch (e';      debugPrint('[OPTIMIZED_USER] ‚ùå Erreur nettoyage:  + e.toString()';        'success';        ';    _agencesCache.clear(';    debugPrint(';  static Map<String, dynamic> getCacheInfo(';      'compagnies';      'agences';      'lastUpdate: _lastCacheUpdate?.toIso8601String(';      ';