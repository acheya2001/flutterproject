import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/material.dart';import '../models/agence_assurance.dart';import 'admin_firestore_service.dart';/// üè™ Service pour la gestion des agences d';  static const String _collection = 'agences';  static Future<List<Map<String, dynamic>>> getAllAgences(';          .collection('agences_assurance';          .orderBy(';      return snapshot.docs.map((doc';        ';    } catch (e';      debugPrint(';  }';      debugPrint('[AGENCE_SERVICE] üì• Recuperation agences - limit: $limit, compagnie: $compagnieId, includeTestData: 'includeTestData';      final collectionName = includeTestData ? ';      if (compagnieId != null && compagnieId.isNotEmpty';        query = query.where(';      if (gouvernorat != null && gouvernorat.isNotEmpty';        query = query.where('gouvernorat, isEqualTo: gouvernorat';      // Note: On ne filtre pas ici car les agences peuvent avoir 'active' ou ';            String.fromCharCode(searchQuery.codeUnitAt(searchQuery.length - 1) + 1';            .where('nom, isGreaterThanOrEqualTo: searchQuery';            .where('nom, isLessThan: searchEnd';      query = query.orderBy(';            .toList(';        // Filtrage par statut actif c√¥te client (pour gerer 'active' et ';          agences = agences.where((agence) => agence.matchesSearch(searchQuery).toList(';        debugPrint('[AGENCE_SERVICE] ‚úÖ ';    } catch (e';      debugPrint(';  Future<String?> createAgence(AgenceAssurance agence';      debugPrint('[AGENCE_SERVICE] ‚ûï Creation agence: ';      if (validationError != null';      // Verifier l';        return 'Ce code d\'agence existe deja';      await _firestore.collection(_collection).add(agence.toFirestore()';      debugPrint(';    } catch (e';      debugPrint('[AGENCE_SERVICE] ‚ùå Erreur creation agence:  + e.toString()';      return 'Erreur lors de la creation: ';  Future<String?> updateAgence(AgenceAssurance agence';      debugPrint('[AGENCE_SERVICE] ‚úèÔ∏è Mise a jour agence: ';      if (validationError != null';      // Verifier l';      if (!isCodeUnique';        return 'Ce code d\';          .update(updatedAgence.toFirestore()';      debugPrint(';    } catch (e';      debugPrint('[AGENCE_SERVICE] ‚ùå Erreur mise a jour agence:  + e.toString()';      return 'Erreur lors de la mise a jour: ';  Future<String?> deleteAgence(String agenceId';      debugPrint('[AGENCE_SERVICE] üóëÔ∏è Suppression agence: ';      await _firestore.collection(_collection).doc(agenceId';        'isActive';        ';      }';      debugPrint(';    } catch (e';      debugPrint('[AGENCE_SERVICE] ‚ùå Erreur suppression agence:  + e.toString()';      return 'Erreur lors de la suppression: ';  Future<String?> restoreAgence(String agenceId';      debugPrint('[AGENCE_SERVICE] üîÑ Restauration agence: ';      await _firestore.collection(_collection).doc(agenceId';        'isActive';        ';      }';      debugPrint(';    } catch (e';      debugPrint('[AGENCE_SERVICE] ‚ùå Erreur restauration agence:  + e.toString()';      return 'Erreur lors de la restauration: ';    } catch (e';      debugPrint('[AGENCE_SERVICE] ‚ùå Erreur recuperation agence:  + e.toString()';  /// üîí Verifier l';          .where(';    } catch (e';      debugPrint('[AGENCE_SERVICE] ‚ùå Erreur verification unicite:  + e.toString()';  /// üìä Obtenir les statistiques d';      debugPrint('[AGENCE_SERVICE] üìä Recuperation stats agence: 'agenceId';          .collection('agents_assurance';          .where(';          .get(';          .collection('contrats';          .where(';          .get(';          .collection('constats';          .where(';          .get(';        'totalAgents';        'totalContrats';        'totalConstats';        ';            .where((doc) => doc.data(')['isActive] == true';        ';            .where((doc) => doc.data(')['isActive] == true';      debugPrint('[AGENCE_SERVICE] ‚úÖ Stats agence recuperees: ';    } catch (e';      debugPrint('[AGENCE_SERVICE] ‚ùå Erreur stats agence:  + e.toString()';        'totalAgents';        'totalContrats';        'totalConstats';        'agentsActifs';        ';  Future<List<Map<String, String>>> getAgencesForDropdown({String? compagnieId}';      debugPrint('[AGENCE_SERVICE] üîç Recherche agences dropdown - compagnieId: ';      Query query = _firestore.collection(_collection';      // Si compagnieId specifie, filtrer d';        query = query.where('compagnieId, isEqualTo: compagnieId';      // Ne pas utiliser orderBy pour eviter le probleme d';      debugPrint('[AGENCE_SERVICE] üìä ';        final data = doc.data(';        // Gerer les deux champs possibles : 'isActive' et 'active';        final isActive = data['isActive'] ?? data[';        final data = doc.data(';          'id';          'nom': data['nom'] as String? ?? 'Nom non defini';          'code': data['code'] as String? ?? 'Code non defini';          'ville': data['ville'] as String? ?? ';      agences.sort((a, b') => a['nom']!.compareTo(b['nom]!)';      debugPrint('[AGENCE_SERVICE] ‚úÖ ';    } catch (e';      debugPrint('[AGENCE_SERVICE] ‚ùå Erreur dropdown agences:  + e.toString()';      // Si erreur d';      if (e.toString().contains('index)';        debugPrint(';        return await _getAgencesSimpleQuery(compagnieId';  /// üìã Requ√™te simplifiee sans orderBy pour eviter les problemes d';      debugPrint('[AGENCE_SERVICE] üîÑ Requ√™te simplifiee - compagnieId: ';      final snapshot = await _firestore.collection(_collection).get(';      debugPrint('[AGENCE_SERVICE] üìä ';        final data = doc.data(';        final docCompagnieId = data['compagnieId'] ?? data[';        if (compagnieId != null && docCompagnieId != compagnieId';        final isActive = data['isActive'] ?? data['active'] ?? data['statut'] == ';        if (!isActive';          'id';          'nom': data['nom]?.toString(') ?? 'Nom non defini';          'code': data['code]?.toString(') ?? 'Code non defini';          'ville': data['ville]?.toString(') ?? ';      agences.sort((a, b') => a['nom']!.compareTo(b['nom]!)';      debugPrint('[AGENCE_SERVICE] ‚úÖ ';    } catch (e';      debugPrint('[AGENCE_SERVICE] ‚ùå Erreur requ√™te simplifiee:  + e.toString()';  /// üîç Methode de test pour diagnostiquer les problemes d';      debugPrint(';      final allSnapshot = await _firestore.collection(_collection).get(';      debugPrint('[AGENCE_SERVICE] üìä Total documents dans collection "`"_collection": ';        final data = doc.data(';        debugPrint('[AGENCE_SERVICE] üìã Agence '{doc.id}:';        debugPrint('  - nom: '{data['nom']}';        debugPrint('  - compagnieId: '{data['compagnieId']}';        debugPrint('  - isActive: '{data['isActive']}';        debugPrint('  - active: '{data['active']}';        debugPrint('  - ville: '{data['ville';          .collection(_collection';          .where(';          .get(';      debugPrint('[AGENCE_SERVICE] üîç Agences avec isActive=true: ';          .collection(_collection';          .where(';          .get(';      debugPrint('[AGENCE_SERVICE] üîç Agences avec active=true: '{activeQuery2.docs.length}';      debugPrint(';    } catch (e';      debugPrint(';  Future<void> createTestAgenceForStar(';      debugPrint('[AGENCE_SERVICE] üèóÔ∏è Creation agence de test pour STAR...';      // Chercher l';      final compagniesSnapshot = await _firestore.collection(';        final data = doc.data(';        if (data['nom]?.toString(').contains('STAR';            data['code]?.toString(').contains('STAR) == true';          debugPrint('[AGENCE_SERVICE] üéØ STAR trouvee avec ID: ';      if (starCompagnieId == null';        debugPrint('[AGENCE_SERVICE] ‚ùå STAR Assurance non trouvee';      // Creer l';        'nom': 'STAR Tunis Centre Test';        'code': 'STAR-TUN-TEST';        'compagnieId';        'compagnieNom': 'STAR Assurance';        'adresse': 'Avenue Habib Bourguiba, Tunis';        'ville': 'Tunis';        'gouvernorat': 'Tunis';        'telephone': '+216 71 123 456';        'email': 'tunis.test@star.tn';        'responsable': 'Ahmed Ben Ali';        'zone': 'Centre Tunis';        'dateCreation: Timestamp.now(';        'dateModification: Timestamp.now(';        'isActive';        ';      final docRef = await _firestore.collection(_collection).add(agenceData';      debugPrint('[AGENCE_SERVICE] ‚úÖ Agence de test creee avec ID: ';    } catch (e';      debugPrint(';  Future<List<Map<String, String>>> getAgencesFromAllCollections({String? compagnieId}';      debugPrint('[AGENCE_SERVICE] üîç Recherche agences dans toutes les collections...';      // Collection 1: 'agences';        final snapshot1 = await _firestore.collection('agences).get(';        debugPrint('[AGENCE_SERVICE] üìä Collection "agences": ';          final data = doc.data(';          final isActive = data['isActive'] ?? data['active'] ?? data['statut'] == 'active';          final docCompagnieId = data['compagnieId'] ?? data[';          if (isActive && (compagnieId == null || docCompagnieId == compagnieId)';              'id';              'nom': data['nom]?.toString(') ?? 'Nom non defini';              'code': data['code]?.toString(') ?? 'Code non defini';              'ville': data['ville]?.toString(') ?? 'Ville non definie';              'compagnieId: docCompagnieId?.toString(') ?? ';      } catch (e';        debugPrint('[AGENCE_SERVICE] ‚ö†Ô∏è Erreur collection "agences":  + e.toString()';      // Collection 2: 'agences_assurance';        final snapshot2 = await _firestore.collection('agences_assurance).get(';        debugPrint('[AGENCE_SERVICE] üìä Collection "agences_assurance": ';          final data = doc.data(';          final isActive = data['actif'] ?? data['isActive'] ?? data['active';          final docCompagnieId = data['compagnieId'] ?? data[';          if (isActive && (compagnieId == null || docCompagnieId == compagnieId)';              'id';              'nom': data['nom]?.toString(') ?? 'Nom non defini';              'code': data['code]?.toString(') ?? 'Code non defini';              'ville': data['ville]?.toString(') ?? 'Ville non definie';              'compagnieId: docCompagnieId?.toString(') ?? ';      } catch (e';        debugPrint('[AGENCE_SERVICE] ‚ö†Ô∏è Erreur collection "agences_assurance"`:  + e.toString()';      debugPrint('[AGENCE_SERVICE] ‚úÖ Total agences trouvees: ';    } catch (e';      debugPrint('[AGENCE_SERVICE] ‚ùå Erreur recherche globale:  + e.toString()';  /// üéØ Generer un code d';      print(';      final gouvernoratCode = gouvernorat.substring(0, 3).toUpperCase(';      return '$compagnieCode-"gouvernoratCode-{DateTime.now().millisecondsSinceEpoch.toString().substring(10';