import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';import ';  static Future<Map<String, dynamic>> diagnoseProblem(';    debugPrint('[CONNECTIVITY_FIX] üö® === DIAGNOSTIC PROBL√àME CONNECTIVIT√â ===';      'timestamp: DateTime.now().toIso8601String(';      'problems';      'solutions';      ';      final connectivityResult = await Connectivity().checkConnectivity(';      diagnosis['tests']['internet';        'status': hasInternet ? 'OK' : 'FAILED';        ';      if (!hasInternet';        diagnosis['problems'].add('‚ùå Pas de connexion Internet';        diagnosis['solutions'].add('üîß Verifier la connexion WiFi/Mobile';        debugPrint('[CONNECTIVITY_FIX] ‚úÖ Internet OK: ';    } catch (e';      diagnosis['problems'].add('‚ùå Erreur verification Internet:  + e.toString()';      debugPrint(';      await _firestore.enableNetwork(';      diagnosis['tests']['firestore_reconnect'] = {'status': 'OK';      debugPrint(';    } catch (e';      diagnosis['problems'].add('‚ùå Erreur reconnexion Firestore:  + e.toString()';      diagnosis['tests']['firestore_reconnect'] = {'status': 'FAILED', 'error: e.toString(';    // Test 3: Test d';      debugPrint('[CONNECTIVITY_FIX] ‚úçÔ∏è Test ecriture Firestore...';      final testDoc = _firestore.collection('connectivity_test').doc('test_{DateTime.now(').millisecondsSinceEpoch}';        'test';        'timestamp: FieldValue.serverTimestamp(';        'source': ';      if (readDoc.exists';        diagnosis['tests']['firestore_write'] = {'status': 'OK';        debugPrint(';        await testDoc.delete(';        diagnosis['problems'].add('‚ùå Document non cree dans Firestore';        diagnosis['tests']['firestore_write'] = {'status': 'FAILED', 'reason': ';    } catch (e';      diagnosis['problems'].add('‚ùå Erreur ecriture Firestore:  + e.toString()';      diagnosis['tests']['firestore_write'] = {'status': 'FAILED', ';      if (e.toString(').contains('UNAVAILABLE)';        diagnosis['solutions'].add('üîß Probleme de canal Firestore - Redemarrer l\';      if (e.toString(').contains('PERMISSION_DENIED)';        diagnosis['solutions'].add(';      if (e.toString(').contains('timeout)';        diagnosis['solutions'].add('üîß Connexion trop lente - Verifier le reseau';      diagnosis['tests']['auth';        'status': user != null ? 'OK' : 'NO_USER';        'uid';        ';      if (user == null';        diagnosis['problems'].add('‚ùå Aucun utilisateur authentifie';        diagnosis['solutions'].add('üîß Se connecter avec un compte valide';        debugPrint('[CONNECTIVITY_FIX] ‚úÖ Utilisateur connecte: ';    } catch (e';      diagnosis['problems'].add('‚ùå Erreur authentification:  + e.toString()';    final hasProblems = (diagnosis['problems] as List';    diagnosis['overall_status'] = hasProblems ? 'PROBLEMS_DETECTED' : 'ALL_OK';    debugPrint('[CONNECTIVITY_FIX] üìä Diagnostic termine: '{diagnosis['overall_status']}';    debugPrint('[CONNECTIVITY_FIX] üîç Problemes detectes: '{(diagnosis['problems] as List').length}';    debugPrint('[CONNECTIVITY_FIX] üîß === APPLICATION CORRECTIONS AUTOMATIQUES ===';      'applied';      'failed';      'results';      debugPrint(';      await Future.delayed(const Duration(seconds: 2)';      fixes['applied'].add('‚úÖ Redemarrage connexion Firestore';      fixes['results']['firestore_restart'] = {'status': ';    } catch (e';      fixes['failed'].add('‚ùå √âchec redemarrage Firestore:  + e.toString()';      fixes['results']['firestore_restart'] = {'status': 'failed', 'error: e.toString(';      debugPrint(';      await _firestore.clearPersistence(';      fixes['applied'].add('‚úÖ Cache Firestore nettoye';      fixes['results']['cache_clear'] = {'status': ';    } catch (e';      // Normal si l';      fixes['results']['cache_clear'] = {'status': 'skipped', 'reason': 'App active';      debugPrint(';      final testResult = await _createTestAdmin(';      if (testResult['success]';        fixes['applied'].add('‚úÖ Test creation admin reussi';        fixes['results']['test_creation';        fixes['failed'].add('‚ùå Test creation admin echoue';        fixes['results'][';    } catch (e';      fixes['failed'].add('‚ùå Erreur test creation:  + e.toString()';      fixes['results']['test_creation'] = {'status': 'failed', 'error: e.toString(';    final successCount = (fixes['applied] as List';    final failCount = (fixes['failed] as List';    fixes['summary';      'total_fixes';      'successful';      'failed';      'success_rate: successCount / (successCount + failCount';    debugPrint('[CONNECTIVITY_FIX] üìä Corrections appliquees: $successCount/';  static Future<Map<String, dynamic>> _createTestAdmin(';      final testId = 'test_connectivity_{DateTime.now(').millisecondsSinceEpoch}';        'uid';        'email': 'test.connectivity@assurance.tn';        'nom': 'Test';        'prenom': 'Connectivite';        'role': 'admin_compagnie';        'status': 'test';        'compagnieId': 'test-connectivity';        'compagnieNom': 'Test Connectivite';        'created_at: FieldValue.serverTimestamp(';        'created_by': 'connectivity_fix';        'isTest';      await _firestore.collection('users).doc(testId).set(testData';      final verification = await _firestore.collection(';      if (verification.exists';        await _firestore.collection('users).doc(testId).delete(';          'success';          'testId';          'message': 'Test admin cree et supprime avec succes';          'success';          'message': ';    } catch (e';        'success';        'error: e.toString(';        'message': ';  static Future<Map<String, dynamic>> runCompleteFix(';    debugPrint('[CONNECTIVITY_FIX] üöÄ === SOLUTION COMPL√àTE ===';      'timestamp: DateTime.now().toIso8601String(';      'steps';    debugPrint('[CONNECTIVITY_FIX] üìã √âtape 1: Diagnostic...';    result['steps']['diagnosis] = await diagnoseProblem(';    debugPrint('[CONNECTIVITY_FIX] üîß √âtape 2: Corrections...';    result['steps']['fixes] = await applyAutomaticFixes(';    debugPrint('[CONNECTIVITY_FIX] ‚úÖ √âtape 3: Verification finale...';    result['steps']['final_test] = await diagnoseProblem(';    final initialProblems = (result['steps']['diagnosis']['problems] as List';    final finalProblems = (result['steps']['final_test']['problems] as List';    result['summary';      'initial_problems';      'final_problems';      'problems_fixed';      'success';      'improvement';    debugPrint('[CONNECTIVITY_FIX] üéØ Resultat: '{result['summary']['success'] ? 'SUCC√àS' : '√âCHEC PARTIEL'}';    debugPrint('[CONNECTIVITY_FIX] üìà Problemes resolus: '{result['summary']['problems_fixed';