import 'package:flutter/foundation.dart';import 'package:cloud_firestore/cloud_firestore.dart';import '../../../core/services/offline_admin_service.dart';  }';    debugPrint('[SIMPLE_USER_CREATION] üöÄ Creation Admin Compagnie...';    debugPrint('[SIMPLE_USER_CREATION] üìß Email: 'email';    debugPrint('[SIMPLE_USER_CREATION] üè¢ Compagnie: 'compagnieNom';      debugPrint(';      ).timeout(const Duration(seconds: 5)';      debugPrint(';    } catch (e';      debugPrint('[SIMPLE_USER_CREATION] ‚ö†Ô∏è Firebase echoue:  + e.toString()';      debugPrint(';      ';      debugPrint(';    } catch (e';      debugPrint('[SIMPLE_USER_CREATION] ‚ùå √âchec total:  + e.toString()';        'success';        'error': '√âchec creation utilisateur: 'e';        'method': ';    } catch (authError';      debugPrint('[SIMPLE_USER_CREATION] ‚ö†Ô∏è Erreur Firebase Auth: ';      if (authError.toString(').contains('PigeonUserDetails)';        debugPrint(';        if (currentUser != null';          debugPrint('[SIMPLE_USER_CREATION] ‚úÖ Contournement PigeonUserDetails reussi: '{user.uid}';            'success';            'error': 'Erreur PigeonUserDetails - utilisateur non connecte';            'method': 'firebase_failed';          'success';          'error': 'Erreur Firebase Auth: {authError.toString(')}';          'method': ';    if (user == null';        'success';        'error': 'Utilisateur null apres creation Firebase Auth';        'method': 'firebase_failed';        .collection(';        .doc(userId';      'uid';      'email';      'nom';      'prenom';      'role': 'admin_compagnie';      'compagnieId';      'compagnieNom';      'phone';      'address';      'isFirstLogin';      'isActive';      'status': 'actif';      'created_at: FieldValue.serverTimestamp(';      'created_by': 'super_admin';      'source': ';    }';      'success';      'userId';      'email';      'temporaryPassword';      'method': 'firebase';      'message': ';    final timestamp = DateTime.now(';    return 'Admin';  static Future<bool> isFirebaseWorking(';          .collection('health_check';          .doc(';  static Future<Map<String, dynamic>> getStats(';      'firebase_available: await isFirebaseWorking(';      'service_status': 'operational';      ';