import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';import 'package:connectivity_plus/connectivity_plus.dart';  }';    debugPrint('[ROBUST_ADMIN] 🚀 === CRÉATION ADMIN COMPAGNIE ROBUSTE ===';    debugPrint('[ROBUST_ADMIN] 📧 Email: 'email';    debugPrint('[ROBUST_ADMIN] 🏢 Compagnie: $compagnieNom (compagnieId')';        debugPrint('[ROBUST_ADMIN] 🔄 Tentative $attempt/';        final connectivityResult = await _checkConnectivity(';        if (!connectivityResult['success]';          throw Exception('Pas de connexion Internet: '{connectivityResult['message']}';        // Étape 2: Verifier l';        if (!firestoreStatus['success]';          throw Exception('Firestore indisponible: '{firestoreStatus['message']}';        // Étape 3: Creer l';        debugPrint('[ROBUST_ADMIN] ✅ Creation reussie a la tentative ';      } catch (e';        debugPrint(';        if (attempt == maxRetries';          debugPrint('[ROBUST_ADMIN] 💥 Toutes les tentatives ont echoue';            'success';            'error: e.toString(';            'attempts';            'message': 'Échec apres ';        final waitTime = Duration(seconds: attempt * 2';        debugPrint('[ROBUST_ADMIN] ⏳ Attente ';        await Future.delayed(waitTime';      'success';      'error': 'Nombre maximum de tentatives atteint';      ';      final connectivityResult = await Connectivity().checkConnectivity(';        'success';        'type: connectivityResult.toString(';        'message': hasConnection ? 'Connexion OK' : ';    } catch (e';        'success';        'error: e.toString(';        'message': 'Erreur verification connectivite';  static Future<Map<String, dynamic>> _checkFirestoreHealth(';      debugPrint(';      await _firestore.enableNetwork(';      // Test d';      final testDoc = _firestore.collection('health_check').doc('test';        'timestamp: FieldValue.serverTimestamp(';        ';      await testDoc.delete(';        'success';        'message': ';    } catch (e';      debugPrint('[ROBUST_ADMIN] ❌ Firestore non disponible:  + e.toString()';        'success';        'error: e.toString(';        'message': 'Firestore indisponible';      if (e.toString(').contains('TimeoutException)';        throw Exception('Timeout: Creation admin trop lente (>30s)';  /// 🔧 Effectuer la creation de l';    debugPrint('[ROBUST_ADMIN] 🔧 Creation effective de l\'admin...';    final adminId = 'admin_${compagnieId}_{DateTime.now(').millisecondsSinceEpoch}';    // Donnees de l';      'uid';      'email';      'nom';      'prenom';      'role': 'admin_compagnie';      'status': 'actif';      'compagnieId';      'compagnieNom';      'phone';      'address';      'created_at: FieldValue.serverTimestamp(';      'created_by': 'robust_admin_creation_service';      'source': 'super_admin_creation';      'isLegitimate';      'isActive';      'password_reset_required';      'last_login';    debugPrint('[ROBUST_ADMIN] 📝 Creation document Firestore...';    await _firestore.collection('users).doc(adminId).set(adminData';    debugPrint('[ROBUST_ADMIN] 🔍 Verification creation...';    final verification = await _firestore.collection(';    if (!verification.exists';      throw Exception('Document non cree dans Firestore';    debugPrint('[ROBUST_ADMIN] ✅ Admin cree avec succes: 'adminId';      'success';      'adminId';      'email';      'password';      'compagnieId';      'compagnieNom';      'message': 'Admin Compagnie cree avec succes';      ';  static Future<Map<String, dynamic>> runConnectivityTest(';    debugPrint('[ROBUST_ADMIN] 🧪 === TEST CONNECTIVITÉ COMPLET ===';      'timestamp: DateTime.now().toIso8601String(';      'tests';    results['tests']['internet] = await _checkConnectivity(';    results['tests']['firestore] = await _checkFirestoreHealth(';      results['tests']['auth';        'success';        'uid';        'email';        'message': user != null ? 'Utilisateur connecte' : 'Pas d\';    } catch (e';      results['tests']['auth';        'success';        'error: e.toString(';        'message': 'Erreur verification auth';    final allSuccess = results['tests].values.every((test') => test['success] == true';    results['overall_success';    results['message'] = allSuccess ? 'Tous les tests passes' : 'Certains tests ont echoue';    debugPrint('[ROBUST_ADMIN] 📊 Resultat global: '{allSuccess ? '✅' : '❌';