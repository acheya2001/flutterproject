import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';  static Future<Map<String, dynamic>> testSimpleWrite(';      debugPrint('[FIRESTORE_TEST] üß™ Test d\'ecriture simple...';      final testId = 'test_{DateTime.now(').millisecondsSinceEpoch}';        'test';        'timestamp: FieldValue.serverTimestamp(';        'message': 'Test d\'ecriture Firestore';        'id';      debugPrint('[FIRESTORE_TEST] üìù Donnees de test: 'testData';          .collection(';          .set(testData';      debugPrint('[FIRESTORE_TEST] ‚úÖ √âcriture reussie';          .collection(';      if (doc.exists';        debugPrint('[FIRESTORE_TEST] ‚úÖ Lecture reussie: {doc.data(')}';            .collection(';            .delete(';        debugPrint('[FIRESTORE_TEST] üßπ Nettoyage reussi';          'success';          'message': 'Test Firestore reussi';          'testId';          'data: doc.data(';          'success';          'message': 'Document non trouve apres ecriture';          ';    } catch (e, stackTrace';      debugPrint('[FIRESTORE_TEST] ‚ùå Erreur test:  + e.toString()';      debugPrint('[FIRESTORE_TEST] ‚ùå Stack trace: 'stackTrace';        'success';        'error: e.toString(';        'message': 'Erreur lors du test Firestore';        'stackTrace: stackTrace.toString(';  /// üß™ Test d';      debugPrint('[FIRESTORE_TEST] üß™ Test d\'ecriture collection users...';      final testId = 'test_user_{DateTime.now(').millisecondsSinceEpoch}';        'uid';        'email': 'test@example.com';        'nom': 'Test';        'prenom': 'User';        'role': 'test';        'accountType': 'test';        'isActive';        'created_at: FieldValue.serverTimestamp(';        'test';      debugPrint('[FIRESTORE_TEST] üìù Donnees utilisateur test: 'userData';          .collection(';          .set(userData';      debugPrint('[FIRESTORE_TEST] ‚úÖ √âcriture users reussie';          .collection(';      if (doc.exists';        debugPrint('[FIRESTORE_TEST] ‚úÖ Lecture users reussie';            .collection(';            .delete(';        debugPrint('[FIRESTORE_TEST] üßπ Nettoyage users reussi';          'success';          'message': 'Test collection users reussi';          'testId';          'data: doc.data(';          'success';          'message': 'Document users non trouve apres ecriture';          ';    } catch (e, stackTrace';      debugPrint('[FIRESTORE_TEST] ‚ùå Erreur test users:  + e.toString()';      debugPrint('[FIRESTORE_TEST] ‚ùå Stack trace: 'stackTrace';        'success';        'error: e.toString(';        'message': 'Erreur lors du test collection users';        ';  static Future<Map<String, dynamic>> checkFirestorePermissions(';      debugPrint('[FIRESTORE_TEST] üîç Verification des permissions...';            .collection(';            .get(';        results['users_read';          'success';          'count';        debugPrint(';      } catch (e';        results['users_read';          'success';          'error: e.toString(';        debugPrint('[FIRESTORE_TEST] ‚ùå Lecture users refusee:  + e.toString()';            .collection(';            .get(';        results['compagnies_read';          'success';          'count';        debugPrint(';      } catch (e';        results['compagnies_read';          'success';          'error: e.toString(';        debugPrint(';        final testResult = await testSimpleWrite(';        results[';      } catch (e';        results['write_test';          'success';          'error: e.toString(';        'success';        'permissions';        'message': ';    } catch (e, stackTrace';      debugPrint('[FIRESTORE_TEST] ‚ùå Erreur verification permissions:  + e.toString()';        'success';        'error: e.toString(';        'message': 'Erreur lors de la verification des permissions';        ';  static Future<Map<String, dynamic>> runCompleteFirestoreTest(';      debugPrint('[FIRESTORE_TEST] üöÄ Test complet Firestore...';      debugPrint(';        await _firestore.enableNetwork(';        results['connection'] = {'success': true, 'message': 'Connexion OK';        debugPrint(';      } catch (e';        results['connection'] = {'success': false, 'error: e.toString(';        debugPrint('[FIRESTORE_TEST] ‚ùå Connexion echouee:  + e.toString()';      debugPrint('[FIRESTORE_TEST] 2Ô∏è‚É£ Test des permissions...';      results['permissions] = await checkFirestorePermissions(';      // 3. Test d';      debugPrint('[FIRESTORE_TEST] 3Ô∏è‚É£ Test d\'ecriture simple...';      results['simple_write] = await testSimpleWrite(';      // 4. Test d';      debugPrint('[FIRESTORE_TEST] 4Ô∏è‚É£ Test d\'ecriture users...';      results[';      final allSuccess = results.values.every((result';          result is Map && result['success] == true';      results['summary';        'success';        'message';            ? 'Tous les tests Firestore sont passes';            : 'Certains tests Firestore ont echoue';        'timestamp: DateTime.now().toIso8601String(';      debugPrint('[FIRESTORE_TEST] '{allSuccess ? '‚úÖ' : '‚ùå';    } catch (e, stackTrace';      debugPrint('[FIRESTORE_TEST] ‚ùå Erreur test complet:  + e.toString()';        'success';        'error: e.toString(';        'message': 'Erreur lors du test complet Firestore';        ';  static Future<Map<String, dynamic>> cleanupTestData(';      debugPrint('[FIRESTORE_TEST] üßπ Nettoyage des donnees de test...';          .collection(';        await doc.reference.delete(';          .collection('users';          .where(';        await doc.reference.delete(';      debugPrint('[FIRESTORE_TEST] üßπ 'deleted documents de test supprimes';        'success';        'deleted';        'message': '';    } catch (e';      debugPrint('[FIRESTORE_TEST] ‚ùå Erreur nettoyage:  + e.toString()';        'success';        'error: e.toString(';        'message': ';  static Future<Map<String, dynamic>> createAdminsAlternative(';      debugPrint('[FIRESTORE_TEST] üîÑ === CR√âATION ALTERNATIVE ADMINS ===';        {'id': 'star-assurance', 'nom': 'STAR Assurance', 'email': 'admin.star@assurance.tn';        {'id': 'comar-assurance', 'nom': 'COMAR Assurance', 'email': 'admin.comar@assurance.tn';        {'id': 'gat-assurance', 'nom': 'GAT Assurance', 'email': 'admin.gat@assurance.tn';        {'id': 'maghrebia-assurance', 'nom': 'Maghrebia Assurance', 'email': ';      for (final company in companies';          final adminId = 'admin_'{company['id']}_{DateTime.now(').millisecondsSinceEpoch}';            'uid';            'email': company['email';            'nom': 'Admin';            'prenom': company['nom';            'role': 'admin_compagnie';            'status': 'actif';            'compagnieId': company['id';            'compagnieNom': company['nom';            'created_at: FieldValue.serverTimestamp(';            'created_by': 'firestore_test_service';            'source': 'alternative_creation';            'isLegitimate';          debugPrint('[FIRESTORE_TEST] üîÑ Creation '{company['email';          // Utiliser add() au lieu de set(';          final docRef = await _firestore.collection('users).add(adminData';          debugPrint('[FIRESTORE_TEST] ‚úÖ Admin cree avec ID: ';        } catch (e';          debugPrint('[FIRESTORE_TEST] ‚ùå Erreur pour '{company['email']}:  + e.toString()';        'success';        'created';        'createdIds';        'message': 'created Admin(s) cree(s') avec methode alternative';      debugPrint('[FIRESTORE_TEST] ‚ùå Erreur creation alternative:  + e.toString()';        'success';        'error: e.toString(';  /// üîç Verifier l';      debugPrint('[FIRESTORE_TEST] üîç === V√âRIFICATION FIRESTORE ===';      final collections = ['users', 'compagnies_assurance', 'agences', ';          final snapshot = await _firestore.collection(collectionName).get(';          debugPrint('[FIRESTORE_TEST] üìã $collectionName: ';        } catch (e';          debugPrint('[FIRESTORE_TEST] ‚ùå Erreur $collectionName:  + e.toString()';        'success';        'collections';        'totalCollections';        'message': ';    } catch (e';      debugPrint('[FIRESTORE_TEST] ‚ùå Erreur verification:  + e.toString()';        'success';        ';