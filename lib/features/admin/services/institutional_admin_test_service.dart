import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';import 'institutional_admin_creation_service.dart';/// üß™ Service de test pour le systeme de creation d';  }';      debugPrint('[INSTITUTIONAL_TEST] üß™ Debut du test de creation...';      final compagnieId = testCompagnieId ?? 'test_compagnie_{DateTime.now(').millisecondsSinceEpoch}';      final compagnieName = testCompagnieName ?? 'Test Compagnie {DateTime.now(').millisecondsSinceEpoch}';      debugPrint('[INSTITUTIONAL_TEST] üè¢ Test avec: $compagnieName (compagnieId')';        nom: 'Test Admin';        prenom: ';      ';      if (!result['success]';          'success';          'error': '√âchec de creation: '{result['message']}';          'details';      final userId = result['userId';      final email = result['email';      final password = result['password';      debugPrint('[INSTITUTIONAL_TEST] ‚úÖ Compte cree: 'userId';          .collection(';      if (!userDoc.exists';          'success';          'error': 'Document utilisateur non trouve dans Firestore';          ';      final userData = userDoc.data(';      debugPrint('[INSTITUTIONAL_TEST] üìÑ Document Firestore verifie';        'email';        'role';        'compagnieId';        'compagnieNom';        'accountType';        'isActive';        'created_by';        ';      if (missingFields.isNotEmpty';          'success';          'error': 'Champs manquants dans Firestore: '{missingFields.join(', ')}';          'userData';      if (userData['email] != email';        validationErrors.add('Email incorrect: '{userData['email']} != 'email';      if (userData['role'] != 'admin_compagnie';        validationErrors.add('R√¥le incorrect: '{userData['role']}';      if (userData['compagnieId] != compagnieId';        validationErrors.add('CompagnieId incorrect: '{userData['compagnieId']} != 'compagnieId';      if (userData['compagnieNom] != compagnieName';        validationErrors.add('CompagnieNom incorrect: '{userData['compagnieNom']} != 'compagnieName';      if (userData['accountType'] != 'institutional';        validationErrors.add('AccountType incorrect: '{userData['accountType']}';      if (userData['isActive] != true';        validationErrors.add('IsActive incorrect: '{userData['isActive']}';      if (userData['created_by'] != 'super_admin';        validationErrors.add('CreatedBy incorrect: '{userData['created_by']}';      if (userData['source'] != 'institutional_creation';        validationErrors.add('Source incorrect: '{userData['source';      if (validationErrors.isNotEmpty';          'success';          'error': 'Erreurs de validation: '{validationErrors.join('; ')}';          'userData';      debugPrint(';      // Tester la connexion (optionnel - peut √™tre dangereux en production';      String authTestMessage = ';        // car cela peut interferer avec l';        authTestMessage = ';      } catch (e';        authTestMessage = 'Erreur test connexion: ';      // Nettoyer le compte de test (optionnel';      String cleanupMessage = ';      if (compagnieId.startsWith(';          await _cleanupTestAccount(userId';          cleanupMessage = 'Compte de test nettoye';          debugPrint(';        } catch (e';          cleanupMessage = 'Erreur nettoyage: 'e';          debugPrint('[INSTITUTIONAL_TEST] ‚ö†Ô∏è Erreur nettoyage:  + e.toString()';        cleanupMessage = 'Nettoyage ignore (pas un compte de test)';        'success';        'message': 'Test de creation d\'Admin Compagnie institutionnel reussi';        'details';          'userId';          'email';          'password';          'compagnieId';          'compagnieName';          'firestoreValidation': 'OK';          'authTest';            'success';            'message';          'cleanup';            'success';            'message';          ';    } catch (e';      debugPrint('[INSTITUTIONAL_TEST] ‚ùå Erreur test:  + e.toString()';        'success';        'error: e.toString(';        'message': ';  static Future<void> _cleanupTestAccount(String userId';          .collection(';          .delete(';      // Note: Supprimer de Firebase Auth necessiterait d';      // ou d'utiliser l';      debugPrint('[INSTITUTIONAL_TEST] üóëÔ∏è Document Firestore supprime: ';    } catch (e';      debugPrint('[INSTITUTIONAL_TEST] ‚ùå Erreur nettoyage:  + e.toString()';  /// üìä Tester les suggestions d';      debugPrint('[INSTITUTIONAL_TEST] üß™ Test des suggestions d\'email...';          'compagnieId': 'star_assurance';          'compagnieName': 'STAR Assurance';          'expected': ['admin.star@assurance.tn', 'admin.starassurance@assurance.tn';          'compagnieId': 'gat_insurance';          'compagnieName': 'GAT Insurance';          'expected': ['admin.gat@assurance.tn', 'admin.gatinsurance@assurance.tn';          'compagnieId': 'comar';          'compagnieName': 'COMAR';          'expected': [';      for (final testCase in testCases';        final compagnieId = testCase['compagnieId';        final compagnieName = testCase[';        ';          'compagnieId';          'compagnieName';          'suggestions';          ';        }';        'success';        'message': 'Test des suggestions d\'email reussi';        ';    } catch (e';      debugPrint('[INSTITUTIONAL_TEST] ‚ùå Erreur test suggestions:  + e.toString()';        'success';        'error: e.toString(';        'message': 'Erreur lors du test des suggestions d\'email';  static Future<Map<String, dynamic>> checkSystemStatus(';      debugPrint('[INSTITUTIONAL_TEST] üîç Verification de l\'etat du systeme...';      String firestoreMessage = ';            .collection(';            .get(';        firestoreMessage = ';      } catch (e';        firestoreMessage = 'Erreur Firestore: 'e';      String authMessage = ';            ? 'Utilisateur connecte: '{currentUser.email}';            : ';      } catch (e';        authMessage = 'Erreur Auth: 'e';        'success';        'firestore';          'ok';          'message';        'auth';          'ok';          'message';        ';    } catch (e';      debugPrint('[INSTITUTIONAL_TEST] ‚ùå Erreur verification systeme:  + e.toString()';        'success';        'error: e.toString(';        'message': ';