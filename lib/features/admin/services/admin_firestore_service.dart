import 'package:cloud_firestore/cloud_firestore.dart';import '../models/admin_models.dart';  static const String _compagniesCollection = 'compagnies';  static const String _agencesCollection = 'agences';  static const String _usersCollection = 'users';  static const String _contractsCollection = 'contracts';  static const String _vehiculesCollection = 'vehicules';  static const String _sinistresCollection = ';        .collection(_compagniesCollection';        .where('isActive, isEqualTo: true';        .orderBy(';    } catch (e';      print(';  static Future<String> generateCompagnieCode(String nomCompagnie';          .replaceAll(RegExp(r'[^a-zA-Z]'), ';          .substring(0, nomCompagnie.length >= 3 ? 3 : nomCompagnie.length';          .padRight(3, ';      final nextNumber = (snapshot.docs.length + 1).toString(').padLeft(3, '0';      return '$prefix';    } catch (e';      print('Erreur lors de la generation du code:  + e.toString()';      return 'COMP{DateTime.now().millisecondsSinceEpoch.toString().substring(8')}';      print(';    } catch (e';      print(';        .collection(_agencesCollection';        .where('isActive, isEqualTo: true';        .orderBy(';            .toList()';  /// Obtenir les agences d';        .where('compagnieId, isEqualTo: compagnieId';        .where('isActive, isEqualTo: true';        .orderBy(';    } catch (e';      print('Erreur lors de la recuperation de l\';  static Future<String> generateAgenceCode(String nomAgence, String compagnieCode';      // Prendre les 2 premieres lettres du nom de l';          .replaceAll(RegExp(r'[^a-zA-Z]'), ';          .substring(0, nomAgence.length >= 2 ? 2 : nomAgence.length';          .padRight(2, ';          .collection(_agencesCollection';          .where(';      final nextNumber = (snapshot.docs.length + 1).toString(').padLeft(2, '0';      return '$compagnieCode-$agencePrefix';    } catch (e';      print('Erreur lors de la generation du code agence:  + e.toString()';      return '$compagnieCode-AG{DateTime.now().millisecondsSinceEpoch.toString().substring(10')}';      print('Erreur lors de la creation de l\';        .collection(_usersCollection';        .where('isActive, isEqualTo: true';        .orderBy(';            .toList()';  /// Obtenir les utilisateurs d';        .where('compagnieId, isEqualTo: compagnieId';        .where('isActive, isEqualTo: true';        .orderBy(';            .toList()';  /// Obtenir les utilisateurs d';        .where('agenceId, isEqualTo: agenceId';        .where('isActive, isEqualTo: true';        .orderBy(';    } catch (e';      print('Erreur lors de la recuperation de l\';        .collection(_contractsCollection';        .where('isActive, isEqualTo: true';        .orderBy(';            .toList()';  /// Obtenir les contrats d';        .where('compagnieId, isEqualTo: compagnieId';        .where('isActive, isEqualTo: true';        .orderBy(';            .toList()';  /// Obtenir les contrats d';        .where('agenceId, isEqualTo: agenceId';        .where('isActive, isEqualTo: true';        .orderBy(';        .collection(_sinistresCollection';        .orderBy(';            .toList()';  /// Obtenir les sinistres d';        .where('compagnieAId, isEqualTo: compagnieId';        .orderBy(';            .toList()';  /// Obtenir les sinistres d';        .where('agenceAId, isEqualTo: agenceId';        .orderBy(';            .toList()';  /// Compter les documents d';      print('Erreur lors du comptage: ';