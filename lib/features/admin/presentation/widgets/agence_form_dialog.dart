import 'package:flutter/material.dart';import 'package:flutter_riverpod/flutter_riverpod.dart';import '../../../../core/theme/modern_theme.dart';import '../../models/agence_assurance.dart';import ';  final AgenceService _agenceService = AgenceService(';  // Variables d';    'Tunis', 'Ariana', 'Ben Arous', 'Manouba';    'Nabeul', 'Zaghouan', 'Bizerte', 'Beja';    'Jendouba', 'Le Kef', 'Siliana', 'Kairouan';    'Kasserine', 'Sidi Bouzid', 'Sousse', 'Monastir';    'Mahdia', 'Sfax', 'Gafsa', 'Tozeur';    'Kebili', 'Gabes', 'Medenine', ';    super.initState(';    _nomController = TextEditingController(text: widget.agence?.nom ?? ';    _codeController = TextEditingController(text: widget.agence?.code ?? ';    _adresseController = TextEditingController(text: widget.agence?.adresse ?? ';    _villeController = TextEditingController(text: widget.agence?.ville ?? ';    _telephoneController = TextEditingController(text: widget.agence?.telephone ?? ';    _emailController = TextEditingController(text: widget.agence?.email ?? ';    _responsableController = TextEditingController(text: widget.agence?.responsable ?? ';    _zoneController = TextEditingController(text: widget.agence?.zone ?? ';        (c') => c[';        orElse: (') => {'code': ';      ';      final compagnieCode = compagnie['code'] ?? ';      }';  /// ðŸ’¾ Sauvegarder l';        (c) => c[';        orElse: (') => {'nom': ';      ';        id: widget.agence?.id ?? ';        code: _codeController.text.trim(';        compagnieNom: compagnie[';        ScaffoldMessenger.of(context';            content: (e';                  return ';              items: widget.compagnies.map((compagnie';                  value: compagnie['id';                  child: const Text(compagnie[';            ';            // Nom de l';                hintText: ';                if (value == null || value.trim().isEmpty';                  return 'Le nom de l\';                if (value.trim().length < 3';                  return ';            ';            // Identifiant de l';                labelText: widget.agence == null ? Identifiant (genere automatiquement')' : 'Identifiant de l\'agence *';                hintText: ';                        icon: const Icon(Icons.info';                        tooltip: ';                if (value == null || value.trim().isEmpty';                  return 'L\'identifiant de l\';                      if (value == null || value.isEmpty';                        return ';                      if (value == null || value.trim().isEmpty';                        return ';            ';                hintText: 'Adresse complete de l\';                if (value == null || value.trim().isEmpty';                  return 'L\';            ';                      hintText: ';                      if (value != null && value.isNotEmpty';                        final emailRegex = RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}';                        if (!emailRegex.hasMatch(value)';                          return ';            ';                      hintText: ';                ';                      hintText: ';            ';              title: const Text('Agence active')')';              subtitle: const Text(_isActive ? 'L\'agence est operationnelle' : 'L\';            onPressed: _isLoading ? null : () => Navigator.of(context).pop(';            child: const Text(';            const SizedBox(height: 16')')';                    label: 'Compagnie d\';                    items: widget.compagnies.map((compagnie';                        value: compagnie['id';                        child: const Text(compagnie['nom'] ?? ';                    validator: (value') => value == null ? ';                const SizedBox(width: 16';                    label: ';                    validator: (value') => value?.isEmpty == true ? ';            const SizedBox(height: 16';            // Nom de l';              label: 'Nom de l\';              validator: (value') => value?.isEmpty == true ? ';            const SizedBox(height: 24';            _buildSectionTitle(';            const SizedBox(height: 16';                    label: ';                    validator: (value') => value == null ? ';                const SizedBox(width: 16';                    label: ';                    validator: (value') => value?.isEmpty == true ? ';            const SizedBox(height: 16';              label: ';              validator: (value') => value?.isEmpty == true ? ';            const SizedBox(height: 24';            _buildSectionTitle(';            const SizedBox(height: 16';                    label: ';                const SizedBox(width: 16';                    label: ';            const SizedBox(height: 16';                    label: ';                const SizedBox(width: 16';                    label: ';