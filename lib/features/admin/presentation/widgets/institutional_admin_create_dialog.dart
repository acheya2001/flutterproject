import 'package:flutter/material.dart';import 'package:flutter/foundation.dart';import 'package:cloud_firestore/cloud_firestore.dart';import '../../services/institutional_admin_creation_service.dart';import '../../services/compagnie_service.dart';import '../../services/compagnie_diagnostic_service.dart';import '../../services/institutional_admin_quick_test.dart';import '../../services/firestore_test_service.dart';import '../../services/simple_institutional_admin_service.dart';import '../../../../services/unified_compagnie_service.dart';import '../../../../admin/debug_admin_creation.dart';import 'credentials_display_dialog.dart';  Future<void> _loadCompagnies(';      debugPrint(';      final compagniesData = await UnifiedCompagnieService.getCompagniesForDropdown(';      debugPrint('[INSTITUTIONAL_DIALOG] üìä ';      if (compagniesData.isEmpty';        _showErrorSnackBar('Aucune compagnie trouvee. Veuillez d\'abord creer des compagnies dans la Gestion des Compagnies.';        debugPrint(';          final stats = await UnifiedCompagnieService.getCompagniesStats(';          debugPrint('[INSTITUTIONAL_DIALOG] üìä Stats: ';    } catch (e';      debugPrint(';        setState(() => _isLoadingCompagnies = false';        _showErrorSnackBar('Erreur lors du chargement des compagnies:  + e.toString()';  /// üìß Generer les suggestions d';      debugPrint('[INSTITUTIONAL_DIALOG] üîç Recherche dernier Admin cree pour: 'compagnieId';          .collection('users';          .where('role', isEqualTo: 'admin_compagnie';          .where('compagnieId, isEqualTo: compagnieId';          .where('isActive, isEqualTo: true';          .orderBy(';        final adminData = recentAdminQuery.docs.first.data(';        final email = adminData[';          // Generer le mot de passe probable (base sur la logique de generation';          final password = 'TempPass2024!';          debugPrint('[INSTITUTIONAL_DIALOG] ‚úÖ Admin trouve: 'email';            'email';            ';    } catch (e';      debugPrint(';  Future<void> _loadCompagniesWithAdmin(';      debugPrint('[INSTITUTIONAL_DIALOG] üîç Chargement des compagnies avec Admin...';          .collection('users';          .where('role', isEqualTo: 'admin_compagnie';          .where(';        final data = doc.data(';        final compagnieId = data[';        }';      debugPrint('[INSTITUTIONAL_DIALOG] ‚úÖ ';    } catch (e';      debugPrint(';    if (_selectedCompagnieId == null';      _showErrorSnackBar(';    setState(() => _isLoading = true';      debugPrint('[INSTITUTIONAL_DIALOG] üöÄ Debut creation Admin Compagnie...';      debugPrint('[INSTITUTIONAL_DIALOG] üè¢ Compagnie: $_selectedCompagnieName (_selectedCompagnieId')';          debugPrint('[INSTITUTIONAL_DIALOG] ‚è∞ Timeout creation, tentative fallback...';            'success';            'timeout';            'message': ';      ';      debugPrint('[INSTITUTIONAL_DIALOG] üìä Resultat creation: '{result['success']}';      if (!result['success]';        debugPrint('[INSTITUTIONAL_DIALOG] ‚ùå Erreur: '{result['message']}';        debugPrint('[INSTITUTIONAL_DIALOG] ‚ùå Details: '{result['error';        setState(() => _isLoading = false';        if (result['success] == true';          debugPrint('[INSTITUTIONAL_DIALOG] ‚úÖ Creation reussie, affichage des identifiants...';          if (result['displayCredentials] == null';            debugPrint('[INSTITUTIONAL_DIALOG] ‚ùå Identifiants manquants dans le resultat';            _showErrorSnackBar(';              builder: (context';                credentials: result[';              Navigator.of(context).pop(true';          // Verifier si c'est une erreur d';          if (result['error'] == 'ADMIN_ALREADY_EXISTS';            debugPrint('[INSTITUTIONAL_DIALOG] ‚ùå Admin Compagnie existe deja';            final existingEmail = result['existingEmail'] ?? 'Email inconnu';            final compagnieName = result['compagnieName'] ?? 'Compagnie';              'Admin Compagnie Existant';              'Un Admin Compagnie existe deja pour 'compagnieName.\n\n';              'Email existant: 'existingEmail\n\n';              'Chaque compagnie ne peut avoir qu\';            ';          // Verifier si c';          if (result['timeout] == true';            debugPrint(';                ? _emailController.text.trim(';                : 'admin.{_selectedCompagnieId!.toLowerCase(').replaceAll(RegExp(r'[^a-z0-9]'), ')}@assurance.tn';                : ';                      const SizedBox(width: 8';                      const Text(';                  ')')';                      const Text(';                      const SizedBox(height: 8')')';                      Selectable.selectable((email';                      const SizedBox(height: 16';                      const Text(';                        Navigator.of(context).pop(true')')';                      child: const Text(';              ')')';          debugPrint('[INSTITUTIONAL_DIALOG] üîÑ √âchec service principal, tentative service simplifie...';          // Si c';          if (result['timeout] == true';            debugPrint(';            ).timeout(const Duration(seconds: 10)';            if (fallbackResult['success] == true && mounted';              debugPrint(';                  builder: (context';                    credentials: fallbackResult[';          } catch (fallbackError';            debugPrint('[INSTITUTIONAL_DIALOG] ‚ùå Service simplifie echoue aussi: ';            if (mounted';              debugPrint(';                  ? _emailController.text.trim(';                  : 'admin.{_selectedCompagnieId!.toLowerCase(').replaceAll(RegExp(r'[^a-z0-9]'), ')}@assurance.tn';                  : ';                builder: (context';                  title: const Text('‚ö†Ô∏è Creation Partielle')')';                      const Text(';                      const SizedBox(height: 8')')';                      Selectable.selectable((manualEmail';                      const SizedBox(height: 16';                      const Text(';                        Navigator.of(context).pop(true')')';                      child: const Text(';              ')')';          // Si tout echoue, afficher l';          final errorMessage = result['message'] ?? 'Erreur inconnue lors de la creation';          final errorDetails = result['error'] ?? ';          final fullError = errorDetails.isNotEmpty ? '$errorMessage\n\nDetails: 'errorDetails';          debugPrint('[INSTITUTIONAL_DIALOG] ‚ùå Affichage erreur finale: ';    } catch (e, stackTrace';      debugPrint('[INSTITUTIONAL_DIALOG] ‚ùå Exception creation:  + e.toString()';      debugPrint('[INSTITUTIONAL_DIALOG] ‚ùå Stack trace: ';        setState(() => _isLoading = false';        _showErrorSnackBar(';    ';  /// üö® Afficher un dialog d';            child: const Text(';    ')')';  /// üëÅÔ∏è Afficher les identifiants de l';      debugPrint(';                const SizedBox(width: 8';                const Text(';            ')')';                (_selectedCompagnieName :';                Selectable.selectable(const Text(credentials[';                ';                Selectable.selectable(const Text(credentials[';                onPressed: () => Navigator.of(context).pop(';                child: const Text(';        ')')';        _showErrorSnackBar(';    } catch (e';      debugPrint('[INSTITUTIONAL_DIALOG] ‚ùå Erreur recuperation identifiants:  + e.toString()';      _showErrorSnackBar(';  Future<void> _runDiagnostic(';      debugPrint(';          builder: (context';            title: const Text('üîç Diagnostic des Compagnies')')';                  if (result['success]';                    ({result['totalCompagnies']}';                    ({result['realCompagnies']}';                    ({result['fakeCompagnies']}';                    ({result['dropdownResults';                    const SizedBox(height: 16';                    if (result[';                      ';                      ...result['recommendations].map<Widget>((rec') => (rec';                    if (result[';                      ';                      ...result['dropdownData].map<Widget>((comp') => const Text(\';                      const Text(';                          await _createTestCompagnies(')')';                        child: const Text(';                      ')')';                    ({result['message';                onPressed: () => Navigator.of(context).pop(';                child: const Text(';    } catch (e')')';      debugPrint(';      if (mounted';        _showErrorSnackBar(';      if (mounted';        if (result[';          ScaffoldMessenger.of(context';              content: const Text(result[';          await _loadCompagnies(';          _showErrorSnackBar(result[';      if (mounted';        _showErrorSnackBar(';  Future<void> _runQuickTest(';      debugPrint(';          builder: (context';            title: const Text('üß™ Test Rapide')')';                  if (result[';                    const SizedBox(height: 8';                    ({result['email']}';                    ({result['password']}';                    ({result['userId';                    const SizedBox(height: 16';                    const Text(';                    const SizedBox(height: 8')')';                    ({result['message']}';                    if (result[';                      const SizedBox(height: 8';                      ({result['error';            ';              if (!result[';                    await _runRepairTest(';                  child: const Text(';                onPressed: () => Navigator.of(context).pop(')')';                child: const Text(';    } catch (e')')';      debugPrint(';      if (mounted';        _showErrorSnackBar(';      if (mounted';        if (result[';          ScaffoldMessenger.of(context';              content: const Text(result['summary'][';          await _loadCompagnies(';          _showErrorSnackBar(result[';      if (mounted';        _showErrorSnackBar(';  Future<void> _testFirestore(';      debugPrint(';          builder: (context';            title: const Text('üß™ Test Firestore')')';                  if (result[';                    const SizedBox(height: 16';                    ({result['connection']['success'] ? '‚úÖ' : '‚ùå'}';                    ({result['permissions']['success'] ? '‚úÖ' : '‚ùå'}';                    ({result['simple_write']['success'] ? '‚úÖ' : '‚ùå'}';                    ({result['users_write']['success'] ? '‚úÖ' : '‚ùå';                    const SizedBox(height: 8';                    ({result['message']}';                    if (result[';                      const SizedBox(height: 8';                      ({result['error';                onPressed: () => Navigator.of(context).pop(';                child: const Text(';    } catch (e')')';      debugPrint(';      if (mounted';        _showErrorSnackBar(';                                  const SizedBox(height: 8';                                  const Text(';                                            icon: const Icon(Icons.info')')';                                            label: const Text(';                                            icon: const Icon(Icons.info')')';                                            label: const Text(';                                            icon: const Icon(Icons.info')')';                                            label: const Text(';                                            icon: const Icon(Icons.info')')';                                            label: const Text(';                                ')')';                                        hintText: ';                                        ';                                        helperText: '{_compagnies.length} compagnie(s) disponible(s')';                                        final compagnieId = compagnie['id';                                        final compagnieNom = compagnie['nom';                                        final compagnieCode = compagnie['code'] as String? ?? ';                                        // Format unifie : "Nom (CODE';                                            ? '"compagnieNom (compagnieCode')';                                        if (value != null && _compagniesWithAdmin.contains(value)';                                          // Emp√™cher la selection d';                                            'Compagnie Non Disponible';                                            'Cette compagnie a deja un Admin Compagnie.\n\n';                                            'Chaque compagnie ne peut avoir qu\';                                          ';                                        debugPrint('[INSTITUTIONAL_DIALOG] üè¢ Compagnie selectionnee: ';                                              ? _compagnies.firstWhere((c') => c['id] == value')[';                                        if (value == null';                                          return ';                      const SizedBox(height: 24';                        title: const Text('Personnaliser les identifiants')')';                        subtitle: const Text(';                        const SizedBox(height: 16')')';                                  labelText: ';                            const SizedBox(width: 12';                                  labelText: ';                        const SizedBox(height: 16';                            labelText: ';                            ';                                ? 'Suggestions: {_emailSuggestions.take(2').join(', ')}';                              return 'Email requis';                            if (!RegExp(r^[\w-\.]+@([\w-]+\.')+[\w-]{2,4}').hasMatch(value)';                              return 'Format d\';                        const SizedBox(height: 16';                            labelText: ';                            ';                            helperText: ';                            if (value == null || value.trim().isEmpty';                              return ';                            if (value.length < 8';                              return ';                            const SizedBox(height: 8';                              '‚Ä¢ Aucun email automatique ne sera envoye\n';                              '‚Ä¢ Les identifiants seront affiches pour copie manuelle\n';                              ‚Ä¢ Ce compte est institutionnel (pas personnel')\n';                              '‚Ä¢ L\';            const SizedBox(height: 24';            // Boutons d';                    child: const Text(';                      ')')';                      child: const Text(';                            ')')';                          : const Text(';')')