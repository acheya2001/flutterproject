import 'package:flutter/material.dart';import '../../../../core/theme/modern_theme.dart';import '../../services/user_management_service_original.dart';import '../../services/user_role_validation_service_complete.dart';/// 👤 Carte d';  Widget build(BuildContext context';    final role = user['role'] ?? 'inconnu';    final status = user['status'] ?? ';                const SizedBox(width: 12';                      ({user['nom';                    switch (value';                      case ';                        onEdit(';                      case ';                        onResetPassword(';                      case ';                          const SizedBox(width: 8';                          const Text(';                          const SizedBox(width: 8')')';                          const Text(';            const SizedBox(height: 12')')';                  ';                ';                  ';                ';                if (user['compagnieNom] != null';                    'Compagnie';                    user[';                  ';                if (user['agenceNom] != null';                    'Agence';                    user[';                  ';                if (user['phone] != null';                    'Telephone';                    user[';    switch (status';      case 'actif';      case 'inactif';      case 'suspendu';  final _addressController = TextEditingController(';  String _selectedRole = ';  Widget build(BuildContext context';      title: const Text(';                    if (value == null || value.isEmpty')')';                      return 'Email requis';                    if (!RegExp(r^[\w-\.]+@([\w-]+\.')+[\w-]{2,4}').hasMatch(value)';                      return ';                const SizedBox(height: 16';                          labelText: ';                          if (value == null || value.isEmpty';                            return ';                    const SizedBox(width: 16';                          labelText: ';                          if (value == null || value.isEmpty';                            return ';                const SizedBox(height: 16';                    labelText: ';                      .where((entry') => entry.key != ';                if (UserRoleValidationServiceComplete.requiresCompagnie(_selectedRole)';                      labelText: ';                    items: widget.compagnies.map((compagnie';                          value: compagnie['id';                          child: const Text(compagnie[';                          (value == null || value.isEmpty)';                        return ';                if (UserRoleValidationServiceComplete.requiresAgence(_selectedRole)';                      labelText: ';                        .where((agence';                               agence[';                        .map((agence';                              value: agence['id';                              child: const Text(agence[';                          (value == null || value.isEmpty)';                        return ';                  const SizedBox(height: 16';                    labelText: ';                const SizedBox(height: 16';                    labelText: ';          onPressed: _isLoading ? null : () => Navigator.pop(context';          child: const Text(';                ')')';              : const Text(';        prenom: _prenomController.text.trim(')')';        compagnieId: _selectedCompagnie ?? ';      if (mounted';        if (result[';          ScaffoldMessenger.of(context';              content: const Text(';          ScaffoldMessenger.of(context')')';              content: ({result['error';        ScaffoldMessenger.of(context';            content: (e';/// ✏️ Dialogue d';    super.initState(';    _nomController = TextEditingController(text: widget.user['nom]';    _prenomController = TextEditingController(text: widget.user['prenom]';    _phoneController = TextEditingController(text: widget.user['phone'] ?? ';    _addressController = TextEditingController(text: widget.user['address'] ?? ';    _selectedRole = widget.user['role'] ?? 'agent';    _selectedStatus = widget.user['status'] ?? 'actif';    _selectedCompagnie = widget.user['compagnieId';    _selectedAgence = widget.user[';  Widget build(BuildContext context';      title: ({widget.user['nom']}';                  initialValue: widget.user['email';                    labelText: ';                const SizedBox(height: 16';                          labelText: ';                          if (value == null || value.isEmpty';                            return ';                    const SizedBox(width: 16';                          labelText: ';                          if (value == null || value.isEmpty';                            return ';                const SizedBox(height: 16';                          labelText: ';                            .where((entry') => entry.key != ';                    const SizedBox(width: 16';                          labelText: ';                        ';                          DropdownMenuItem(value: 'actif', child: const Text('Actif)')')';                          DropdownMenuItem(value: 'inactif', child: const Text('Inactif)')')';                          DropdownMenuItem(value: 'suspendu', child: const Text(';                      if (UserRoleValidationServiceComplete.requiresCompagnie(_selectedRole)')')';                              labelText: ';                            items: widget.compagnies.map((compagnie';                                  value: compagnie['id';                                  child: const Text(compagnie[';                                  (value == null || value.isEmpty)';                                return ';                      if (UserRoleValidationServiceComplete.requiresAgence(_selectedRole)';                              labelText: ';                                .where((agence';                                       agence[';                                .map((agence';                                      value: agence['id';                                      child: const Text(agence[';                                  (value == null || value.isEmpty)';                                return ';                  const SizedBox(height: 16';                    labelText: ';                const SizedBox(height: 16';                    labelText: ';          onPressed: _isLoading ? null : () => Navigator.pop(context';          child: const Text(';                ')')';              : const Text(';    setState(() => _isLoading = true')')';        uid: widget.user[';      if (mounted';        if (result[';          ScaffoldMessenger.of(context';              content: const Text(';          ScaffoldMessenger.of(context')')';              content: ({result['error';        ScaffoldMessenger.of(context';