import 'package:flutter/material.dart';import 'package:flutter/services.dart';import '../../../../core/theme/modern_theme.dart';import '../../services/agence_service.dart';import '../../services/compagnie_service.dart';import 'firestore_diagnostic_button.dart';import '../../services/admin_creation_service.dart';import '../../services/simple_user_creation_service.dart';import '../../services/email_notification_service.dart';import 'super_admin_test_button.dart';import '../../services/simple_email_service.dart';import '../../../../core/services/gmail_direct_service.dart';import '../../services/rbac_bypass_service.dart';import '../../../../core/services/firestore_test_service.dart';import 'super_admin_fix_button.dart';import ';  final _experienceController = TextEditingController(';    {'value': 'admin_compagnie', 'label': 'Administrateur de Compagnie';    {'value': 'admin_agence', 'label': 'Administrateur d\'Agence';    {'value': 'agent_agence', 'label': 'Agent d\'Agence';    {'value': 'expert_auto', 'label': ';    } catch (e';      debugPrint(';    } catch (e';      debugPrint(';        }';  /// ✅ Creer l';        throw Exception(';      final nomComplet = _nomCompletController.text.trim(';      final nameParts = nomComplet.split(' ';      final prenom = nameParts.isNotEmpty ? nameParts.first : ';      final nom = nameParts.length > 1 ? nameParts.sublist(1').join(' ') : ';      final motDePasseTemporaire = _generateTemporaryPassword(';      if (_selectedRole == ';          (c') => c[';          orElse: (') => {'nom': ';          email: _emailController.text.trim().toLowerCase(';          compagnieNom: compagnie[';        ';      } else if (_selectedRole == ';        ';        // Pour les autres rôles, utiliser l';        throw Exception('Creation de '_selectedRole non encore implementee avec Firebase Auth';      if (result['success] == true';        debugPrint('[USER_CREATE] ✅ Utilisateur cree avec succes: '{result['uid']}';        debugPrint('[USER_CREATE] 📧 Mot de passe temporaire: ';            Navigator.of(context).pop(true';        throw Exception(result['error'] ?? ';    } catch (e';      debugPrint(';        ScaffoldMessenger.of(context';            content: (e';      debugPrint(';      if (securityCheck.isGranted';        debugPrint('[USER_CREATE] ✅ Permissions accordees pour '{securityCheck.userRole}';      debugPrint('[USER_CREATE] ❌ ACCÈS STRICTEMENT REFUSÉ';      debugPrint('[USER_CREATE] 📧 Email: '{securityCheck.userEmail}';      debugPrint('[USER_CREATE] 🏷️ Rôle: '{securityCheck.currentRole}';      debugPrint('[USER_CREATE] ⚠️ Raison: '{securityCheck.reason}';      // Afficher le dialog d';          currentRole: securityCheck.currentRole ?? 'Inconnu';          reason: securityCheck.reason ?? 'Permissions insuffisantes';          action: securityCheck.action ?? 'Contacter l\';    } catch (e';      debugPrint(';      if (mounted';          currentEmail: 'Erreur';          currentRole: 'Erreur';          reason: 'Erreur systeme lors de la verification des permissions';          action: ';    final randomString = random.toString().substring(8';    return 'Temp';  }';      debugPrint('[USER_CREATE] 📧 Envoi email a: ';          (c') => c[';        ';        companyName = compagnie[';          (a') => a[';        ';        agencyName = agence[';      // 📧 UTILISER LE SERVICE GMAIL DIRECT (API GOOGLE';      debugPrint(';      ';      if (emailResult['success]';        debugPrint('[USER_CREATE] ✅ Email envoye avec succes via Gmail API !';        debugPrint('[USER_CREATE] ❌ Échec Gmail API: '{emailResult['error']}';        debugPrint(';        if (!fallbackSuccess';          debugPrint(';          ';      return emailResult[';    } catch (e';      debugPrint(';              const SizedBox(width: 12';              const Text(';                          ')')';                              style: const TextStyle(fontFamily: ';                      const SizedBox(width: 8';                        child: (email';                              : ';                      const SizedBox(height: 8';                      const Text('• L\')')'utilisateur doit se connecter avec ces identifiants';                      const Text('• Le mot de passe est temporaire et doit être change')')';                      const Text('• Copiez ces informations si l\')')'email n\';              onPressed: (';                final credentials = 'Email: $email\nMot de passe: ';                  ScaffoldMessenger.of(context';                      content: const Text(';              icon: const Icon(Icons.info')')';              label: const Text(';              ')')';              child: const Text(';    ')')';  /// 🚫 Afficher le dialog d';              const Text(';                      const SizedBox(height: 8')')';                        reason ?? ';                          ScaffoldMessenger.of(context';                                    ? '✅ Firestore fonctionne !';                                    : ';                      icon: const Icon(Icons.info';                      label: const Text(';                      const SizedBox(height: 8')')';                      (currentEmail';                      const SizedBox(height: 8';                      const Text(action ?? 'Contacter l\'administrateur systeme';                      if (action == null || action.contains(';                        const SizedBox(height: 8';                        const Text('1. Deconnectez-vous de ce compte')')';                        const Text('2. Connectez-vous avec le compte Super Admin')')';                        const Text(';                const SizedBox(height: 16')')';                // Widget d';                        ';                          ScaffoldMessenger.of(context';                              content: const Text(';              ')')';              child: const Text(';    ')')';  /// 🏷️ Obtenir le nom d';      case 'admin_compagnie';        return 'Administrateur de Compagnie';      case 'admin_agence';        return 'Administrateur d\'Agence';      case 'agent_agence';        return 'Agent d\'Agence';      case 'expert_auto';        return ';                          if (value == null || value.trim().isEmpty';                            return ';                          if (value == null || value.trim().isEmpty';                            return 'L\'email est requis';                          if (!RegExp(r^[\w-\.]+@([\w-]+\.')+[\w-]{2,4}').hasMatch(value)';                            return 'Format d\';                          if (value == null || value.trim().isEmpty';                            return ';                          if (value == null || value.trim().isEmpty';                            return ';                        items: _roles.map((role';                            value: role['value';                            child: const Text(role[';                          if (value == null';                            return ';                      // Compagnie (si rôle necessite';                      if (_selectedRole != null && _selectedRole != ';                          items: _compagnies.map((compagnie';                              value: compagnie['id';                              child: const Text(compagnie['nom'] as String? ?? ';                          validator: (value';                            if (_selectedRole != 'expert_auto && value == null';                              return ';                        ';                      if (_selectedRole != null && _selectedRole != ';                      // Agence (si rôle admin_agence ou agent_agence';                      if (_selectedRole == 'admin_agence' || _selectedRole == 'agent_agence';                            labelText: ';                          items: _agences.map((agence';                              value: agence['id';                              child: const Text(agence['nom'] as String? ?? ';                          validator: (value';                            if ((_selectedRole == 'admin_agence' || _selectedRole == 'agent_agence) && value == null';                              return 'L\';                        ';                      if (_selectedRole == 'admin_agence' || _selectedRole == ';                      // Experience (optionnel';                          helperText: ';              padding:  => Navigator.of(context).pop(';                      child: const Text(';                            ')')';                          : const Text(';')')