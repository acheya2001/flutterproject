import 'dart:async';import 'package:flutter/material.dart';import 'package:flutter_riverpod/flutter_riverpod.dart';import 'package:cloud_firestore/cloud_firestore.dart';import '../../../../core/theme/modern_theme.dart';import '../../services/user_management_service.dart';import '../../services/compagnie_service.dart';import '../../services/agence_service.dart';import '../../services/export_service.dart';import '../../services/test_data_cleanup_service.dart';import '../../services/quick_cleanup_service.dart';import '../../services/radical_cleanup_service.dart';import '../../services/optimized_user_service.dart';import '../../services/admin_recreation_service.dart';import '../widgets/user_edit_dialog.dart';import '../widgets/user_create_dialog.dart';import '../widgets/institutional_admin_create_dialog.dart';import ';  final ScrollController _scrollController = ScrollController(';  // √âtat de l';  String _searchQuery = ';  String _selectedRole = 'Tous';  String _selectedCompagnie = 'Toutes';  String _selectedAgence = 'Toutes';  String _selectedStatus = 'Tous';  String _selectedOrigine = 'Toutes';    'Tous';    'super_admin';    'admin_compagnie';    'admin_agence';    'agent_agence';    'expert_auto';    'conducteur';    'Tous';    'actif';    'en_attente';    'desactive';    'supprime';    'Toutes';    'creation_super_admin';    ';          if (refresh';            _users = List<Map<String, dynamic>>.from(result['users]';            _users.addAll(List<Map<String, dynamic>>.from(result['users])';          _hasMoreData = result['hasMore';          _lastDocument = result[';        }';        _showErrorSnackBar(';        setState((';            {'id': 'Toutes', 'nom': ';    } catch (e';      debugPrint(';      final agenceService = AgenceService(';        compagnieId: _selectedCompagnie != ';        setState((';            {'id': 'Toutes', 'nom': ';    } catch (e';      debugPrint(';    } catch (e';      debugPrint(';      _loadMoreUsers(';  /// üìÑ Charger plus d';    debugPrint('[USERS_MANAGEMENT] üêõ === DEBUG DONN√âES UTILISATEUR ===';    debugPrint('[USERS_MANAGEMENT] üìä Filtres actuels:';    debugPrint('  - R√¥le: '_selectedRole';    debugPrint('  - Statut: '_selectedStatus';    debugPrint('  - Origine: '_selectedOrigine';    debugPrint('  - Compagnie: '_selectedCompagnie';    debugPrint('  - Recherche: "'_searchQuery"';    debugPrint('[USERS_MANAGEMENT] ÔøΩ Utilisateurs charges: ';    for (final user in _users';      final origine = user['origine'] ?? ';      origineCount[origine] = (origineCount[origine] ?? 0';    debugPrint(';    origineCount.forEach((origine, count') => debugPrint('  - "'origine": 'count)';    debugPrint(';      ';      final allUsers = directResult['users';      debugPrint('[USERS_MANAGEMENT] üìä Total en base: ';      for (final user in allUsers';        final origine = user['origine'] ?? ';        directOrigineCount[origine] = (directOrigineCount[origine] ?? 0';      debugPrint(';      directOrigineCount.forEach((origine, count') => debugPrint('  - "'origine": 'count)';      debugPrint('[USERS_MANAGEMENT] üîç Test filtre demande_professionnelle...';        origineFilter: ';      ';      final filteredUsers = filteredResult['users';      debugPrint('[USERS_MANAGEMENT] üìä Utilisateurs avec origine demande_professionnelle: ';      for (final user in filteredUsers';        debugPrint('[USERS_MANAGEMENT] üë§ Demande pro: '{user['email']} | Origine: "'{user['origine';    } catch (e';      debugPrint('[USERS_MANAGEMENT] ‚ùå Erreur test direct:  + e.toString()';    _showInfoSnackBar(';  Future<void> _debugAllUsers(';    _showInfoSnackBar(';    await UserManagementService.debugListAllUsers(';    _showInfoSnackBar(';            const SizedBox(width: 12';            const Text('Confirmation de suppression')')')';            const Text('‚Ä¢ Utilisateurs de test')')')';            const Text('‚Ä¢ Compagnies de test')')')';            const Text('‚Ä¢ Agences de test')')')';            const Text('‚Ä¢ Agents de test')')')';            const Text('‚Ä¢ Experts de test')')')';            const Text('‚Ä¢ Demandes professionnelles de test')')')';            child: const Text('Annuler')')')';            child: const Text(';    if (confirmed != true')')';      _showInfoSnackBar(';      final result = await TestDataCleanupService.cleanAllTestData(';      if (result['success]';        final totalDeleted = result['totalDeleted';        final details = result['details';        _showSuccessSnackBar('‚úÖ Nettoyage termine ! 'totalDeleted documents supprimes';        debugPrint('[CLEANUP] üìä Resultats detailles: ';        await _loadUsers(refresh: true';        _showErrorSnackBar('‚ùå Erreur lors du nettoyage: '{result['error';    } catch (e';      _showErrorSnackBar(';  Future<void> _quickCleanupTestData(';      _showInfoSnackBar(';      final result = await QuickCleanupService.quickCleanTestData(';      if (result['success]';        final totalDeleted = result['totalDeleted';        _showSuccessSnackBar('‚ö° Nettoyage rapide termine ! ';        await _loadUsers(refresh: true';        _showErrorSnackBar('‚ùå Erreur nettoyage rapide: '{result['error';    } catch (e';      _showErrorSnackBar(';  Future<void> _cleanDeletedUsers(';      _showInfoSnackBar(';      if (deleted > 0';        _showSuccessSnackBar('üóëÔ∏è deleted utilisateur(s) supprime(s) nettoye(s')';        _showInfoSnackBar(';    } catch (e';      _showErrorSnackBar(';  Future<void> _analyzeUsers(';      _showInfoSnackBar(';      final analysis = await RadicalCleanupService.analyzeUsersCollection(';      if (analysis.containsKey('error)';        _showErrorSnackBar('‚ùå Erreur analyse: '{analysis['error']}';      final total = analysis['total';      final legitimate = analysis['legitimateCount';      final test = analysis['testCount';      _showInfoSnackBar('üìä Analyse terminee: $total total, 'legitimate legitimes, 'test a supprimer';      debugPrint('[ANALYSIS] üìä === R√âSULTATS ANALYSE ===';      debugPrint('[ANALYSIS] Total: 'total';      debugPrint('[ANALYSIS] Legitimes: 'legitimate';      debugPrint('[ANALYSIS] √Ä supprimer: ';    } catch (e';      _showErrorSnackBar(';            const SizedBox(width: 12';            const Text('NETTOYAGE RADICAL')')')';            const Text('Cette action va :')')')';            const Text('üî• SUPPRIMER TOUS les utilisateurs de test')')')';            const Text('üî• SUPPRIMER TOUS les utilisateurs non legitimes')')')';            const Text('‚úÖ GARDER SEULEMENT les Admin Compagnie reels')')')';            child: const Text('Annuler')')')';            child: const Text(';    if (confirmed != true')')';      _showInfoSnackBar(';      final result = await RadicalCleanupService.keepOnlyLegitimateAdmins(';      if (result['success]';        final kept = result['kept';        final deleted = result['deleted';        _showSuccessSnackBar('üî• Nettoyage radical termine ! 'kept gardes, ';        await _loadUsers(refresh: true';        _showErrorSnackBar('‚ùå Erreur nettoyage radical: '{result['error';    } catch (e';      _showErrorSnackBar(';  Future<void> _simpleCleanup(';      _showInfoSnackBar('üßπ Nettoyage simple en cours...';      final snapshot = await FirebaseFirestore.instance.collection(';        final data = doc.data(';        final email = data['email'] as String? ?? ';        final status = data['status'] as String? ?? ';        final role = data['role'] as String? ?? ';        if (status == 'supprime';          debugPrint('[SIMPLE_CLEANUP] üóëÔ∏è Suppression statut supprime: 'email';        if (data['isFakeData] == true';          debugPrint('[SIMPLE_CLEANUP] üóëÔ∏è Suppression fake data: 'email';        if (email.contains('icyzx6kjr4qz8lumcbup') || email.contains('hxbsdjkf1ujbmh6d5tnd)';          debugPrint('[SIMPLE_CLEANUP] üóëÔ∏è Suppression ID genere: ';          await doc.reference.delete(';          debugPrint('[SIMPLE_CLEANUP] ‚úÖ Supprime: '{doc.id} (email')';      _showSuccessSnackBar('üßπ Nettoyage termine ! deleted utilisateur(s) supprime(s')';      _showErrorSnackBar(';      setState(() => _isLoading = true';      _showInfoSnackBar(';      final stopwatch = Stopwatch()..start(';        limit: 50, // Plus d';          _users = List<Map<String, dynamic>>.from(result['users]';          _hasMoreData = result['hasMore';          _lastDocument = result[';        }';        final processingTime = result['processingTime';        _showSuccessSnackBar('‚ö° Charge en '{processingTime}ms - ';        setState(() => _isLoading = false';        _showErrorSnackBar(';    final cacheInfo = OptimizedUserService.getCacheInfo(';    _showInfoSnackBar('üóëÔ∏è Cache vide - '{cacheInfo['compagnies']} compagnies, '{cacheInfo['agences']} agences';  /// üìä Verifier l';      _showInfoSnackBar(';      final status = await AdminRecreationService.checkAdminStatus(';      if (status.containsKey('error)';        _showErrorSnackBar('‚ùå Erreur verification: '{status['error']}';      final existing = status['existing_admins';      final missing = status['missing_admins';      final total = status['total_companies';      _showInfoSnackBar('üìä √âtat: $existing/'total Admin Compagnie presents, 'missing manquants';      debugPrint('[ADMIN_STATUS] üìä === √âTAT DES ADMIN COMPAGNIE ===';      debugPrint('[ADMIN_STATUS] Total compagnies: 'total';      debugPrint('[ADMIN_STATUS] Admins existants: 'existing';      debugPrint('[ADMIN_STATUS] Admins manquants: 'missing';      debugPrint('[ADMIN_STATUS] Existants: '{status['existing_list']}';      debugPrint('[ADMIN_STATUS] Manquants: '{status['missing_list';    } catch (e';      _showErrorSnackBar(';  Future<void> _recreateAdmins(';      _showInfoSnackBar(';      final result = await AdminRecreationService.recreateAllAdmins(';      if (result['success]';        final created = result['created';        final existing = result['existing';        final total = result['total';        _showSuccessSnackBar('üîÑ Recreation terminee ! "created crees, 'existing existants sur ';        await _loadUsers(refresh: true';        debugPrint('[ADMIN_RECREATION] ‚úÖ === RECR√âATION TERMIN√âE ===';        debugPrint('[ADMIN_RECREATION] Crees: '{result['createdAdmins']}';        debugPrint('[ADMIN_RECREATION] Existants: '{result['existingAdmins']}';        _showErrorSnackBar('‚ùå Erreur recreation: '{result['error';    } catch (e';      _showErrorSnackBar(';      await UserManagementService.createTestUserDemandePro(';      _showSuccessSnackBar(';    } catch (e';      _showErrorSnackBar(';  void _onFiltersChanged(';    if (_selectedCompagnie != ';      setState((';        _selectedAgence = 'Toutes';        _agences = [{'id': 'Toutes', 'nom': ';    switch (action';      case ';        _exportCurrentList(';      case ';        _enterSelectionMode(';      case ';        _debugUserData(';      case ';        _debugAllUsers(';      case ';        _cleanupTestData(';      case ';        _quickCleanupTestData(';      case ';        _cleanDeletedUsers(';      case ';        _radicalCleanup(';      case ';        _analyzeUsers(';      case ';        _simpleCleanup(';      case ';        _loadOptimizedUsers(';      case ';        _clearCache(';      case ';        _recreateAdmins(';      case ';        _checkAdminStatus(';      case ';            ? ({_selectedUserIds.length} selectionne(s')';                tooltip: ';                  onPressed: () => Scaffold.of(context).openDrawer(';                  tooltip: ';              _loadUsers(refresh: true';            tooltip: _includeTestData ? 'Masquer donnees de test' : ';            onPressed: () => _loadUsers(refresh: true';            tooltip: ';                    const SizedBox(width: 12';                    const Text('Exporter')')')';                    const Text('Selection multiple')')')';                    const Text('Debug Filtres')')')';                    const Text('Debug Firestore')')')';                    const Text('Test User')')')';              'Total';              ''{_stats['total';          ';              'Actifs';              ''{_stats['actif';          ';              'En attente';              ''{_stats['en_attente';          const SizedBox(height: 12';                  'R√¥le: ';                  (') => _showFilterDialog('role';                  _selectedRole != ';                const SizedBox(width: 8';                  'Statut: ';                  (') => _showFilterDialog('statut';                  _selectedStatus != ';                const SizedBox(width: 8';                  'Compagnie: ';                  (') => _showFilterDialog('compagnie';                  _selectedCompagnie != ';                const SizedBox(width: 8';                  'Origine: ';                  (') => _showFilterDialog('origine';                  _selectedOrigine != ';                ';                if (_selectedCompagnie != ';                  const SizedBox(width: 8';                    'Agence: ';                    (') => _showFilterDialog('agence';                    _selectedAgence != ';  Widget _buildModernUserCard(Map<String, dynamic> user, int index';    final userId = user['uid'] ?? user['id'] ?? ';                    backgroundColor: ModernTheme.primaryColor.withValues(alpha: 0.1';                      (user['displayName'] ?? user['email'] ?? ';                          ';                          _buildStatusBadge(user['status'] ?? ';                      const SizedBox(height: 4';                      if (user[';                      const SizedBox(height: 8';                            user['role'] ?? ';                          ';                          if (user['compagnieNom] != null';                              user[';                            ';                          if (user['origine'] == 'demande_professionnelle';                              ';                            const SizedBox(width: 8';                            const Text('Modifier')')')';                      if (user['status'] == ';                        ';                      if (user['status'] == ';    switch (status';      case 'actif';      case 'en_attente';      case 'desactive';      case ';    ';  /// üè∑Ô∏è Tag d';    // Recuperer l'ID utilisateur (peut √™tre 'uid' ou 'id';    final userId = user['uid'] ?? user[';    if (userId == null';      _showErrorSnackBar(';    switch (action';      case ';        _editUser(user';      case ';        _disableUser(userId';      case ';        _enableUser(userId';      case 'delete';        _deleteUser(userId, user['displayName'] ?? user['email'] ?? ';          if (_stats.isNotEmpty';                _buildStatChip('Total', _stats['total] ?? 0, Colors.blue';                _buildStatChip('Actifs', _stats['actifs] ?? 0, Colors.green';                _buildStatChip('En attente', _stats['en_attente] ?? 0, Colors.orange';                _buildStatChip('Desactives', _stats[';                    icon: const Icon(Icons.info';                    label: const Text('Effacer')')')';                      hintText: ';                                _searchController.clear(';                                _onSearchChanged(';                  builder: (context, constraints';                          label: ';                          onTap: (') => _showFilterDialog(';                        ';                          label: 'Compagnie';                          value: _selectedCompagnie == 'Toutes' ? ';                          onTap: (') => _showFilterDialog(';                        ';                          label: 'Agence';                          value: _selectedAgence == 'Toutes' ? ';                          onTap: (') => _showFilterDialog(';                        ';                          label: ';                          onTap: (') => _showFilterDialog(';                        ';                          label: ';                          onTap: (') => _showFilterDialog(';                        const SizedBox(width: 8';                        ({_users.length > 1 ? 's' : ';  }';    final isActive = value != 'Tous' && value != ';            ({value.substring(0, 12')}...';    return _selectedRole != 'Tous';           _selectedCompagnie != 'Toutes';           _selectedAgence != 'Toutes';           _selectedStatus != 'Tous';           _selectedOrigine != ';    setState((';      _selectedRole = 'Tous';      _selectedCompagnie = 'Toutes';      _selectedAgence = 'Toutes';      _selectedStatus = 'Tous';      _selectedOrigine = 'Toutes';      _searchQuery = ';  String _getCompagnieNameById(String id';    if (id == 'Toutes') return ';      (c') => c[';      orElse: (') => {'nom': ';    ';    return compagnie['nom'] ?? 'Inconnue';  String _getAgenceNameById(String id';    if (id == 'Toutes') return ';      (a') => a[';      orElse: (') => {'nom': ';    ';    return agence['nom'] ?? 'Inconnue';    switch (origine';      case 'creation_super_admin';        return 'Super Admin';      case 'demande_professionnelle';        return 'Demande Pro';      case 'import_manuel';        return 'Import';      case 'test';        return 'Test';        return ';    switch (filterType';      case 'role';      case 'compagnie';        options = ['Toutes] + _compagnies.map((c') => c['id] as String).toList(';        labels = ['Toutes] + _compagnies.map((c') => c['nom] as String).toList(';      case 'agence';        options = ['Toutes] + _agences.map((a') => a['id] as String).toList(';        labels = ['Toutes] + _agences.map((a') => a['nom] as String).toList(';      case 'statut';      case 'origine';          'Toutes';          'Creation Super Admin';          ';      builder: (context';        title: ({filterType}';            child: const Text('Annuler')')')';          case 'role';          case 'compagnie';            if (result != ';              _loadAgences(';              _selectedAgence = 'Toutes';          case 'agence';          case 'statut';          case ';      _onFiltersChanged(';  /// üëÅÔ∏è Afficher les details de l';    final status = user['status'] ?? 'en_attente';    final role = user['role'] ?? 'conducteur';    final userId = user[';    switch (status';      case 'actif';      case 'en_attente';      case 'desactive';      case ';                  backgroundColor: ModernTheme.primaryColor.withValues(alpha: 0.1';                    (user['displayName'] ?? user['email'] ?? ';                ';                // Menu d';                    if (status == ';                            const SizedBox(width: 8';                            const Text('Approuver')')')';                          const Text('Modifier')')')';                    if (status == ';                            const SizedBox(width: 8';                            const Text('Desactiver')')')';                    if (status == ';                            const SizedBox(width: 8';                            const Text('Reactiver')')')';                    if (status != ';                            const SizedBox(width: 8';                            const Text('Supprimer')')')';                _buildInfoChip('R√¥le, _getRoleLabel(role), Icons.person';                if (user['compagnieNom'] != null || user['compagnieId] != null';                  _buildInfoChip('Compagnie', user['compagnieNom'] ?? 'ID: '{user['compagnieId']}, Icons.domain';                if (user['agenceNom'] != null || user['agenceId] != null';                  _buildInfoChip('Agence', user['agenceNom'] ?? 'ID: '{user['agenceId']}, Icons.business';                if (user['telephone] != null';                  _buildInfoChip('Telephone', user['telephone], Icons.phone';                // Badge d';                if (user['origine'] == 'demande_professionnelle';                  _buildOrigineBadge(user[';    ';  /// üìã Chip d';    ';  /// üè∑Ô∏è Badge d';  void _navigateToRequest(String requestId';      '/admin/professional-requests';      arguments: {';    switch (status';      case 'actif';        return 'Actif';      case 'en_attente';        return 'En attente';      case 'desactive';        return 'Desactive';      case 'supprime';        return 'Supprime';        return ';    switch (role';      case 'super_admin';        return 'Super Admin';      case 'admin_compagnie';        return 'Admin Compagnie';      case 'admin_agence';        return 'Admin Agence';      case 'agent_agence';        return 'Agent';      case 'expert_auto';        return 'Expert Auto';      case 'conducteur';        return 'Conducteur';        return ';      if (error == null';        _showSuccessSnackBar(';    if (result == true';      _showSuccessSnackBar(';      if (error == null';        _showSuccessSnackBar(';      if (error == null';        _showSuccessSnackBar(';      builder: (context';        title: const Text('Confirmer la suppression')')')';            onPressed: () => Navigator.pop(context, false';            child: const Text('Annuler')')')';            child: const Text(';        if (error == null')')';          _showSuccessSnackBar(';  Future<void> _createUser(';    // Afficher un menu de choix du type d';        title: const Text('Creer un utilisateur')')')';        content: const Text('Quel type d\')')')';            onPressed: () => Navigator.of(context).pop(';            child: const Text('Annuler')')')';            onPressed: () => Navigator.of(context).pop(';            ';            child: const Text('Admin Compagnie')')')';            onPressed: () => Navigator.of(context).pop(';            ';            child: const Text('Autre Utilisateur')')')';    if (userType == ';      ';      // Utiliser l';      debugPrint(';        ScaffoldMessenger.of(context';            content: const Text('‚úÖ Utilisateur cree avec succes')')')';      _showSuccessSnackBar(';                    Navigator.pop(context';                    Navigator.pushReplacementNamed(context, ';                ';                  title: ';                    Navigator.pop(context';                    Navigator.pushNamed(context, ';                ';                  title: ';                    Navigator.pop(context';                    Navigator.pushNamed(context, ';                ';                  title: ';                ';                  title: ';                    Navigator.pop(context';                    Navigator.pushNamed(context, ';                ';                  title: ';                ';                  title: 'Logs d\';                    Navigator.pop(context';                    Navigator.pushNamed(context, ';                ';                  title: 'Quitter l\';                    Navigator.pop(context';                    Navigator.pushReplacementNamed(context, ';      ';      title: const Text('Titre')')')';          icon: const Icon(Icons.info';          tooltip: ';          icon: const Icon(Icons.info';          tooltip: ';        ';        // Menu plus d';                  const Text('Reactiver')')')';                  const Text('Supprimer')')')';                  const Text('Changer de compagnie')')')';        tooltip: ';      for (final user in _users';        _selectedUserIds.add(user[';    if (_selectedUserIds.isEmpty';      'Approuver {_selectedUserIds.length} utilisateur(s')';      ';        if (errorCount == 0';          _showSuccessSnackBar('successCount utilisateur(s) approuve(s') avec succes';          _showErrorSnackBar(''successCount reussis, ';    if (_selectedUserIds.isEmpty';      'Desactiver {_selectedUserIds.length} utilisateur(s')';      ';        if (errorCount == 0';          _showSuccessSnackBar('successCount utilisateur(s) desactive(s') avec succes';          _showErrorSnackBar(''successCount reussis, ';    switch (action';      case ';        await _bulkEnable(';      case ';        await _bulkDelete(';      case ';    if (_selectedUserIds.isEmpty';      'Reactiver {_selectedUserIds.length} utilisateur(s')';      ';        if (errorCount == 0';          _showSuccessSnackBar('successCount utilisateur(s) reactive(s') avec succes';          _showErrorSnackBar(''successCount reussis, ';    if (_selectedUserIds.isEmpty';      'Supprimer {_selectedUserIds.length} utilisateur(s')';      ';        if (errorCount == 0';          _showSuccessSnackBar('successCount utilisateur(s) supprime(s') avec succes';          _showErrorSnackBar(''successCount reussis, ';    if (_selectedUserIds.isEmpty';    _showInfoSnackBar(';            onPressed: () => Navigator.pop(context, false';            child: const Text('Annuler')')')';            child: const Text(';    ')')';  /// üìä Gerer les actions d';      case ';        await _exportCurrentList(';      case ';        await _exportStats(';      case ';    if (_users.isEmpty';      _showErrorSnackBar(';      if (filePath != null';        _showSuccessSnackBar('Export reussi: '{filePath.split('/').last}';        _showErrorSnackBar('Erreur lors de l\';    } catch (e';      _showErrorSnackBar('Erreur lors de l\';    if (_stats.isEmpty';      _showErrorSnackBar(';      if (filePath != null';        _showSuccessSnackBar('Export des statistiques reussi: '{filePath.split('/').last}';        _showErrorSnackBar('Erreur lors de l\';    } catch (e';      _showErrorSnackBar('Erreur lors de l\';    if (_users.isEmpty || _stats.isEmpty';      _showErrorSnackBar(';      if (filePath != null';        _showSuccessSnackBar('Rapport detaille cree: '{filePath.split('/').last}';        _showErrorSnackBar(';    } catch (e';      _showErrorSnackBar('Erreur lors de la creation du rapport:  + e.toString()';