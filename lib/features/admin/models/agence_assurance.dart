import 'package:cloud_firestore/cloud_firestore.dart';/// üè¨ Modele pour une agence d';  final String compagnieNom; // Nom de la compagnie (denormalise';  final String? responsable; // Nom du responsable de l';      nom: data['nom'] ?? ';      code: data['code'] ?? ';      compagnieId: data['compagnieId'] ?? ';      compagnieNom: data['compagnieNom'] ?? ';      adresse: data['adresse'] ?? ';      ville: data['ville'] ?? ';      gouvernorat: data['gouvernorat'] ?? ';      telephone: data['telephone';      email: data['email';      responsable: data['responsable';      zone: data['zone';      dateCreation: (data['dateCreation] as Timestamp?)?.toDate() ?? DateTime.now(';      dateModification: (data['dateModification] as Timestamp?)?.toDate(';      isActive: data['isActive'] ?? data['active';      metadata: data[';  Map<String, dynamic> toFirestore(';      'nom';      'code';      'compagnieId';      'compagnieNom';      'adresse';      'ville';      'gouvernorat';      'telephone';      'email';      'responsable';      'zone';      'dateCreation: Timestamp.fromDate(dateCreation';      'dateModification: dateModification != null ? Timestamp.fromDate(dateModification!';      'isActive';      ';    if (nom.trim().isEmpty';      return 'Le nom de l\';    if (nom.trim().length < 3';      return ';    if (code.trim().isEmpty';      return 'Le code de l\';    if (compagnieId.trim().isEmpty';      return ';    if (adresse.trim().isEmpty';      return 'L\';    if (ville.trim().isEmpty';      return ';    if (gouvernorat.trim().isEmpty';      return ';    if (email != null && email!.isNotEmpty';      final emailRegex = RegExp(r'^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}';      if (!emailRegex.hasMatch(email!)';        return 'Format d\'email invalide';  String toString(';    return 'AgenceAssurance(id: $id, nom: $nom, ville: $ville, compagnieId: compagnieId';