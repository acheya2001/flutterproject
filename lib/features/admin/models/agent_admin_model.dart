import 'package:cloud_firestore/cloud_firestore.dart';/// 👨‍💼 Modele unifie pour un agent dassurance (Admin System';  final String poste; // Agent Commercial, Conseiller, Chef d';  final String? createdBy; // ID de l';  (1')';      case 'actif';        return '🟢 Actif';      case 'suspendu';        return '🟡 Suspendu';      case 'inactif';        return '🔴 Inactif';      case 'en_formation';        return '🔵 En Formation';        return '⚪ ';    if (specialites.isEmpty') return 'Aucune specialite';    return specialites.join(', ';  /// Verifier si l';    switch (action';      case 'create_contract';        return peutCreerContrats && hasPermission('creer_contrats';      case 'validate_claim';        return peutValiderSinistres && hasPermission('valider_sinistres';      case 'manage_clients';        return peutGererClients && hasPermission(';  Map<String, dynamic> toFirestore(';      'userId';      'email';      'nom';      'prenom';      'telephone';      'adresse';      'compagnieId';      'compagnieNom';      'agenceId';      'agenceNom';      'matricule';      'poste';      'cin';      'dateEmbauche';      'statut';      'specialites';      'permissions';      'peutCreerContrats';      'peutValiderSinistres';      'peutGererClients';      'commission';      'objectifs';      'statistiques';      'dateCreation: Timestamp.fromDate(dateCreation';      'dateModification: dateModification != null ? Timestamp.fromDate(dateModification!';      'isActive';      'createdBy';      'modifiedBy';      ';  factory AgentAdmin.fromMap(Map<String, dynamic> data, String id';      userId: data['userId'] ?? ';      email: data['email'] ?? ';      nom: data['nom'] ?? ';      prenom: data['prenom'] ?? ';      telephone: data['telephone'] ?? ';      adresse: data['adresse';      compagnieId: data['compagnieId'] ?? ';      compagnieNom: data['compagnieNom'] ?? ';      agenceId: data['agenceId'] ?? ';      agenceNom: data['agenceNom'] ?? ';      matricule: data['matricule'] ?? ';      poste: data['poste'] ?? ';      cin: data['cin';      dateEmbauche: data['dateEmbauche';          ? (data['dateEmbauche] as Timestamp).toDate(';      statut: data['statut'] ?? 'actif';      specialites: List<String>.from(data['specialites] ?? [';      permissions: List<String>.from(data['permissions] ?? [';      peutCreerContrats: data['peutCreerContrats';      peutValiderSinistres: data['peutValiderSinistres';      peutGererClients: data['peutGererClients';      commission: data['commission]?.toDouble(';      objectifs: Map<String, dynamic>.from(data['objectifs';      statistiques: Map<String, dynamic>.from(data['statistiques';      dateCreation: data['dateCreation';          ? (data[';          : DateTime.now(';      dateModification: data['dateModification';          ? (data['dateModification] as Timestamp).toDate(';      isActive: data['isActive';      createdBy: data['createdBy';      modifiedBy: data['modifiedBy';      metadata: data['metadata';          ? Map<String, dynamic>.from(data[';    if (email.isEmpty') return 'L\';    if (nom.isEmpty') return ';    if (prenom.isEmpty') return ';    if (telephone.isEmpty') return ';    if (compagnieId.isEmpty') return ';    if (agenceId.isEmpty') return 'L\';    if (matricule.isEmpty') return ';    if (poste.isEmpty') return 'Le poste est requis';    if (!RegExp(r^[\w-\.]+@([\w-]+\.')+[\w-]{2,4}').hasMatch(email)';      return 'Format d\'email invalide';    if (!RegExp(r'^[2-9]\d{7}'').hasMatch(telephone.replaceAll(RegExp(r'[\s\-\(\)]'), ')';      return 'Format de telephone invalide';    'Agent Commercial';    'Conseiller Clientele';    'Chef d\'Équipe';    'Responsable Agence';    'Inspecteur';    'Gestionnaire Sinistres';    'Assurance Auto';    'Assurance Habitation';    'Assurance Vie';    'Assurance Sante';    'Assurance Professionnelle';    'Assurance Voyage';    'creer_contrats';    'modifier_contrats';    'valider_sinistres';    'gerer_clients';    'voir_rapports';    'exporter_donnees';    'actif';    'suspendu';    'inactif';    ';