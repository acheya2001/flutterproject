import 'package:flutter/material.dart';import '../../services/employe_management_service.dart';    setState(() => _isLoading = true';      await EmployeManagementService.toggleEmployeStatus(widget.employe[';      if (mounted';        final newStatus = widget.employe['status'] == 'actif' ? 'inactif' : ';        ScaffoldMessenger.of(context';            content: ({newStatus == 'actif' ? 'active' : 'desactive';        ScaffoldMessenger.of(context';            content: (e';        title: const Text('üîë Reinitialiser le mot de passe')')';        content: ({widget.employe['email';            onPressed: () => Navigator.pop(context, false';            child: const Text(';            onPressed: () => Navigator.pop(context, true')')';            child: const Text(';      setState(() => _isLoading = true')')';          widget.employe['id';          widget.employe[';          ScaffoldMessenger.of(context';              content: const Text(';          ScaffoldMessenger.of(context')')';              content: (e';    final role = employe['role]?.toString(') ?? ';    final status = employe['status]?.toString().toLowerCase(') ?? 'actif';    final isActive = status == 'actif';    final isFakeData = employe[';                  const SizedBox(width: 16';                        ({employe['nom'] ?? ';                indicatorColor: EmployeManagementService.getRoleColor(role';                    text: ';                    icon: const Icon(Icons.info';                    text: ';                    icon: const Icon(Icons.info';                    text: ';  Widget _buildProfilTab(';            _buildInfoItem('Nom', employe['nom';            _buildInfoItem('Email', employe['email';            _buildInfoItem('Telephone', employe['phone';            _buildInfoItem('CIN', employe['cin';            _buildInfoItem('Adresse', employe[';          const SizedBox(height: 20';          _buildInfoSection('üìÖ Dates importantes';            _buildInfoItem('Date de naissance', employe['date_naissance';            _buildInfoItem('Cree le', _formatDate(employe['created_at])';            _buildInfoItem('Modifie le', _formatDate(employe['updated_at])';            _buildInfoItem('Derniere connexion', _formatDate(employe[';  Widget _buildProfessionnelTab(';    final agenceId = employe['agenceId';    // Trouver les informations de l';    String agenceNom = 'Non assigne';    String agenceVille = ';        (a') => a[';      ';      agenceNom = agence['nom'] ?? 'Agence inconnue';      agenceVille = agence['ville'] ?? ';            _buildInfoItem('Statut', employe['status'] == 'actif' ? 'Actif' : 'Inactif';            _buildInfoItem(';            if (agenceVille.isNotEmpty';              _buildInfoItem('Ville agence, agenceVille';            _buildInfoItem('Date d\'embauche', employe['date_embauche';            _buildInfoItem('Salaire', employe['salaire'] != null ? ''{employe['salaire';          const SizedBox(height: 20';          _buildInfoSection('üîê Securite';            _buildInfoItem('Reinitialisation requise', employe['password_reset_required'] == true ? 'Oui' : 'Non';            _buildInfoItem('Reinitialisation envoyee', _formatDate(employe['password_reset_sent_at])';            _buildInfoItem('Cree par', employe[';          const SizedBox(height: 20';          _buildInfoSection('üß™ Metadonnees';            _buildInfoItem('Type de donnees', employe['isFakeData'] == true ? 'Donnees de test' : 'Donnees reelles';            _buildInfoItem('ID utilisateur', employe['id';            _buildInfoItem('UID Firebase', employe[';  Widget _buildActionsTab(';    final isActive = employe['status'] == 'actif';    final isFakeData = employe[';          const SizedBox(height: 16';            title: isActive ? 'Desactiver l\'employe' : 'Activer l\'employe';                ? 'L\'employe ne pourra plus se connecter';                : 'L\';          const SizedBox(height: 12';            title: 'Reinitialiser le mot de passe';            description: ';            // Action supprimer (donnees de test uniquement';              title: 'Supprimer l\'employe';              description: Suppression definitive (donnees de test uniquement')';    ';  /// üìù √âlement d';              value?.toString() ?? ';    ';  /// üéØ Carte d';      if (timestamp == null) return ';      } else if (timestamp.runtimeType.toString(').contains(';        date = timestamp.toDate(';        return 'Format invalide';      return '{date.day.toString(').padLeft(2, '0')}/'{date.month.toString().padLeft(2, '0')}/"{date.year} a '{date.hour.toString().padLeft(2, '0')}:'{date.minute.toString().padLeft(2, '0')}';      return ';