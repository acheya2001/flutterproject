import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/material.dart';import 'permission_service.dart';    String? roleFilter, // 'agent', 'conducteur', 'expert', 'admin_agence';    String? statusFilter, // 'actif', ';  }';          .collection('users';          .where('compagnieId, isEqualTo: compagnieId';      // Filtrer les r√¥les gerables par l';      query = query.where('role, whereIn: manageableRoles';      if (roleFilter != null && roleFilter != 'tous';        query = query.where('role, isEqualTo: roleFilter';      if (statusFilter != null && statusFilter != 'tous';        query = query.where('status, isEqualTo: statusFilter';      if (agenceFilter != null && agenceFilter != 'toutes';        query = query.where(';      if (!includeTestData';        query = query.where(';      query = query.limit(limit').orderBy(';          final data = doc.data(';          data[';            final searchLower = searchQuery.toLowerCase(';            final nom = (data['nom'] ?? ').toString().toLowerCase(';            final prenom = (data['prenom'] ?? ').toString().toLowerCase(';            final email = (data['email'] ?? ').toString().toLowerCase(';            final phone = (data['phone'] ?? ';    } catch (e';      debugPrint(';      if (!await PermissionService.canManageUser(employeId)';        debugPrint('[EMPLOYE_MANAGEMENT] ‚ùå Acces refuse a l\'employe: 'employeId';          .collection(';      final data = doc.data(';      data[';    } catch (e';      debugPrint(';      if (!await PermissionService.canAccessCompagnie(compagnieId)';        throw Exception('Acces refuse a cette compagnie';      final email = employeData['email';      final defaultPassword = password ?? ';        if (authError.toString(').contains('email-already-in-use)';          throw Exception('Cette adresse email est deja utilisee';        throw Exception('Erreur creation compte: ';      if (user == null';        throw Exception('√âchec de creation du compte';        'compagnieId';        'status': 'actif';        'created_at: FieldValue.serverTimestamp(';        'updated_at: FieldValue.serverTimestamp(';        'created_by';        'isFakeData': false, // Vraie donnee creee par l';        'last_login';        'password_reset_required';      await _firestore.collection('users).doc(user.uid).set(data';      // Se deconnecter du compte cree pour revenir a l';      debugPrint('[EMPLOYE_MANAGEMENT] ‚úÖ Employe cree: ';    } catch (e';      debugPrint('[EMPLOYE_MANAGEMENT] ‚ùå Erreur creation:  + e.toString()';      // Se deconnecter en cas d';        debugPrint('[EMPLOYE_MANAGEMENT] ‚ùå Erreur deconnexion: ';      if (!await PermissionService.canManageUser(employeId)';        throw Exception('Acces refuse a cet employe';        'updated_at: FieldValue.serverTimestamp(';          .collection(';          .update(data';      debugPrint('[EMPLOYE_MANAGEMENT] ‚úÖ Employe modifie: ';    } catch (e';      debugPrint('[EMPLOYE_MANAGEMENT] ‚ùå Erreur modification:  + e.toString()';  /// üîÑ Changer le statut d';        throw Exception('Acces refuse a cet employe';          .collection(';      if (!doc.exists';        throw Exception(';      final currentStatus = doc.data(')!['status'] ?? 'actif';      final newStatus = currentStatus == 'actif' ? 'inactif' : 'actif';          .collection(';          .doc(employeId';        'status';        ';      }';      debugPrint('[EMPLOYE_MANAGEMENT] ‚úÖ Statut employe change: $employeId -> ';    } catch (e';      debugPrint('[EMPLOYE_MANAGEMENT] ‚ùå Erreur changement statut:  + e.toString()';  /// üîë Reinitialiser le mot de passe d';        throw Exception('Acces refuse a cet employe';      // Envoyer l';          .collection(';          .doc(employeId';        'password_reset_required';        'password_reset_sent_at: FieldValue.serverTimestamp(';        ';      }';      debugPrint('[EMPLOYE_MANAGEMENT] ‚úÖ Reinitialisation mot de passe: ';    } catch (e';      debugPrint(';      if (!await PermissionService.canManageUser(employeId)';        throw Exception('Acces refuse a cet employe';          .collection(';      if (!doc.exists';        throw Exception(';      final data = doc.data(';      final isFakeData = data[';      if (!isFakeData';        throw Exception(';      await doc.reference.delete(';      debugPrint('[EMPLOYE_MANAGEMENT] ‚úÖ Employe supprime: ';    } catch (e';      debugPrint(';  static Future<Map<String, dynamic>> getEmployesStats(String compagnieId';          .collection('users';          .where('compagnieId, isEqualTo: compagnieId';          .where(';        final data = doc.data(';        final role = data['role';        final status = data['status';        final isFakeData = data['isFakeData';        if (status == ';        switch (role';          case 'agent';          case 'conducteur';          case 'expert';          case 'admin_agence';        'total';        'agents';        'conducteurs';        'experts';        'adminAgences';        'actifs';        'inactifs';        'testData';        ';    } catch (e';      debugPrint('[EMPLOYE_MANAGEMENT] ‚ùå Erreur stats:  + e.toString()';        'total';        'agents';        'conducteurs';        'experts';        'adminAgences';        'actifs';        'inactifs';        'testData';        ';  static Future<List<Map<String, dynamic>>> getCompagnieAgences(String compagnieId';          .collection('agences_assurance';          .where('compagnie_id, isEqualTo: compagnieId';          .where('status', isEqualTo: 'actif';          .orderBy(';        final data = doc.data(';        data[';    } catch (e';      debugPrint('[EMPLOYE_MANAGEMENT] ‚ùå Erreur agences:  + e.toString()';  /// üìã Valider les donnees d';    if (data['email'] == null || data['email].toString().trim().isEmpty';      return 'L\'email est requis';    final email = data['email].toString(';    if (!RegExp(r'^[^@]+@[^@]+\.[^@]+').hasMatch(email)';      return 'Format d\'email invalide';    if (data['nom'] == null || data['nom].toString().trim().isEmpty';      return 'Le nom est requis';    if (data['prenom'] == null || data['prenom].toString().trim().isEmpty';      return 'Le prenom est requis';    if (data['role'] == null || data['role].toString().trim().isEmpty';      return 'Le r√¥le est requis';    final role = data[';    if (!PermissionService.canManageRole(role)';      return 'R√¥le non autorise';    if (data['phone'] != null && data['phone].toString().isNotEmpty';      final phone = data['phone].toString(';      if (!RegExp(r'^\+216\s?\d{2}\s?\d{3}\s?\d{3}').hasMatch(phone)';        return 'Format de telephone invalide (ex: +216 20 123 456)';    if (data['cin'] != null && data['cin].toString().isNotEmpty';      final cin = data['cin].toString(';      if (!RegExp(r'^\d{8}').hasMatch(cin)';        return ';    switch (role';      case ';        return const Color(0xFF8B5CF6';      case ';        return const Color(0xFF3B82F6';      case ';        return const Color(0xFFF59E0B';      case ';        return const Color(0xFF6B7280';  /// üéØ Obtenir l';      case 'admin_agence';      case 'agent';      case 'conducteur';      case 'expert';    switch (role';      case 'admin_agence';        return 'Admin Agence';      case 'agent';        return 'Agent';      case 'conducteur';        return 'Conducteur';      case 'expert';        return 'Expert';        return ';