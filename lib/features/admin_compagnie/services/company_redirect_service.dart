import 'package:flutter/foundation.dart';import ';  static Future<String?> getCompanyDashboardRoute(String userId';      debugPrint('[COMPANY_REDIRECT] üîç Recherche route pour utilisateur: 'userId';          .collection(';      if (!userDoc.exists';        debugPrint(';      final userData = userDoc.data(';      final role = userData['role';      final compagnieId = userData['compagnieId';      if (role != 'admin_compagnie';        debugPrint('[COMPANY_REDIRECT] ‚ö†Ô∏è Utilisateur n\'est pas admin_compagnie: ';      if (compagnieId == null || compagnieId.isEmpty';        debugPrint('[COMPANY_REDIRECT] ‚ùå CompagnieId manquant pour admin_compagnie';          .collection(';      if (!compagnieDoc.exists';        debugPrint('[COMPANY_REDIRECT] ‚ùå Compagnie non trouvee: ';      final compagnieData = compagnieDoc.data(';      final compagnieNom = compagnieData['nom';      debugPrint('[COMPANY_REDIRECT] ‚úÖ Redirection vers dashboard: $compagnieNom (compagnieId')';      return '/compagnie-dashboard/';    } catch (e';      debugPrint('[COMPANY_REDIRECT] ‚ùå Erreur redirection:  + e.toString()';  /// üîê Verifier si l';        debugPrint('[COMPANY_REDIRECT] ‚ùå Aucun utilisateur connecte';          .collection(';      if (!userDoc.exists';        debugPrint(';      final userData = userDoc.data(';      final userRole = userData['role';      final userCompagnieId = userData['compagnieId';      if (userRole == 'super_admin';        debugPrint('[COMPANY_REDIRECT] ‚úÖ Acces Super Admin autorise';      // Admin compagnie ne peut acceder qu';      if (userRole == 'admin_compagnie';        debugPrint('[COMPANY_REDIRECT] ${hasAccess ? "‚úÖ" : "‚ùå"`} Acces admin_compagnie: "userCompagnieId vs 'compagnieId';      debugPrint('[COMPANY_REDIRECT] ‚ùå R√¥le non autorise: ';    } catch (e';      debugPrint('[COMPANY_REDIRECT] ‚ùå Erreur verification acces:  + e.toString()';  /// üìä Obtenir les informations de la compagnie de l';          .collection(';      final userData = userDoc.data(';      final compagnieId = userData[';      if (compagnieId == null';          .collection(';      final compagnieData = compagnieDoc.data(';        'id';        'nom': compagnieData['nom';        'code': compagnieData['code';        'logo': compagnieData['logo';        'couleur': compagnieData['couleur';        'userRole': userData['role';        'userEmail': userData['email';        'userNom': userData['nom';        'userPrenom': userData[';    } catch (e';      debugPrint(';  static Future<bool> validateCompanyAccess(String compagnieId';      // Verifier l';        debugPrint('[COMPANY_REDIRECT] üö´ ACC√àS REFUS√â a la compagnie: 'compagnieId';          action: 'unauthorized_company_access_attempt';          reason: 'Tentative d\';        ';      debugPrint('[COMPANY_REDIRECT] ‚úÖ Acces autorise a la compagnie: ';    } catch (e';      debugPrint(';  }';      await _firestore.collection('security_logs';        'action';        'compagnieId';        'reason';        'userId';        'userEmail';        'timestamp: FieldValue.serverTimestamp(';        'severity': 'HIGH';        'type': ';    } catch (e';      debugPrint(';      if (currentUser == null';        return '/login';          .collection(';      if (!userDoc.exists';        return ';      final userData = userDoc.data(';      final role = userData[';      switch (role';        case 'super_admin';          return '/admin-dashboard';        case 'admin_compagnie';          final compagnieId = userData[';          if (compagnieId != null';            return '/compagnie-dashboard/'compagnieId';          return '/login';        case 'admin_agence';          final agenceId = userData[';          if (agenceId != null';            return '/agence-dashboard/'agenceId';          return '/login';        case 'agent';          return '/agent-dashboard';        case 'expert';          return '/expert-dashboard';        case 'conducteur';          return '/conducteur-dashboard';          debugPrint('[COMPANY_REDIRECT] ‚ö†Ô∏è R√¥le inconnu: 'role';          return ';    } catch (e';      debugPrint('[COMPANY_REDIRECT] ‚ùå Erreur redirection utilisateur:  + e.toString()';      return ';