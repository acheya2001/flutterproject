import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/material.dart';import 'permission_service.dart';    String? statusFilter, // 'actif', ';  }';          .collection('agences_assurance';          .where(';      if (statusFilter != null';        query = query.where('status, isEqualTo: statusFilter';      if (gouvernoratFilter != null && gouvernoratFilter != 'Tous';        query = query.where(';      if (!includeTestData';        query = query.where(';      query = query.limit(limit').orderBy(';          final data = doc.data(';          data[';            final searchLower = searchQuery.toLowerCase(';            final nom = (data['nom'] ?? ').toString().toLowerCase(';            final ville = (data['ville'] ?? ').toString().toLowerCase(';            final adresse = (data['adresse'] ?? ').toString().toLowerCase(';            final responsable = (data['responsable'] ?? ';    } catch (e';      debugPrint(';      if (!await PermissionService.canAccessAgence(agenceId)';        debugPrint('[AGENCE_MANAGEMENT] ‚ùå Acces refuse a l\'agence: 'agenceId';          .collection(';      final data = doc.data(';      data[';    } catch (e';      debugPrint(';      if (!await PermissionService.canAccessCompagnie(compagnieId)';        throw Exception('Acces refuse a cette compagnie';      final code = await _generateAgenceCode(compagnieId, agenceData['nom]';        'compagnie_id';        'code';        'status': 'actif';        'created_at: FieldValue.serverTimestamp(';        'updated_at: FieldValue.serverTimestamp(';        'isFakeData': false, // Vraie donnee creee par l';          .collection(';          .add(data';      debugPrint('[AGENCE_MANAGEMENT] ‚úÖ Agence creee: ';    } catch (e';      debugPrint(';      if (!await PermissionService.canAccessAgence(agenceId)';        throw Exception('Acces refuse a cette agence';        'updated_at: FieldValue.serverTimestamp(';          .collection(';          .update(data';      debugPrint('[AGENCE_MANAGEMENT] ‚úÖ Agence modifiee: ';    } catch (e';      debugPrint('[AGENCE_MANAGEMENT] ‚ùå Erreur modification:  + e.toString()';  /// üîÑ Changer le statut d';        throw Exception('Acces refuse a cette agence';          .collection(';      if (!doc.exists';        throw Exception(';      final currentStatus = doc.data(')!['status'] ?? 'actif';      final newStatus = currentStatus == 'actif' ? 'inactif' : 'actif';          .collection(';          .doc(agenceId';        'status';        ';      }';      debugPrint('[AGENCE_MANAGEMENT] ‚úÖ Statut agence change: $agenceId -> ';    } catch (e';      debugPrint(';      if (!await PermissionService.canAccessAgence(agenceId)';        throw Exception('Acces refuse a cette agence';          .collection(';      if (!doc.exists';        throw Exception(';      final data = doc.data(';      final isFakeData = data[';      if (!isFakeData';        throw Exception(';      await doc.reference.delete(';      debugPrint('[AGENCE_MANAGEMENT] ‚úÖ Agence supprimee: ';    } catch (e';      debugPrint('[AGENCE_MANAGEMENT] ‚ùå Erreur suppression:  + e.toString()';  /// üë• Obtenir les employes d';          .collection('users';          .where('agenceId, isEqualTo: agenceId';          .orderBy(';          final data = doc.data(';          data[';    } catch (e';      debugPrint(';      return Stream.value([]';  /// üìä Obtenir les statistiques d';          .collection('users';          .where(';        final data = doc.data(';        final role = data['role';        final status = data['status';        if (status == ';        switch (role';          case 'agent';          case 'conducteur';          case 'expert';        'totalEmployes';        'agents';        'conducteurs';        'experts';        'actifs';        ';    } catch (e';      debugPrint('[AGENCE_MANAGEMENT] ‚ùå Erreur stats agence:  + e.toString()';        'totalEmployes';        'agents';        'conducteurs';        'experts';        'actifs';        'inactifs';  static Future<String> _generateAgenceCode(String compagnieId, String nomAgence';          .collection(';          ? (compagnieDoc.data(')!['nom'] as String? ?? 'COMP';          : ';          .toUpperCase(';          .replaceAll(RegExp(r'[^A-Z0-9]'), ';          .toUpperCase(';          .replaceAll(RegExp(r'[^A-Z0-9]'), ';          .substring(0, nomAgence.length > 6 ? 6 : nomAgence.length';          .collection('agences_assurance';          .where(';      final number = (existingQuery.docs.length + 1).toString(').padLeft(3, '0';      return '$compagnieCode-$agenceCode-';    } catch (e';      debugPrint('[AGENCE_MANAGEMENT] ‚ùå Erreur generation code:  + e.toString()';      return 'AGE-{DateTime.now(').millisecondsSinceEpoch}';  static String? validateAgenceData(Map<String, dynamic> data';    if (data['nom'] == null || data['nom].toString().trim().isEmpty';      return 'Le nom de l\'agence est requis';    if (data['gouvernorat'] == null || data['gouvernorat].toString().trim().isEmpty';      return 'Le gouvernorat est requis';    if (data['ville'] == null || data['ville].toString().trim().isEmpty';      return 'La ville est requise';    if (data['adresse'] == null || data['adresse].toString().trim().isEmpty';      return 'L\'adresse est requise';    if (data['telephone'] != null && data['telephone].toString().isNotEmpty';      final phone = data['telephone].toString(';      if (!RegExp(r'^\+216\s?\d{2}\s?\d{3}\s?\d{3}').hasMatch(phone)';        return 'Format de telephone invalide (ex: +216 20 123 456)';    if (data['email'] != null && data['email].toString().isNotEmpty';      final email = data['email].toString(';      if (!RegExp(r'^[^@]+@[^@]+\.[^@]+').hasMatch(email)';        return 'Format d\';