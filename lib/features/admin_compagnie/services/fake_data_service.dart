import 'dart:math';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';import ';  static final Random _random = Random(';    'Centre-Ville', 'Nord', 'Sud', 'Est', 'Ouest', 'Menzah', 'Lac';    'Bardo', 'Carthage', 'Sidi Bou Said', 'Marsa', 'Ariana';    'Ben Arous', 'Ezzahra', 'Rades', 'Hammam Lif';    'Tunis', 'Ariana', 'Ben Arous', 'Manouba', 'Nabeul', 'Zaghouan';    'Bizerte', 'Beja', 'Jendouba', 'Le Kef', 'Siliana', 'Kairouan';    'Kasserine', 'Sidi Bouzid', 'Sousse', 'Monastir', 'Mahdia', 'Sfax';    'Tunis', 'Ariana', 'Ben Arous', 'Sousse', 'Sfax', 'Kairouan';    'Bizerte', 'Gabes', 'Gafsa', 'Monastir', 'Nabeul', 'Kasserine';    'Ahmed', 'Mohamed', 'Ali', 'Karim', 'Youssef', 'Omar', 'Sami';    'Fatma', 'Amira', 'Leila', 'Sonia', 'Rim', 'Nesrine', 'Asma';    'Mariem', 'Ines', 'Nour', 'Salma', 'Dorra', 'Emna';    'Ben Ahmed', 'Trabelsi', 'Sassi', 'Karray', 'Bouazizi', 'Hamdi';    'Dridi', 'Touati', 'Qadri', 'Pasha', 'Mejri', 'Cherni', 'Jemli';    'Mahfoudh', 'Belhadj', 'Gharbi', 'Cherif', 'Mansouri', 'Zaidi';    'Avenue Habib Bourguiba', 'Rue de la Republique', 'Avenue de la Liberte';    'Rue Ibn Khaldoun', 'Avenue Mohamed V', 'Rue Mongi Slim';    'Avenue de Carthage', 'Rue des Roses', 'Avenue du 20 Mars';    'Rue de la Paix', 'Avenue de l\'Independance', 'Rue des Jasmins';  static const List<String> _roles = ['agent', 'conducteur', ';  }';      debugPrint('[FAKE_DATA] üöÄ Generation des donnees pour: 'compagnieNom';        'compagnieId';        'compagnieNom';        'agences';        'employes';        'errors';        'startTime: DateTime.now(';      onProgress?.call(';      final agencesIds = await _generateAgences(compagnieId, compagnieNom';      results['agences';      debugPrint('[FAKE_DATA] ‚úÖ '{agencesIds.length} agences creees';      onProgress?.call(';      final employesIds = await _generateEmployes(compagnieId, agencesIds';      results['employes';      debugPrint('[FAKE_DATA] ‚úÖ '{employesIds.length} employes crees';      results['endTime] = DateTime.now(';      results['duration'] = results['endTime'].difference(results['startTime]';      debugPrint('[FAKE_DATA] üéâ Generation terminee en '{results['duration';    } catch (e';      debugPrint(';        final numero = _random.nextInt(999';          'nom': 'Agence $nomAgence 'compagnieNom';          'code': '{compagnieNom.toUpperCase(').replaceAll(' ', ')}-${nomAgence.toUpperCase(')}-'{(i + 1).toString().padLeft(3, '0')}';          'compagnie_id';          'gouvernorat';          'ville';          'adresse': '$numero $rue, 'ville';          'telephone': '+216 {_generatePhoneNumber(')}';          'email': '{nomAgence.toLowerCase(').replaceAll(' ', '-')}@'{compagnieNom.toLowerCase().replaceAll(' ', ')}.tn';          'responsable': ${_prenoms[_random.nextInt(_prenoms.length')]} '{_noms[_random.nextInt(_noms.length)]}';          'status: _random.nextDouble(') > 0.1 ? 'actif' : 'inactif';          'created_at: FieldValue.serverTimestamp(';          'isFakeData';          'fake_generation_batch: DateTime.now(';            .collection(';      } catch (e';        debugPrint(';            ? agencesIds[_random.nextInt(agencesIds.length';          'email': ${prenom.toLowerCase(')}.'{nom.toLowerCase().replaceAll(' ', ')}@test-'{compagnieId.substring(0, 8)}.tn';          'nom';          'prenom';          'role';          'compagnieId';          'agenceId';          'status: _random.nextDouble(') > 0.05 ? 'actif' : 'inactif';          'phone': '+216 {_generatePhoneNumber(')}';          'address': ${_random.nextInt(999) + 1} ${_rues[_random.nextInt(_rues.length')]}, '{_villes[_random.nextInt(_villes.length)]}';          'date_naissance: _generateRandomDate(1970, 2000';          'cin: _generateCIN(';          'date_embauche: _generateRandomDate(2015, 2024';          'salaire: _generateSalaire(role';          'created_at: FieldValue.serverTimestamp(';          'created_by': 'fake_data_generator';          ';              ? _generateRandomTimestamp(30';          'isFakeData';          'fake_generation_batch: DateTime.now(';        final docRef = _firestore.collection('users).doc(';          ';      } catch (e';        debugPrint(';  static String _generatePhoneNumber(';    final prefixes = ['20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '90', '91', '92', '93', '94', '95', '96', '97', '98', ';    final number = _random.nextInt(999999).toString(').padLeft(6, '0';    return '$prefix ';    return _random.nextInt(99999999).toString(').padLeft(8, ';    final day = 1 + _random.nextInt(28';    return '$year-{month.toString(').padLeft(2, '0')}-'{day.toString().padLeft(2, '0')}';      case ';        return 800 + _random.nextDouble(';      case ';        return 600 + _random.nextDouble(';      case ';        return 700 + _random.nextDouble(';  /// üóëÔ∏è Supprimer toutes les donnees factices d';      debugPrint('[FAKE_DATA] üßπ Suppression des donnees factices pour: 'compagnieId';          .collection('agences_assurance';          .where('compagnie_id, isEqualTo: compagnieId';          .where(';        await doc.reference.delete(';          .collection('users';          .where('compagnieId, isEqualTo: compagnieId';          .where(';        await doc.reference.delete(';      debugPrint('[FAKE_DATA] ‚úÖ Suppression terminee: $agencesDeleted agences, 'employesDeleted employes';        'agences';        ';    } catch (e';      debugPrint(';  static Future<Map<String, int>> checkFakeDataForCompagnie(String compagnieId';          .collection('agences_assurance';          .where('compagnie_id, isEqualTo: compagnieId';          .where(';          .get(';          .collection('users';          .where('compagnieId, isEqualTo: compagnieId';          .where(';          .get(';        'agences';        ';    } catch (e';      debugPrint('[FAKE_DATA] ‚ùå Erreur verification:  + e.toString()';      return {'agences': 0, ';  static String getGenerationSummary(Map<String, dynamic> results';    final duration = results['duration';    final agencesCount = (results['agences] as List?';    final employesCount = (results['employes] as List?';    return ';üè¢ Compagnie : '{results['compagnieNom';üîó ID : '{results['compagnieId';';