import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/material.dart';import ';  static Future<void> createTestAdminCompagnie(';      debugPrint('[TEST_ADMIN_COMPAGNIE] üöÄ Creation d\'un Admin Compagnie de test...';      // 1. Verifier qu';          .collection(';      if (compagniesQuery.docs.isEmpty';        debugPrint('[TEST_ADMIN_COMPAGNIE] üìù Creation d\'une compagnie de test...';            .collection('compagnies_assurance';          'nom': 'STAR Assurance Test';          'code': 'STAR-TEST';          'type': 'Dommages';          'email': 'contact@star-test.tn';          'telephone': '+216 71 123 456';          'adresse': '123 Avenue Habib Bourguiba, Tunis';          'status': 'actif';          'created_at: FieldValue.serverTimestamp(';          'created_by': 'system';          ';        }';        compagnieNom = 'STAR Assurance Test';        debugPrint('[TEST_ADMIN_COMPAGNIE] ‚úÖ Compagnie creee: ';        compagnieNom = compagnieDoc.data(')['nom'] ?? 'Compagnie Test';        debugPrint('[TEST_ADMIN_COMPAGNIE] ‚úÖ Compagnie existante trouvee: 'compagnieNom';      // 2. Verifier si l';        debugPrint('[TEST_ADMIN_COMPAGNIE] ‚ö†Ô∏è Admin Compagnie existe deja: 'testEmail';        debugPrint('[TEST_ADMIN_COMPAGNIE] üìã Donnees existantes: {existingUserQuery.docs.first.data(')}';      debugPrint(';      if (user == null';        throw Exception('√âchec de creation du compte Firebase Auth';      debugPrint('[TEST_ADMIN_COMPAGNIE] üìù Creation du document utilisateur...';      await _firestore.collection('users).doc(user.uid';        'email';        'nom': 'Ben Ahmed';        'prenom': 'Karim';        'role': 'admin_compagnie';        'compagnieId';        'status': 'actif';        'created_at: FieldValue.serverTimestamp(';        'created_by': 'system';        'last_login';        'phone': '+216 98 765 432';        'address': '456 Rue de la Republique, Tunis';        'date_naissance': '1985-03-15';        'cin': '12345678';        'isFakeData';        'creation_context';          'created_by_role': 'super_admin';          'creation_method': 'direct_creation';          ';      if (FakeDataService.isDevelopmentMode';        debugPrint(';          ';          debugPrint('[TEST_ADMIN_COMPAGNIE] ‚úÖ Donnees factices generees:';          debugPrint('  ‚Ä¢ '{(results['agences] as List').length} agences';          debugPrint('  ‚Ä¢ '{(results['employes] as List').length} employes';          debugPrint(';      await _auth.signOut(';      debugPrint('[TEST_ADMIN_COMPAGNIE] ‚úÖ Admin Compagnie cree avec succes !';      debugPrint('[TEST_ADMIN_COMPAGNIE] üìß Email: 'testEmail';      debugPrint('[TEST_ADMIN_COMPAGNIE] üîë Mot de passe: 'testPassword';      debugPrint('[TEST_ADMIN_COMPAGNIE] üè¢ Compagnie: $compagnieNom (compagnieId')';      debugPrint(';    } catch (e';      debugPrint('[TEST_ADMIN_COMPAGNIE] ‚ùå Erreur:  + e.toString()';      // Se deconnecter en cas d';        debugPrint('[TEST_ADMIN_COMPAGNIE] ‚ùå Erreur deconnexion: 'signOutError';  /// üóëÔ∏è Supprimer les donnees de test de l';      debugPrint('[TEST_ADMIN_COMPAGNIE] üßπ Suppression des donnees de test...';          .collection('users';          .where(';        await doc.reference.delete(';          .collection('agences_assurance';          .where(';        await doc.reference.delete(';          .collection('compagnies_assurance';          .where(';        await doc.reference.delete(';      debugPrint(';    } catch (e';      debugPrint(';  static Map<String, String> getTestCredentials(';      'email': 'admin.compagnie@test.tn';      'password': 'AdminCompagnie123!';      'role': 'admin_compagnie';      'compagnie': ';