import 'package:flutter/foundation.dart';import 'package:cloud_firestore/cloud_firestore.dart';/// üõ°Ô∏è Middleware de securite pour emp√™cher l';/// Ce service garantit que les admin_compagnie ne peuvent acceder qu';  /// üîê Verifier l';  }';      debugPrint('[COMPANY_SECURITY] üîç Verification acces ressource:';      debugPrint('[COMPANY_SECURITY]   - CompagnieId: 'compagnieId';      debugPrint('[COMPANY_SECURITY]   - ResourceType: 'resourceType';      debugPrint('[COMPANY_SECURITY]   - ResourceId: 'resourceId';      // 1. Verifier l';          reason: 'Utilisateur non authentifie';          action: ';        ';          .collection(';      if (!userDoc.exists';          reason: 'Compte utilisateur non trouve';          action: 'Contacter l\';      final userData = userDoc.data(';      final userRole = userData['role';      final userCompagnieId = userData[';      switch (userRole';        case 'super_admin';          debugPrint('[COMPANY_SECURITY] ‚úÖ Acces Super Admin autorise';            userRole: userRole ?? 'super_admin';            userEmail: currentUser.email ?? ';          ';        case 'admin_compagnie';          if (userCompagnieId != compagnieId';              userEmail: currentUser.email ?? ';              userCompagnieId: userCompagnieId ?? 'null';              violation: ';            ';              reason: 'Acces refuse: Vous ne pouvez acceder qu\'aux donnees de votre compagnie';              action: ';            ';          debugPrint('[COMPANY_SECURITY] ‚úÖ Acces Admin Compagnie autorise';            userRole: userRole ?? 'admin_compagnie';            userEmail: currentUser.email ?? ';          ';            reason: 'R√¥le non autorise pour cette ressource';            action: 'Contacter l\'administrateur';            currentRole: userRole ?? ';    } catch (e';      debugPrint('[COMPANY_SECURITY] ‚ùå Erreur verification securite:  + e.toString()';        error: ';      ';  /// üîç Verifier l';      resourceType: 'firestore_collection';      additionalContext: {';    ';  /// üë• Verifier l'acces aux donnees d';  static Future<bool> canAccessAgentData(String compagnieId, String agentId';      resourceType: ';    ';  /// üìÑ Verifier l';  static Future<bool> canAccessContractData(String compagnieId, String contractId';      resourceType: ';    ';  /// üöó Verifier l';  static Future<bool> canAccessClaimData(String compagnieId, String claimId';      resourceType: ';    ';  /// üè¢ Verifier l';  static Future<bool> canAccessAgencyData(String compagnieId, String agencyId';      resourceType: ';    if (!hasAccess';      debugPrint('[COMPANY_SECURITY] ‚ùå Acces refuse a la collection: ';        .collection(collection';        .where(';  }';      await _firestore.collection('security_violations';        'userId';        'userEmail';        'userCompagnieId';        'attemptedCompagnieId';        'resourceType';        'resourceId';        'violation';        'timestamp: FieldValue.serverTimestamp(';        'severity': 'HIGH';        'status': 'active';        'userAgent': 'Flutter App';        'ipAddress': 'N/A';      }';      debugPrint('[COMPANY_SECURITY] üö® Violation de securite loggee: ';    } catch (e';      debugPrint(';  }';      // Verifier que l';          .collection(';      if (!userDoc.exists || userDoc.data(')!['role'] != 'super_admin';        debugPrint('[COMPANY_SECURITY] ‚ùå Acces refuse aux logs de securite';          .collection('security_violations';          .orderBy(';        final data = doc.data(';        data[';    } catch (e';      debugPrint(';  }';      if (route.contains('/compagnie-dashboard/)';        compagnieId = route.split('/compagnie-dashboard/';      } else if (routeParams != null && routeParams.containsKey('compagnieId)';        compagnieId = routeParams[';      if (compagnieId == null';        debugPrint('[COMPANY_SECURITY] ‚ö†Ô∏è Route sans compagnieId: 'route';        resourceType: 'route_access';        additionalContext: {';    } catch (e';      debugPrint('[COMPANY_SECURITY] ‚ùå Erreur validation route:  + e.toString()';