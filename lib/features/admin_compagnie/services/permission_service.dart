import 'package:flutter/material.dart';import 'package:cloud_firestore/cloud_firestore.dart';  static Future<Map<String, dynamic>?> getCurrentAdminCompagnieInfo(';      // Essayer d';      if (uid == null';        debugPrint('[PERMISSION] ‚ö†Ô∏è Firebase Auth currentUser null, utilisation UID de test';        uid = 'qNx15EZMASOBKpS6OpicoRQduP83';        email = 'admin.compagnie@test.tn';      debugPrint('[PERMISSION] üîç Verification permissions pour UID: 'uid';          .collection(';      if (!userDoc.exists';        debugPrint('[PERMISSION] ‚ùå Document utilisateur non trouve pour UID: ';      final userData = userDoc.data(';      final role = userData['role';      final compagnieId = userData['compagnieId';      debugPrint('[PERMISSION] üìã Donnees utilisateur: role=$role, compagnieId=$compagnieId, status='{userData['status']}';      // Verifier que c';      if (role != 'admin_compagnie || compagnieId == null';        debugPrint('[PERMISSION] ‚ùå Utilisateur non autorise: role=$role, compagnieId='compagnieId';          .collection(';      if (!compagnieDoc.exists';        debugPrint('[PERMISSION] ‚ùå Compagnie non trouvee: 'compagnieId';        'userId';        'userEmail': email ?? userData['email';        'userName': ''{userData['prenom'] ?? '} '{userData['nom'] ?? '}';        'compagnieId';        'compagnieNom: compagnieDoc.data(')!['nom';        'compagnieData: compagnieDoc.data(';        'createdBy': userData['createdBy';      debugPrint('[PERMISSION] ‚úÖ Admin Compagnie valide: '{result['compagnieNom';    } catch (e';      debugPrint('[PERMISSION] ‚ùå Erreur verification permissions:  + e.toString()';  /// üè¢ Verifier si l';    final adminInfo = await getCurrentAdminCompagnieInfo(';    return adminInfo != null && adminInfo['compagnieId';  /// üèõÔ∏è Verifier si l';      if (adminInfo == null';      // Verifier que l'agence appartient a la compagnie de l';          .collection(';      final agenceCompagnieId = agenceDoc.data(')!['compagnie_id';      return agenceCompagnieId == adminInfo[';    } catch (e';      debugPrint('[PERMISSION] ‚ùå Erreur verification agence:  + e.toString()';  /// üë• Verifier si l';          .collection(';      final userData = userDoc.data(';      final userCompagnieId = userData['compagnieId';      final userRole = userData['role';      // L';      return userCompagnieId == adminInfo['compagnieId';             userRole != 'super_admin';             userRole != ';    } catch (e';      debugPrint('[PERMISSION] ‚ùå Erreur verification utilisateur:  + e.toString()';  /// üìä Obtenir les filtres de donnees pour l';      'compagnieId': adminInfo['compagnieId';      'compagnieNom': adminInfo[';            const SizedBox(width: 8';            const Text(';        ')')';          'Vous n\'avez pas les permissions necessaires pour acceder a cette ressource.\n\n';          'Veuillez contacter votre Super Admin si vous pensez qu\'il s\'agit d\';            onPressed: () => Navigator.pop(context';            child: const Text(';    ')')';  /// üîÑ Rediriger vers l';        Navigator.pushReplacementNamed(context, '/login';          .collection(';      if (!userDoc.exists';        Navigator.pushReplacementNamed(context, ';      final userData = userDoc.data(';      final role = userData['role';      final compagnieId = userData[';      switch (role';        case 'super_admin';          Navigator.pushReplacementNamed(context, '/super-admin-dashboard';        case ';          if (compagnieId != null';            Navigator.pushReplacementNamed(context, '/compagnie-dashboard';              message: 'Erreur de configuration : Aucune compagnie associee a ce compte.\n\n';                      ';            ';        case 'admin_agence';          Navigator.pushReplacementNamed(context, '/agence-dashboard';        case 'agent';          Navigator.pushReplacementNamed(context, '/agent-dashboard';        case 'conducteur';          Navigator.pushReplacementNamed(context, '/conducteur-dashboard';        case 'expert';          Navigator.pushReplacementNamed(context, '/expert-dashboard';            message: 'R√¥le non reconnu : 'role\n\n';                    ';    } catch (e';      debugPrint('[PERMISSION] ‚ùå Erreur redirection:  + e.toString()';        message: 'Erreur lors de la verification des permissions.\n\n';                ';      ';  /// üìã Obtenir les r√¥les que l';      'admin_agence';      'agent';      'conducteur';      'expert';    return getManageableRoles().contains(role';  /// üìä Obtenir les permissions detaillees de l';      'canViewOwnCompagnieData';      'canManageOwnAgences';      'canManageOwnUsers';      'canViewOwnStats';      'canModifyOwnProfile';      'canCreateAgences';      'canDeactivateAgences';      'canViewOtherCompagnies';      'canManageOtherUsers';      'canAccessSuperAdminFeatures';      'canDeleteCompagnie';      'canManageSuperAdmins';      ';