import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/material.dart';/// 🔍 Service de diagnostic pour l';  static Future<Map<String, dynamic>> diagnoseAuthIssue(String email';      'email';      'firebase_auth_exists';      'firestore_user_exists';      'user_data';      'firebase_user_data';      'errors';      'recommendations';      debugPrint('[AUTH_DIAGNOSTIC] 🔍 Diagnostic pour: ';      if (currentUser != null';        result['firebase_auth_exists';        result['firebase_user_data';          'uid';          'email';          'emailVerified';          'displayName';          'creationTime: currentUser.metadata.creationTime?.toIso8601String(';          'lastSignInTime: currentUser.metadata.lastSignInTime?.toIso8601String(';        debugPrint('[AUTH_DIAGNOSTIC] ✅ Utilisateur Firebase Auth trouve: '{currentUser.uid}';        result['errors'].add('Aucun utilisateur connecte dans Firebase Auth';        debugPrint('[AUTH_DIAGNOSTIC] ❌ Aucun utilisateur connecte dans Firebase Auth';          .collection('users';          .where(';      if (userQuery.docs.isNotEmpty';        result[';        final userData = userQuery.docs.first.data(';        userData['id';        result['user_data';        debugPrint('[AUTH_DIAGNOSTIC] ✅ Utilisateur Firestore trouve: '{userData['role']}';        result['errors'].add('Utilisateur non trouve dans Firestore';        debugPrint('[AUTH_DIAGNOSTIC] ❌ Utilisateur non trouve dans Firestore';      if (result['firebase_auth_exists'] && result['firestore_user_exists]';        final firebaseUid = result['firebase_user_data']['uid';        final firestoreId = result['user_data'][';        if (firebaseUid != firestoreId';          result['errors'].add(Incoherence: UID Firebase ($firebaseUid') ≠ ID Firestore (';    } catch (e';      result['errors'].add('Erreur diagnostic:  + e.toString()';      debugPrint(';  static void _generateRecommendations(Map<String, dynamic> result';    final recommendations = result['recommendations';    if (!result['firebase_auth_exists]';      recommendations.add('Se connecter avec Firebase Auth';    if (!result['firestore_user_exists]';      recommendations.add('Creer le document utilisateur dans Firestore';      recommendations.add('Verifier que le service TestAdminCompagnie a ete execute';    if (result['firebase_auth_exists'] && result['firestore_user_exists]';      final userData = result[';      if (userData != null';        final role = userData['role';        final compagnieId = userData['compagnieId';        if (role != 'admin_compagnie';          recommendations.add('Verifier que le rôle est bien "admin_compagnie" (actuel: role')';          recommendations.add('Ajouter un compagnieId a l\';    if (recommendations.isEmpty';      recommendations.add(';  static Future<bool> autoFix(String email';      debugPrint(';      final diagnostic = await diagnoseAuthIssue(email';      // Si l';      if (diagnostic['firebase_auth_exists'] && !diagnostic['firestore_user_exists]';        debugPrint('[AUTH_DIAGNOSTIC] 🔧 Creation du document Firestore manquant...';        await _firestore.collection('users).doc(firebaseUser.uid';          'email';          'role': 'admin_compagnie';          'status': 'actif';          'created_at: FieldValue.serverTimestamp(';          'created_by': 'auto_fix';          'nom': 'Admin';          'prenom': 'Compagnie';          ';        }';        debugPrint(';    } catch (e';      debugPrint(';  static void printDiagnosticReport(Map<String, dynamic> result';    debugPrint('\n' + '= * 50';    debugPrint('🔍 RAPPORT DE DIAGNOSTIC AUTH';    debugPrint('= * 50';    debugPrint('📧 Email: '{result['email']}';    debugPrint('🔐 Firebase Auth: '{result['firebase_auth_exists'] ? '✅' : '❌'}';    debugPrint('🗄️ Firestore User: '{result['firestore_user_exists'] ? '✅' : '❌'}';    if (result['firebase_user_data] != null';      final fbData = result['firebase_user_data';      debugPrint('👤 UID Firebase: '{fbData['uid']}';      debugPrint('📧 Email verifie: '{fbData['emailVerified']}';    if (result['user_data] != null';      final userData = result['user_data';      debugPrint('🎭 Rôle: '{userData['role']}';      debugPrint('🏢 CompagnieId: '{userData['compagnieId']}';      debugPrint('📊 Statut: '{userData['status']}';    final errors = result[';    if (errors.isNotEmpty';      debugPrint(';      for (final error in errors';        debugPrint('  • 'error';    final recommendations = result[';    if (recommendations.isNotEmpty';      debugPrint(';      for (final recommendation in recommendations';        debugPrint('  • 'recommendation';    debugPrint('=' * 50 + ';  static Future<void> testAdminCompagnieLogin(';    const email = 'admin.compagnie@test.tn';    const password = 'AdminCompagnie123!';      debugPrint(';      ';      debugPrint('[AUTH_DIAGNOSTIC] ✅ Connexion reussie: ';      printDiagnosticReport(diagnostic';      if (diagnostic['errors].isNotEmpty';        debugPrint(';        if (fixed';          debugPrint(';    } catch (e';      debugPrint('[AUTH_DIAGNOSTIC] ❌ Erreur connexion:  + e.toString()';