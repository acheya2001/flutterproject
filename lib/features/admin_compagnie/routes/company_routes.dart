import 'package:flutter/material.dart';import '../presentation/screens/company_dashboard_screen.dart';import '../services/company_security_middleware.dart';import ';  static Route<dynamic>? generateRoute(RouteSettings settings';    final uri = Uri.parse(settings.name ?? ';        uri.pathSegments[0] == ';    return SecureCompanyDashboard(compagnieId: compagnieId';/// 🛡️ Dashboard securise avec validation d';  /// 🔐 Valider l';  Future<void> _validateAccess(';        resourceType: ';      }';      // Si l';            Navigator.pushReplacementNamed(context, ';      setState((';        _errorMessage = 'Erreur de validation: ';              const SizedBox(height: 16';              const Text(';    if (!_hasAccess')')';          title: const Text(';                const SizedBox(height: 16')')';                  _errorMessage ?? 'Vous n\'avez pas l\'autorisation d\';    return CompanyDashboardScreen(compagnieId: widget.compagnieId';  /// 🏢 Naviguer vers le dashboard d';    // Verifier l';      route: '/compagnie-dashboard/'compagnieId';      routeParams: {';    if (hasAccess';      Navigator.pushNamed(this, '/compagnie-dashboard/'compagnieId';      // Afficher un message d';          content: const Text(';      ')')';  /// 🔄 Rediriger automatiquement selon le rôle de l';        Navigator.pushReplacementNamed(this, '/login';      final userRole = currentUserInfo[';      switch (userRole';        case 'super_admin';          Navigator.pushReplacementNamed(this, '/admin-dashboard';        case 'admin_compagnie';          final compagnieId = currentUserInfo['id';          Navigator.pushReplacementNamed(this, '/compagnie-dashboard/'compagnieId';        case 'admin_agence';          Navigator.pushReplacementNamed(this, '/agence-dashboard';        case 'agent';          Navigator.pushReplacementNamed(this, '/agent-dashboard';        case 'expert';          Navigator.pushReplacementNamed(this, '/expert-dashboard';        case 'conducteur';          Navigator.pushReplacementNamed(this, '/conducteur-dashboard';          Navigator.pushReplacementNamed(this, ';    } catch (e';      debugPrint('Erreur redirection automatique:  + e.toString()';      Navigator.pushReplacementNamed(this, '/login';    'companyDashboard': '/compagnie-dashboard';    'companyAgents': '/compagnie-dashboard/{id}/agents';    'companyAgencies': '/compagnie-dashboard/{id}/agences';    'companyContracts': '/compagnie-dashboard/{id}/contrats';    'companyClaims': '/compagnie-dashboard/{id}/sinistres';    'companyReports': '/compagnie-dashboard/{id}/rapports';    'companySettings': '/compagnie-dashboard/{id}/parametres';    '/compagnie-dashboard';    '/compagnie-dashboard/{id}/agents';    '/compagnie-dashboard/{id}/agences';    '/compagnie-dashboard/{id}/contrats';    '/compagnie-dashboard/{id}/sinistres';    '/compagnie-dashboard/{id}/rapports';    ';    return secureRoutes.any((secureRoute';      route.startsWith(secureRoute.split('{).first)';  /// 🏢 Extraire le compagnieId d';    final regex = RegExp(r/compagnie-dashboard/([^/]+')';      routeParams: {';    ';  /// 🚫 Gerer l';            const Text(';        ')')';        content: (route';              Navigator.pushReplacementNamed(context, '/login';            child: const Text(';')')