import 'dart:math';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';import '../../insurance/services/insurance_data_generator.dart';import '../../insurance/models/vehicule_complet_model.dart';import '../../insurance/models/compagnie_assurance_model.dart';import '../../vehicule/models/vehicule_assure_model.dart';import '../../vehicule/models/vehicule_conducteur_liaison_model.dart';import '../../vehicule/services/vehicule_affectation_service.dart';import '../../admin/models/agent_validation_model.dart';    debugPrint('üöÄ G√©n√©ration compl√®te de la base de donn√©es...';      debugPrint('‚úÖ Base de donn√©es g√©n√©r√©e avec succ√®s !';      debugPrint('‚ùå Erreur g√©n√©ration base de donn√©es: $e';    debugPrint('üè¢ G√©n√©ration hi√©rarchie assurance...';    debugPrint('üöó G√©n√©ration v√©hicules assur√©s...';      'Peugeot', 'Renault', 'Citro√´n', 'Volkswagen', 'Toyota';      'Hyundai', 'Kia', 'Nissan', 'Ford', 'Opel';      'Peugeot': ['208', '308', '3008', '5008', '2008';      'Renault': ['Clio', 'Megane', 'Captur', 'Kadjar', 'Scenic';      'Citro√´n': ['C3', 'C4', 'C5 Aircross', 'Berlingo', 'Picasso';      'Volkswagen': ['Golf', 'Polo', 'Tiguan', 'Passat', 'T-Cross';      'Toyota': ['Yaris', 'Corolla', 'RAV4', 'C-HR', 'Prius';    final List<String> assureurs = ['STAR', 'MAGHREBIA', 'LLOYD', 'GAT', 'AST';    final List<String> couleurs = ['Blanc', 'Noir', 'Gris', 'Rouge', 'Bleu', 'Argent';      final modele = modeles[marque]?[_random.nextInt(modeles[marque]!.length)] ?? 'Mod√®le';      final vehiculeId = _firestore.collection('vehicules_assures';        numeroContrat: '$assureur-${now.year}-${(i + 1).toString().padLeft(6, '0')}';          id: 'veh_$vehiculeId';          typeCarburant: _random.nextBool() ? 'Essence' : 'Diesel';          typeCouverture: _random.nextBool() ? 'Tous risques' : 'Tiers';        _firestore.collection('vehicules_assures';        debugPrint('‚úÖ ${i + 1} v√©hicules cr√©√©s';    debugPrint('‚úÖ 500 v√©hicules assur√©s cr√©√©s';    debugPrint('üîó G√©n√©ration liaisons v√©hicule-conducteur...';        .collection('vehicules_assures';      'conducteur1@test.com';      'conducteur2@test.com';      'conducteur3@test.com';      'rahma.hammami@test.com';      'mohamed.ben.ali@test.com';      'fatma.trabelsi@test.com';      'ahmed.bouazizi@test.com';      'salma.chedly@test.com';      // 30% de chance qu';            agentAffecteur: 'agent_test_${_random.nextInt(10)}';            agenceId: 'agence_test_${_random.nextInt(5)}';            compagnieId: 'STAR';          debugPrint('‚ö†Ô∏è Erreur affectation v√©hicule ${vehiculeDoc.id}: $e';    debugPrint('‚úÖ $liaisonsCreees liaisons v√©hicule-conducteur cr√©√©es';    debugPrint('üìã G√©n√©ration demandes validation agents...';    final List<String> compagnies = ['STAR', 'MAGHREBIA', 'LLOYD', 'GAT', 'AST';    final List<String> agences = ['tunis_centre', 'sfax_nord', 'sousse', 'monastir_centre';    final List<String> zones = ['Tunis', 'Sfax', 'Sousse', 'Monastir', 'Nabeul';    final List<String> delegations = ['Centre Ville', 'Nord', 'Sud', 'Est', 'Ouest';      final validationId = _firestore.collection('agents_validation';        userId: 'user_agent_$i';        email: 'agent$i@${compagnies[_random.nextInt(compagnies.length)].toLowerCase()}.tn';        matriculeAgent: 'AG${(i + 1).toString().padLeft(4, '0')}';        numeroCarteAgent: 'CA${_random.nextInt(999999).toString().padLeft(6, '0')}';        documents: ['carte_agent.pdf', 'attestation_travail.pdf', 'cin_recto.pdf';        adminValidateur: i >= 5 ? 'admin_001';        commentaireAdmin: i >= 5 ? 'Validation automatique';        raisonRejet: i >= 15 ? 'Documents incomplets';        _firestore.collection('agents_validation';    debugPrint('‚úÖ 20 demandes de validation agents cr√©√©es';    debugPrint('üìä Configuration des index Firebase...';      'vehicules_assures: assureur_id, numero_contrat';      'vehicules_assures: vehicule.immatriculation';      'vehicules_assures: proprietaire.cin';      'vehicules_conducteurs_liaisons: conducteur_email, statut';      'vehicules_conducteurs_liaisons: vehicule_id, statut';      'vehicules_conducteurs_liaisons: agent_affecteur, createdAt';      'vehicules_recherches: conducteur_rechercheur, date_recherche';      'vehicules_recherches: contexte, date_recherche';      'agents_validation: statut, createdAt';      'agents_validation: compagnie_demandee, statut';      'compagnies_assurance: nom';      'agences: compagnie_id, zone_geographique';      'agents_assurance: compagnie_id, agence_id';    debugPrint('üìä Index recommand√©s √† cr√©er dans la console Firebase:';      debugPrint('  - $index';    debugPrint('üßπ Nettoyage de toutes les donn√©es...';      'vehicules_assures';      'vehicules_conducteurs_liaisons';      'vehicules_recherches';      'agents_validation';      'compagnies_assurance';      'agences';      'agents_assurance';        debugPrint('üóëÔ∏è ${snapshot.docs.length} documents supprim√©s de $collection';    debugPrint('‚úÖ Nettoyage termin√©';    final letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';    final region = ['TUN', 'SFX', 'SOU', 'BIZ', 'GAB';    return '${numbers.toString().padLeft(3, '0')} $region ${suffix.toString().padLeft(3, '0')}';    const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';    final prefixes = ['20', '21', '22', '23', '24', '25', '26', '27', '28', '29';    final number = _random.nextInt(999999).toString().padLeft(6, '0';    return '$prefix$number';      'Ben Ali', 'Trabelsi', 'Bouazizi', 'Chedly', 'Hammami', 'Jebali';      'Marzouki', 'Essebsi', 'Karoui', 'Belhaj', 'Sfar', 'Gharbi';      'Nasri', 'Khelifi', 'Mansouri', 'Agrebi', 'Dridi', 'Mejri';      'Mohamed', 'Ahmed', 'Ali', 'Mahmoud', 'Omar', 'Youssef', 'Karim', 'Sami';      'Fatma', 'Aisha', 'Khadija', 'Maryam', 'Salma', 'Nour', 'Rahma', 'Ines';      'Amira', 'Yasmine', 'Dorra', 'Emna', 'Hajer', 'Rim', 'Sarra', 'Wiem';      'Avenue Habib Bourguiba', 'Rue de la Libert√©', 'Avenue Mohamed V';      'Rue Ibn Khaldoun', 'Avenue de la R√©publique', 'Rue de la Paix';      'Avenue Hedi Chaker', 'Rue Mongi Bali', 'Avenue Taieb Mehiri';    final villes = ['Tunis', 'Sfax', 'Sousse', 'Bizerte', 'Gab√®s', 'Monastir';    return '$numero $rue, $ville';