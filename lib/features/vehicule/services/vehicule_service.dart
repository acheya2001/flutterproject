import 'dart:io';import 'dart:async';import 'dart:convert';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:firebase_storage/firebase_storage.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:flutter/foundation.dart';import 'package:path/path.dart';import 'package:image/image.dart';import 'package:shared_preferences/shared_preferences.dart';import '../models/vehicule_model.dart';import '../../../utils/connectivity_utils.dart';  // Variable pour suivre l';    debugPrint('[VehiculeService] Annulation des opérations en cours';  // Réinitialiser l'état d';  // Récupérer tous les véhicules d';      debugPrint('[VehiculeService] Récupération des véhicules pour le propriétaire: $proprietaireId';          .collection('vehicules';          .where('proprietaireId';            throw TimeoutException('La récupération des véhicules a pris trop de temps. Veuillez vérifier votre connexion internet.';      debugPrint('[VehiculeService] ${vehicules.length} véhicules récupérés';      debugPrint('[VehiculeService] Erreur lors de la récupération des véhicules: $e';      // En cas d';        debugPrint('[VehiculeService] Erreur lors de la récupération du cache: $cacheError';      // Essayer d';        debugPrint('[VehiculeService] Véhicule récupéré du cache: $vehiculeId';      final doc = await _firestore.collection('vehicules';        debugPrint('[VehiculeService] Véhicule non trouvé: $vehiculeId';      debugPrint('[VehiculeService] Véhicule récupéré: $vehiculeId';      debugPrint('[VehiculeService] Erreur lors de la récupération du véhicule: $e';        if (map['createdAt';          map['createdAt'] = (map['createdAt';        if (map['updatedAt';          map['updatedAt'] = (map['updatedAt';        if (map['dateDebutValidite';          map['dateDebutValidite'] = (map['dateDebutValidite';        if (map['dateFinValidite';          map['dateFinValidite'] = (map['dateFinValidite';      await prefs.setString('vehicules_$proprietaireId';      debugPrint('[VehiculeService] Véhicules mis en cache pour: $proprietaireId';      debugPrint('[VehiculeService] Erreur lors de la mise en cache des véhicules: $e';    final vehiculesJson = prefs.getString('vehicules_$proprietaireId';      debugPrint('[VehiculeService] Aucun véhicule en cache pour: $proprietaireId';        if (data['createdAt';          data['createdAt'] = DateTime.parse(data['createdAt';        if (data['updatedAt';          data['updatedAt'] = DateTime.parse(data['updatedAt';        if (data['dateDebutValidite';          data['dateDebutValidite'] = DateTime.parse(data['dateDebutValidite';        if (data['dateFinValidite';          data['dateFinValidite'] = DateTime.parse(data['dateFinValidite';      debugPrint('[VehiculeService] ${vehicules.length} véhicules récupérés du cache';      debugPrint('[VehiculeService] Erreur lors de la lecture du cache: $e';        debugPrint('[VehiculeService] Impossible de mettre en cache un véhicule sans ID';      if (vehiculeMap['createdAt';        vehiculeMap['createdAt'] = (vehiculeMap['createdAt';      if (vehiculeMap['updatedAt';        vehiculeMap['updatedAt'] = (vehiculeMap['updatedAt';      if (vehiculeMap['dateDebutValidite';        vehiculeMap['dateDebutValidite'] = (vehiculeMap['dateDebutValidite';      if (vehiculeMap['dateFinValidite';        vehiculeMap['dateFinValidite'] = (vehiculeMap['dateFinValidite';      await prefs.setString('vehicule_${vehicule.id}';      debugPrint('[VehiculeService] Véhicule mis en cache: ${vehicule.id}';      debugPrint('[VehiculeService] Erreur lors de la mise en cache du véhicule: $e';    final vehiculeJson = prefs.getString('vehicule_$vehiculeId';      debugPrint('[VehiculeService] Véhicule non trouvé dans le cache: $vehiculeId';      if (decodedJson['createdAt';        decodedJson['createdAt'] = DateTime.parse(decodedJson['createdAt';      if (decodedJson['updatedAt';        decodedJson['updatedAt'] = DateTime.parse(decodedJson['updatedAt';      if (decodedJson['dateDebutValidite';        decodedJson['dateDebutValidite'] = DateTime.parse(decodedJson['dateDebutValidite';      if (decodedJson['dateFinValidite';        decodedJson['dateFinValidite'] = DateTime.parse(decodedJson['dateFinValidite';      debugPrint('[VehiculeService] Véhicule récupéré du cache: $vehiculeId';      debugPrint('[VehiculeService] Erreur lors de la lecture du cache: $e';      debugPrint('[VehiculeService] Compression de l\'image: ${imageFile.path}';      // Vérifier la taille de l';      debugPrint('[VehiculeService] Taille originale de l\'image: ${fileSize ~/ 1024} KB';        debugPrint('[VehiculeService] Image très volumineuse, compression extrême appliquée';        debugPrint('[VehiculeService] Image volumineuse, compression très agressive appliquée';      // Lire l';        debugPrint('[VehiculeService] Impossible de décoder l\'image';        throw Exception('Format d\'image non supporté ou image corrompue';      // Redimensionner l';      // Si l';      // Redimensionner l';      // Compresser l';      // Créer un fichier temporaire pour l';      final tempFile = File('${tempDir.path}/compressed_${path.basename(imageFile.path)}';      debugPrint('[VehiculeService] Image compressée: ${tempFile.path}';      debugPrint('[VehiculeService] Taille originale: ${fileSize ~/ 1024} KB, taille compressée: ${compressedSize ~/ 1024} KB';      debugPrint('[VehiculeService] Erreur lors de la compression de l\'image: $e';      // En cas d';        debugPrint('[VehiculeService] Tentative de compression simple';        // Lire l';          final tempFile = File('${tempDir.path}/emergency_compressed_${path.basename(imageFile.path)}';        debugPrint('[VehiculeService] Erreur lors de la compression simple: $innerError';      debugPrint('[VehiculeService] 🚀 DÉBUT téléchargement direct: ${imageFile.path}';      debugPrint('[VehiculeService] 📂 Chemin de stockage: $storagePath';        debugPrint('[VehiculeService] ❌ Le fichier n\'existe pas: ${imageFile.path}';        throw Exception('Le fichier image n\'existe pas';      debugPrint('[VehiculeService] ✅ Fichier existe';      // Vérifier l';      debugPrint('[VehiculeService] 🔄 Vérification Firebase Storage...';        final testRef = storage.ref().child('test_connection';          onTimeout: () => throw TimeoutException('Test connexion timeout';        debugPrint('[VehiculeService] ⚠️ Test connexion Firebase: $e';        // Continuer quand même, l';      final fileName = '${DateTime.now().millisecondsSinceEpoch}_${path.basename(imageFile.path)}';      final fullPath = '$storagePath/$fileName';      debugPrint('[VehiculeService] 📁 Chemin complet Firebase: $fullPath';      debugPrint('[VehiculeService] 📊 Taille du fichier: ${fileSize ~/ 1024} KB';        debugPrint('[VehiculeService] Fichier très volumineux, compression simple';            final tempFile = File('${tempDir.path}/resized_${path.basename(imageFile.path)}';            debugPrint('[VehiculeService] Image redimensionnée: ${compressedBytes.length ~/ 1024} KB';          debugPrint('[VehiculeService] Erreur compression simple: $e, utilisation fichier original';      debugPrint('[VehiculeService] 📤 DÉBUT téléchargement vers Firebase Storage';      debugPrint('[VehiculeService] 📁 Fichier à télécharger: ${finalFile.path}';      debugPrint('[VehiculeService] 📊 Bytes lus: ${bytes.length}';          debugPrint('[VehiculeService] 📊 Progression: ${(progress * 100).toStringAsFixed(1)}% (${snapshot.bytesTransferred}/${snapshot.totalBytes} bytes)';          debugPrint('[VehiculeService] ⚠️ Taille totale inconnue';        // Vérifier l';          debugPrint('[VehiculeService] ❌ Annulation du téléchargement demandée';          debugPrint('[VehiculeService] Timeout du téléchargement atteint';          throw TimeoutException('Le téléchargement a pris trop de temps. Vérifiez votre connexion internet.';      // Obtenir l';      debugPrint('[VehiculeService] ✅ Téléchargement réussi: $downloadUrl';      debugPrint('[VehiculeService] ❌ Erreur téléchargement: $e';      // Si c';      if (e.toString().contains('channel-error') || e.toString().contains('Unable to establish connection';        debugPrint('[VehiculeService] 🔄 Erreur de canal détectée, tentative avec méthode alternative...';      if (e.toString().contains('permission') || e.toString().contains('denied';        throw Exception('Erreur d\'autorisation Firebase Storage. Vérifiez les règles de sécurité.';        throw TimeoutException('Le téléchargement a pris trop de temps. Vérifiez votre connexion internet.';      debugPrint('[VehiculeService] 🔄 MÉTHODE ALTERNATIVE de téléchargement';      final fileName = 'alt_${DateTime.now().millisecondsSinceEpoch}_${path.basename(imageFile.path)}';      final fullPath = '$storagePath/$fileName';      debugPrint('[VehiculeService] 📁 Chemin alternatif: $fullPath';      debugPrint('[VehiculeService] 📊 Taille bytes: ${bytes.length}';        contentType: 'image/jpeg';          'uploadedBy': 'constat_tunisie_app';          'timestamp';      debugPrint('[VehiculeService] 📤 Début téléchargement alternatif...';          debugPrint('[VehiculeService] 📊 Progression alternative: ${(progress * 100).toStringAsFixed(1)}%';          throw TimeoutException('Timeout méthode alternative';      // Obtenir l';      debugPrint('[VehiculeService] ✅ Téléchargement alternatif réussi: $downloadUrl';      debugPrint('[VehiculeService] ❌ Erreur méthode alternative: $e';      throw Exception('Impossible de télécharger l\'image. Vérifiez votre connexion internet et réessayez.';      // Vérifier d';        debugPrint('[VehiculeService] Pas de connexion Internet';      // Vérifier l';        debugPrint('[VehiculeService] Utilisateur non authentifié';      final testQuery = await _firestore.collection('vehicules';            throw TimeoutException('Le test de connexion à Firestore a pris trop de temps.';      debugPrint('[VehiculeService] Test de connexion à Firestore réussi: ${testQuery.docs.length} documents trouvés';      debugPrint('[VehiculeService] Erreur lors du test de connexion à Firestore: $e';      // Vérifier si c'est une erreur d';      if (e.toString().contains('permission-denied') || e.toString().contains('PERMISSION_DENIED';        throw Exception('Vous n\'avez pas les autorisations nécessaires pour accéder à cette fonctionnalité. Veuillez contacter l\'administrateur.';      } else if (e.toString().contains('network';                e.toString().contains('connection';                e.toString().contains('timeout';                e.toString().contains('socket';        throw Exception('Impossible de se connecter à la base de données. Veuillez vérifier votre connexion internet.';        throw Exception('Erreur lors de la connexion à la base de données: $e';      debugPrint('[VehiculeService] Ajout d\'un nouveau véhicule: ${vehicule.immatriculation}';          throw Exception('Mode hors ligne: Le véhicule sera ajouté automatiquement lorsque la connexion Internet sera rétablie.';        final docRef = _firestore.collection('vehicules';        debugPrint('[VehiculeService] ID généré pour le véhicule: $vehiculeId';          debugPrint('[VehiculeService] Téléchargement direct de la photo recto';              'vehicules/$vehiculeId/recto';              debugPrint('[VehiculeService] Opération annulée après téléchargement de la photo recto';            debugPrint('[VehiculeService] Photo recto téléchargée: $photoRectoUrl';            debugPrint('[VehiculeService] Erreur lors du téléchargement de la photo recto: $e';              throw TimeoutException('Le téléchargement de l\'image a pris trop de temps. Veuillez utiliser une image plus petite ou vérifier votre connexion internet.';            debugPrint('[VehiculeService] Continuation sans la photo recto';          debugPrint('[VehiculeService] Téléchargement direct de la photo verso';              'vehicules/$vehiculeId/verso';              debugPrint('[VehiculeService] Opération annulée après téléchargement de la photo verso';            debugPrint('[VehiculeService] Photo verso téléchargée: $photoVersoUrl';            debugPrint('[VehiculeService] Erreur lors du téléchargement de la photo verso: $e';              throw TimeoutException('Le téléchargement de l\'image a pris trop de temps. Veuillez utiliser une image plus petite ou vérifier votre connexion internet.';            debugPrint('[VehiculeService] Continuation sans la photo verso';          debugPrint('[VehiculeService] Opération annulée avant l\'enregistrement dans Firestore';        // Créer un nouveau véhicule avec l';        vehiculeMapData['createdAt';        vehiculeMapData['updatedAt';        debugPrint('[VehiculeService] Enregistrement du véhicule dans Firestore';              throw TimeoutException('L\'enregistrement du véhicule a pris trop de temps. Veuillez vérifier votre connexion internet.';        debugPrint('[VehiculeService] Véhicule enregistré dans Firestore';        if (onProgress != null) onProgress(0.9); // 90% après l';        debugPrint('[VehiculeService] Liste des véhicules du conducteur mise à jour';        debugPrint('[VehiculeService] Timeout global atteint';        throw TimeoutException('L\'opération a pris trop de temps. Veuillez réessayer avec des images plus petites ou vérifier votre connexion internet.';      debugPrint('[VehiculeService] Erreur lors de l\'ajout du véhicule: $e';      if (e.toString().contains('network';          e.toString().contains('connection';          e.toString().contains('timeout';          e.toString().contains('socket';        throw Exception('Impossible de se connecter à la base de données. Veuillez vérifier votre connexion internet.';      // Gérer les erreurs d';      if (e.toString().contains('permission') || e.toString().contains('denied';        throw Exception('Vous n\'avez pas les autorisations nécessaires pour effectuer cette action.';      debugPrint('[VehiculeService] Sauvegarde du véhicule en mode hors ligne';      final String offlineId = 'offline_${DateTime.now().millisecondsSinceEpoch}';        final appDir = await Directory.systemTemp.createTemp('offline_vehicules';        final rectoFile = File('${appDir.path}/recto_$offlineId.jpg';        debugPrint('[VehiculeService] Photo recto sauvegardée localement: ${rectoFile.path}';        final appDir = await Directory.systemTemp.createTemp('offline_vehicules';        final versoFile = File('${appDir.path}/verso_$offlineId.jpg';        debugPrint('[VehiculeService] Photo verso sauvegardée localement: ${versoFile.path}';      // Créer un véhicule avec l';      // Récupérer la file d';      final offlineQueueJson = prefs.getString('offline_vehicules_queue') ?? '[]';      // Ajouter le nouveau véhicule à la file d';        'vehicule';        'photoRectoPath';        'photoVersoPath';        'timestamp';        'action': 'add';      // Sauvegarder la file d';      await prefs.setString('offline_vehicules_queue';      debugPrint('[VehiculeService] Véhicule sauvegardé en mode hors ligne: $offlineId';      debugPrint('[VehiculeService] Erreur lors de la sauvegarde hors ligne: $e';      throw Exception('Erreur lors de la sauvegarde en mode hors ligne: $e';      debugPrint('[VehiculeService] Tentative de synchronisation des véhicules hors ligne';        debugPrint('[VehiculeService] Pas de connexion Internet, synchronisation impossible';      // Récupérer la file d';      final offlineQueueJson = prefs.getString('offline_vehicules_queue';      if (offlineQueueJson == null || offlineQueueJson == '[]';        debugPrint('[VehiculeService] Aucun véhicule hors ligne à synchroniser';      debugPrint('[VehiculeService] ${offlineQueue.length} véhicules hors ligne à synchroniser';      // Traiter chaque élément de la file d';        final action = item['action';        if (action == 'add';            final vehiculeData = Map<String, dynamic>.from(item['vehicule';            final String? photoRectoPath = item['photoRectoPath';            final String? photoVersoPath = item['photoVersoPath';            debugPrint('[VehiculeService] Synchronisation du véhicule: ${vehicule.immatriculation}';            // Créer un nouveau véhicule sans l';              debugPrint('[VehiculeService] Véhicule synchronisé avec succès: $vehiculeId';            debugPrint('[VehiculeService] Erreur lors de la synchronisation du véhicule: $e';        // Ajouter d';      // Supprimer les éléments traités de la file d';        // Trier les indices en ordre décroissant pour éviter les problèmes d';        // Sauvegarder la file d';        await prefs.setString('offline_vehicules_queue';        debugPrint('[VehiculeService] File d\'attente hors ligne mise à jour: ${offlineQueue.length} éléments restants';      debugPrint('[VehiculeService] Erreur lors de la synchronisation des véhicules hors ligne: $e';        throw Exception('ID du véhicule non défini';      debugPrint('[VehiculeService] Mise à jour du véhicule: ${vehicule.id}';          throw Exception('Mode hors ligne: La mise à jour du véhicule sera effectuée automatiquement lorsque la connexion Internet sera rétablie.';          debugPrint('[VehiculeService] Téléchargement direct de la nouvelle photo recto';              'vehicules/${vehicule.id}/recto';              debugPrint('[VehiculeService] Opération annulée après téléchargement de la photo recto';            debugPrint('[VehiculeService] Nouvelle photo recto téléchargée: $photoRectoUrl';            debugPrint('[VehiculeService] Erreur lors du téléchargement de la photo recto: $e';              throw TimeoutException('Le téléchargement de l\'image a pris trop de temps. Veuillez utiliser une image plus petite ou vérifier votre connexion internet.';            debugPrint('[VehiculeService] Continuation sans la photo recto';          debugPrint('[VehiculeService] Téléchargement direct de la nouvelle photo verso';              'vehicules/${vehicule.id}/verso';              debugPrint('[VehiculeService] Opération annulée après téléchargement de la photo verso';            debugPrint('[VehiculeService] Nouvelle photo verso téléchargée: $photoVersoUrl';            debugPrint('[VehiculeService] Erreur lors du téléchargement de la photo verso: $e';              throw TimeoutException('Le téléchargement de l\'image a pris trop de temps. Veuillez utiliser une image plus petite ou vérifier votre connexion internet.';            debugPrint('[VehiculeService] Continuation sans la photo verso';          debugPrint('[VehiculeService] Opération annulée avant l\'enregistrement dans Firestore';        vehiculeMapData['updatedAt';        debugPrint('[VehiculeService] Enregistrement des modifications dans Firestore';            .collection('vehicules';              throw TimeoutException('La mise à jour du véhicule a pris trop de temps. Veuillez vérifier votre connexion internet.';        debugPrint('[VehiculeService] Véhicule mis à jour avec succès';        debugPrint('[VehiculeService] Timeout global atteint';        throw TimeoutException('L\'opération a pris trop de temps. Veuillez réessayer avec des images plus petites ou vérifier votre connexion internet.';      debugPrint('[VehiculeService] Erreur lors de la mise à jour du véhicule: $e';      if (e.toString().contains('network';          e.toString().contains('connection';          e.toString().contains('timeout';          e.toString().contains('socket';        throw Exception('Impossible de se connecter à la base de données. Veuillez vérifier votre connexion internet.';      // Gérer les erreurs d';      if (e.toString().contains('permission') || e.toString().contains('denied';        throw Exception('Vous n\'avez pas les autorisations nécessaires pour effectuer cette action.';      debugPrint('[VehiculeService] Sauvegarde de la mise à jour du véhicule en mode hors ligne';        final appDir = await Directory.systemTemp.createTemp('offline_vehicules';        final rectoFile = File('${appDir.path}/recto_update_${vehicule.id}.jpg';        debugPrint('[VehiculeService] Photo recto sauvegardée localement: ${rectoFile.path}';        final appDir = await Directory.systemTemp.createTemp('offline_vehicules';        final versoFile = File('${appDir.path}/verso_update_${vehicule.id}.jpg';        debugPrint('[VehiculeService] Photo verso sauvegardée localement: ${versoFile.path}';      // Récupérer la file d';      final offlineQueueJson = prefs.getString('offline_vehicules_queue') ?? '[]';      // Ajouter la mise à jour du véhicule à la file d';        'vehicule';        'photoRectoPath';        'photoVersoPath';        'timestamp';        'action': 'update';      // Sauvegarder la file d';      await prefs.setString('offline_vehicules_queue';      debugPrint('[VehiculeService] Mise à jour du véhicule sauvegardée en mode hors ligne: ${vehicule.id}';      debugPrint('[VehiculeService] Erreur lors de la sauvegarde hors ligne: $e';      throw Exception('Erreur lors de la sauvegarde en mode hors ligne: $e';      debugPrint('[VehiculeService] Suppression du véhicule: $vehiculeId';        throw Exception('Mode hors ligne: La suppression du véhicule sera effectuée automatiquement lorsque la connexion Internet sera rétablie.';          .collection('vehicules';            throw TimeoutException('La suppression du véhicule a pris trop de temps. Veuillez vérifier votre connexion internet.';      await prefs.remove('vehicule_$vehiculeId';      debugPrint('[VehiculeService] Véhicule supprimé avec succès';      debugPrint('[VehiculeService] Erreur lors de la suppression du véhicule: $e';        throw TimeoutException('La suppression du véhicule a pris trop de temps. Veuillez vérifier votre connexion internet.';      if (e.toString().contains('network';          e.toString().contains('connection';          e.toString().contains('timeout';          e.toString().contains('socket';        throw Exception('Impossible de se connecter à la base de données. Veuillez vérifier votre connexion internet.';      debugPrint('[VehiculeService] Sauvegarde de la suppression du véhicule en mode hors ligne';      // Récupérer la file d';      final offlineQueueJson = prefs.getString('offline_vehicules_queue') ?? '[]';      // Ajouter la suppression du véhicule à la file d';        'vehiculeId';        'proprietaireId';        'timestamp';        'action': 'delete';      // Sauvegarder la file d';      await prefs.setString('offline_vehicules_queue';      debugPrint('[VehiculeService] Suppression du véhicule sauvegardée en mode hors ligne: $vehiculeId';      debugPrint('[VehiculeService] Erreur lors de la sauvegarde hors ligne: $e';      throw Exception('Erreur lors de la sauvegarde en mode hors ligne: $e';  // Supprimer les photos d';      debugPrint('[VehiculeService] Suppression des photos du véhicule: $vehiculeId';      final ref = _storage.ref().child('vehicules/$vehiculeId';          debugPrint('[VehiculeService] Photo supprimée: ${item.fullPath}';            debugPrint('[VehiculeService] Photo supprimée: ${item.fullPath}';        // Ignorer les erreurs si le dossier n';        debugPrint('[VehiculeService] Avertissement lors de la suppression des photos: $e';      debugPrint('[VehiculeService] Erreur lors de la suppression des photos: $e';  // Mettre à jour la liste des véhicules d';      debugPrint('[VehiculeService] Mise à jour des véhicules du conducteur: $conducteurId';      final conducteurRef = _firestore.collection('conducteurs';        debugPrint('[VehiculeService] Document conducteur non trouvé: $conducteurId';        // Ajouter l';          'vehiculeIds';          'updatedAt';        debugPrint('[VehiculeService] Véhicule ajouté à la liste du conducteur';        // Supprimer l';          'vehiculeIds';          'updatedAt';        debugPrint('[VehiculeService] Véhicule supprimé de la liste du conducteur';      debugPrint('[VehiculeService] Erreur lors de la mise à jour des véhicules du conducteur: $e';      // Ne pas relancer l'exception pour éviter de bloquer l';      // en cas d';}