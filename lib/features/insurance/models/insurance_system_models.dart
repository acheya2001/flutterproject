import 'package:cloud_firestore/cloud_firestore.dart';  final String code; // Code unique (ex: STAR, MAG, SAL';  final String numeroAgrement; // Numero d';      nom: map['nom'] ?? ';      code: map['code'] ?? ';      logo: map['logo'] ?? ';      couleur: map['couleur'] ?? '#2196F3';      slogan: map['slogan'] ?? ';      adresseSiege: map['adresseSiege'] ?? ';      telephone: map['telephone'] ?? ';      email: map['email'] ?? ';      siteWeb: map['siteWeb'] ?? ';      numeroAgrement: map['numeroAgrement'] ?? ';      capital: map['capital';      dateCreation: (map['dateCreation] as Timestamp?)?.toDate() ?? DateTime.now(';      isActive: map['isActive';      gouvernoratsCouverts: List<String>.from(map['gouvernoratsCouverts] ?? [';      statistiques: Map<String, dynamic>.from(map['statistiques';      createdAt: (map['createdAt] as Timestamp?)?.toDate() ?? DateTime.now(';      updatedAt: (map[';  Map<String, dynamic> toMap(';      'nom';      'code';      'logo';      'couleur';      'slogan';      'adresseSiege';      'telephone';      'email';      'siteWeb';      'numeroAgrement';      'capital';      'dateCreation: Timestamp.fromDate(dateCreation';      'isActive';      'gouvernoratsCouverts';      'statistiques';      'createdAt: Timestamp.fromDate(createdAt';      'updatedAt: Timestamp.fromDate(updatedAt';/// üè™ Modele unifie pour une agence d';      compagnieId: map['compagnieId'] ?? ';      nom: map['nom'] ?? ';      codeAgence: map['codeAgence'] ?? ';      adresse: map['adresse'] ?? ';      ville: map['ville'] ?? ';      gouvernorat: map['gouvernorat'] ?? ';      telephone: map['telephone'] ?? ';      email: map['email'] ?? ';      responsableNom: map['responsableNom'] ?? ';      responsableTelephone: map['responsableTelephone'] ?? ';      responsableEmail: map['responsableEmail'] ?? ';      zoneGeographique: List<String>.from(map['zoneGeographique] ?? [';      isActive: map['isActive';      statistiques: Map<String, dynamic>.from(map['statistiques';      createdAt: (map['createdAt] as Timestamp?)?.toDate() ?? DateTime.now(';      updatedAt: (map[';  Map<String, dynamic> toMap(';      'compagnieId';      'nom';      'codeAgence';      'adresse';      'ville';      'gouvernorat';      'telephone';      'email';      'responsableNom';      'responsableTelephone';      'responsableEmail';      'zoneGeographique';      'isActive';      'statistiques';      'createdAt: Timestamp.fromDate(createdAt';      'updatedAt: Timestamp.fromDate(updatedAt';/// üë®‚Äçüíº Modele unifie pour un agent d';      compagnieId: map['compagnieId'] ?? ';      agenceId: map['agenceId'] ?? ';      email: map['email'] ?? ';      nom: map['nom'] ?? ';      prenom: map['prenom'] ?? ';      telephone: map['telephone'] ?? ';      numeroAgent: map['numeroAgent'] ?? ';      poste: map['poste'] ?? ';      cin: map['cin'] ?? ';      adresse: map['adresse';      dateEmbauche: (map['dateEmbauche] as Timestamp?)?.toDate(';      statut: map['statut'] ?? 'actif';      permissions: List<String>.from(map['permissions] ?? [';      clientIds: List<String>.from(map['clientIds] ?? [';      statistiques: Map<String, dynamic>.from(map['statistiques';      createdAt: (map['createdAt] as Timestamp?)?.toDate() ?? DateTime.now(';      updatedAt: (map[';  Map<String, dynamic> toMap(';      'compagnieId';      'agenceId';      'email';      'nom';      'prenom';      'telephone';      'numeroAgent';      'poste';      'cin';      'adresse';      'dateEmbauche: dateEmbauche != null ? Timestamp.fromDate(dateEmbauche!';      'statut';      'permissions';      'clientIds';      'statistiques';      'createdAt: Timestamp.fromDate(createdAt';      'updatedAt: Timestamp.fromDate(updatedAt';  final List<String> contratIds; // IDs des contrats d';      email: map['email'] ?? ';      nom: map['nom'] ?? ';      prenom: map['prenom'] ?? ';      telephone: map['telephone'] ?? ';      cin: map['cin'] ?? ';      adresse: map['adresse';      dateNaissance: map['dateNaissance';      lieuNaissance: map['lieuNaissance';      profession: map['profession';      numeroPermis: map['numeroPermis'] ?? ';      dateObtentionPermis: (map['dateObtentionPermis] as Timestamp?)?.toDate(';      categoriesPermis: List<String>.from(map['categoriesPermis'] ?? ['B';      vehiculeIds: List<String>.from(map['vehiculeIds] ?? [';      contratIds: List<String>.from(map['contratIds] ?? [';      statistiques: Map<String, dynamic>.from(map['statistiques';      createdAt: (map['createdAt] as Timestamp?)?.toDate() ?? DateTime.now(';      updatedAt: (map[';  Map<String, dynamic> toMap(';      'email';      'nom';      'prenom';      'telephone';      'cin';      'adresse';      'dateNaissance';      'lieuNaissance';      'profession';      'numeroPermis';      'dateObtentionPermis: dateObtentionPermis != null ? Timestamp.fromDate(dateObtentionPermis!';      'categoriesPermis';      'vehiculeIds';      'contratIds';      'statistiques';      'createdAt: Timestamp.fromDate(createdAt';      'updatedAt: Timestamp.fromDate(updatedAt';  final List<String> contratIds; // IDs des contrats d';  factory VehiculeUnified.fromMap(Map<String, dynamic> map, String id';      proprietaireId: map['proprietaireId'] ?? ';      immatriculation: map['immatriculation'] ?? ';      marque: map['marque'] ?? ';      modele: map['modele'] ?? ';      annee: map['annee] ?? DateTime.now(';      couleur: map['couleur'] ?? ';      numeroChassis: map['numeroChassis'] ?? ';      numeroSerie: map['numeroSerie'] ?? ';      typeVehicule: map['typeVehicule'] ?? 'Voiture';      carburant: map['carburant'] ?? 'Essence';      puissanceFiscale: map['puissanceFiscale';      nombrePlaces: map['nombrePlaces';      valeurVehicule: (map['valeurVehicule] ?? 0).toDouble(';      dateAchat: (map['dateAchat] as Timestamp?)?.toDate(';      kilometrage: map['kilometrage';      photos: List<String>.from(map['photos] ?? [';      documents: List<String>.from(map['documents] ?? [';      contratIds: List<String>.from(map['contratIds] ?? [';      caracteristiques: Map<String, dynamic>.from(map['caracteristiques';      createdAt: (map['createdAt] as Timestamp?)?.toDate() ?? DateTime.now(';      updatedAt: (map[';  Map<String, dynamic> toMap(';      'proprietaireId';      'immatriculation';      'marque';      'modele';      'annee';      'couleur';      'numeroChassis';      'numeroSerie';      'typeVehicule';      'carburant';      'puissanceFiscale';      'nombrePlaces';      'valeurVehicule';      'dateAchat: dateAchat != null ? Timestamp.fromDate(dateAchat!';      'kilometrage';      'photos';      'documents';      'contratIds';      'caracteristiques';      'createdAt: Timestamp.fromDate(createdAt';      'updatedAt: Timestamp.fromDate(updatedAt';/// üìÑ Modele unifie pour un contrat d';      numeroContrat: map['numeroContrat'] ?? ';      compagnieId: map['compagnieId'] ?? ';      agenceId: map['agenceId'] ?? ';      agentId: map['agentId'] ?? ';      clientId: map['clientId'] ?? ';      vehiculeId: map['vehiculeId'] ?? ';      typeContrat: map['typeContrat'] ?? 'Tiers';      dateDebut: (map['dateDebut] as Timestamp?)?.toDate() ?? DateTime.now(';      dateFin: (map['dateFin] as Timestamp?)?.toDate() ?? DateTime.now().add(const Duration(days: 365)';      dateCreation: (map['dateCreation] as Timestamp?)?.toDate() ?? DateTime.now(';      statut: map['statut'] ?? 'actif';      primeAnnuelle: (map['primeAnnuelle] ?? 0).toDouble(';      franchise: (map['franchise] ?? 0).toDouble(';      garanties: List<String>.from(map['garanties] ?? [';      conditions: Map<String, dynamic>.from(map['conditions';      paiements: List<Map<String, dynamic>>.from(map['paiements] ?? [';      documents: List<String>.from(map['documents] ?? [';      notes: map['notes';      createdAt: (map['createdAt] as Timestamp?)?.toDate() ?? DateTime.now(';      updatedAt: (map[';  Map<String, dynamic> toMap(';      'numeroContrat';      'compagnieId';      'agenceId';      'agentId';      'clientId';      'vehiculeId';      'typeContrat';      'dateDebut: Timestamp.fromDate(dateDebut';      'dateFin: Timestamp.fromDate(dateFin';      'dateCreation: Timestamp.fromDate(dateCreation';      'statut';      'primeAnnuelle';      'franchise';      'garanties';      'conditions';      'paiements';      'documents';      'notes';      'createdAt: Timestamp.fromDate(createdAt';      'updatedAt: Timestamp.fromDate(updatedAt';/// üìã Modele unifie pour un constat d';  final Map<String, dynamic> circonstances; // Circonstances de l';  final String? expertId; // ID de l';  factory ConstatAccidentUnified.fromMap(Map<String, dynamic> map, String id';      numeroConstat: map['numeroConstat'] ?? ';      dateAccident: (map['dateAccident] as Timestamp?)?.toDate() ?? DateTime.now(';      lieuAccident: map['lieuAccident'] ?? ';      description: map['description'] ?? ';      vehicules: (map['vehicules] as List?)?.map((v) => VehiculeAccidentInfo.fromMap(v).toList(';      conducteurs: (map['conducteurs] as List?)?.map((c) => ConducteurAccidentInfo.fromMap(c).toList(';      photos: List<String>.from(map['photos] ?? [';      documents: List<String>.from(map['documents] ?? [';      circonstances: Map<String, dynamic>.from(map['circonstances';      expertId: map['expertId';      statut: map['statut'] ?? 'en_cours';      evaluation: Map<String, dynamic>.from(map['evaluation';      createdAt: (map['createdAt] as Timestamp?)?.toDate() ?? DateTime.now(';      updatedAt: (map[';  Map<String, dynamic> toMap(';      'numeroConstat';      'dateAccident: Timestamp.fromDate(dateAccident';      'lieuAccident';      'description';      'vehicules: vehicules.map((v) => v.toMap().toList(';      'conducteurs: conducteurs.map((c) => c.toMap().toList(';      'photos';      'documents';      'circonstances';      'expertId';      'statut';      'evaluation';      'createdAt: Timestamp.fromDate(createdAt';      'updatedAt: Timestamp.fromDate(updatedAt';/// üöó Informations d';      photos: List<String>.from(map[';  Map<String, dynamic> toMap(';      'vehiculeId';      'contratId';      'compagnieId';      'immatriculation';      'conducteurId';      'degats';      'photos';  Map<String, dynamic> toMap(';      'conducteurId';      'nom';      'prenom';      'telephone';      'numeroPermis';      'estProprietaire';      'declaration';  final String numeroExpert; // Numero d';  final List<String> gouvernoratsIntervention; // Zones d';  final String? cabinet; // Nom du cabinet d';  final Map<String, dynamic> statistiques; // Nombre d';  factory ExpertAutomobileUnified.fromMap(Map<String, dynamic> map, String id';      email: map['email'] ?? ';      nom: map['nom'] ?? ';      prenom: map['prenom'] ?? ';      telephone: map['telephone'] ?? ';      cin: map['cin'] ?? ';      numeroExpert: map['numeroExpert'] ?? ';      specialite: map['specialite'] ?? 'Automobile';      compagnieIds: List<String>.from(map['compagnieIds] ?? [';      gouvernoratsIntervention: List<String>.from(map['gouvernoratsIntervention] ?? [';      adresse: map['adresse';      cabinet: map['cabinet';      dateAgrement: (map['dateAgrement] as Timestamp?)?.toDate(';      statut: map['statut'] ?? 'actif';      certifications: List<String>.from(map['certifications] ?? [';      constatIds: List<String>.from(map['constatIds] ?? [';      statistiques: Map<String, dynamic>.from(map['statistiques';      tarifs: Map<String, dynamic>.from(map['tarifs';      createdAt: (map['createdAt] as Timestamp?)?.toDate() ?? DateTime.now(';      updatedAt: (map[';  Map<String, dynamic> toMap(';      'email';      'nom';      'prenom';      'telephone';      'cin';      'numeroExpert';      'specialite';      'compagnieIds';      'gouvernoratsIntervention';      'adresse';      'cabinet';      'dateAgrement: dateAgrement != null ? Timestamp.fromDate(dateAgrement!';      'statut';      'certifications';      'constatIds';      'statistiques';      'tarifs';      'createdAt: Timestamp.fromDate(createdAt';      'updatedAt: Timestamp.fromDate(updatedAt';/// üìä √ânumerations pour le systeme d';  static const String compagnies = 'compagnies_assurance';  static const String agences = 'agences_assurance';  static const String agents = 'agents_assurance';  static const String clients = 'clients_conducteurs';  static const String vehicules = 'vehicules';  static const String contrats = 'contrats_assurance';  static const String constats = 'constats_accidents';  static const String experts = ';  static String agencesParCompagnie(String compagnieId') => '$compagnies/';  static String agentsParAgence(String compagnieId, String agenceId') => '$compagnies/$compagnieId/agences/';  static String clientsParCompagnie(String compagnieId') => '$compagnies/';  static String contratsParCompagnie(String compagnieId') => '$compagnies/';  static String vehiculesParCompagnie(String compagnieId') => '$compagnies/';  static String constatsParCompagnie(String compagnieId') => '$compagnies/';