import 'package:cloud_firestore/cloud_firestore.dart';import 'package:firebase_auth/firebase_auth.dart';import '../models/insurance_contract.dart';import 'notification_service.dart';/// üìã Service de gestion des contrats d';  /// ‚ûï Cr√©er un nouveau contrat et l';      print('üìã [CONTRACT] Cr√©ation contrat: ${contract.numeroContrat}';          .collection('users';          .where('email';          'success';          'message': 'Conducteur non trouv√© avec l\'email: $conducteurEmail';      // V√©rifier le type d';          .collection('user_types';      final userType = userTypeDoc.data()?['type'] as String? ?? 'conducteur';      if (userType != 'conducteur';          'success';          'message': 'L\'utilisateur n\'est pas un conducteur: $userType';          .collection('contracts';          .where('numeroContrat';          'success';          'message': 'Un contrat avec ce num√©ro existe d√©j√†: ${contract.numeroContrat}';      final contractRef = await _firestore.collection('contracts';        'conducteurId';        'conducteurEmail';        'createdAt';        'updatedAt';        'status': 'active';        'createdBy';        agentNom: 'Agent ${contract.agentId}';      print('‚úÖ [CONTRACT] Contrat cr√©√© et affect√© avec succ√®s';        'success';        'message': 'Contrat cr√©√© et affect√© avec succ√®s';        'contractId';      print('‚ùå [CONTRACT] Erreur cr√©ation contrat: $e';        'success';        'message': 'Erreur lors de la cr√©ation du contrat: $e';          .collection('vehicules';          .where('immatriculation';        'immatriculation';        'marque';        'modele';        'annee';        'couleur';        'numeroSerie';        'puissance';        'energie';        'usage';        'conducteurId';        'assurance';          'compagnie';          'numeroContrat';          'agence';          'agent': 'Agent ${contract.agentId}';          'dateDebut';          'dateFin';          'status': 'active';        'updatedAt';            .collection('vehicules';        print('üîÑ [VEHICLE] V√©hicule mis √† jour: ${contract.vehicule.immatriculation}';        vehiculeData['createdAt';        await _firestore.collection('vehicules';        print('‚ûï [VEHICLE] Nouveau v√©hicule cr√©√©: ${contract.vehicule.immatriculation}';      print('‚ùå [VEHICLE] Erreur gestion v√©hicule: $e';  /// üìã R√©cup√©rer les contrats d';        .collection('contracts';        .where('createdBy';        .where('status', isEqualTo: 'active';        .orderBy('createdAt';                  'id';  /// üöó R√©cup√©rer les v√©hicules d';        .collection('vehicules';        .where('conducteurId';        .orderBy('updatedAt';            .map((doc) => {'id';          .collection('users';          .where('email';        // V√©rifier le type d';            .collection('user_types';        final userType = userTypeDoc.data()?['type'] as String? ?? 'conducteur';        if (userType != 'conducteur';        return {'id': doc.id, 'type';      print('‚ùå [SEARCH] Erreur recherche conducteur: $e';          .collection('contracts';          .where('createdBy';          .where((doc) => doc.data()['status'] == 'active';        final createdAt = (doc.data()['createdAt';        'total';        'active';        'thisMonth';      print('‚ùå [STATS] Erreur statistiques: $e';      return {'total': 0, 'active': 0, 'thisMonth';      await _firestore.collection('contracts';        'dateFin';        'updatedAt';      final contract = await _firestore.collection('contracts';        final immatriculation = contractData['vehicule']['immatriculation';            .collection('vehicules';            .where('immatriculation';              .collection('vehicules';            'assurance.dateFin';            'updatedAt';      print('‚ùå [RENEW] Erreur renouvellement: $e';      await _firestore.collection('contracts';        'status': 'cancelled';        'cancelReason';        'cancelledAt';        'updatedAt';      final contract = await _firestore.collection('contracts';        final immatriculation = contractData['vehicule']['immatriculation';            .collection('vehicules';            .where('immatriculation';              .collection('vehicules';            'assurance.status': 'cancelled';            'updatedAt';      print('‚ùå [CANCEL] Erreur annulation: $e';