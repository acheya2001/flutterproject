import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';import '../models/insurance_system_models.dart';import 'insurance_system_service.dart';/// üîÑ Service pour l'auto-remplissage des formulaires d';        if (contratActif != null';          // Recuperer les informations de la compagnie et de l';            'vehicule: vehicule.toMap(';            'contrat: contratActif.toMap(';            'compagnie';            ';          }';        'conducteur: conducteur.toMap(';        'vehiculesAvecContrats';        'totalVehicules';        ';    } catch (e';      debugPrint('‚ùå Erreur lors de la recuperation des donnees pour auto-remplissage:  + e.toString()';  /// üöó Obtenir les donnees d';          'error': 'Aucun contrat d\'assurance actif trouve pour ce vehicule';          'vehicule: vehicule.toMap(';          'proprietaire: proprietaire.toMap(';      // 4. Recuperer les informations de la compagnie et de l';        'vehicule: vehicule.toMap(';        'proprietaire: proprietaire.toMap(';        'contrat: contratActif.toMap(';        'compagnie';        'agence';        ';    } catch (e';      debugPrint('‚ùå Erreur lors de la recuperation des donnees du vehicule:  + e.toString()';  /// üìù Generer les donnees formatees pour l';  ';      'conducteur';        'nom';        'prenom';        'nomComplet';        'telephone';        'cin';        'numeroPermis';        'adresse': proprietaire.adresse ?? ';        'dateNaissance': proprietaire.dateNaissance ?? ';      'vehicule';        'immatriculation';        'marque';        'modele';        'annee: vehicule.annee.toString(';        'couleur';        'numeroChassis';        'numeroSerie';        'typeVehicule';        'carburant';        'puissanceFiscale: vehicule.puissanceFiscale.toString(';        'nombrePlaces: vehicule.nombrePlaces.toString(';        'valeurVehicule: vehicule.valeurVehicule.toString(';      // Informations d';      'assurance';        'numeroContrat';        'compagnieNom': compagnieInfo?['nom'] ?? ';        'compagnieCode': compagnieInfo?['code'] ?? ';        'agenceNom': agenceInfo?['nom'] ?? ';        'agenceAdresse': agenceInfo?['adresse'] ?? ';        'agenceTelephone': agenceInfo?['telephone'] ?? ';        'typeContrat';        'dateDebut: _formatDate(contrat.dateDebut';        'dateFin: _formatDate(contrat.dateFin';        'franchise: contrat.franchise.toString(';        'garanties': contrat.garanties.join(', ';        'statut';        'isActive';      'metadata';        'dateAutoFill: DateTime.now().toIso8601String(';        'vehiculeId';        'contratId';        'proprietaireId';        'compagnieId';        'agenceId';    } catch (e';      debugPrint('‚ùå Erreur lors de la recuperation de la compagnie:  + e.toString()';  /// üè™ Recuperer les informations d';      debugPrint('‚ùå Erreur lors de la recuperation de l\'agence:  + e.toString()';  /// üìÖ Formater une date pour l';    return '{date.day.toString(').padLeft(2, '0')}/'{date.month.toString().padLeft(2, '0')}/';  static Map<String, dynamic> validateAutoFillData(Map<String, dynamic> data';    if (data['assurance']?['isActive] != true';      errors.add('Le contrat d\'assurance n\'est pas actif';    final dateFin = DateTime.tryParse(data['assurance']?['dateFin'] ?? ';    if (dateFin != null && dateFin.isBefore(DateTime.now()';      errors.add('Le contrat d\'assurance a expire';    // Verifications d';    if (data['conducteur']?['numeroPermis]?.isEmpty ?? true';      warnings.add('Numero de permis manquant';    if (data['vehicule']?['numeroChassis]?.isEmpty ?? true';      warnings.add('Numero de ch√¢ssis manquant';      'isValid';      'errors';      'warnings';      ';  }';      'numeroConstat: _generateConstatNumber(';      'dateAccident: dateAccident.toIso8601String(';      'lieuAccident';      'description': description ?? ';      // Vehicule A (vehicule du conducteur connecte';      'vehiculeA';        'immatriculation': autoFillData['vehicule']['immatriculation';        'marque': autoFillData['vehicule']['marque';        'modele': autoFillData['vehicule']['modele';        'annee': autoFillData['vehicule']['annee';        'couleur': autoFillData['vehicule']['couleur';        'numeroContrat': autoFillData['assurance']['numeroContrat';        'compagnieAssurance': autoFillData['assurance']['compagnieNom';        'agenceAssurance': autoFillData['assurance']['agenceNom';        'typeContrat': autoFillData['assurance']['typeContrat';      'conducteurA';        'nom': autoFillData['conducteur']['nom';        'prenom': autoFillData['conducteur']['prenom';        'telephone': autoFillData['conducteur']['telephone';        'cin': autoFillData['conducteur']['cin';        'numeroPermis': autoFillData['conducteur']['numeroPermis';        'adresse': autoFillData['conducteur']['adresse';        'estProprietaire';      'metadata';        'autoFilled';        'autoFillSource': autoFillData['metadata';        'createdAt: DateTime.now().toIso8601String(';        'statut': ';    final month = now.month.toString(').padLeft(2, ';    final day = now.day.toString(').padLeft(2, ';    final timestamp = now.millisecondsSinceEpoch.toString().substring(8';    return 'CST$year$month$day';