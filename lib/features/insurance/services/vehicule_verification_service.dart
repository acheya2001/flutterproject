import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';import '../models/vehicule_complet_model.dart';  /// üîç V√©rifier un v√©hicule par compagnie d';      debugPrint('üîç V√©rification v√©hicule: $compagnieAssurance - $numeroContrat';          .collection('vehicules_complets';          .where('contrat.compagnie_id';          .where('contrat.numero_contrat';        debugPrint('‚ùå V√©hicule non trouv√©';          message: 'V√©hicule non trouv√© dans la base de donn√©es de $compagnieAssurance';        debugPrint('‚ùå Contrat inactif';          message: 'Le contrat d\'assurance est inactif ou expir√©';        debugPrint('‚ùå Conducteur non autoris√©';          message: 'Vous n\'√™tes pas autoris√© √† conduire ce v√©hicule';      if (!droits.contains('declarer_sinistre';        debugPrint('‚ùå Droits insuffisants';          message: 'Vous n\'avez pas le droit de d√©clarer un sinistre pour ce v√©hicule';      debugPrint('‚úÖ V√©hicule v√©rifi√© avec succ√®s: ${vehicule.descriptionVehicule}';        message: 'V√©hicule v√©rifi√© avec succ√®s';      debugPrint('‚ùå Erreur v√©rification v√©hicule: $e';        message: 'Erreur lors de la v√©rification: $e';  /// üìù Enregistrer une v√©rification dans l';      final verificationId = _firestore.collection('vehicules_verifications';        'id';        'vehicule_id';        'numero_contrat';        'compagnie_id';        'conducteur_email';        'success';        'error_type';        'temps_verification';        'date_verification';        'createdAt';          .collection('vehicules_verifications';      debugPrint('üìù V√©rification enregistr√©e: $verificationId';      debugPrint('‚ùå Erreur enregistrement v√©rification: $e';  /// üìã Obtenir l'historique des v√©rifications d';          .collection('vehicules_verifications';          .where('conducteur_email';          .orderBy('date_verification';      debugPrint('‚ùå Erreur r√©cup√©ration historique v√©rifications: $e';  /// üè¢ Obtenir la liste des compagnies d';          .collection('compagnies_assurance';          .orderBy('nom';          .map((doc) => doc.data()['code';      debugPrint('‚ùå Erreur r√©cup√©ration compagnies: $e';      return ['STAR', 'MAGHREBIA', 'LLOYD', 'GAT', 'AST';      Query query = _firestore.collection('vehicules_verifications';        query = query.where('conducteur_email';        query = query.where('date_verification';        query = query.where('date_verification';        if (data['success';          final errorType = data['error_type';        tempsTotal += (data['temps_verification';        final compagnie = data['compagnie_id';        'total_verifications';        'verifications_reussies';        'verifications_echouees';        'taux_succes';        'temps_verification_moyen';        'erreurs_par_type';        'verifications_par_compagnie';      debugPrint('‚ùå Erreur statistiques v√©rification: $e';/// üö´ Types d';/// üìã Mod√®le d';      vehiculeId: data['vehicule_id';      numeroContrat: data['numero_contrat';      compagnieId: data['compagnie_id';      conducteurEmail: data['conducteur_email'] ?? '';      success: data['success';      errorType: data['error_type';      tempsVerification: data['temps_verification';      dateVerification: (data['date_verification';