import 'package:cloud_firestore/cloud_firestore.dart';/// üìã Mod√®le pour un constat d';    if (userRole == 'assureur' || userRole == 'expert';      'numero_constat';      'type';      'statut';      'accident';      'vehicules';      'analyse_ia';      'workflow';      'assignation';      'participants';      'created_at';      'updated_at';      numeroConstat: map['numero_constat'] ?? '';      type: map['type'] ?? 'individuel';      statut: map['statut'] ?? 'brouillon';      accident: AccidentInfo.fromMap(map['accident';      vehicules: (map['vehicules';      analyseIA: map['analyse_ia';          ? AnalyseIAInfo.fromMap(map['analyse_ia';      workflow: WorkflowInfo.fromMap(map['workflow';      assignation: map['assignation';          ? AssignationInfo.fromMap(map['assignation';      createdAt: (map['created_at';      updatedAt: (map['updated_at';/// üí• Informations de l';      'date';      'heure';      'lieu';      'conditions';      date: (map['date';      heure: map['heure'] ?? '';      lieu: LieuInfo.fromMap(map['lieu';      conditions: ConditionsInfo.fromMap(map['conditions';      'adresse';      'coordonnees';        'latitude';        'longitude';    final coordonnees = map['coordonnees';      adresse: map['adresse'] ?? '';      latitude: (coordonnees['latitude';      longitude: (coordonnees['longitude';/// üå§Ô∏è Conditions de l';      'meteo';      'visibilite';      'etat_route';      meteo: map['meteo'] ?? '';      visibilite: map['visibilite'] ?? '';      etatRoute: map['etat_route'] ?? '';      'vehicule_id';      'conducteur_id';      'assureur_id';      'numero_contrat';      'degats';      'responsabilite';      vehiculeId: map['vehicule_id'] ?? '';      conducteurId: map['conducteur_id'] ?? '';      assureurId: map['assureur_id'] ?? '';      numeroContrat: map['numero_contrat'] ?? '';      degats: DegatsInfo.fromMap(map['degats';      responsabilite: map['responsabilite';      'description';      'gravite';      'photos';      'estimation_cout';      description: map['description'] ?? '';      gravite: map['gravite'] ?? 'moyen';      photos: List<String>.from(map['photos';      estimationCout: (map['estimation_cout';      'photos_analysees';      'vehicules_detectes';      'degats_estimes';      'scenario_probable';      'confidence_score';      photosAnalysees: List<String>.from(map['photos_analysees';      vehiculesDetectes: map['vehicules_detectes';      degatsEstimes: Map<String, String>.from(map['degats_estimes';      scenarioProbable: map['scenario_probable'] ?? '';      confidenceScore: (map['confidence_score';      'etape_actuelle';      'historique';      etapeActuelle: map['etape_actuelle'] ?? 'remplissage';      historique: (map['historique';      'etape';      'date';      'user_id';      'action';      etape: map['etape'] ?? '';      date: (map['date';      userId: map['user_id'] ?? '';      action: map['action'] ?? '';      'expert_id';      'date_assignation';      'priorite';      expertId: map['expert_id'] ?? '';      dateAssignation: (map['date_assignation';      priorite: map['priorite'] ?? 'normale';