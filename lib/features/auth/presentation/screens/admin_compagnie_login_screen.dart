import 'package:flutter/material.dart';import 'package:cloud_firestore/cloud_firestore.dart';import '../../../admin_compagnie/services/admin_compagnie_auth_service.dart';import '../../../admin_compagnie/services/auth_diagnostic_service.dart';import '../../../admin_compagnie/services/firestore_repair_service.dart';import '../../../admin_compagnie/services/direct_firestore_fix.dart';  const Text(';  final _formKey = GlobalKey<FormState>(')')';  final _emailController = TextEditingController(text: 'admin.compagnie@test.tn';  final _passwordController = TextEditingController(text: ';      final password = _passwordController.text.trim(';      debugPrint('[ADMIN_COMPAGNIE_LOGIN] ðŸš€ Debut connexion: ';    } catch (e';      debugPrint(';        ScaffoldMessenger.of(context';            content: (e';      ScaffoldMessenger.of(context';          content: const Text(';  Future<void> _repairFirestore(')')';      debugPrint(';        ScaffoldMessenger.of(context';            content: const Text(';        ScaffoldMessenger.of(context')')';            content: const Text(success ? 'âœ… Reparation reussie !' : ';      if (success';        debugPrint(';    } catch (e';      debugPrint(';        ScaffoldMessenger.of(context';            content: (e';      debugPrint(';        ScaffoldMessenger.of(context';            content: const Text(';        ScaffoldMessenger.of(context')')';            content: const Text(success ? 'âœ… Reparation directe reussie !' : ';      if (success';        debugPrint('[ADMIN_COMPAGNIE_LOGIN] âœ… Reparation directe reussie !';        debugPrint(';        if (mounted';          Navigator.pushReplacementNamed(context, ';    } catch (e';      debugPrint(';        ScaffoldMessenger.of(context';            content: (e';      debugPrint(';        ScaffoldMessenger.of(context';            content: const Text(';        ')')';          .collection('users';          .where('role', isEqualTo: ';          .get(';      debugPrint('[ADMIN_COMPAGNIE_LOGIN] ðŸ“Š ';        final data = doc.data(';        debugPrint('[ADMIN_COMPAGNIE_LOGIN] ðŸ“‹ Compte: '{data['email']}';        debugPrint('[ADMIN_COMPAGNIE_LOGIN]   - UID: '{doc.id}';        debugPrint('[ADMIN_COMPAGNIE_LOGIN]   - Nom: '{data['prenom']} '{data['nom']}';        debugPrint('[ADMIN_COMPAGNIE_LOGIN]   - Statut: '{data['status']}';        debugPrint('[ADMIN_COMPAGNIE_LOGIN]   - CompagnieId: '{data['compagnieId']}';        debugPrint('[ADMIN_COMPAGNIE_LOGIN]   - CompagnieNom: '{data['compagnieNom']}';        debugPrint('[ADMIN_COMPAGNIE_LOGIN]   - Cree par: '{data['created_by']}';        debugPrint('[ADMIN_COMPAGNIE_LOGIN]   - isFakeData: '{data['isFakeData']}';        debugPrint('[ADMIN_COMPAGNIE_LOGIN]   - Cree le: '{data['created_at']}';        debugPrint(';        ScaffoldMessenger.of(context';            content: ({adminCompagnieAccounts.docs.length} comptes Admin Compagnie analyses - Voir les logs';      debugPrint(';        ScaffoldMessenger.of(context';            content: (e';        title: const Text(';                  ')')';                          labelText: 'Email administrateur';                          hintText: ';                          if (value == null || value.trim().isEmpty';                            return 'Email requis';                          if (!RegExp(r'^[^@]+@[^@]+\.[^@]+').hasMatch(value)';                            return ';                      const SizedBox(height: 16';                          labelText: 'Mot de passe';                          hintText: ';                          if (value == null || value.trim().isEmpty';                            return ';                          if (value.length < 6';                            return ';                        icon: const Icon(Icons.info';                        label: const Text(';                        icon: const Icon(Icons.info')')';                        label: const Text(';                        icon: const Icon(Icons.info')')';                        label: const Text(';                        icon: const Icon(Icons.info')')';                        label: const Text(';                        icon: const Icon(Icons.info')')';                        label: const Text(';')')