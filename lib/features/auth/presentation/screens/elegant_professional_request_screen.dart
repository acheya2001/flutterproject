import 'package:flutter/material.dart';import 'package:flutter_riverpod/flutter_riverpod.dart';import 'package:cloud_firestore/cloud_firestore.dart';import '../../../admin/models/professional_request_model_final.dart';import '../../../admin/services/compagnie_service.dart';import '../../../admin/services/agence_service.dart';import ';  }';  const Text(';  final TextEditingController _fonctionController = TextEditingController(')')';    'Tunis', 'Ariana', 'Ben Arous', 'Manouba', 'Nabeul', 'Zaghouan';    'Bizerte', 'Beja', 'Jendouba', 'Le Kef', 'Siliana', 'Kairouan';    'Kasserine', 'Sidi Bouzid', 'Sousse', 'Monastir', 'Mahdia';    'Sfax', 'Gafsa', 'Tozeur', 'Kebili', 'Gabes', 'Medenine', ';          const SizedBox(width: 16';                  ';                ';                  ';          const SizedBox(height: 16';              ({_currentPage + 1} sur 4';            const SizedBox(height: 32';              label: ';              validator: (value') => value?.isEmpty == true ? ';            const SizedBox(height: 20';              label: ';                if (value?.isEmpty == true') return 'Email requis';                if (!RegExp(r^[\w-\.]+@([\w-]+\.')+[\w-]{2,4}').hasMatch(value!)';                  return ';            const SizedBox(height: 20';              label: ';              validator: (value') => value?.isEmpty == true ? ';            const SizedBox(height: 20';              label: ';              validator: (value') => value?.isEmpty == true ? ';          const SizedBox(height: 32';            title: 'Agent d\'agence';            subtitle: ';          const SizedBox(height: 16';            title: 'Administrateur d\'agence';            subtitle: 'Gestionnaire d\'une agence d\';          const SizedBox(height: 16';            title: 'Administrateur de compagnie';            subtitle: 'Gestionnaire d\'une compagnie d\';          const SizedBox(height: 16';            title: 'Expert automobile';            subtitle: ';            const SizedBox(height: 24';              label: 'Annees d\';              validator: (value') => value?.isEmpty == true ? ';          const SizedBox(height: 32';            label: 'Compagnie d\';            validator: (value') => value == null ? ';            const SizedBox(height: 20';              label: ';              itemBuilder: (agence') => '${agence.nom} - ';              validator: (value') => value == null ? ';          const SizedBox(height: 20';            label: ';            validator: (value') => value == null ? ';          if (_selectedRole == ProfessionalRole.expertAuto';              label: ';              validator: (value') => value?.isEmpty == true ? ';            const SizedBox(height: 20';              label: 'Zone d\';              validator: (value') => value?.isEmpty == true ? 'Zone d\';          ] else if (_selectedRole == ProfessionalRole.adminCompagnie';              label: ';              validator: (value') => value?.isEmpty == true ? ';            const SizedBox(height: 20';              label: ';              validator: (value') => value?.isEmpty == true ? ';            ';              label: ';              validator: (value') => value?.isEmpty == true ? ';                const SizedBox(width: 12';                    ';    ';  /// üè¢ Carte d';      ';            title: ';            color: const Color(0xFF3B82F6';              'Nom: '{_nomCompletController.text}';              'Email: '{_emailController.text}';              'Telephone: '{_telephoneController.text}';              'CIN: ';            const Divider(height: 32';              title: ';              color: const Color(0xFF8B5CF6';                'R√¥le: {_getRoleLabel(_selectedRole!')}';                'Experience: ';            const Divider(height: 32';              title: ';              color: const Color(0xFF10B981';                'Compagnie: ';                if (_selectedAgence != null';                  'Agence: ${_selectedAgence!.nom} - '{_selectedAgence!.ville}';                'Gouvernorat: ';                if (_selectedRole == ProfessionalRole.expertAuto';                  'N¬∞ Agrement: '{_licenceController.text}';                  'Zone d\'intervention: ';                ] else if (_selectedRole == ProfessionalRole.adminCompagnie';                  'Fonction: '{_fonctionController.text}';                  'Licence: '{_licenceController.text}';                  'Licence: ';          if (_currentPage > 0';                label: ';            const SizedBox(width: 16';              label: _currentPage == 3 ? 'Soumettre' : ';    switch (role';        return 'Agent d\'agence';        return 'Administrateur d\'agence';        return 'Administrateur de compagnie';        return ';        if (_selectedRole == null';          _showErrorSnackBar(';        if (_experienceController.text.isEmpty';          _showErrorSnackBar(';        if (_selectedCompagnie == null';          _showErrorSnackBar(';            _selectedAgence == null';          _showErrorSnackBar(';        if (_selectedGouvernorat == null';          _showErrorSnackBar(';        if (_licenceController.text.trim().isEmpty';          _showErrorSnackBar(';          if (_zoneInterventionController.text.trim().isEmpty';            _showErrorSnackBar('Veuillez indiquer votre zone d\';          if (_fonctionController.text.trim().isEmpty';            _showErrorSnackBar(';    setState(() => _isLoading = true';      // üîç Validation de l';      debugPrint(';      switch (_selectedRole!';          roleString = 'agent_agence';          roleString = 'admin_agence';          roleString = 'admin_compagnie';          roleString = ';        envoyeLe: DateTime.now(';        status: ';        experienceAnnees: int.tryParse(_experienceController.text.trim()';        // NOUVEAU: Stocker les IDs reels pour l';      debugPrint('[ELEGANT_REQUEST] üì§ Soumission demande: ';      // Soumettre la demande a Firestore (utilisateurs externes';          .collection(';          .set(request.toFirestore()';      debugPrint(';        final successRequest = _convertToAccountRequest(request';          ';    } catch (e';      debugPrint('[ELEGANT_REQUEST] ‚ùå Erreur soumission:  + e.toString()';      _showErrorSnackBar(';        setState(() => _isLoading = false';  /// ‚ö†Ô∏è Afficher un message d';      debugPrint(';          _compagnies = compagniesData.map((data';            id: data['id';            nom: data[';        }';        debugPrint('[PROFESSIONAL_REQUEST] ‚úÖ ';    } catch (e';      debugPrint('[PROFESSIONAL_REQUEST] ‚ùå Erreur chargement compagnies:  + e.toString()';      // Fallback vers des donnees par defaut en cas d';            CompagnieAssurance(id: 'fallback_1', nom: 'STAR Assurances';            CompagnieAssurance(id: 'fallback_2', nom: 'Maghrebia Assurances';            CompagnieAssurance(id: 'fallback_3', nom: 'GAT Assurances';            CompagnieAssurance(id: 'fallback_4', nom: ';  Future<void> _loadAgences(String compagnieId';      debugPrint('[PROFESSIONAL_REQUEST] üîÑ Chargement des agences pour compagnie: ';      await agenceService.debugAgencesInFirestore(';      // Essayer d';        debugPrint(';        agencesData = await agenceService.getAgencesFromAllCollections(compagnieId: compagnieId';      debugPrint('[PROFESSIONAL_REQUEST] üìä Donnees brutes recues: ';      for (var agence in agencesData';        debugPrint('[PROFESSIONAL_REQUEST] üìã Agence: '{agence['nom']} ('{agence['id]}') - '{agence['ville';          _agences = agencesData.map((data';            id: data['id';            nom: data['nom';            ville: data['ville'] ?? ';        }';        debugPrint('[PROFESSIONAL_REQUEST] ‚úÖ ';        if (_agences.isEmpty';          debugPrint('[PROFESSIONAL_REQUEST] ‚ö†Ô∏è ATTENTION: Aucune agence trouvee pour la compagnie ';          final toutesAgences = await agenceService.getAgencesForDropdown(';          debugPrint('[PROFESSIONAL_REQUEST] üîç Total agences dans la base: ';          for (var agence in toutesAgences';            debugPrint('[PROFESSIONAL_REQUEST] üè¢ Agence globale: '{agence['nom']} - Compagnie: '{agence['compagnieId'] ?? 'Non definie'}';          // Si c'est STAR et qu'aucune agence n';          if (_selectedCompagnie?.nom.contains('STAR) == true';            debugPrint(';                _agences = agencesDataApresCreation.map((data';                  id: data['id';                  nom: data['nom';                  ville: data['ville'] ?? ';              }';              debugPrint('[PROFESSIONAL_REQUEST] ‚úÖ ';    } catch (e';      debugPrint('[PROFESSIONAL_REQUEST] ‚ùå Erreur chargement agences:  + e.toString()';      // Fallback vers des donnees par defaut en cas d';            AgenceAssurance(id: 'fallback_1', nom: 'Agence Centre-Ville', ville: 'Tunis, compagnieId: compagnieId';            AgenceAssurance(id: 'fallback_2', nom: 'Agence Menzah', ville: 'Tunis, compagnieId: compagnieId';            AgenceAssurance(id: 'fallback_3', nom: 'Agence Sfax', ville: ';        }';  /// ÔøΩ Valider l';        throw Exception('Veuillez selectionner une compagnie d\'assurance';      // Verifier l';            .collection(';        if (!compagnieDoc.exists';          throw Exception('La compagnie selectionnee n\'existe plus dans le systeme';        debugPrint('[PROFESSIONAL_REQUEST] ‚úÖ Compagnie validee: ';      } catch (e';        debugPrint('[PROFESSIONAL_REQUEST] ‚ùå Erreur validation compagnie:  + e.toString()';        throw Exception('Erreur lors de la validation de la compagnie:  + e.toString()';    // Verifier que l';        throw Exception('Veuillez selectionner une agence';      // Verifier l'existence de l';            .collection(';        if (!agenceDoc.exists';          throw Exception('L\'agence selectionnee n\'existe plus dans le systeme';        // Verifier que l';        if (agenceData['compagnieId] != _selectedCompagnie!.id';          throw Exception('L\'agence selectionnee n\'appartient pas a la compagnie choisie';        debugPrint('[PROFESSIONAL_REQUEST] ‚úÖ Agence validee: ';      } catch (e';        debugPrint('[PROFESSIONAL_REQUEST] ‚ùå Erreur validation agence:  + e.toString()';        throw Exception('Erreur lors de la validation de l\'agence:  + e.toString()';    // Verifier l';    await _validateEmailUniqueness(';  /// üìß Valider l';    final email = _emailController.text.trim().toLowerCase(';          .collection('demandes_professionnels';          .where('email, isEqualTo: email';          .where('status', whereIn: ['en_attente', ';      if (existingRequests.docs.isNotEmpty';        throw Exception('Une demande avec cet email existe deja ou a ete acceptee';          .collection('users';          .where(';      if (existingUsers.docs.isNotEmpty';        throw Exception('Un utilisateur avec cet email existe deja dans le systeme';      debugPrint('[PROFESSIONAL_REQUEST] ‚úÖ Email unique valide: ';    } catch (e';      debugPrint(';  ProfessionalAccountRequest _convertToAccountRequest(ProfessionalRequestModel request';      companyName: request.nomCompagnie ?? ';      agencyName: request.nomAgence ?? ';      governorate: _selectedGouvernorat ?? ';