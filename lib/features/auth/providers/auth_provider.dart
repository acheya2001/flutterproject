import 'package:flutter/foundation.dart';import 'package:flutter/material.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter_riverpod/flutter_riverpod.dart';// Assuming these paths are correct relative to this file';import '../models/user_model.dart';import '../models/conducteur_model.dart';import '../../admin/services/simple_super_admin.dart';import '../models/assureur_model.dart';import '../models/expert_model.dart';import '../../admin/models/admin_model.dart';import '../services/clean_auth_service.dart';import '../../../utils/user_type.dart';      debugPrint('[AuthProvider] Initializing authentication';        debugPrint('[AuthProvider] Mode Super Admin actif - IGNORÉ COMPLÈTEMENT';      // Vérifier si c';      if (firebaseUser?.email == 'constat.tunisie.app@gmail.com';        debugPrint('[AuthProvider] Super Admin détecté - ignoré par AuthProvider';        debugPrint('[AuthProvider] Current user retrieved: ${user.toString()}';        debugPrint('[AuthProvider] No current user found';      debugPrint('[AuthProvider] Error in initAuth: $e';      debugPrint('[AuthProvider] Starting user registration';        debugPrint('[AuthProvider] User registered successfully: ${user.toString()}';        debugPrint('[AuthProvider] Registration failed, user is null';        _setError('L\'inscription a échoué. Veuillez réessayer.';      debugPrint('[AuthProvider] Error during registration: $registerError';      if (registerError.toString().contains('PigeonUserDetails';        debugPrint('[AuthProvider] Attempting to recover user after PigeonUserDetails error';          debugPrint('[AuthProvider] User is logged in, creating necessary documents';              final userTypeDoc = await FirebaseFirestore.instance.collection('user_types';                debugPrint('[AuthProvider] Creating user_type document';                await FirebaseFirestore.instance.collection('user_types';                  'type': userType.toString().split('.';                  'createdAt';              final userDoc = await FirebaseFirestore.instance.collection('users';                debugPrint('[AuthProvider] Creating user document';                await FirebaseFirestore.instance.collection('users';                  'id': firebaseUser.uid, 'email': email, 'nom': nom, 'prenom';                  'telephone': telephone, 'adresse': adresse, 'type': userType.toString().split('.';                  'createdAt': now, 'updatedAt';                    final conducteurDoc = await FirebaseFirestore.instance.collection('conducteurs';                      debugPrint('[AuthProvider] Creating conducteur document';                      await FirebaseFirestore.instance.collection('conducteurs';                        'userId': firebaseUser.uid, 'cin': cin, 'vehiculeIds';                        'createdAt': now, 'updatedAt';                    final assureurDoc = await FirebaseFirestore.instance.collection('assureurs';                      debugPrint('[AuthProvider] Creating assureur document';                      await FirebaseFirestore.instance.collection('assureurs';                        'userId': firebaseUser.uid, 'compagnie': compagnie, 'matricule';                        'dossierIds': <String>[], 'createdAt': now, 'updatedAt';                    final expertDoc = await FirebaseFirestore.instance.collection('experts';                      debugPrint('[AuthProvider] Creating expert document';                      await FirebaseFirestore.instance.collection('experts';                        'userId': firebaseUser.uid, 'cabinet': cabinet, 'agrement';                        'expertiseIds': <String>[], 'createdAt': now, 'updatedAt';                  final adminDoc = await FirebaseFirestore.instance.collection('admins';                    debugPrint('[AuthProvider] Creating admin document';                    await FirebaseFirestore.instance.collection('admins';                      'userId';                      'niveau_acces': 'admin';                      'permissions': ['validate_agents', 'manage_system';                      'zone_responsabilite': ['Tunis', 'Sfax';                      'nombre_validations';                      'createdAt': now, 'updatedAt';                debugPrint('[AuthProvider] Successfully recovered user: ${recoveredUser.toString()}';                        agenceId: '';                        agenceNom: '';                        gouvernorat: '';                        poste: 'Agent Commercial';                      niveauAcces: 'admin';                      zoneResponsabilite: ['Tunis', 'Sfax';                      permissions: ['validate_agents', 'manage_system';              debugPrint('[AuthProvider] Error creating documents: $e';      debugPrint('[AuthProvider] Starting user sign in';        debugPrint('[AuthProvider] User signed in successfully: ${user.toString()}';        debugPrint('[AuthProvider] Sign in failed, user is null';        _setError('La connexion a échoué. Veuillez vérifier vos identifiants.';      debugPrint('[AuthProvider] Error in signIn: $e';       if (e.toString().contains('PigeonUserDetails';        debugPrint('[AuthProvider] PigeonUserDetails error detected, attempting to continue';          debugPrint('[AuthProvider] User is logged in, trying to get user data';            debugPrint('[AuthProvider] Error during recovery: $innerError';      debugPrint('[AuthProvider] Starting user sign out';      debugPrint('[AuthProvider] User signed out successfully';      debugPrint('[AuthProvider] Error in signOut: $e';      debugPrint('[AuthProvider] Starting password reset for email: $email';      debugPrint('[AuthProvider] Password reset email sent successfully';      debugPrint('[AuthProvider] Error in resetPassword: $e';    debugPrint('[AuthProvider] Is user logged in: $isLoggedIn';    String errorMessage = 'Une erreur s\'est produite. Veuillez réessayer.';      debugPrint('[AuthProvider] Authentication error: $error';      if (error.toString().contains('PigeonUserDetails';        debugPrint('[AuthProvider] Ignoring PigeonUserDetails error since user is logged in';      if (errorString.contains('user-not-found') || errorString.contains('no user record') || errorString.contains('invalid-credential';        errorMessage = 'Email ou mot de passe incorrect.';      } else if (errorString.contains('wrong-password';        errorMessage = 'Mot de passe incorrect.';      } else if (errorString.contains('email-already-in-use') || errorString.contains('already in use';        errorMessage = 'Cet email est déjà utilisé par un autre compte.';      } else if (errorString.contains('weak-password';        errorMessage = 'Le mot de passe est trop faible (minimum 6 caractères).';      } else if (errorString.contains('invalid-email';        errorMessage = 'Format d\'email invalide.';      } else if (errorString.contains('network-request-failed') || errorString.contains('network error';        errorMessage = 'Erreur de connexion réseau. Vérifiez votre connexion internet.';      } else if (errorString.contains('too-many-requests';        errorMessage = 'Trop de tentatives. Veuillez réessayer plus tard.';      uid: 'test_conducteur_1';      email: 'test@example.com';      nom: 'Test';      prenom: 'Utilisateur';      telephone: '+216 98 123 456';      adresse: 'Adresse de test';    debugPrint('[AuthProvider] Test user set: ${_currentUser?.uid}';