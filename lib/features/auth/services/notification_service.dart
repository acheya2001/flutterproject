import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';import '../models/notification_model.dart';import '../models/user_model.dart';import 'email_service.dart';import '../../../core/services/firebase_email_service.dart';  static const String _collection = 'notifications';        id: '';      debugPrint('✅ Notification créée pour $recipientId: $title';      debugPrint('❌ Erreur création notification: $e';  /// Obtenir les notifications d';        .where('recipientId';        .orderBy('createdAt';        'isRead';        'readAt';      debugPrint('❌ Erreur marquage notification: $e';          .where('recipientId';          .where('isRead';          'isRead';          'readAt';      debugPrint('❌ Erreur marquage toutes notifications: $e';        .where('recipientId';        .where('isRead';      debugPrint('❌ Erreur suppression notification: $e';  /// Notifier l'admin d';        .collection('users';        .where('userType', isEqualTo: 'admin';      final adminEmail = adminData['email';        title: '🆕 Nouvelle demande de compte';        message: '$applicantName ($userType) a demandé la création d\'un compte professionnel.';          'requestId';          'applicantEmail';          'userType';          'action': 'review_account_request';  /// Notifier l'utilisateur de l';    print('🔍 DEBUG: notifyAccountApproved - userId: $userId, approvedBy: $approvedBy';      title: '✅ Compte approuvé';      message: 'Félicitations ! Votre compte professionnel a été approuvé. Vous pouvez maintenant vous connecter.';        'action': 'account_approved';        'approvedBy';    // Envoyer l';      print('🔍 DEBUG: Recherche utilisateur dans collection users...';      final userDoc = await _firestore.collection('users';        print('✅ DEBUG: Utilisateur trouvé dans users';        final userEmail = userData['email';        final userName = '${userData['prenom']} ${userData['nom']}';        final userType = userData['userType';        print('🔍 DEBUG: Email: $userEmail, Nom: $userName, Type: $userType';          print('🔍 DEBUG: Envoi email d\'approbation...';          print(emailSent ? '✅ DEBUG: Email envoyé avec succès' : '❌ DEBUG: Échec envoi email';          print('❌ DEBUG: Email ou type utilisateur manquant';        print('❌ DEBUG: Utilisateur non trouvé dans collection users';        // L'utilisateur n';      print('❌ DEBUG: Erreur envoi email approbation: $e';      debugPrint('❌ Erreur envoi email approbation: $e';      print('🔍 DEBUG: Récupération données depuis professional_account_requests...';      final requestDoc = await _firestore.collection('professional_account_requests';        final userEmail = requestData['email';        final userName = '${requestData['prenom']} ${requestData['nom']}';        final userType = requestData['userType';        print('🔍 DEBUG: Données demande - Email: $userEmail, Nom: $userName, Type: $userType';          print('🔍 DEBUG: 🔥 Envoi email d\'approbation via FirebaseEmailService (même méthode que les invitations)...';          print(emailSent ? '✅ DEBUG: Email d\'approbation envoyé via Firebase' : '❌ DEBUG: Échec envoi email Firebase';        print('❌ DEBUG: Demande non trouvée';      print('❌ DEBUG: Erreur récupération données demande: $e';  /// 📧 Envoyer email d';      print('📧 DEBUG: Envoi email d\'approbation via méthode dédiée...';      print(success ? '✅ DEBUG: Email d\'approbation envoyé' : '❌ DEBUG: Échec envoi email';      print('❌ DEBUG: Erreur envoi email: $e';  /// Notifier l';    print('🔍 DEBUG: notifyAccountRejected - userId: $userId, reason: $reason';      title: '❌ Compte rejeté';      message: 'Votre demande de compte professionnel a été rejetée. Raison: $reason';        'action': 'account_rejected';        'rejectedBy';        'reason';    // Envoyer l';      print('🔍 DEBUG: Recherche utilisateur pour email de rejet...';      final userDoc = await _firestore.collection('users';        print('✅ DEBUG: Utilisateur trouvé dans users';        final userEmail = userData['email';        final userName = '${userData['prenom']} ${userData['nom']}';        final userType = userData['userType';          print('🔍 DEBUG: Envoi email de rejet...';          print(emailSent ? '✅ DEBUG: Email de rejet envoyé' : '❌ DEBUG: Échec envoi email rejet';        print('❌ DEBUG: Utilisateur non trouvé, envoi depuis demande...';      print('❌ DEBUG: Erreur envoi email rejet: $e';      debugPrint('❌ Erreur envoi email rejet: $e';      print('📧 DEBUG: Envoi email de rejet via méthode dédiée...';      print('❌ DEBUG: Erreur envoi email rejet: $e';      print('🔍 DEBUG: Récupération données demande pour email de rejet...';      final requestDoc = await _firestore.collection('professional_account_requests';        final userEmail = requestData['email';        final userName = '${requestData['prenom']} ${requestData['nom']}';        final userType = requestData['userType';          print('🔍 DEBUG: Envoi email de rejet depuis données demande...';          print(emailSent ? '✅ DEBUG: Email de rejet envoyé depuis demande' : '❌ DEBUG: Échec envoi email rejet depuis demande';      print('❌ DEBUG: Erreur récupération données demande pour rejet: $e';  /// Notifier l';      title: '⚠️ Compte suspendu';      message: 'Votre compte a été temporairement suspendu. Raison: $reason';        'action': 'account_suspended';        'suspendedBy';        'reason';  /// Notifier l';      title: '🔧 Permissions modifiées';      message: 'Vos permissions ont été mises à jour par un administrateur.';        'action': 'permissions_changed';        'changedBy';        'newPermissions';  static const String _collection = 'professional_account_requests';      print('🔍 DEBUG: Vérification unicité email: $email';          .collection('users';          .where('email';        print('❌ DEBUG: Email trouvé dans users';          .where('email';          .where('status', whereIn: ['pending', 'approved';        print('❌ DEBUG: Email trouvé dans demandes en attente/approuvées';      print('✅ DEBUG: Email disponible';      print('❌ DEBUG: Erreur vérification email: $e';      return false; // En cas d';      print('🔍 DEBUG: ProfessionalAccountService.createAccountRequest() - Début';      print('🔍 DEBUG: Collection: $_collection';      print('🔍 DEBUG: Request email: ${request.email}';      print('🔍 DEBUG: Request userType: ${request.userType}';      // Vérifier l'unicité de l';      print('🔍 DEBUG: Vérification unicité email...';        throw Exception('Un compte avec cet email existe déjà ou une demande est en cours de traitement';      print('✅ DEBUG: Email unique confirmé';      print('🔍 DEBUG: Conversion vers Firestore...';      print('🔍 DEBUG: Données Firestore créées: ${firestoreData.keys.toList()}';      print('🔍 DEBUG: Ajout à Firestore...';      print('✅ DEBUG: Document créé avec ID: ${docRef.id}';      print('🔍 DEBUG: Notification des admins...';        applicantName: '${request.prenom} ${request.nom}';      print('✅ DEBUG: Admins notifiés';      debugPrint('✅ Demande de compte créée: ${docRef.id}';      print('❌ DEBUG: Erreur dans createAccountRequest: $e';      print('❌ DEBUG: Type d\'erreur: ${e.runtimeType}';      debugPrint('❌ Erreur création demande: $e';        .where('status', isEqualTo: 'pending';        .orderBy('createdAt';      debugPrint('❌ Erreur récupération demande: $e';        'status': 'approved';        'reviewedAt';        'reviewedBy';      // Obtenir la demande pour notifier l';      debugPrint('❌ Erreur approbation demande: $e';        'status': 'rejected';        'rejectionReason';        'reviewedAt';        'reviewedBy';      // Obtenir la demande pour notifier l';      debugPrint('❌ Erreur rejet demande: $e';