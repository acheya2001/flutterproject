import 'package:flutter/foundation.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:cloud_firestore/cloud_firestore.dart';/// 🌟 Service d'authentification universel - Fonctionne pour tous les types d';  /// 🔐 Connexion universelle avec gestion d';      debugPrint('[UniversalAuth] 🔐 Début connexion: $email';        debugPrint('[UniversalAuth] ✅ Connexion Firebase Auth directe réussie';        debugPrint('[UniversalAuth] ⚠️ Erreur Firebase Auth: $authError';        if (authError.toString().contains('PigeonUserDetails';          debugPrint('[UniversalAuth] 🔧 Erreur PigeonUserDetails détectée, contournement...';            debugPrint('[UniversalAuth] ✅ Contournement PigeonUserDetails réussi: ${user.uid}';              'success';              'error': 'Erreur PigeonUserDetails - utilisateur non connecté';            'success';            'error': 'Identifiants incorrects: ${authError.toString()}';          'success';          'error': 'Utilisateur non trouvé après connexion';      final collections = ['conducteurs', 'agents_assurance', 'experts';          debugPrint('[UniversalAuth] 🔍 Recherche dans $collection...';            userType = userData['userType';            debugPrint('[UniversalAuth] ✅ Données trouvées dans $collection: $userType';          debugPrint('[UniversalAuth] ⚠️ Erreur $collection: $firestoreError';        debugPrint('[UniversalAuth] ❌ Aucune donnée utilisateur trouvée pour: ${user.uid}';          'success';          'error': 'Compte non trouvé. Veuillez vous inscrire d\'abord.';        'success';        'uid';        'email': userData['email';        'userType';        'nom': userData['nom']?.toString() ?? 'Utilisateur';        'prenom': userData['prenom']?.toString() ?? 'Firebase';        'pigeonWorkaround';        'userData';      debugPrint('[UniversalAuth] 🎉 Connexion universelle réussie: $userType (${user.uid})';      debugPrint('[UniversalAuth] ❌ Erreur générale: $e';        'success';        'error': 'Erreur de connexion: ${e.toString()}';      debugPrint('[UniversalAuth] 📝 Début inscription: $email ($userType)';        debugPrint('[UniversalAuth] ⚠️ Erreur Firebase Auth: $authError';        if (authError.toString().contains('PigeonUserDetails';          debugPrint('[UniversalAuth] 🔧 Erreur PigeonUserDetails détectée, contournement...';            debugPrint('[UniversalAuth] ✅ Contournement PigeonUserDetails réussi: ${user.uid}';          debugPrint('[UniversalAuth] ❌ Erreur création compte: $authError';            'success';            'error': 'Erreur création compte: ${authError.toString()}';      // Si user n';          'success';          'error': 'Erreur création utilisateur';        'uid';        'email';        'nom';        'prenom';        'userType';        'createdAt';        'updatedAt';        debugPrint('[UniversalAuth] ✅ Profil créé dans $collection';        debugPrint('[UniversalAuth] ❌ Erreur Firestore: $firestoreError';          'success';          'error': 'Erreur sauvegarde données';        'success';        'uid';        'email';        'nom';        'prenom';        'userType';        'message': 'Inscription réussie !';      debugPrint('[UniversalAuth] ❌ Erreur générale inscription: $e';        'success';        'error': 'Erreur inscription: ${e.toString()}';      debugPrint('[UniversalAuth] 🚪 Déconnexion réussie';      debugPrint('[UniversalAuth] ❌ Erreur déconnexion: $e';      case 'agents_assurance';        return 'assureur';      case 'experts';        return 'expert';      case 'conducteurs';        return 'conducteur';        return 'conducteur';  /// 📂 Obtenir la collection pour un type d';      case 'assureur';        return 'agents_assurance';      case 'expert';        return 'experts';        return 'conducteurs';