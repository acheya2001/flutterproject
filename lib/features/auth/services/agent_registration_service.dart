import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/foundation.dart';
import '../models/agent_registration_model.dart';
import '../../../core/services/debug_email_service.dart';

/// üè¢ Service d'inscription et d'approbation des agents d'assurance
class AgentRegistrationService {
  static final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  static final FirebaseAuth _auth = FirebaseAuth.instance;

  /// üìù Soumettre une demande d'inscription d'agent
  static Future<String> submitAgentRegistration({
    required String email,
    required String password,
    required String prenom,
    required String nom,
    required String telephone,
    required String compagnie,
    required String agence,
    required String gouvernorat,
    required String poste,
    required String numeroAgent,
    String? carteIdRecto,
    String? carteIdVerso,
    String? permisRecto,
    String? permisVerso,
  }) async {
    try {
      debugPrint('[AgentRegistration] üìù D√©but inscription agent: $email');

      // V√©rifier si l'email existe d√©j√†
      final existingRequests = await _firestore
          .collection('professional_account_requests')
          .where('email', isEqualTo: email)
          .get();

      if (existingRequests.docs.isNotEmpty) {
        throw Exception('Une demande existe d√©j√† pour cet email');
      }

      // Cr√©er la demande d'inscription
      final registrationData = AgentRegistrationModel(
        id: '', // Sera g√©n√©r√© par Firestore
        email: email,
        password: password, // Stock√© temporairement pour cr√©ation apr√®s approbation
        prenom: prenom,
        nom: nom,
        telephone: telephone,
        compagnie: compagnie,
        agence: agence,
        gouvernorat: gouvernorat,
        poste: poste,
        numeroAgent: numeroAgent,
        carteIdRecto: carteIdRecto,
        carteIdVerso: carteIdVerso,
        permisRecto: permisRecto,
        permisVerso: permisVerso,
        status: 'pending',
        submittedAt: DateTime.now(),
        reviewedAt: null,
        reviewedBy: null,
        rejectionReason: null,
      );

      // Sauvegarder dans Firestore
      final docRef = await _firestore
          .collection('professional_account_requests')
          .add(registrationData.toMap());

      debugPrint('[AgentRegistration] ‚úÖ Demande cr√©√©e: ${docRef.id}');

      // Envoyer notification √† l'admin
      await _notifyAdminNewRequest(docRef.id, registrationData);

      // Envoyer email de confirmation au demandeur
      await _sendConfirmationEmailToApplicant(registrationData);

      return docRef.id;

    } catch (e) {
      debugPrint('[AgentRegistration] ‚ùå Erreur inscription: $e');
      rethrow;
    }
  }

  /// üìß Envoyer notification √† l'admin
  static Future<void> _notifyAdminNewRequest(
    String requestId,
    AgentRegistrationModel registration,
  ) async {
    try {
      // Cr√©er notification dans Firestore
      await _firestore.collection('notifications').add({
        'type': 'new_agent_request',
        'title': 'Nouvelle demande d\'agent',
        'message': 'Demande d\'inscription de ${registration.prenom} ${registration.nom} (${registration.compagnie})',
        'requestId': requestId,
        'userId': 'admin',
        'isRead': false,
        'createdAt': FieldValue.serverTimestamp(),
        'data': {
          'applicantName': '${registration.prenom} ${registration.nom}',
          'company': registration.compagnie,
          'email': registration.email,
        },
      });

      // Envoyer email √† l'admin avec d√©buggage
      debugPrint('[AgentRegistration] üìß Envoi email admin avec d√©buggage...');
      final emailResult = await DebugEmailService.sendEmailWithDebug(
        to: 'constat.tunisie.app@gmail.com',
        subject: 'üè¢ Nouvelle demande d\'agent d\'assurance',
        htmlBody: '''
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #2196F3;">üè¢ Nouvelle demande d'agent d'assurance</h2>
          
          <div style="background: #f5f5f5; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3>Informations du demandeur :</h3>
            <p><strong>Nom :</strong> ${registration.prenom} ${registration.nom}</p>
            <p><strong>Email :</strong> ${registration.email}</p>
            <p><strong>T√©l√©phone :</strong> ${registration.telephone}</p>
            <p><strong>Compagnie :</strong> ${registration.compagnie}</p>
            <p><strong>Agence :</strong> ${registration.agence}</p>
            <p><strong>Gouvernorat :</strong> ${registration.gouvernorat}</p>
            <p><strong>Poste :</strong> ${registration.poste}</p>
            <p><strong>N¬∞ Agent :</strong> ${registration.numeroAgent}</p>
          </div>

          <div style="text-align: center; margin: 30px 0;">
            <p>Connectez-vous √† l'interface admin pour examiner cette demande.</p>
            <a href="#" style="background: #4CAF50; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px;">
              Examiner la demande
            </a>
          </div>

          <p style="color: #666; font-size: 12px;">
            Cette demande n√©cessite votre approbation avant que l'agent puisse acc√©der au syst√®me.
          </p>
        </div>
        ''',
      );

      // Analyser le r√©sultat de l'envoi
      debugPrint('[AgentRegistration] üìä R√©sultat email admin:');
      debugPrint('[AgentRegistration] - Succ√®s: ${emailResult['success']}');
      debugPrint('[AgentRegistration] - M√©thode: ${emailResult['method']}');
      debugPrint('[AgentRegistration] - √âtapes: ${emailResult['steps'].length}');
      debugPrint('[AgentRegistration] - Erreurs: ${emailResult['errors'].length}');

      if (emailResult['success']) {
        debugPrint('[AgentRegistration] ‚úÖ Notification admin envoy√©e via ${emailResult['method']}');
      } else {
        debugPrint('[AgentRegistration] ‚ö†Ô∏è Notification admin √©chou√©e, mais inscription continue');
      }

    } catch (e) {
      debugPrint('[AgentRegistration] ‚ö†Ô∏è Erreur notification admin: $e');
      // Ne pas faire √©chouer l'inscription si la notification √©choue
    }
  }

  /// üìß Envoyer email de confirmation au demandeur
  static Future<void> _sendConfirmationEmailToApplicant(
    AgentRegistrationModel registration,
  ) async {
    try {
      debugPrint('[AgentRegistration] üìß Envoi email confirmation avec d√©buggage...');
      final emailResult = await DebugEmailService.sendEmailWithDebug(
        to: registration.email,
        subject: 'üìù Demande d\'inscription re√ßue - Constat Tunisie',
        htmlBody: '''
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #2196F3;">üìù Demande d'inscription re√ßue</h2>
          
          <p>Bonjour ${registration.prenom} ${registration.nom},</p>
          
          <p>Nous avons bien re√ßu votre demande d'inscription en tant qu'agent d'assurance pour <strong>${registration.compagnie}</strong>.</p>
          
          <div style="background: #e3f2fd; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="color: #1976d2;">üìã R√©capitulatif de votre demande :</h3>
            <p><strong>Compagnie :</strong> ${registration.compagnie}</p>
            <p><strong>Agence :</strong> ${registration.agence}</p>
            <p><strong>Gouvernorat :</strong> ${registration.gouvernorat}</p>
            <p><strong>Poste :</strong> ${registration.poste}</p>
          </div>

          <div style="background: #fff3e0; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="color: #f57c00;">‚è≥ Prochaines √©tapes :</h3>
            <ol>
              <li>Votre demande est en cours d'examen par notre √©quipe</li>
              <li>Nous v√©rifierons vos informations et documents</li>
              <li>Vous recevrez un email de confirmation une fois approuv√©e</li>
              <li>Vous pourrez alors vous connecter √† l'application</li>
            </ol>
          </div>

          <p style="color: #666;">
            <strong>D√©lai de traitement :</strong> 24-48 heures ouvrables<br>
            <strong>Contact :</strong> constat.tunisie.app@gmail.com
          </p>

          <p>Merci pour votre confiance !</p>
          <p><strong>L'√©quipe Constat Tunisie</strong></p>
        </div>
        ''',
      );

      // Analyser le r√©sultat de l'envoi
      debugPrint('[AgentRegistration] üìä R√©sultat email confirmation:');
      debugPrint('[AgentRegistration] - Succ√®s: ${emailResult['success']}');
      debugPrint('[AgentRegistration] - M√©thode: ${emailResult['method']}');
      debugPrint('[AgentRegistration] - √âtapes: ${emailResult['steps'].length}');
      debugPrint('[AgentRegistration] - Erreurs: ${emailResult['errors'].length}');

      if (emailResult['success']) {
        debugPrint('[AgentRegistration] ‚úÖ Email confirmation envoy√© via ${emailResult['method']}');
      } else {
        debugPrint('[AgentRegistration] ‚ö†Ô∏è Email confirmation √©chou√©, mais inscription continue');
      }

    } catch (e) {
      debugPrint('[AgentRegistration] ‚ö†Ô∏è Erreur email confirmation: $e');
      // Ne pas faire √©chouer l'inscription si l'email √©choue
    }
  }

  /// ‚úÖ Approuver une demande d'agent
  static Future<void> approveAgentRequest(String requestId, String adminId) async {
    try {
      debugPrint('[AgentRegistration] ‚úÖ Approbation demande: $requestId');

      // R√©cup√©rer la demande
      final requestDoc = await _firestore
          .collection('professional_account_requests')
          .doc(requestId)
          .get();

      if (!requestDoc.exists) {
        throw Exception('Demande non trouv√©e');
      }

      final registration = AgentRegistrationModel.fromMap(
        requestDoc.data()!,
        requestDoc.id,
      );

      // Cr√©er le compte Firebase Auth
      final userCredential = await _auth.createUserWithEmailAndPassword(
        email: registration.email,
        password: registration.password,
      );

      debugPrint('[AgentRegistration] ‚úÖ Compte Firebase cr√©√©: ${userCredential.user?.uid}');

      // Cr√©er le profil utilisateur dans Firestore
      await _firestore.collection('users').doc(userCredential.user!.uid).set({
        'email': registration.email,
        'userType': 'assureur',
        'role': 'assureur',
        'accountStatus': 'active',
        'createdAt': FieldValue.serverTimestamp(),
        'approvedAt': FieldValue.serverTimestamp(),
        'approvedBy': adminId,
      });

      // Cr√©er le profil agent d√©taill√©
      await _firestore.collection('assureurs').doc(userCredential.user!.uid).set({
        'uid': userCredential.user!.uid,
        'email': registration.email,
        'prenom': registration.prenom,
        'nom': registration.nom,
        'telephone': registration.telephone,
        'compagnie': registration.compagnie,
        'agence': registration.agence,
        'gouvernorat': registration.gouvernorat,
        'poste': registration.poste,
        'numeroAgent': registration.numeroAgent,
        'carteIdRecto': registration.carteIdRecto,
        'carteIdVerso': registration.carteIdVerso,
        'permisRecto': registration.permisRecto,
        'permisVerso': registration.permisVerso,
        'isActive': true,
        'createdAt': FieldValue.serverTimestamp(),
        'approvedAt': FieldValue.serverTimestamp(),
        'approvedBy': adminId,
      });

      // Mettre √† jour le statut de la demande
      await _firestore.collection('professional_account_requests').doc(requestId).update({
        'status': 'approved',
        'reviewedAt': FieldValue.serverTimestamp(),
        'reviewedBy': adminId,
        'agentUid': userCredential.user!.uid,
      });

      // Envoyer email d'approbation
      await _sendApprovalEmail(registration);

      debugPrint('[AgentRegistration] ‚úÖ Agent approuv√© avec succ√®s');

    } catch (e) {
      debugPrint('[AgentRegistration] ‚ùå Erreur approbation: $e');
      rethrow;
    }
  }

  /// üìß Envoyer email d'approbation
  static Future<void> _sendApprovalEmail(AgentRegistrationModel registration) async {
    try {
      debugPrint('[AgentRegistration] üìß Envoi email approbation avec d√©buggage...');
      final emailResult = await DebugEmailService.sendEmailWithDebug(
        to: registration.email,
        subject: 'üéâ Compte agent approuv√© - Constat Tunisie',
        htmlBody: '''
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #4CAF50;">üéâ F√©licitations ! Votre compte a √©t√© approuv√©</h2>
          
          <p>Bonjour ${registration.prenom} ${registration.nom},</p>
          
          <p>Excellente nouvelle ! Votre demande d'inscription en tant qu'agent d'assurance a √©t√© <strong>approuv√©e</strong>.</p>
          
          <div style="background: #e8f5e8; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="color: #2e7d32;">‚úÖ Votre compte est maintenant actif</h3>
            <p><strong>Email de connexion :</strong> ${registration.email}</p>
            <p><strong>Compagnie :</strong> ${registration.compagnie}</p>
            <p><strong>Agence :</strong> ${registration.agence}</p>
          </div>

          <div style="text-align: center; margin: 30px 0;">
            <p><strong>Vous pouvez maintenant vous connecter √† l'application !</strong></p>
            <a href="#" style="background: #4CAF50; color: white; padding: 12px 24px; text-decoration: none; border-radius: 4px;">
              Se connecter maintenant
            </a>
          </div>

          <div style="background: #fff3e0; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="color: #f57c00;">üöÄ Fonctionnalit√©s disponibles :</h3>
            <ul>
              <li>Gestion des contrats d'assurance</li>
              <li>V√©rification des v√©hicules</li>
              <li>Suivi des sinistres</li>
              <li>Rapports d'activit√©</li>
              <li>Interface de gestion compl√®te</li>
            </ul>
          </div>

          <p>Bienvenue dans l'√©quipe Constat Tunisie !</p>
          <p><strong>L'√©quipe Constat Tunisie</strong></p>
        </div>
        ''',
      );

      // Analyser le r√©sultat de l'envoi
      debugPrint('[AgentRegistration] üìä R√©sultat email approbation:');
      debugPrint('[AgentRegistration] - Succ√®s: ${emailResult['success']}');
      debugPrint('[AgentRegistration] - M√©thode: ${emailResult['method']}');
      debugPrint('[AgentRegistration] - √âtapes: ${emailResult['steps'].length}');
      debugPrint('[AgentRegistration] - Erreurs: ${emailResult['errors'].length}');

      if (emailResult['success']) {
        debugPrint('[AgentRegistration] ‚úÖ Email approbation envoy√© via ${emailResult['method']}');
      } else {
        debugPrint('[AgentRegistration] ‚ö†Ô∏è Email approbation √©chou√©');
      }

    } catch (e) {
      debugPrint('[AgentRegistration] ‚ö†Ô∏è Erreur email approbation: $e');
    }
  }

  /// ‚ùå Rejeter une demande d'agent
  static Future<void> rejectAgentRequest(
    String requestId,
    String adminId,
    String reason,
  ) async {
    try {
      debugPrint('[AgentRegistration] ‚ùå Rejet demande: $requestId');

      // R√©cup√©rer la demande
      final requestDoc = await _firestore
          .collection('professional_account_requests')
          .doc(requestId)
          .get();

      if (!requestDoc.exists) {
        throw Exception('Demande non trouv√©e');
      }

      final registration = AgentRegistrationModel.fromMap(
        requestDoc.data()!,
        requestDoc.id,
      );

      // Mettre √† jour le statut de la demande
      await _firestore.collection('professional_account_requests').doc(requestId).update({
        'status': 'rejected',
        'reviewedAt': FieldValue.serverTimestamp(),
        'reviewedBy': adminId,
        'rejectionReason': reason,
      });

      // Envoyer email de rejet
      await _sendRejectionEmail(registration, reason);

      debugPrint('[AgentRegistration] ‚úÖ Demande rejet√©e');

    } catch (e) {
      debugPrint('[AgentRegistration] ‚ùå Erreur rejet: $e');
      rethrow;
    }
  }

  /// üìß Envoyer email de rejet
  static Future<void> _sendRejectionEmail(
    AgentRegistrationModel registration,
    String reason,
  ) async {
    try {
      debugPrint('[AgentRegistration] üìß Envoi email rejet avec d√©buggage...');
      final emailResult = await DebugEmailService.sendEmailWithDebug(
        to: registration.email,
        subject: '‚ùå Demande d\'inscription non approuv√©e - Constat Tunisie',
        htmlBody: '''
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #f44336;">‚ùå Demande non approuv√©e</h2>
          
          <p>Bonjour ${registration.prenom} ${registration.nom},</p>
          
          <p>Nous vous remercions pour votre demande d'inscription en tant qu'agent d'assurance.</p>
          
          <div style="background: #ffebee; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="color: #c62828;">Motif du refus :</h3>
            <p>$reason</p>
          </div>

          <div style="background: #e3f2fd; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="color: #1976d2;">üí° Que faire maintenant ?</h3>
            <p>Si vous pensez qu'il y a eu une erreur ou si vous souhaitez corriger les informations, vous pouvez :</p>
            <ul>
              <li>Nous contacter √† : constat.tunisie.app@gmail.com</li>
              <li>Soumettre une nouvelle demande avec les corrections n√©cessaires</li>
            </ul>
          </div>

          <p>Merci pour votre compr√©hension.</p>
          <p><strong>L'√©quipe Constat Tunisie</strong></p>
        </div>
        ''',
      );

      // Analyser le r√©sultat de l'envoi
      debugPrint('[AgentRegistration] üìä R√©sultat email rejet:');
      debugPrint('[AgentRegistration] - Succ√®s: ${emailResult['success']}');
      debugPrint('[AgentRegistration] - M√©thode: ${emailResult['method']}');
      debugPrint('[AgentRegistration] - √âtapes: ${emailResult['steps'].length}');
      debugPrint('[AgentRegistration] - Erreurs: ${emailResult['errors'].length}');

      if (emailResult['success']) {
        debugPrint('[AgentRegistration] ‚úÖ Email rejet envoy√© via ${emailResult['method']}');
      } else {
        debugPrint('[AgentRegistration] ‚ö†Ô∏è Email rejet √©chou√©');
      }

    } catch (e) {
      debugPrint('[AgentRegistration] ‚ö†Ô∏è Erreur email rejet: $e');
    }
  }

  /// üìã R√©cup√©rer toutes les demandes en attente
  static Future<List<AgentRegistrationModel>> getPendingRequests() async {
    try {
      final snapshot = await _firestore
          .collection('professional_account_requests')
          .where('status', isEqualTo: 'pending')
          .orderBy('submittedAt', descending: true)
          .get();

      return snapshot.docs
          .map((doc) => AgentRegistrationModel.fromMap(doc.data(), doc.id))
          .toList();

    } catch (e) {
      debugPrint('[AgentRegistration] ‚ùå Erreur r√©cup√©ration demandes: $e');
      return [];
    }
  }

  /// üìä R√©cup√©rer les statistiques des demandes
  static Future<Map<String, int>> getRequestsStats() async {
    try {
      final snapshot = await _firestore
          .collection('professional_account_requests')
          .get();

      final stats = <String, int>{
        'total': 0,
        'pending': 0,
        'approved': 0,
        'rejected': 0,
      };

      for (final doc in snapshot.docs) {
        final status = doc.data()['status'] as String? ?? 'pending';
        stats['total'] = (stats['total'] ?? 0) + 1;
        stats[status] = (stats[status] ?? 0) + 1;
      }

      return stats;

    } catch (e) {
      debugPrint('[AgentRegistration] ‚ùå Erreur statistiques: $e');
      return {'total': 0, 'pending': 0, 'approved': 0, 'rejected': 0};
    }
  }
}
