import 'package:cloud_firestore/cloud_firestore.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:flutter/foundation.dart';import '../models/assureur_model.dart';import '../../../utils/user_type.dart';/// üè¢ Service d';  /// üîê Connexion d';      debugPrint('[HierarchicalAuth] Tentative de connexion agent: $email';        debugPrint('[HierarchicalAuth] Utilisateur Firebase null';      // 2. V√©rifier le type d';      final userTypeDoc = await _firestore.collection('user_types';      if (!userTypeDoc.exists || userTypeDoc.data()?['type'] != 'assureur';        debugPrint('[HierarchicalAuth] Utilisateur non autoris√© ou pas un assureur';        throw Exception('Acc√®s non autoris√©. Seuls les agents d\'assurance peuvent se connecter ici.';      // 3. R√©cup√©rer les donn√©es de l';      final assureurDoc = await _firestore.collection('assureurs';        debugPrint('[HierarchicalAuth] Document assureur non trouv√©';        throw Exception('Profil agent non trouv√©. Contactez votre administrateur.';      final agenceId = assureurData['agence';        debugPrint('[HierarchicalAuth] Agent sans agence assign√©e';        throw Exception('Aucune agence assign√©e. Contactez votre responsable.';      final agenceDoc = await _firestore.collection('agences';        debugPrint('[HierarchicalAuth] Agence non trouv√©e: $agenceId';        throw Exception('Agence non trouv√©e. Contactez votre administrateur.';      if (agenceData['statut'] != 'active';        debugPrint('[HierarchicalAuth] Agence inactive: $agenceId';        throw Exception('Agence inactive. Contactez votre responsable.';      final compagnieCode = agenceData['compagnie';      final compagnieDoc = await _firestore.collection('insurance_companies';        debugPrint('[HierarchicalAuth] Compagnie non trouv√©e: $compagnieCode';        throw Exception('Compagnie non trouv√©e. Contactez votre administrateur.';      if (compagnieData['statut'] != 'active';        debugPrint('[HierarchicalAuth] Compagnie inactive: $compagnieCode';        throw Exception('Compagnie inactive. Contactez votre responsable.';      // 6. V√©rifier le statut de l';      if (assureurData['statut'] != 'actif';        debugPrint('[HierarchicalAuth] Agent inactif: ${firebaseUser.uid}';        throw Exception('Compte agent inactif. Contactez votre responsable.';        email: assureurData['email'] ?? firebaseUser.email ?? '';        nom: assureurData['nom'] ?? '';        prenom: assureurData['prenom'] ?? '';        telephone: assureurData['telephone'] ?? '';        matricule: assureurData['matricule'] ?? '';        agenceNom: agenceData['nom'] ?? '';        gouvernorat: agenceData['gouvernorat'] ?? '';        poste: assureurData['poste'] ?? 'Agent Commercial';        permissions: List<String>.from(assureurData['permissions'] ?? ['view_contracts', 'create_contracts';        dossierIds: List<String>.from(assureurData['dossierIds';        dateEmbauche: assureurData['date_embauche';            ? (assureurData['date_embauche';        statut: assureurData['statut'] ?? 'actif';        adresse: assureurData['adresse';        createdAt: (assureurData['createdAt';        updatedAt: (assureurData['updatedAt';      await _firestore.collection('assureurs';        'derniere_connexion';        'updatedAt';      debugPrint('[HierarchicalAuth] Connexion r√©ussie: ${assureurModel.nomComplet} - ${assureurModel.agenceNom}';      debugPrint('[HierarchicalAuth] Erreur lors de la connexion: $e';  /// üìä R√©cup√©rer les informations hi√©rarchiques d';      final assureurDoc = await _firestore.collection('assureurs';        throw Exception('Agent non trouv√©';      final agenceId = assureurData['agence';      final agenceDoc = await _firestore.collection('agences';      final compagnieCode = agenceData['compagnie';      final compagnieDoc = await _firestore.collection('insurance_companies';        'agent';        'agence';        'compagnie';        'hierarchy';          'compagnie_nom': compagnieData['nom';          'agence_nom': agenceData['nom';          'gouvernorat': agenceData['gouvernorat';          'agent_nom': '${assureurData['prenom']} ${assureurData['nom']}';          'poste': assureurData['poste';      debugPrint('[HierarchicalAuth] Erreur r√©cup√©ration hi√©rarchie: $e';  /// üè¢ R√©cup√©rer tous les agents d';          .collection('assureurs';          .where('agence';          .where('statut', isEqualTo: 'actif';        data['id';      debugPrint('[HierarchicalAuth] Erreur r√©cup√©ration agents agence: $e';  /// üåç R√©cup√©rer toutes les agences d';          .collection('agences';          .where('compagnie';          .where('gouvernorat';          .where('statut', isEqualTo: 'active';        data['id';      debugPrint('[HierarchicalAuth] Erreur r√©cup√©ration agences: $e';  /// üîç V√©rifier les permissions d';           agent.poste == 'Responsable Agence';           agent.poste == 'Superviseur';  /// üìà R√©cup√©rer les statistiques d';      // Nombre d';          .collection('assureurs';          .where('agence';          .where('statut', isEqualTo: 'actif';          .collection('contracts';          .where('agence.id';          .collection('contracts';          .where('agence.id';          .where('statut', isEqualTo: 'actif';        'agents';        'contrats_total';        'contrats_actifs';      debugPrint('[HierarchicalAuth] Erreur r√©cup√©ration stats agence: $e';      return {'agents': 0, 'contrats_total': 0, 'contrats_actifs';