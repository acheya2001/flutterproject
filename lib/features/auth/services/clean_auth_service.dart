import 'package:firebase_auth/firebase_auth.dart';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';import '../models/user_model.dart';import '../models/conducteur_model.dart';import '../models/assureur_model.dart';import '../models/expert_model.dart';import '../../admin/models/admin_model.dart';import '../../../utils/user_type.dart';import 'universal_auth_service.dart';/// üßπ Service d'authentification propre - Remplace l';      debugPrint('[CleanAuthService] Connexion: $email';      if (result['success';        debugPrint('[CleanAuthService] √âchec: ${result['error']}';      debugPrint('[CleanAuthService] Erreur: $e';      debugPrint('[CleanAuthService] Inscription: $email ($userType)';        userType: userType.toString().split('.';          'telephone';          'adresse';      if (result['success';        debugPrint('[CleanAuthService] √âchec inscription: ${result['error']}';      debugPrint('[CleanAuthService] Erreur inscription: $e';  /// üë§ Obtenir l';        debugPrint('[CleanAuthService] Aucun utilisateur connect√©';      debugPrint('[CleanAuthService] R√©cup√©ration utilisateur: ${user.uid}';      final result = await UniversalAuthService.signIn(user.email!, 'dummy';      if (result['success';        email: user.email ?? '';        nom: 'Utilisateur';        prenom: 'Firebase';        telephone: '';      debugPrint('[CleanAuthService] Erreur getCurrentUser: $e';      debugPrint('[CleanAuthService] D√©connexion r√©ussie';      debugPrint('[CleanAuthService] Erreur d√©connexion: $e';      final userType = result['userType';      final userData = result['userData';      debugPrint('[CleanAuthService] Conversion: $userType';        'uid': result['uid';        'email': result['email';        'nom': result['nom'] ?? 'Utilisateur';        'prenom': result['prenom'] ?? 'Firebase';        'telephone': userData['telephone'] ?? '';        'adresse': userData['adresse';        'dateCreation': _safeTimestamp(userData['createdAt';        'dateModification': _safeTimestamp(userData['updatedAt';        'type';        case 'conducteur';        case 'assureur';        case 'expert';        case 'admin';            (type) => type.toString().split('.';            uid: completeData['uid';            email: completeData['email';            nom: completeData['nom';            prenom: completeData['prenom';            telephone: completeData['telephone';            adresse: completeData['adresse';            dateCreation: (completeData['dateCreation';            dateModification: (completeData['dateModification';      debugPrint('[CleanAuthService] Erreur conversion: $e';      debugPrint('[CleanAuthService] Recherche utilisateur: $email';      final collections = ['conducteurs', 'agents_assurance', 'experts', 'admins';              .where('email';              'success';              'uid';              'email';              'userType': data['userType';              'userData';          debugPrint('[CleanAuthService] Erreur recherche $collection: $e';      debugPrint('[CleanAuthService] Erreur findUserByEmail: $e';      case 'agents_assurance';        return 'assureur';      case 'experts';        return 'expert';      case 'admins';        return 'admin';      case 'conducteurs';        return 'conducteur';        return 'conducteur';  /// üß™ M√©thodes de compatibilit√© (pour ne pas casser l';  // M√©thode d';        if (cin != null) 'cin';        if (compagnie != null) 'compagnie';        if (matricule != null) 'matricule';        if (cabinet != null) 'cabinet';        if (agrement != null) 'agrement';      debugPrint('[CleanAuthService] Email de r√©initialisation envoy√©: $email';      debugPrint('[CleanAuthService] Erreur r√©initialisation: $e';      debugPrint('[CleanAuthService] Erreur conversion timestamp: $e';