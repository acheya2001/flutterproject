import 'package:cloud_firestore/cloud_firestore.dart';import 'package:firebase_auth/firebase_auth.dart';import 'package:flutter/foundation.dart';/// 🧪 Service pour créer des données de test pour les agents d';      debugPrint('[AgentTestData] 🧪 Création des agents de test...';          'email': 'agent@star.tn';          'password': 'agent123';          'nom': 'Ben Ali';          'prenom': 'Ahmed';          'telephone': '+216 20 123 456';          'numeroAgent': 'STAR001';          'compagnie': 'STAR Assurances';          'agence': 'Agence Tunis Centre';          'gouvernorat': 'Tunis';          'poste': 'Agent Commercial';          'email': 'agent@gat.tn';          'password': 'agent123';          'nom': 'Trabelsi';          'prenom': 'Fatma';          'telephone': '+216 22 234 567';          'numeroAgent': 'GAT002';          'compagnie': 'GAT Assurances';          'agence': 'Agence Ariana';          'gouvernorat': 'Ariana';          'poste': 'Conseiller Clientèle';          'email': 'agent@bh.tn';          'password': 'agent123';          'nom': 'Sassi';          'prenom': 'Mohamed';          'telephone': '+216 24 345 678';          'numeroAgent': 'BH003';          'compagnie': 'BH Assurances';          'agence': 'Agence Sousse';          'gouvernorat': 'Sousse';          'poste': 'Chargé de Sinistres';          'email': 'hammami123rahma@gmail.com';          'password': 'Acheya123';          'nom': 'Hammami';          'prenom': 'Rahma';          'telephone': '+216 26 456 789';          'numeroAgent': 'STAR004';          'compagnie': 'STAR Assurances';          'agence': 'Agence Manouba';          'gouvernorat': 'Manouba';          'poste': 'Responsable Agence';      debugPrint('[AgentTestData] ✅ Tous les agents de test créés';      debugPrint('[AgentTestData] ❌ Erreur création agents test: $e';      final email = agentData['email';      debugPrint('[AgentTestData] 👤 Création agent: $email';      // Vérifier si l';          .collection('agents_assurance';          .where('email';        debugPrint('[AgentTestData] ⚠️ Agent existe déjà: $email';          password: agentData['password';        if (authError.toString().contains('email-already-in-use';          debugPrint('[AgentTestData] ⚠️ Email déjà utilisé, récupération UID...';          // Essayer de se connecter pour récupérer l';              password: agentData['password';            debugPrint('[AgentTestData] ❌ Impossible de récupérer UID: $signInError';          debugPrint('[AgentTestData] ❌ Erreur création compte: $authError';        debugPrint('[AgentTestData] ❌ Pas d\'utilisateur créé';      await _firestore.collection('users';        'uid';        'email';        'nom': agentData['nom';        'prenom': agentData['prenom';        'telephone': agentData['telephone';        'userType': 'assureur';        'createdAt';        'updatedAt';      // Créer le document agent d';      await _firestore.collection('agents_assurance';        'uid';        'email';        'nom': agentData['nom';        'prenom': agentData['prenom';        'telephone': agentData['telephone';        'numeroAgent': agentData['numeroAgent';        'compagnie': agentData['compagnie';        'agence': agentData['agence';        'gouvernorat': agentData['gouvernorat';        'poste': agentData['poste';        'isActive';        'statut': 'actif';        'dateEmbauche';        'createdAt';        'updatedAt';        'userType': 'assureur';      await _firestore.collection('user_types';        'userType': 'assureur';        'createdAt';      debugPrint('[AgentTestData] ✅ Agent créé: ${agentData['prenom']} ${agentData['nom']} ($email)';      debugPrint('[AgentTestData] ❌ Erreur création agent ${agentData['email']}: $e';      debugPrint('[AgentTestData] 🗑️ Suppression des agents de test...';        'agent@star.tn';        'agent@gat.tn';        'agent@bh.tn';        'hammami123rahma@gmail.com';      debugPrint('[AgentTestData] ✅ Tous les agents de test supprimés';      debugPrint('[AgentTestData] ❌ Erreur suppression agents test: $e';      debugPrint('[AgentTestData] 🗑️ Suppression agent: $email';      // Trouver l';          .collection('agents_assurance';          .where('email';        debugPrint('[AgentTestData] ⚠️ Agent non trouvé: $email';      await _firestore.collection('agents_assurance';      await _firestore.collection('users';      await _firestore.collection('user_types';      debugPrint('[AgentTestData] ✅ Agent supprimé: $email';      debugPrint('[AgentTestData] ❌ Erreur suppression agent $email: $e';      debugPrint('[AgentTestData] 📊 Liste des agents de test:';      final snapshot = await _firestore.collection('agents_assurance';        debugPrint('[AgentTestData] ⚠️ Aucun agent trouvé';        debugPrint('[AgentTestData] 👤 ${data['prenom']} ${data['nom']} (${data['email']}) - ${data['compagnie']}';      debugPrint('[AgentTestData] 📊 Total: ${snapshot.docs.length} agents';      debugPrint('[AgentTestData] ❌ Erreur liste agents: $e';  /// 🧪 Tester la connexion d';      debugPrint('[AgentTestData] 🧪 Test connexion: $email';            .collection('agents_assurance';          debugPrint('[AgentTestData] ✅ Connexion réussie: ${data['prenom']} ${data['nom']} - ${data['compagnie']}';          debugPrint('[AgentTestData] ❌ Document agent non trouvé';        debugPrint('[AgentTestData] ❌ Connexion échouée';      debugPrint('[AgentTestData] ❌ Erreur test connexion: $e';