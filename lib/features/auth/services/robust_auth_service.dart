import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/material.dart';/// 🔐 Service d';  }';      debugPrint('[ROBUST_AUTH] 🚀 Debut connexion robuste: ';        ';        debugPrint('[ROBUST_AUTH] ✅ Firebase Auth reussi: ';      } catch (authError';        debugPrint('[ROBUST_AUTH] ⚠️ Erreur Firebase Auth: 'authError';        // Si l';        if (authError.toString(').contains('is not a subtype of type)';          debugPrint('[ROBUST_AUTH] 🔧 Tentative de recuperation apres erreur de type...';          // Attendre un peu et essayer de recuperer l';            debugPrint('[ROBUST_AUTH] ✅ Utilisateur recupere apres erreur: ';        if (user == null';            'success';            'error': 'Erreur de connexion Firebase Auth';            'details: authError.toString(';          .collection(';      if (!userDoc.exists';        debugPrint('[ROBUST_AUTH] ❌ Document Firestore non trouve pour: '{user.uid}';          'success';          'error': 'Compte non configure';          'details': 'Document utilisateur manquant dans Firestore';          'uid';          ';      final userData = userDoc.data(';      debugPrint('[ROBUST_AUTH] ✅ Document Firestore trouve: '{userData['role']}';      if (userData['status'] != 'actif';        debugPrint('[ROBUST_AUTH] ❌ Compte inactif: '{userData['status']}';          'success';          'error': 'Compte inactif';          'details': 'Statut: '{userData['status']}';        'success';        'user';        'userData';        'uid';        'email';        'role': userData['role';        'status': userData[';    } catch (e';      debugPrint('[ROBUST_AUTH] ❌ Erreur generale:  + e.toString()';        'success';        'error': 'Erreur de connexion';        'details: e.toString(';  /// 🔍 Diagnostic complet d';      debugPrint('[ROBUST_AUTH] 🔍 Diagnostic pour: 'email';      // 1. Verifier si l';          .collection('users';          .where(';        firestoreData = querySnapshot.docs.first.data(';        'email';        'firebase_auth_exists';        'firebase_auth_uid';        'firestore_exists';        'firestore_uid';        'firestore_data';        'role': firestoreData?['role';        'status': firestoreData?['status';        'compagnieId': firestoreData?[';    } catch (e';      debugPrint('[ROBUST_AUTH] ❌ Erreur diagnostic:  + e.toString()';        'error: e.toString(';  /// 🔧 Reparation automatique d';      debugPrint('[ROBUST_AUTH] 🔧 Reparation automatique pour: ';      final diagnostic = await diagnosticAccount(email';      // Si le compte Firestore n';      if (diagnostic['firebase_auth_exists';          diagnostic['firestore_exists] == false';        debugPrint('[ROBUST_AUTH] 🔧 Creation document Firestore manquant...';        // Creer le document Firestore base sur l';        if (email == 'constat.tunisie.app@gmail.com';            'email';            'nom': 'Super';            'prenom': 'Admin';            'role': 'super_admin';            'status': 'actif';            'created_at: FieldValue.serverTimestamp(';            'updated_at: FieldValue.serverTimestamp(';            'created_by': 'robust_auth_repair';        } else if (email == 'admin.compagnie@test.tn';            'email';            'nom': 'Admin';            'prenom': 'Compagnie';            'role': 'admin_compagnie';            'status': 'actif';            'compagnieId': 'star-assurance-test';            'compagnieNom': 'STAR Assurance';            'created_at: FieldValue.serverTimestamp(';            'updated_at: FieldValue.serverTimestamp(';            'created_by': 'robust_auth_repair';          debugPrint('[ROBUST_AUTH] ❌ Email non reconnu pour reparation: 'email';            .collection('users';            .doc(diagnostic[';            .set(userData';        debugPrint('[ROBUST_AUTH] ✅ Document Firestore cree avec succes';      debugPrint(';    } catch (e';      debugPrint(';  }';      debugPrint('[ROBUST_AUTH] 🚀 Connexion avec reparation automatique: ';      var result = await robustLogin(email: email, password: password';      if (result['success] == true';        debugPrint('[ROBUST_AUTH] ✅ Connexion reussie du premier coup';      debugPrint(';      if (!repairSuccess';        debugPrint('[ROBUST_AUTH] ❌ Reparation echouee';        return result; // Retourner l';      debugPrint(';      result = await robustLogin(email: email, password: password';      if (result['success] == true';        debugPrint(';    } catch (e';      debugPrint('[ROBUST_AUTH] ❌ Erreur connexion avec reparation:  + e.toString()';        'success';        'error': 'Erreur systeme';        'details: e.toString(';  /// 🔍 Obtenir les informations de l';          .collection(';      if (!userDoc.exists';        'uid';        'email';        ';    } catch (e';      debugPrint('[ROBUST_AUTH] ❌ Erreur getCurrentUserInfo: ';