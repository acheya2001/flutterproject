import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/material.dart';import '../../admin_compagnie/services/company_redirect_service.dart';  static Future<Map<String, dynamic>> analyzeUserAndGetRedirection(';      debugPrint('[DYNAMIC_NAV] üîç Analyse de l\'utilisateur connecte...';      // 1. Recuperer l';        debugPrint('[DYNAMIC_NAV] ‚ùå Aucun utilisateur connecte';          'success';          'error': 'Aucun utilisateur connecte';          'redirectTo': '/login';      debugPrint('[DYNAMIC_NAV] ‚úÖ Utilisateur Firebase Auth: '{currentUser.email}';          .collection(';      if (!userDoc.exists';        debugPrint('[DYNAMIC_NAV] ‚ùå Document Firestore non trouve';          'success';          'error': 'Compte non configure dans Firestore';          'redirectTo': ';      final userData = userDoc.data(';      final role = userData['role';      final status = userData['status';      final compagnieId = userData['compagnieId';      debugPrint('[DYNAMIC_NAV] üìã Donnees utilisateur:';      debugPrint('[DYNAMIC_NAV]   - Email: '{currentUser.email}';      debugPrint('[DYNAMIC_NAV]   - R√¥le: 'role';      debugPrint('[DYNAMIC_NAV]   - Statut: 'status';      debugPrint('[DYNAMIC_NAV]   - CompagnieId: 'compagnieId';      if (status != 'actif';        debugPrint('[DYNAMIC_NAV] ‚ùå Compte inactif: 'status';          'success';          'error': 'Compte inactif ou suspendu';          'redirectTo': ';    } catch (e';      debugPrint('[DYNAMIC_NAV] ‚ùå Erreur analyse:  + e.toString()';        'success';        'error': 'Erreur systeme: 'e';        'redirectTo': ';    switch (role';      case 'super_admin';        debugPrint('[DYNAMIC_NAV] üëë Super Admin detecte';          'success';          'role': 'super_admin';          'redirectTo': '/super-admin-dashboard';          'userData';      case 'admin_compagnie';        debugPrint(';        return await _handleAdminCompagnieRedirection(userData, currentUser';      case 'admin_agence';        debugPrint(';        return await _handleAdminAgenceRedirection(userData, currentUser';      case 'agent';        debugPrint('[DYNAMIC_NAV] üë®‚Äçüíº Agent detecte';          'success';          'role': 'agent';          'redirectTo': '/agent-dashboard';          'userData';      case 'conducteur';        debugPrint('[DYNAMIC_NAV] üöó Conducteur detecte';          'success';          'role': 'conducteur';          'redirectTo': '/conducteur-dashboard';          'userData';      case 'expert';        debugPrint('[DYNAMIC_NAV] üîç Expert detecte';          'success';          'role': 'expert';          'redirectTo': '/expert-dashboard';          'userData';        debugPrint('[DYNAMIC_NAV] ‚ùå R√¥le non reconnu: 'role';          'success';          'error': 'R√¥le non reconnu: 'role';          'redirectTo': ';  ';      final compagnieId = userData[';      if (compagnieId == null || compagnieId.isEmpty';        debugPrint('[DYNAMIC_NAV] ‚ùå Admin Compagnie sans compagnieId';          'success';          'error': Compte Admin Compagnie mal configure (compagnieId manquant')';          'redirectTo': ';      final legitimacyCheck = await _validateAdminCompagnieLegitimacy(userData';      if (!legitimacyCheck['isLegitimate]';        debugPrint('[DYNAMIC_NAV] ‚ùå Compte Admin Compagnie non legitime: '{legitimacyCheck['reason']}';          'success';          'error': 'Acces refuse: '{legitimacyCheck['reason']}';          'redirectTo': '/login';          .collection(';      if (!compagnieDoc.exists';        debugPrint('[DYNAMIC_NAV] ‚ùå Compagnie non trouvee: 'compagnieId';          'success';          'error': 'Compagnie associee non trouvee';          'redirectTo': ';      final compagnieData = compagnieDoc.data(';      final compagnieNom = compagnieData['nom';      debugPrint('[DYNAMIC_NAV] ‚úÖ Admin Compagnie legitime et valide:';      debugPrint('[DYNAMIC_NAV]   - CompagnieId: 'compagnieId';      debugPrint('[DYNAMIC_NAV]   - CompagnieNom: 'compagnieNom';      debugPrint('[DYNAMIC_NAV]   - Cree par: '{userData['created_by';      final redirectRoute = await CompanyRedirectService.getCompanyDashboardRoute(currentUser.uid';        'success';        'role': 'admin_compagnie';        'redirectTo': redirectRoute ?? '/compagnie-dashboard/'compagnieId';        'userData';        'compagnieData';        'compagnieId';        ';    } catch (e';      debugPrint('[DYNAMIC_NAV] ‚ùå Erreur Admin Compagnie:  + e.toString()';        'success';        'error': 'Erreur validation Admin Compagnie: 'e';        'redirectTo': '/login';  ';      final createdBy = userData['created_by';      final isFakeData = userData['isFakeData';      final email = userData['email';      final role = userData['role';      final status = userData['status';      debugPrint('[DYNAMIC_NAV] üîç Validation legitimite Admin Compagnie:';      debugPrint('[DYNAMIC_NAV]   - Email: 'email';      debugPrint('[DYNAMIC_NAV]   - R√¥le: 'role';      debugPrint('[DYNAMIC_NAV]   - Statut: 'status';      debugPrint('[DYNAMIC_NAV]   - Cree par: 'createdBy';      debugPrint('[DYNAMIC_NAV]   - isFakeData: 'isFakeData';          (createdBy == 'test_accounts_service';           createdBy == 'direct_firestore_fix';           createdBy == 'firestore_repair_service)';        debugPrint('[DYNAMIC_NAV] ‚ùå Compte de test auto-cree rejete';          'isLegitimate';          'reason': ';      // (sauf ceux explicitement rejetes ci-dessus';      if (role == 'admin_compagnie' && status == 'actif';        debugPrint('[DYNAMIC_NAV] ‚úÖ Compte Admin Compagnie valide accepte';        String source = 'unknown';        if (createdBy == 'super_admin' || createdBy == 'admin_creation_service';          source = 'super_admin_creation';        } else if (createdBy == 'professional_request_approval';                   createdBy == 'demande_professionnelle_approuvee';          source = ';        } else if (createdBy == null || createdBy.isEmpty';          source = 'legacy_or_manual_creation';          source = 'other_legitimate_creation';          'isLegitimate';          'source';          'createdBy';      // 3. Rejeter si le r√¥le n';      if (role != 'admin_compagnie';          'isLegitimate';          'reason': 'R√¥le incorrect: role (attendu: admin_compagnie')';      // 4. Rejeter si le statut n';      if (status != 'actif';          'isLegitimate';          'reason': 'Statut incorrect: status (attendu: actif')';      debugPrint('[DYNAMIC_NAV] ‚ö†Ô∏è Validation par defaut - compte accepte';        'isLegitimate';        'source': ';    } catch (e';      debugPrint('[DYNAMIC_NAV] ‚ùå Erreur validation legitimite:  + e.toString()';        'isLegitimate';        'reason': ';  ';      final agenceId = userData['agenceId';      final compagnieId = userData[';      if (agenceId == null || compagnieId == null';        debugPrint('[DYNAMIC_NAV] ‚ùå Admin Agence mal configure';          'success';          'error': 'Compte Admin Agence mal configure';          'redirectTo': '/login';      debugPrint('[DYNAMIC_NAV] ‚úÖ Admin Agence valide: 'agenceId';        'success';        'role': 'admin_agence';        'redirectTo': '/agence-dashboard';        'userData';        'agenceId';        ';    } catch (e';      debugPrint('[DYNAMIC_NAV] ‚ùå Erreur Admin Agence:  + e.toString()';        'success';        'error': 'Erreur validation Admin Agence: 'e';        'redirectTo': ';  static Future<bool> navigateBasedOnUserRole(BuildContext context';      debugPrint(';      if (!context.mounted';      if (analysis['success] == true';        final redirectTo = analysis['redirectTo';        final role = analysis['role';        debugPrint('[DYNAMIC_NAV] ‚úÖ Redirection vers: $redirectTo (r√¥le: role')';        final error = analysis['error';        final redirectTo = analysis['redirectTo';        debugPrint('[DYNAMIC_NAV] ‚ùå Erreur: 'error';        // Afficher l';    } catch (e';      debugPrint(';        ScaffoldMessenger.of(context';            content: (e';        Navigator.pushReplacementNamed(context, '/login';  /// üîç Diagnostic complet de l';      debugPrint('\n' + '= * 60';      debugPrint('üîç DIAGNOSTIC UTILISATEUR CONNECT√â';      debugPrint(';      final analysis = await analyzeUserAndGetRedirection(';      debugPrint(';      analysis.forEach((key, value';        debugPrint('   $key: ';      }';      debugPrint('=' * 60 + ';    } catch (e';      debugPrint('[DYNAMIC_NAV] ‚ùå Erreur diagnostic: ';