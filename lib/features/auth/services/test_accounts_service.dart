import 'package:cloud_firestore/cloud_firestore.dart';import ';  static Future<Map<String, dynamic>> createGATAdminCompagnie(';      debugPrint('[TEST_ACCOUNTS] üè¢ Creation Admin Compagnie GAT...';      const email = 'admin.gat@assurance.tn';      const password = 'gat123';      // 1. Creer d';      const compagnieId = ';        ';        debugPrint('[TEST_ACCOUNTS] ‚úÖ Compte Firebase Auth cree: ';        if (authError.toString(').contains('email-already-in-use)';          debugPrint(';          ';        'email';        'nom': 'Admin';        'prenom': 'GAT';        'role': 'admin_compagnie';        'status': 'actif';        'compagnieId';        'compagnieNom': 'GAT Assurance';        'created_at: FieldValue.serverTimestamp(';        'updated_at: FieldValue.serverTimestamp(';        'created_by': 'test_accounts_service';        'isFakeData';        'isTestAccount';        'accessLevel': 'test_only';        'phone': '+216 71 456 789';        'address': '456 Avenue de la Republique, Tunis';          .collection(';          .set(userData';      debugPrint('[TEST_ACCOUNTS] ‚úÖ Admin Compagnie GAT cree avec succes';        'success';        'email';        'password';        'uid';        'compagnieId';        'compagnieNom': ';    } catch (e';      debugPrint('[TEST_ACCOUNTS] ‚ùå Erreur creation GAT:  + e.toString()';        'success';        ';  static Future<void> _createGATCompagnie(String compagnieId';          .collection(';      if (existingCompagnie.exists';        debugPrint('[TEST_ACCOUNTS] ‚úÖ Compagnie GAT existe deja';        'nom': 'GAT Assurance';        'code': 'GAT';        'type': 'compagnie_assurance';        'status': 'actif';        'adresse': '456 Avenue de la Republique, Tunis';        'telephone': '+216 71 456 789';        'email': 'contact@gat-assurance.tn';        'site_web': 'www.gat-assurance.tn';        'created_at: FieldValue.serverTimestamp(';        'updated_at: FieldValue.serverTimestamp(';        'created_by': 'test_accounts_service';        'isFakeData';          .collection(';          .set(compagnieData';      debugPrint(';    } catch (e';      debugPrint(';  static Future<Map<String, dynamic>> createCOMARAdminCompagnie(';      debugPrint('[TEST_ACCOUNTS] üè¢ Creation Admin Compagnie COMAR...';      const email = 'admin.comar@assurance.tn';      const password = 'comar123';      // 1. Creer d';      const compagnieId = ';        ';        debugPrint('[TEST_ACCOUNTS] ‚úÖ Compte Firebase Auth cree: ';        if (authError.toString(').contains('email-already-in-use)';          debugPrint(';          ';        'email';        'nom': 'Admin';        'prenom': 'COMAR';        'role': 'admin_compagnie';        'status': 'actif';        'compagnieId';        'compagnieNom': 'COMAR Assurance';        'created_at: FieldValue.serverTimestamp(';        'updated_at: FieldValue.serverTimestamp(';        'created_by': 'test_accounts_service';        'isFakeData';        'isTestAccount';        'accessLevel': 'test_only';        'phone': '+216 71 789 123';        'address': '789 Boulevard Habib Bourguiba, Tunis';          .collection(';          .set(userData';      debugPrint('[TEST_ACCOUNTS] ‚úÖ Admin Compagnie COMAR cree avec succes';        'success';        'email';        'password';        'uid';        'compagnieId';        'compagnieNom': ';    } catch (e';      debugPrint('[TEST_ACCOUNTS] ‚ùå Erreur creation COMAR:  + e.toString()';        'success';        ';  static Future<void> _createCOMARCompagnie(String compagnieId';          .collection(';      if (existingCompagnie.exists';        debugPrint('[TEST_ACCOUNTS] ‚úÖ Compagnie COMAR existe deja';        'nom': 'COMAR Assurance';        'code': 'COMAR';        'type': 'compagnie_assurance';        'status': 'actif';        'adresse': '789 Boulevard Habib Bourguiba, Tunis';        'telephone': '+216 71 789 123';        'email': 'contact@comar-assurance.tn';        'site_web': 'www.comar-assurance.tn';        'created_at: FieldValue.serverTimestamp(';        'updated_at: FieldValue.serverTimestamp(';        'created_by': 'test_accounts_service';        'isFakeData';          .collection(';          .set(compagnieData';      debugPrint(';    } catch (e';      debugPrint(';  static Future<List<Map<String, dynamic>>> createAllTestAccounts(';    debugPrint(';    results.add(comarResult';    debugPrint(';  static Future<void> cleanAllTestAccounts(';      debugPrint('[TEST_ACCOUNTS] üßπ Nettoyage des comptes de test...';      await _firestore.collection('compagnies_assurance').doc('gat-assurance).delete(';      await _firestore.collection('compagnies_assurance').doc('comar-assurance).delete(';      await _firestore.collection('compagnies_assurance').doc('star-assurance-test).delete(';          .collection('users';          .where(';        await doc.reference.delete(';      debugPrint(';    } catch (e';      debugPrint('[TEST_ACCOUNTS] ‚ùå Erreur nettoyage: ';