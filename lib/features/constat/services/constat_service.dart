import 'dart:io';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:firebase_storage/firebase_storage.dart';import 'package:flutter/foundation.dart';import 'package:uuid/uuid.dart';import '../models/constat_model.dart';import '../models/participant_model.dart';import '../../vehicule/services/vehicule_service.dart';import '../../../core/services/simple_ocr_service.dart';import '../../../core/services/ai_service.dart';import '../../../core/services/notification_service.dart';      debugPrint('[ConstatService] Création d\'un nouveau constat';        'id';        'dateAccident';        'lieuAccident';        'coordonnees';        'adresseAccident';        'vehiculeIds';        'conducteurIds';        'temoinsIds';        'photosUrls';        'validationStatus';        'status': ConstatStatus.draft.toString().split('.';        'createdAt';        'updatedAt';        'createdBy';      await _firestore.collection('constats';      debugPrint('[ConstatService] Constat créé avec ID: $constatId';      debugPrint('[ConstatService] Erreur lors de la création du constat: $e';      debugPrint('[ConstatService] Ajout du véhicule $vehiculeId au constat $constatId';      final constatDoc = await _firestore.collection('constats';        throw Exception('Constat non trouvé';      final List<String> vehiculeIds = List<String>.from(constatDoc.data()?['vehiculeIds';        await _firestore.collection('constats';          'vehiculeIds';          'updatedAt';        debugPrint('[ConstatService] Véhicule ajouté avec succès';        debugPrint('[ConstatService] Le véhicule est déjà associé à ce constat';      debugPrint('[ConstatService] Erreur lors de l\'ajout du véhicule: $e';      debugPrint('[ConstatService] Ajout d\'un participant au constat $constatId';      // Vérifier si l';          // Correction: Utilisation de l'opérateur ! pour éviter l';        final permisRef = _storage.ref().child('permis/$participantId.jpg';          permisNumero = permisInfo['numero';          permisDelivreLe = permisInfo['delivreLe';          permisValideJusquau = permisInfo['valideJusquau';        final cinRef = _storage.ref().child('cin/$participantId.jpg';          nom = cinInfo['nom';          prenom = cinInfo['prenom';          adresse = cinInfo['adresse';        'id';        'constatId';        'userId';        'nom';        'prenom';        'telephone';        'email';        'adresse';        'permisNumero';        'permisDelivreLe';        'permisValideJusquau';        'urlPhotoPermis';        'urlPhotoCIN';        'role': role.toString().split('.';        'vehiculeId';        'estProprietaire';        'permisValide';        'assuranceValide';        'createdAt';        'updatedAt';      await _firestore.collection('participants';      // Mettre à jour le constat avec l';      final constatDoc = await _firestore.collection('constats';        final List<String> conducteurIds = List<String>.from(constatDoc.data()?['conducteurIds';        final List<String> temoinsIds = List<String>.from(constatDoc.data()?['temoinsIds';        await _firestore.collection('constats';          'conducteurIds';          'temoinsIds';          'updatedAt';      debugPrint('[ConstatService] Participant ajouté avec ID: $participantId';      debugPrint('[ConstatService] Erreur lors de l\'ajout du participant: $e';      debugPrint('[ConstatService] Ajout de ${photos.length} photos au constat $constatId';        final photoRef = _storage.ref().child('constats/$constatId/photos/$photoId.jpg';      final constatDoc = await _firestore.collection('constats';        final List<String> existingPhotos = List<String>.from(constatDoc.data()?['photosUrls';        await _firestore.collection('constats';          'photosUrls';          'updatedAt';      debugPrint('[ConstatService] Photos ajoutées avec succès';      debugPrint('[ConstatService] Erreur lors de l\'ajout des photos: $e';      debugPrint('[ConstatService] Ajout d\'une description vocale et génération de reconstruction pour le constat $constatId';      final audioRef = _storage.ref().child('constats/$constatId/audio/description.mp3';      // Transcrire l';      await _firestore.collection('constats';        'descriptionVocale';        'transcriptionDescription';        'videoReconstruction';        'updatedAt';      debugPrint('[ConstatService] Description vocale et reconstruction générées avec succès';        'audioUrl';        'transcription';        'videoUrl';      debugPrint('[ConstatService] Erreur lors de l\'ajout de la description vocale: $e';  // Générer un croquis de l';      debugPrint('[ConstatService] Génération d\'un croquis pour le constat $constatId';      // Utiliser l';      await _firestore.collection('constats';        'croquis';        'updatedAt';      debugPrint('[ConstatService] Croquis généré avec succès';      debugPrint('[ConstatService] Erreur lors de la génération du croquis: $e';      debugPrint('[ConstatService] Invitation d\'un conducteur pour le constat $constatId';      // Générer un code d';      // Enregistrer l';      await _firestore.collection('invitations';        'constatId';        'telephone';        'email';        'nom';        'prenom';        'code';        'status': 'pending';        'createdAt';        message: 'Vous avez été invité à participer à un constat d\'accident. ';                'Utilisez le code $invitationCode pour rejoindre le constat dans l\'application Constat Tunisie.';          subject: 'Invitation à participer à un constat d\'accident';          body: 'Vous avez été invité à participer à un constat d\'accident. ';                'Utilisez le code $invitationCode pour rejoindre le constat dans l\'application Constat Tunisie.';      debugPrint('[ConstatService] Invitation envoyée avec succès';      debugPrint('[ConstatService] Erreur lors de l\'invitation du conducteur: $e';      debugPrint('[ConstatService] Validation du constat $constatId par le participant $participantId';      final constatDoc = await _firestore.collection('constats';        throw Exception('Constat non trouvé';      final participantDoc = await _firestore.collection('participants';        throw Exception('Participant non trouvé';      if (participantData == null || participantData['role'] != 'conducteur';        throw Exception('Seuls les conducteurs peuvent valider un constat';      final Map<String, bool> validationStatus = Map<String, bool>.from(constatDoc.data()?['validationStatus';      await _firestore.collection('constats';        'validationStatus';        'updatedAt';      final List<String> conducteurIds = List<String>.from(constatDoc.data()?['conducteurIds';        await _firestore.collection('constats';          'status': ConstatStatus.validated.toString().split('.';          'updatedAt';        debugPrint('[ConstatService] Tous les conducteurs ont validé le constat';      debugPrint('[ConstatService] Constat validé par le participant avec succès';      debugPrint('[ConstatService] Erreur lors de la validation du constat: $e';  // Soumettre un constat validé à l';      debugPrint('[ConstatService] Soumission du constat $constatId à l\'assurance';      final constatDoc = await _firestore.collection('constats';        throw Exception('Constat non trouvé';      final constatStatus = constatDoc.data()?['status';      if (constatStatus != ConstatStatus.validated.toString().split('.';        throw Exception('Le constat doit être validé par tous les conducteurs avant d\'être soumis';      await _firestore.collection('constats';        'status': ConstatStatus.submitted.toString().split('.';        'updatedAt';      final List<String> vehiculeIds = List<String>.from(constatDoc.data()?['vehiculeIds';          final assureursQuery = await _firestore.collection('assureurs';              .where('compagnie';            // Ajouter le constat à la liste des dossiers de l';            final List<String> dossierIds = List<String>.from(assureurData['dossierIds';              await _firestore.collection('assureurs';                'dossierIds';            // Récupérer l';            final userDoc = await _firestore.collection('users';              if (userData['email';                  to: userData['email';                  subject: 'Nouveau constat soumis';                  body: 'Un nouveau constat d\'accident a été soumis et nécessite votre attention.';      debugPrint('[ConstatService] Constat soumis à l\'assurance avec succès';      debugPrint('[ConstatService] Erreur lors de la soumission du constat: $e';      debugPrint('[ConstatService] Récupération du constat $constatId';      final constatDoc = await _firestore.collection('constats';        debugPrint('[ConstatService] Constat non trouvé';      debugPrint('[ConstatService] Erreur lors de la récupération du constat: $e';  // Récupérer les constats d';      debugPrint('[ConstatService] Récupération des constats de l\'utilisateur $userId';      final constatsQuery = await _firestore.collection('constats';          .where('createdBy';          .orderBy('createdAt';      // Récupérer également les constats où l';      final participantsQuery = await _firestore.collection('participants';          .where('userId';        final constatId = doc.data()['constatId';          final constatDoc = await _firestore.collection('constats';      debugPrint('[ConstatService] ${constats.length} constats récupérés';      debugPrint('[ConstatService] Erreur lors de la récupération des constats: $e';}