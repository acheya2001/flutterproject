import 'dart:io';import 'dart:math';import 'package:flutter/foundation.dart';import '../models/accident_analysis_model.dart';/// ü§ñ Service d';  /// üì∏ Analyse OFFLINE des images d';      debugPrint('[OfflineAI] üöÄ D√©but de l\'analyse IA OFFLINE';      // Simulation d';          .map((entry) => 'offline://image_${entry.key}_${DateTime.now().millisecondsSinceEpoch}';      // 5. Cr√©ation de l';      debugPrint('[OfflineAI] ‚úÖ Analyse IA OFFLINE termin√©e avec succ√®s';      debugPrint('[OfflineAI] ‚ùå Erreur lors de l\'analyse IA: $e';    debugPrint('[OfflineAI] üîç Analyse des images en mode offline';    final accidentTypes = ['intersection', 'rattrapage', 'frontal', 'stationnement';        id: 'vehicle_${String.fromCharCode(65 + i)}';    // Analyse d';        'source': 'Analyse IA offline';        'method': 'pattern_recognition_offline';        'accident_type';        'processing_time': '${2 + Random().nextInt(3)}s';    final description = textDescription ?? voiceDescription ?? '';    final prompt = ''';${imageAnalysis.vehicles.map((v) => '‚Ä¢ ${v.type} ${v.color} - Position: ${v.position}').join('\n';üí• ANALYSE DE L';${imageAnalysis.damages.map((d) => '‚Ä¢ ${d.location} (${d.severity})').join('\n';"${description.originalText.isNotEmpty ? description.originalText : 'Collision entre v√©hicules';2. ${description.timeline.length > 1 ? description.timeline[1] : 'Moment critique';''';    if (accidentType == 'intersection';      return index == 0 ? 'Berline' : 'Citadine';    } else if (accidentType == 'rattrapage';      return index == 0 ? 'SUV' : 'Berline';    final types = ['Berline', 'Citadine', 'SUV', 'Break';    final colors = ['Blanc', 'Noir', 'Gris', 'Rouge', 'Bleu';    if (accidentType == 'intersection';      final positions = ['Nord', 'Sud', 'Est', 'Ouest';    } else if (accidentType == 'rattrapage';      return index == 0 ? 'Devant' : 'Derri√®re';    return 'Position ${index + 1}';    if (accidentType == 'intersection';        DamageInfo(location: 'C√¥t√© droit', severity: 'Grave', description: 'Impact lat√©ral';        DamageInfo(location: 'C√¥t√© gauche', severity: 'Mod√©r√©', description: 'Impact secondaire';    } else if (accidentType == 'rattrapage';        DamageInfo(location: 'Arri√®re', severity: 'Grave', description: 'Impact arri√®re';        DamageInfo(location: 'Avant', severity: 'Mod√©r√©', description: 'D√©formation avant';      DamageInfo(location: 'Avant', severity: 'Grave', description: 'Impact frontal';      case 'intersection';        return ImpactAnalysis(direction: 'Lat√©ral', angle: '90¬∞', speed: 'Mod√©r√©e';      case 'rattrapage';        return ImpactAnalysis(direction: 'Arri√®re', angle: '0¬∞', speed: 'Faible';        return ImpactAnalysis(direction: 'Frontal', angle: '180¬∞', speed: '√âlev√©e';    final words = text.toLowerCase().split(' ';    final importantWords = ['collision', 'choc', 'accident', 'freinage', 'vitesse', 'intersection';    return keywords.isEmpty ? ['accident', 'collision';    if (text.contains('intersection') facts.add('Accident √† une intersection';    if (text.contains('vitesse') facts.add('Vitesse impliqu√©e';    if (text.contains('pluie') facts.add('Conditions m√©t√©o d√©favorables';    if (text.contains('priorit√©') facts.add('Non-respect de priorit√©';    return facts.isEmpty ? ['Collision entre v√©hicules';    timeline.add('1. Approche des v√©hicules';    if (text.contains('freinage') timeline.add('2. Tentative de freinage';    timeline.add('3. Impact';    timeline.add('4. Arr√™t des v√©hicules';  /// üìã V√©rification si l';  /// üìñ R√©cup√©ration de l';