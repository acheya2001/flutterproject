import 'dart:io';import 'dart:typed_data';import 'package:flutter/material.dart';import 'package:flutter_riverpod/flutter_riverpod.dart';import 'package:image_picker/image_picker.dart';import 'package:geolocator/geolocator.dart';import 'package:intl/intl.dart';import 'package:signature/signature.dart';import '../../../core/widgets/custom_app_bar.dart';import '../../../core/widgets/custom_button.dart';import '../../../core/widgets/custom_text_field.dart';import '../../../core/utils/session_utils.dart';import '../../auth/providers/auth_provider.dart';import '../../auth/models/user_model.dart';import '../models/constat_session_model.dart';// et √™tre correctement import√© et fourni via un ChangeNotifierProvider plus haut dans l';// L'erreur "ConstatProvider isn';// Si ConstatProvider est bien d√©fini, assurez-vous que l';import '../providers/session_provider.dart';import '../../conducteur/models/conducteur_info_model.dart';import '../../conducteur/models/vehicule_accident_model.dart';import '../../conducteur/models/assurance_info_model.dart';import '../../vehicule/models/vehicule_model.dart';import '../models/temoin_model.dart';import '../models/proprietaire_info.dart';import '../../../core/config/app_routes.dart';import '../services/auto_fill_service.dart';import '../widgets/auto_fill_indicator.dart';import '../../../core/services/session_service.dart';    final emailRegExp = RegExp(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$';    'en stationnement / √† l\'arr√™t';    'quittait un stationnement / ouvrait une porti√®re';    'prenait un stationnement';    'sortait d\'un parking, d\'un lieu priv√©, d\'un chemin de terre';    's\'engageait dans un parking, un lieu priv√©, d\'un chemin de terre';    's\'engageait sur un sens giratoire';    'roulait sur un sens giratoire';    'heurtait √† l\'arri√®re, en roulant dans le m√™me sens et sur une m√™me file';    'roulait dans le m√™me sens et sur une file diff√©rente';    'changeait de file';    'doublait';    'virait √† droite';    'virait √† gauche';    'reculait';    'empi√©tait sur la partie de chauss√©e r√©serv√©e √† la circulation en sens inverse';    'venait de droite (dans un carrefour)';    'n\'avait pas observ√© le signal de priorit√© ou un feu rouge';    debugPrint('[ConducteurDeclarationScreen] üöÄ D√©but du pr√©-remplissage automatique';      debugPrint('[ConducteurDeclarationScreen] ‚ùå Aucun utilisateur connect√©';      // Utiliser le service d';      debugPrint('[ConducteurDeclarationScreen] üìã Donn√©es r√©cup√©r√©es: $autoFillData';      // Cr√©er une map des contr√¥leurs pour faciliter l';        'nom';        'prenom';        'adresse';        'telephone';        'numeroPermis';        'marque';        'type';        'immatriculation';        'societeAssurance';        'numeroContrat';        'agence';      // Appliquer les donn√©es d';      // Mettre √† jour l';        String message = '‚úÖ Formulaire pr√©-rempli automatiquement';          message += '\nüöó V√©hicule: ${autoFillData.vehiculeMarque} ${autoFillData.vehiculeModele}';          message += '\nüõ°Ô∏è Assurance: ${autoFillData.assuranceCompagnie}';      debugPrint('[ConducteurDeclarationScreen] ‚úÖ Pr√©-remplissage termin√© avec succ√®s';      debugPrint('[ConducteurDeclarationScreen] ‚ùå Erreur lors du pr√©-remplissage: $e';      // Fallback vers l'ancien syst√®me en cas d';  /// M√©thode de fallback pour le pr√©-remplissage en cas d';    debugPrint('[ConducteurDeclarationScreen] üîÑ Utilisation du pr√©-remplissage de base';    _adresseController.text = currentUser.adresse ?? '';    _telephoneController.text = currentUser.telephone ?? '';      // Correction de l'erreur d';      // S';            // Si sessionDataDynamic est d';            // Pour l'instant, on logue une erreur si le type n';            // Vous pouvez tenter un cast si vous √™tes s√ªr, mais c';              _dateAccidentController.text = DateFormat('dd/MM/yyyy';      debugPrint('Erreur chargement session: $e';          SnackBar(content: Text('Erreur chargement session: $e';        const SnackBar(content: Text('Veuillez renseigner la date et le lieu de l\'accident avant de cr√©er une session.';        throw Exception('Utilisateur non connect√©';        const SnackBar(content: Text('Session cr√©√©e et invitations envoy√©es!';        'sessionId';        'conducteurPosition': 'A';        'isCollaborative';        'selectedVehicule';        ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Erreur: ${e.toString()}';        title: const Text('Inviter les autres conducteurs';          const Text('Entrez les adresses email des autres conducteurs impliqu√©s:';            final position = ['B', 'C', 'D', 'E', 'F';                  labelText: 'Email conducteur $position';          TextButton(onPressed: () => Navigator.pop(dialogContext), child: const Text('Annuler';            }, child: const Text('Inviter';      if (!serviceEnabled) { if (mounted) ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Le service de localisation est d√©sactiv√©.';        if (permission == LocationPermission.denied) { if (mounted) ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Permission de localisation refus√©e.';      if (permission == LocationPermission.deniedForever) { if (mounted) ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Permission de localisation refus√©e de mani√®re permanente.';        setState(() => _lieuController.text = 'Lat: ${_positionActuelle!.latitude.toStringAsFixed(6)}, Lng: ${_positionActuelle!.longitude.toStringAsFixed(6)}';    } catch (e) { debugPrint('Erreur g√©olocalisation: $e'); if (mounted) ScaffoldMessenger.of(context).showSnackBar(SnackBar(content: Text('Erreur g√©olocalisation: $e';          _dateAccidentController.text = DateFormat('dd/MM/yyyy';    final source = await showDialog<ImageSource>(context: context, builder: (dialogContext) => AlertDialog(title: const Text('Choisir une source'), content: Column(mainAxisSize: MainAxisSize.min, children: [ListTile(leading: const Icon(Icons.camera_alt), title: const Text('Appareil photo'), onTap: () => Navigator.pop(dialogContext, ImageSource.camera), ListTile(leading: const Icon(Icons.photo_library), title: const Text('Galerie';          case 'accident';          case 'permis';          case 'carte_grise';          case 'attestation';  dynamic _creerGeoPoint() { if (_positionActuelle != null) { return {'latitude': _positionActuelle!.latitude, 'longitude';      if (mounted) ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Veuillez corriger les erreurs.';      if (mounted) ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Veuillez s√©lectionner la date et l\'heure.';      if (mounted) ScaffoldMessenger.of(context).showSnackBar(const SnackBar(content: Text('Votre signature est requise.';    // Note: ConstatProvider n';        throw Exception('Utilisateur non connect√©';        // Pour l';        debugPrint('[ConducteurDeclarationScreen] Sauvegarde constat individuel simul√©e';      messenger.showSnackBar(const SnackBar(content: Text('Constat sauvegard√© avec succ√®s';      messenger.showSnackBar(SnackBar(content: Text('Erreur: $e';        appBar: CustomAppBar(title: 'Sauvegarde...';        appBar: CustomAppBar(title: 'Chargement session...';      appBar: CustomAppBar(title: widget.isCollaborative ? 'Constat Collaboratif - Cond. ${widget.conducteurPosition}' : 'Constat d\'accident';            Text('Session collaborative';            Text('Code: ${_session!.sessionCode ?? "N/A"}';        Text('Progression: $completed/$total conducteurs';        Text('${(progressValue * 100).toInt()}%';          Text('√âtape ${_currentPage + 1} sur $totalPages';          Text('${(progressValue * 100).round()}%';          _buildSectionHeader('Informations g√©n√©rales', 'Renseignez les d√©tails de l\'accident';          if (!widget.isCollaborative && widget.conducteurPosition == 'A';                Row(children: [Icon(Icons.directions_car_filled, color: _currentPositionColor, size: 20), const SizedBox(width: 8), const Text('Nombre de v√©hicules impliqu√©s';                const Text('S√©lectionnez le nombre total de v√©hicules impliqu√©s dans l\'accident';                Row(mainAxisAlignment: MainAxisAlignment.spaceEvenly, children: [2, 3, 4, 5, 6].map((nombre) => GestureDetector(onTap: () => setState(() => _nombreVehiculesPourInitiation = nombre), child: Container(width: 48, height: 48, decoration: BoxDecoration(color: _nombreVehiculesPourInitiation == nombre ? _currentPositionColor : Colors.white, borderRadius: BorderRadius.circular(8), border: Border.all(color: _nombreVehiculesPourInitiation == nombre ? _currentPositionColor : const Color(0xFFE5E7EB), width: 2), boxShadow: _nombreVehiculesPourInitiation == nombre ? [BoxShadow(color: _currentPositionColor.withAlpha(77), blurRadius: 8, offset: const Offset(0, 2)] : null), child: Center(child: Text('$nombre';                Expanded(child: CustomTextField(controller: _dateAccidentController, label: 'Date', prefixIcon: Icons.calendar_today, readOnly: true, validator: (v) => v!.isEmpty ? 'Requis';                Expanded(child: CustomTextField(controller: _heureAccidentController, label: 'Heure', prefixIcon: Icons.access_time, readOnly: true, validator: (v) => v!.isEmpty ? 'Requis';          CustomTextField(controller: _lieuController, label: 'Lieu de l\'accident', hintText: 'Adresse ou description du lieu', prefixIcon: Icons.location_on, validator: (v) => v?.isEmpty == true ? 'Champ requis';          if (!widget.isCollaborative && widget.conducteurPosition == 'A';                Row(children: [Container(padding: const EdgeInsets.all(8), decoration: BoxDecoration(color: const Color(0xFF0EA5E9), borderRadius: BorderRadius.circular(8), child: const Icon(Icons.group_add, color: Colors.white, size: 20), const SizedBox(width: 12), const Expanded(child: Text('Constat collaboratif';                const Text('Invitez les autres conducteurs impliqu√©s √† remplir leur partie du constat en ligne.';                ElevatedButton.icon(onPressed: _creerSessionCollaborative, icon: const Icon(Icons.send), label: const Text('Inviter les autres conducteurs';      _buildSectionHeader('Informations du conducteur', 'Vos informations personnelles';        Expanded(child: CustomTextField(controller: _nomController, label: 'Nom', prefixIcon: Icons.person_outline, validator: (v) => v?.isEmpty == true ? 'Champ requis';        Expanded(child: CustomTextField(controller: _prenomController, label: 'Pr√©nom', prefixIcon: Icons.person_outline, validator: (v) => v?.isEmpty == true ? 'Champ requis';      CustomTextField(controller: _adresseController, label: 'Adresse', prefixIcon: Icons.home, maxLines: 2, validator: (v) => v?.isEmpty == true ? 'Champ requis';      CustomTextField(controller: _telephoneController, label: 'T√©l√©phone', prefixIcon: Icons.phone, keyboardType: TextInputType.phone, validator: (v) => v?.isEmpty == true ? 'Champ requis';      _buildSectionHeader('Propri√©taire du v√©hicule', '√ätes-vous le propri√©taire du v√©hicule ?';        const Text('√ätes-vous le propri√©taire de ce v√©hicule ?';          Expanded(child: GestureDetector(onTap: () => setState(() => _estProprietaire = true), child: Container(padding: const EdgeInsets.all(16), decoration: BoxDecoration(color: _estProprietaire ? const Color(0xFF10B981) : const Color(0xFFF9FAFB), borderRadius: BorderRadius.circular(8), border: Border.all(color: _estProprietaire ? const Color(0xFF10B981) : const Color(0xFFE5E7EB), child: Column(children: [Icon(Icons.check_circle, color: _estProprietaire ? Colors.white : const Color(0xFF374151), size: 32), const SizedBox(height: 8), Text('Oui';          Expanded(child: GestureDetector(onTap: () => setState(() => _estProprietaire = false), child: Container(padding: const EdgeInsets.all(16), decoration: BoxDecoration(color: !_estProprietaire ? const Color(0xFFEF4444) : const Color(0xFFF9FAFB), borderRadius: BorderRadius.circular(8), border: Border.all(color: !_estProprietaire ? const Color(0xFFEF4444) : const Color(0xFFE5E7EB), child: Column(children: [Icon(Icons.cancel, color: !_estProprietaire ? Colors.white : const Color(0xFF374151), size: 32), const SizedBox(height: 8), Text('Non';        Container(padding: const EdgeInsets.all(16), decoration: BoxDecoration(color: const Color(0xFFFEF3C7), borderRadius: BorderRadius.circular(12), border: Border.all(color: const Color(0xFFF59E0B), child: Row(children: [const Icon(Icons.warning, color: Color(0xFFF59E0B), const SizedBox(width: 12), Expanded(child: Text('Veuillez renseigner les informations du propri√©taire du v√©hicule';          Expanded(child: CustomTextField(controller: _proprietaireNomController, label: 'Nom du propri√©taire', prefixIcon: Icons.person_outline, validator: (v) => !_estProprietaire && v?.isEmpty == true ? 'Champ requis';          Expanded(child: CustomTextField(controller: _proprietairePrenomController, label: 'Pr√©nom du propri√©taire', prefixIcon: Icons.person_outline, validator: (v) => !_estProprietaire && v?.isEmpty == true ? 'Champ requis';        CustomTextField(controller: _proprietaireAdresseController, label: 'Adresse du propri√©taire', prefixIcon: Icons.home, maxLines: 2, validator: (v) => !_estProprietaire && v?.isEmpty == true ? 'Champ requis';        CustomTextField(controller: _proprietaireTelephoneController, label: 'T√©l√©phone du propri√©taire', prefixIcon: Icons.phone, keyboardType: TextInputType.phone, validator: (v) => !_estProprietaire && v?.isEmpty == true ? 'Champ requis';      _buildSectionHeader('Informations du v√©hicule', 'D√©tails de votre v√©hicule';        Expanded(child: CustomTextField(controller: _marqueController, label: 'Marque', prefixIcon: Icons.branding_watermark, validator: (v) => v?.isEmpty == true ? 'Champ requis';        Expanded(child: CustomTextField(controller: _typeController, label: 'Type/Mod√®le', prefixIcon: Icons.model_training, validator: (v) => v?.isEmpty == true ? 'Champ requis';      CustomTextField(controller: _immatriculationController, label: 'N¬∞ d\'immatriculation', prefixIcon: Icons.confirmation_number, validator: (v) => v?.isEmpty == true ? 'Champ requis';      CustomTextField(controller: _sensController, label: 'Sens suivi';        Expanded(child: CustomTextField(controller: _venantDeController, label: 'Venant de';        Expanded(child: CustomTextField(controller: _allantAController, label: 'Allant √†';      _buildSectionHeader('Informations d\'assurance', 'D√©tails de votre assurance';      CustomTextField(controller: _societeAssuranceController, label: 'Soci√©t√© d\'assurance', prefixIcon: Icons.business, validator: (v) => v?.isEmpty == true ? 'Champ requis';      CustomTextField(controller: _numeroContratController, label: 'N¬∞ de contrat', prefixIcon: Icons.description, validator: (v) => v?.isEmpty == true ? 'Champ requis';      CustomTextField(controller: _agenceController, label: 'Agence', prefixIcon: Icons.location_city, validator: (v) => v?.isEmpty == true ? 'Champ requis';      _buildSectionHeader('Circonstances', 'Cochez les cases correspondant √† votre situation';        Row(children: [Container(padding: const EdgeInsets.all(8), decoration: BoxDecoration(color: _currentPositionColor.withAlpha(26), borderRadius: BorderRadius.circular(8), child: Icon(Icons.info, color: _currentPositionColor, size: 20), const SizedBox(width: 12), const Expanded(child: Text('S√©lectionnez toutes les circonstances qui s\'appliquent';        const SizedBox(height: 16), Text('Nombre s√©lectionn√©: ${_circonstancesSelectionnees.length}';        return Container(margin: const EdgeInsets.only(bottom: 8), decoration: BoxDecoration(color: isSelected ? _currentPositionColor.withAlpha(13) : Colors.white, borderRadius: BorderRadius.circular(12), border: Border.all(color: isSelected ? _currentPositionColor : const Color(0xFFE5E7EB), width: isSelected ? 2 : 1), child: CheckboxListTile(value: isSelected, onChanged: (value) => setState(() => value == true ? _circonstancesSelectionnees.add(index + 1) : _circonstancesSelectionnees.remove(index + 1), title: Text('${index + 1}. ${_circonstances[index]}';      CustomTextField(controller: _observationsController, label: 'Observations', hintText: 'D√©crivez bri√®vement l\'accident...';      _buildSectionHeader('Photos et documents', 'Ajoutez les photos n√©cessaires';      _buildSectionHeader('Signature', 'Signez pour valider votre d√©claration';        Expanded(child: SizedBox(width: double.infinity, child: CustomButton(text: 'Effacer';        Expanded(child: SizedBox(width: double.infinity, child: CustomButton(text: 'Aper√ßu', onPressed: () async { final signature = await _signatureController.toPngBytes(); if (signature != null && mounted) { showDialog(context: context, builder: (dialogContext) => AlertDialog(title: const Text('Aper√ßu de la signature'), content: Image.memory(signature), actions: [TextButton(onPressed: () => Navigator.pop(dialogContext), child: const Text('Fermer';        Row(children: [Icon(Icons.info, color: _currentPositionColor, size: 20), const SizedBox(width: 8), const Text('Information importante';        const SizedBox(height: 8), const Text('En signant ce constat, vous certifiez que les informations fournies sont exactes. Ce document sera transmis √† votre compagnie d\'assurance.';        const SizedBox(height: 12), Text('Date: ${DateFormat('dd/MM/yyyy √† HH:mm').format(DateTime.now()}';      if (_currentPage > 0) Expanded(child: SizedBox(width: double.infinity, child: CustomButton(text: 'Pr√©c√©dent';      Expanded(child: SizedBox(width: double.infinity, child: CustomButton(text: _currentPage == 7 ? 'Terminer' : 'Suivant';      title: const Text('Informations de la session';        Text('Code de session: ${_session!.sessionCode ?? "N/A"}';        Text('Nombre de conducteurs: ${_session!.nombreVehicules}';        const Text('√âtat des conducteurs:';              Text('Conducteur $position (${partie.userId.isNotEmpty ? '${partie.userId.substring(0, (partie.userId.length > 6 ? 6 : partie.userId.length)}...' : "N/A"})';              Text(partie.isSubmitted ? 'Termin√©' : 'En cours';      actions: [TextButton(onPressed: () => Navigator.pop(context), child: const Text('Fermer';      const Text('Cons√©quences de l\'accident';      CheckboxListTile(value: _blessesLegers, onChanged: (v) => setState(() => _blessesLegers = v ?? false), title: const Text('Bless√©s (m√™me l√©gers)';      CheckboxListTile(value: _degatsMaterielsAutres, onChanged: (v) => setState(() => _degatsMaterielsAutres = v ?? false), title: const Text('D√©g√¢ts mat√©riels autres qu\'aux v√©hicules';        const Expanded(child: Text('T√©moins';        SizedBox(width: 80, child: CustomButton(text: 'Ajouter';      const Text('Permis de conduire';      CustomTextField(controller: _numeroPermisController, label: 'N¬∞ de permis (optionnel)';      InkWell(onTap: () => _prendrePhoto('permis'), child: Container(height: 120, decoration: BoxDecoration(color: _photoPermis != null ? Colors.transparent : const Color(0xFFF9FAFB), borderRadius: BorderRadius.circular(8), border: Border.all(color: const Color(0xFFE5E7EB), child: _photoPermis != null ? ClipRRect(borderRadius: BorderRadius.circular(8), child: Image.file(_photoPermis!, fit: BoxFit.cover, width: double.infinity) : const Center(child: Column(mainAxisAlignment: MainAxisAlignment.center, children: [Icon(Icons.camera_alt, size: 32, color: Color(0xFF6B7280), SizedBox(height: 8), Text('Photo du permis (optionnel)';      const Text('Carte grise';      InkWell(onTap: () => _prendrePhoto('carte_grise'), child: Container(height: 120, decoration: BoxDecoration(color: _photoCarteGrise != null ? Colors.transparent : const Color(0xFFF9FAFB), borderRadius: BorderRadius.circular(8), border: Border.all(color: const Color(0xFFE5E7EB), child: _photoCarteGrise != null ? ClipRRect(borderRadius: BorderRadius.circular(8), child: Image.file(_photoCarteGrise!, fit: BoxFit.cover, width: double.infinity) : const Center(child: Column(mainAxisAlignment: MainAxisAlignment.center, children: [Icon(Icons.camera_alt, size: 32, color: Color(0xFF6B7280), SizedBox(height: 8), Text('Photo de la carte grise';      const Text('Attestation d\'assurance';      InkWell(onTap: () => _prendrePhoto('attestation'), child: Container(height: 120, decoration: BoxDecoration(color: _photoAttestation != null ? Colors.transparent : const Color(0xFFF9FAFB), borderRadius: BorderRadius.circular(8), border: Border.all(color: const Color(0xFFE5E7EB), child: _photoAttestation != null ? ClipRRect(borderRadius: BorderRadius.circular(8), child: Image.file(_photoAttestation!, fit: BoxFit.cover, width: double.infinity) : const Center(child: Column(mainAxisAlignment: MainAxisAlignment.center, children: [Icon(Icons.camera_alt, size: 32, color: Color(0xFF6B7280), SizedBox(height: 8), Text('Photo de l\'attestation';    final degatsOptions = [ 'Pare-chocs avant', 'Pare-chocs arri√®re', 'Aile avant droite', 'Aile avant gauche', 'Aile arri√®re droite', 'Aile arri√®re gauche', 'Porti√®re avant droite', 'Porti√®re avant gauche', 'Porti√®re arri√®re droite', 'Porti√®re arri√®re gauche', 'Capot', 'Coffre', 'Toit', 'Pare-brise', 'Lunette arri√®re', 'Phares', 'Feux arri√®re', 'R√©troviseurs';      const Text('D√©g√¢ts apparents';        const Expanded(child: Text('Photos de l\'accident';        SizedBox(width: 80, child: CustomButton(text: 'Ajouter', onPressed: () => _prendrePhoto('accident';      else Container(height: 120, decoration: BoxDecoration(color: const Color(0xFFF9FAFB), borderRadius: BorderRadius.circular(8), border: Border.all(color: const Color(0xFFE5E7EB), child: const Center(child: Column(mainAxisAlignment: MainAxisAlignment.center, children: [Icon(Icons.add_photo_alternate, size: 32, color: Color(0xFF6B7280), SizedBox(height: 8), Text('Aucune photo ajout√©e';      title: const Text('Ajouter un t√©moin';          CustomTextField(controller: _nomController, label: 'Nom complet', prefixIcon: Icons.person, validator: (v) => v!.isEmpty ? 'Nom requis';          CustomTextField(controller: _adresseController, label: 'Adresse', prefixIcon: Icons.home, maxLines: 2, validator: (v) => v!.isEmpty ? 'Adresse requise';          CustomTextField(controller: _telephoneController, label: 'T√©l√©phone';          CheckboxListTile(value: _estPassagerA, onChanged: (v) => setState(() { _estPassagerA = v ?? false; if (_estPassagerA) _estPassagerB = false; }, title: const Text('Passager du v√©hicule A';          CheckboxListTile(value: _estPassagerB, onChanged: (v) => setState(() { _estPassagerB = v ?? false; if (_estPassagerB) _estPassagerA = false; }, title: const Text('Passager du v√©hicule B';        TextButton(onPressed: () => Navigator.pop(context), child: const Text('Annuler';              widget.onAjouter(TemoinModel(nom: _nomController.text, adresse: _adresseController.text, telephone: _telephoneController.text.isNotEmpty ? _telephoneController.text : null, estPassagerA: _estPassagerA, estPassagerB: _estPassagerB, constatId: '';          child: const Text('Ajouter';}