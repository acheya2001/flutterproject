import 'package:flutter/material.dart';import 'package:flutter_riverpod/flutter_riverpod.dart';import '../../../core/config/app_routes.dart';import '../../auth/providers/auth_provider.dart';import '../providers/session_provider.dart';import '../../vehicule/models/vehicule_model.dart';import '../../../core/services/session_service.dart';import '../../../core/services/email_service.dart';      int initialCountFromArgs = arguments['initiatingVehicleCount';      _isOwnerOfInitiatingVehicle = arguments['isOwnerOfInitiatingVehicle';      arguments: {'selectionMode': true, 'conducteurId';        .where((email) => email.isNotEmpty && RegExp(r'^[a-zA-Z0-9.]+@[a-zA-Z0-9]+\.[a-zA-Z]+';        lieuAccident: "Lieu à définir par l';            'sessionId';            'conducteurPosition': 'A';            'isCollaborative';            'selectedVehicule';      appBar: AppBar(title: const Text('Créer une Session Collaborative';                  labelText: 'Nombre total de véhicules impliqués';                  if (value == null || value.isEmpty) return 'Champ requis';                  if (n == null || n < 2) return 'Minimum 2 véhicules pour une session';                Text('Votre véhicule (initiateur):';                      title: Text('${_selectedVehiculeForInitiator!.marque} ${_selectedVehiculeForInitiator!.modele}';                    label: const Text('Sélectionner votre véhicule';                Text('Inviter les autres conducteurs (${_nombreVehiculesInput - 1}) par email:';                            labelText: 'Email Conducteur ${String.fromCharCode('B'.codeUnitAt(0) + index)}';                            if (value == null || value.isEmpty) return 'Email requis';                            if (!RegExp(r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$').hasMatch(value) return 'Email invalide';                    label: const Text('Créer la session et inviter';}