import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'collaborative_session_provider.dart';

/// üöÄ Provider Riverpod pour les sessions collaboratives
/// 
/// Ce provider encapsule le CollaborativeSessionProvider pour
/// l'int√©grer dans l'architecture Riverpod existante du projet.
final collaborativeSessionProvider = ChangeNotifierProvider((ref) {
  return CollaborativeSessionProvider();
});

/// üéØ Provider pour l'√©tat de session actuelle (optionnel)
/// 
/// Permet d'acc√©der rapidement √† la session actuelle sans
/// avoir besoin d'√©couter tout le provider.
final currentSessionProvider = Provider((ref) {
  final sessionProvider = ref.watch(collaborativeSessionProvider);
  return sessionProvider.currentSession;
});

/// üìä Provider pour le statut de session (optionnel)
/// 
/// Permet d'afficher le statut de la session dans l'UI
/// sans avoir besoin d'√©couter tout le provider.
final sessionStatusProvider = Provider((ref) {
  final sessionProvider = ref.watch(collaborativeSessionProvider);
  return sessionProvider.getSessionStatus();
});

/// üîÑ Provider pour l'√©tat de chargement (optionnel)
/// 
/// Permet d'afficher un indicateur de chargement global
/// pour les op√©rations de session.
final sessionLoadingProvider = Provider((ref) {
  final sessionProvider = ref.watch(collaborativeSessionProvider);
  return sessionProvider.isLoading;
});

/// ‚ùå Provider pour les erreurs de session (optionnel)
/// 
/// Permet de g√©rer les erreurs de session de mani√®re centralis√©e.
final sessionErrorProvider = Provider((ref) {
  final sessionProvider = ref.watch(collaborativeSessionProvider);
  return sessionProvider.error;
});

/// ‚úÖ Provider pour les messages de succ√®s (optionnel)
/// 
/// Permet d'afficher les messages de succ√®s de mani√®re centralis√©e.
final sessionSuccessProvider = Provider((ref) {
  final sessionProvider = ref.watch(collaborativeSessionProvider);
  return sessionProvider.successMessage;
});
