import 'dart:io';import 'package:flutter/foundation.dart';import '../models/session_constat_model.dart';import '../models/conducteur_session_info.dart';import '../models/proprietaire_info.dart';import '../../../core/services/session_service.dart';import '../../../core/services/firebase_email_service.dart';import '../../conducteur/models/conducteur_info_model.dart';import '../../conducteur/models/vehicule_accident_model.dart';import '../../conducteur/models/assurance_info_model.dart';import '../../constat/models/temoin_model.dart';  // Variables d';    required String createdBy, // ID de l';    String? userEmail, // Email de l';    debugPrint('[SessionProvider] === D√âBUT CR√âATION SESSION ===';    debugPrint('[SessionProvider] Param√®tres: nombreConducteurs=$nombreConducteurs, emails=$emailsInvites';      debugPrint('[SessionProvider] G√©n√©ration du code session...';      debugPrint('[SessionProvider] Code g√©n√©r√©: $sessionCode';      debugPrint('[SessionProvider] Cr√©ation des infos conducteurs...';      conducteursInfo['A';        position: 'A';      debugPrint('[SessionProvider] Conducteur A cr√©√©';      final positions = ['B', 'C', 'D', 'E', 'F';        id: '';        lieuAccident: lieuAccident ?? '';      debugPrint('[SessionProvider] Appel SessionService.creerSession...';      debugPrint('[SessionProvider] Session cr√©√©e avec ID: $sessionId';      debugPrint('[SessionProvider] Envoi des invitations...';          debugPrint('[SessionProvider] Envoi invitation √†: $email';          debugPrint('[SessionProvider] üî• Envoi avec Firebase + SendGrid am√©lior√©...';          debugPrint('[SessionProvider] ‚úÖ Invitation trait√©e pour: $email';          debugPrint('[SessionProvider] Invitation trait√©e pour: $email';      debugPrint('[SessionProvider] Finalisation...';      debugPrint('[SessionProvider] === SESSION CR√â√âE AVEC SUCC√àS ===';      _setError('Erreur cr√©ation session: $e';      debugPrint('Erreur cr√©ation session: $e';      _setError('Erreur r√©cup√©ration session: $e';      debugPrint('Erreur r√©cup√©ration session: $e';      _setError('Erreur r√©cup√©ration session par code: $e';      debugPrint('Erreur r√©cup√©ration session par code: $e';      debugPrint('[SessionProvider] Recherche session par code: $sessionCode';      debugPrint('[SessionProvider] Session trouv√©e: ${session.id}';      debugPrint('[SessionProvider] Erreur recherche session: $e';      debugPrint('[SessionProvider] Marquage conducteur rejoint: $position dans session $sessionId';      // Mettre √† jour la session locale si c';      debugPrint('[SessionProvider] Conducteur marqu√© comme rejoint avec succ√®s';      debugPrint('[SessionProvider] Erreur marquage conducteur: $e';      _setError('Erreur rejoindre session: $e';      debugPrint('Erreur rejoindre session: $e';      // SessionService.sauvegarderConducteur devrait g√©rer l';      _setError('Erreur sauvegarde conducteur: $e';      debugPrint('Erreur sauvegarde conducteur: $e';    final randomPart = (DateTime.now().microsecondsSinceEpoch % 100000).toString().padLeft(5, '0';    return 'CS${now.year%100}${now.month.toString().padLeft(2,'0')}${now.day.toString().padLeft(2,'0')}$randomPart';}