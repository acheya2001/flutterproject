import 'dart:io';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';import 'package:path_provider/path_provider.dart';import 'package:share_plus/share_plus.dart';import 'package:flutter_riverpod/flutter_riverpod.dart';import '../models/proprietaire_info.dart';import '../../../core/services/firebase_email_service.dart';import '../../../core/services/storage_service.dart';import '../../conducteur/models/assurance_info_model.dart';import '../../conducteur/models/conducteur_info_model.dart';import '../../conducteur/models/vehicule_accident_model.dart';import '../models/constat_model.dart';import '../models/temoin_model.dart';import '../models/session_constat_model.dart';// CRITICAL: This import MUST point to the file where your Riverpod 'authProvider';// e.g., import '../../auth/providers/auth_provider.dart';// This example assumes auth_provider.dart exports a Riverpod provider named 'authProvider';// which provides an instance of a class that has a 'currentUser';import '../../auth/providers/auth_provider.dart';import '../models/conducteur_session_info.dart';    final file = File("${dir.path}/dummy_constat_${constatData['id'] ?? 'new';    await file.writeAsString("Dummy PDF Content for constat ID: ${constatData['id'] ?? 'N/A';        throw Exception('Utilisateur non authentifié ou ID utilisateur manquant.';            _storageService.uploadFile('constat_photos/${user.id}/${DateTime.now().millisecondsSinceEpoch}_${photo.path.split('/').last}';          'constat_photos/${user.id}/permis_${DateTime.now().millisecondsSinceEpoch}';          'constat_photos/${user.id}/cartegrise_${DateTime.now().millisecondsSinceEpoch}';          'constat_photos/${user.id}/assurance_${DateTime.now().millisecondsSinceEpoch}';          'constat_signatures/${user.id}/signature_${DateTime.now().millisecondsSinceEpoch}.png';      constatData['conducteurInfo';      constatData['vehiculeInfo';      constatData['assuranceInfo';      constatData['temoins';      constatData['userId';      constatData['photoPermisUrl';      constatData['photoCarteGriseUrl';      constatData['photoAssuranceUrl';      constatData['signatureUrl';      constatData['createdAt';      final docRef = await _firestore.collection('constats';      await docRef.update({'id';      final constatDoc = await _firestore.collection('constats';      if (!constatDoc.exists || constatDoc.data() == null) throw Exception('Constat non trouvé';      await Share.shareXFiles([XFile(pdfFile.path, mimeType: 'application/pdf')], text: 'Constat Amiable PDF - ID: $constatId';      _setError('Erreur génération/partage PDF: ${e.toString()}';      final constatDoc = await _firestore.collection('constats';      if (!constatDoc.exists || constatDoc.data() == null) throw Exception('Constat non trouvé';      // Pour l';        subject: 'Votre Constat Amiable - ID: $constatId';        body: 'Votre constat amiable a été généré avec succès.\n\nID du constat: $constatId\n\nVous pouvez le consulter dans l\'application.';      debugPrint('Email avec PDF envoyé à $recipientEmail pour constat ID: $constatId';      _setError('Erreur envoi PDF par email: ${e.toString()}';        throw Exception('Utilisateur non authentifié ou ID utilisateur manquant.';      conducteursMap['A';        position: 'A';      final positions = ['B', 'C', 'D', 'E', 'F';        id: '';        lieuAccident: lieuAccident ?? '';      final docRef = await _firestore.collection('sessions_constat';      await docRef.update({'id';    final randomPart = (DateTime.now().microsecondsSinceEpoch % 100000).toString().padLeft(5, '0';    return 'S${now.year%100}${now.month.toString().padLeft(2,'0')}${now.day.toString().padLeft(2,'0')}$randomPart';          .collection('sessions_constat';          .where('sessionCode';            'conducteursInfo';            'updatedAt';      final sessionRef = _firestore.collection('sessions_constat';        throw Exception('Utilisateur non authentifié.';            _storageService.uploadFile('session_photos/$sessionId/$position/accident_${DateTime.now().millisecondsSinceEpoch}_${photo.path.split('/').last}';      String? photoPermisUrl = photoPermis != null ? await _storageService.uploadFile('session_photos/$sessionId/$position/permis_${DateTime.now().millisecondsSinceEpoch}';      String? photoCarteGriseUrl = photoCarteGrise != null ? await _storageService.uploadFile('session_photos/$sessionId/$position/carte_grise_${DateTime.now().millisecondsSinceEpoch}';      String? photoAttestationUrl = photoAttestation != null ? await _storageService.uploadFile('session_photos/$sessionId/$position/attestation_${DateTime.now().millisecondsSinceEpoch}';      String? signatureUrl = signature != null ? await _storageService.uploadBytes('session_signatures/$sessionId/$position/signature_${DateTime.now().millisecondsSinceEpoch}.png';      // Data for the specific conductor';        'conducteurInfo';        'vehiculeInfo';        'assuranceInfo';        'isProprietaire';        'proprietaireInfo';        'circonstances';        'degatsApparents';        'temoins';        'photosAccidentUrls';        'photoPermisUrl';        'photoCarteGriseUrl';        'photoAttestationUrl';        'signatureUrl';        'observations';      // Path to the specific conductor';      String conductorInfoPath = 'conducteursInfo.$position.declarationData';      String conductorCompletedPath = 'conducteursInfo.$position.isCompleted';      String conductorCompletedAtPath = 'conducteursInfo.$position.completedAt';      String conductorUserIdPath = 'conducteursInfo.$position.userId';        'updatedAt';      final sessionRef = _firestore.collection('sessions_constat';        'status';        'updatedAt';      final sessionDoc = await _firestore.collection('sessions_constat';        debugPrint('Session non trouvée pour notification de finalisation: $sessionId';      // Attempt to get creator';          final creatorUserDoc = await _firestore.collection('users';            final creatorEmail = creatorUserDoc.data()?['email';          debugPrint("Erreur pour récupérer l';          subject: 'Constat Collaboratif Finalisé - Session ${session.sessionCode}';          body: 'Bonjour,\n\nLe constat collaboratif (Session: ${session.sessionCode}) auquel vous avez participé a été finalisé.\n\nVous pourrez consulter les détails dans l\'application.\n\nCordialement,\nL\'équipe Constat Tunisie';}