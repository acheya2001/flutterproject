import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:path_provider/path_provider.dart';
import 'dart:io';
import 'package:pdf/pdf.dart';
import 'package:pdf/widgets.dart' as pw;
import 'package:share_plus/share_plus.dart';
import 'package:permission_handler/permission_handler.dart';
import '../../../services/contract_service.dart';
import '../../../services/contract_number_service.dart';
import '../../../services/notification_service.dart';
import '../../../services/agent_notification_service.dart';
import '../widgets/agent_notification_widget.dart';
import 'pending_contracts_screen.dart';
import 'pending_vehicles_screen.dart';
import 'pending_vehicles_management_screen.dart';

/// üè† Dashboard principal de l'agent
class AgentDashboardScreen extends StatefulWidget {
  const AgentDashboardScreen({Key? key}) : super(key: key);

  @override
  State<AgentDashboardScreen> createState() => _AgentDashboardScreenState();
}

class _AgentDashboardScreenState extends State<AgentDashboardScreen> {
  String? _agentId;
  String? _agenceId;
  Map<String, dynamic>? _agentInfo;
  Map<String, dynamic>? _agenceInfo;
  bool _isLoading = true;

  @override
  void initState() {
    super.initState();
    _loadAgentInfo();
  }

  Future<void> _loadAgentInfo() async {
    try {
      final currentUser = FirebaseAuth.instance.currentUser;
      if (currentUser == null) return;

      _agentId = currentUser.uid;

      // R√©cup√©rer les infos de l'agent depuis la collection 'users' (coh√©rent avec le syst√®me)
      final agentDoc = await FirebaseFirestore.instance
          .collection('users')
          .doc(_agentId!)
          .get();

      if (agentDoc.exists) {
        _agentInfo = agentDoc.data()!;
        _agenceId = _agentInfo!['agenceId'];

        // R√©cup√©rer les infos de l'agence
        if (_agenceId != null) {
          final agenceDoc = await FirebaseFirestore.instance
              .collection('agences')
              .doc(_agenceId!)
              .get();

          if (agenceDoc.exists) {
            _agenceInfo = agenceDoc.data();

            // R√©cup√©rer les infos de la compagnie
            final compagnieId = _agenceInfo!['compagnieId'];
            if (compagnieId != null) {
              final compagnieDoc = await FirebaseFirestore.instance
                  .collection('compagnies')
                  .doc(compagnieId)
                  .get();

              if (compagnieDoc.exists) {
                _agenceInfo!['compagnieInfo'] = compagnieDoc.data();
              }
            }
          }
        }

        // Marquer comme premi√®re connexion termin√©e
        if (_agentInfo!['isFirstLogin'] == true) {
          await FirebaseFirestore.instance
              .collection('users')
              .doc(_agentId!)
              .update({
            'isFirstLogin': false,
            'lastLogin': FieldValue.serverTimestamp(),
          });
        }
      }

      setState(() => _isLoading = false);
    } catch (e) {
      debugPrint('‚ùå Erreur chargement agent: $e');
      setState(() => _isLoading = false);
    }
  }

  @override
  Widget build(BuildContext context) {
    if (_isLoading) {
      return const Scaffold(
        body: Center(child: CircularProgressIndicator()),
      );
    }

    if (_agentInfo == null) {
      return Scaffold(
        appBar: AppBar(
          title: const Text('Erreur'),
          backgroundColor: Colors.red.shade600,
          foregroundColor: Colors.white,
        ),
        body: const Center(
          child: Text('Erreur: Informations agent non trouv√©es'),
        ),
      );
    }

    return Scaffold(
      backgroundColor: Colors.grey[50],
      appBar: AppBar(
        title: Row(
          children: [
            Container(
              padding: const EdgeInsets.all(8),
              decoration: BoxDecoration(
                color: Colors.white.withOpacity(0.2),
                borderRadius: BorderRadius.circular(12),
              ),
              child: const Icon(
                Icons.person_pin_circle,
                color: Colors.white,
                size: 24,
              ),
            ),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                mainAxisSize: MainAxisSize.min,
                children: [
                  Text(
                    '${_agentInfo!['prenom']} ${_agentInfo!['nom']}',
                    style: const TextStyle(
                      fontWeight: FontWeight.bold,
                      fontSize: 18,
                      color: Colors.white,
                    ),
                  ),
                  Text(
                    'üè¢ ${_agentInfo!['compagnieNom'] ?? 'Compagnie'} ‚Ä¢ üè™ ${_agentInfo!['agenceNom'] ?? 'Agence'}',
                    style: const TextStyle(
                      fontSize: 12,
                      color: Colors.white70,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
        backgroundColor: Colors.transparent,
        foregroundColor: Colors.white,
        elevation: 0,
        toolbarHeight: 80,
        flexibleSpace: Container(
          decoration: const BoxDecoration(
            gradient: LinearGradient(
              begin: Alignment.topLeft,
              end: Alignment.bottomRight,
              colors: [
                Color(0xFF667EEA),
                Color(0xFF764BA2),
              ],
            ),
            borderRadius: BorderRadius.only(
              bottomLeft: Radius.circular(30),
              bottomRight: Radius.circular(30),
            ),
          ),
        ),
        actions: [
          // Notifications
          StreamBuilder<int>(
            stream: AgentNotificationService.streamPendingVehiclesCount(_agenceId ?? ''),
            builder: (context, snapshot) {
              final unreadCount = snapshot.data ?? 0;
              return Stack(
                children: [
                  IconButton(
                    onPressed: () => _showNotifications(),
                    icon: const Icon(Icons.notifications),
                  ),
                  if (unreadCount > 0)
                    Positioned(
                      right: 8,
                      top: 8,
                      child: Container(
                        padding: const EdgeInsets.all(2),
                        decoration: BoxDecoration(
                          color: Colors.red,
                          borderRadius: BorderRadius.circular(10),
                        ),
                        constraints: const BoxConstraints(
                          minWidth: 16,
                          minHeight: 16,
                        ),
                        child: Text(
                          '$unreadCount',
                          style: const TextStyle(
                            color: Colors.white,
                            fontSize: 12,
                          ),
                          textAlign: TextAlign.center,
                        ),
                      ),
                    ),
                ],
              );
            },
          ),
          // Menu
          PopupMenuButton<String>(
            onSelected: (value) {
              switch (value) {
                case 'profile':
                  _showProfile();
                  break;
                case 'logout':
                  _logout();
                  break;
              }
            },
            itemBuilder: (context) => [
              const PopupMenuItem(
                value: 'profile',
                child: Row(
                  children: [
                    Icon(Icons.person),
                    SizedBox(width: 8),
                    Text('Profil'),
                  ],
                ),
              ),
              const PopupMenuItem(
                value: 'logout',
                child: Row(
                  children: [
                    Icon(Icons.logout),
                    SizedBox(width: 8),
                    Text('D√©connexion'),
                  ],
                ),
              ),
            ],
          ),
        ],
      ),
      body: Container(
        decoration: const BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [
              Color(0xFF667EEA),
              Colors.white,
            ],
            stops: [0.0, 0.3],
          ),
        ),
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
            // Informations agence
            _buildAgenceInfo(),

            const SizedBox(height: 24),

            // üîî Notifications temps r√©el
            AgentNotificationWidget(
              agentId: _agentId!,
              agencyId: _agenceId,
            ),

            const SizedBox(height: 24),

            // Statistiques rapides
            _buildQuickStats(),

            const SizedBox(height: 24),

            // Actions principales
            _buildMainActions(),

            const SizedBox(height: 24),



            // V√©hicules en attente (aper√ßu)
            _buildPendingVehiclesPreview(),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildAgenceInfo() {
    final compagnieInfo = _agenceInfo?['compagnieInfo'] as Map<String, dynamic>?;
    final compagnieNom = compagnieInfo?['nom'] ??
                        _agentInfo?['compagnieNom'] ??
                        'Compagnie non d√©finie';

    return Container(
      margin: const EdgeInsets.only(bottom: 8),
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [Colors.white, Color(0xFFF8FAFC)],
        ),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 20,
            offset: const Offset(0, 10),
          ),
        ],
        border: Border.all(
          color: Colors.white.withOpacity(0.2),
          width: 1,
        ),
      ),
      child: Padding(
        padding: const EdgeInsets.all(24),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    gradient: const LinearGradient(
                      colors: [Color(0xFF667EEA), Color(0xFF764BA2)],
                    ),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: const Icon(
                    Icons.business_center,
                    color: Colors.white,
                    size: 24,
                  ),
                ),
                const SizedBox(width: 16),
                const Expanded(
                  child: Text(
                    'Mon Espace Professionnel',
                    style: TextStyle(
                      fontSize: 20,
                      fontWeight: FontWeight.bold,
                      color: Colors.black87,
                    ),
                  ),
                ),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                  decoration: BoxDecoration(
                    color: Colors.green.withOpacity(0.1),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Text(
                    'Actif',
                    style: TextStyle(
                      fontSize: 12,
                      color: Colors.green.shade700,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
              ],
            ),
            const SizedBox(height: 16),

            // Informations de la compagnie
            Row(
              children: [
                Expanded(
                  child: _buildInfoItem(
                    icon: Icons.corporate_fare_rounded,
                    label: 'Compagnie d\'Assurance',
                    value: compagnieNom,
                    color: Colors.purple.shade600,
                  ),
                ),
              ],
            ),

            const SizedBox(height: 12),

            // Informations de l'agence
            Row(
              children: [
                Expanded(
                  child: _buildInfoItem(
                    icon: Icons.location_city_rounded,
                    label: 'Agence',
                    value: _agenceInfo?['nom'] ?? 'Agence non d√©finie',
                    color: Colors.blue.shade600,
                  ),
                ),
              ],
            ),

            if (_agenceInfo?['adresse'] != null) ...[
              const SizedBox(height: 12),
              Row(
                children: [
                  Icon(
                    Icons.location_on_rounded,
                    color: Colors.grey.shade600,
                    size: 16,
                  ),
                  const SizedBox(width: 8),
                  Expanded(
                    child: Text(
                      _agenceInfo!['adresse'],
                      style: TextStyle(
                        color: Colors.grey.shade600,
                        fontSize: 14,
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ],
        ),
      ),
    );
  }

  /// üìã Widget pour afficher une information
  Widget _buildInfoItem({
    required IconData icon,
    required String label,
    required String value,
    required Color color,
  }) {
    return Row(
      children: [
        Icon(
          icon,
          color: color,
          size: 20,
        ),
        const SizedBox(width: 12),
        Expanded(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                label,
                style: TextStyle(
                  color: Colors.grey.shade600,
                  fontSize: 12,
                  fontWeight: FontWeight.w500,
                ),
              ),
              const SizedBox(height: 2),
              Text(
                value,
                style: const TextStyle(
                  fontSize: 15,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ],
          ),
        ),
      ],
    );
  }

  Widget _buildQuickStats() {
    return StreamBuilder<QuerySnapshot>(
      stream: ContractService.getPendingVehicles(_agenceId!),
      builder: (context, pendingSnapshot) {
        return StreamBuilder<QuerySnapshot>(
          stream: ContractService.getAgenceContracts(_agenceId!),
          builder: (context, contractsSnapshot) {
            final pendingCount = pendingSnapshot.data?.docs.length ?? 0;
            final contractsCount = contractsSnapshot.data?.docs.length ?? 0;

            return Row(
              children: [
                Expanded(
                  child: _buildStatCard(
                    'V√©hicules en attente',
                    '$pendingCount',
                    Icons.pending_actions,
                    Colors.orange,
                  ),
                ),
                const SizedBox(width: 16),
                Expanded(
                  child: _buildStatCard(
                    'Contrats cr√©√©s',
                    '$contractsCount',
                    Icons.assignment_turned_in,
                    Colors.green,
                  ),
                ),
              ],
            );
          },
        );
      },
    );
  }

  Widget _buildStatCard(String title, String value, IconData icon, Color color) {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [Colors.white, Colors.grey.shade50],
        ),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: color.withOpacity(0.1),
            blurRadius: 20,
            offset: const Offset(0, 10),
          ),
        ],
        border: Border.all(
          color: color.withOpacity(0.1),
          width: 1,
        ),
      ),
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          children: [
            Container(
              padding: const EdgeInsets.all(16),
              decoration: BoxDecoration(
                color: color.withOpacity(0.1),
                borderRadius: BorderRadius.circular(16),
              ),
              child: Icon(icon, color: color, size: 32),
            ),
            const SizedBox(height: 16),
            Text(
              value,
              style: TextStyle(
                fontSize: 28,
                fontWeight: FontWeight.bold,
                color: color,
              ),
            ),
            const SizedBox(height: 8),
            Text(
              title,
              style: TextStyle(
                color: Colors.grey.shade600,
                fontSize: 12,
              ),
              textAlign: TextAlign.center,
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildMainActions() {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 20,
            offset: const Offset(0, 10),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  gradient: const LinearGradient(
                    colors: [Color(0xFF667EEA), Color(0xFF764BA2)],
                  ),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: const Icon(
                  Icons.dashboard_rounded,
                  color: Colors.white,
                  size: 24,
                ),
              ),
              const SizedBox(width: 12),
              const Text(
                'Actions Rapides',
                style: TextStyle(
                  fontSize: 22,
                  fontWeight: FontWeight.bold,
                  color: Color(0xFF1F2937),
                ),
              ),
            ],
          ),
          const SizedBox(height: 24),
          GridView.count(
            crossAxisCount: 2,
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            crossAxisSpacing: 16,
            mainAxisSpacing: 16,
            childAspectRatio: 1.1,
            children: [
              _buildActionCard(
                'Mes Contrats',
                'G√©rer vos contrats',
                Icons.assignment_rounded,
                const Color(0xFF10B981),
                () => _showMesContrats(),
              ),
              _buildActionCard(
                'Dossiers Affect√©s',
                'Traiter les v√©hicules',
                Icons.assignment_ind_rounded,
                const Color(0xFF3B82F6),
                () => Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => const PendingVehiclesManagementScreen(),
                  ),
                ),
              ),
              _buildActionCard(
                'Clients',
                'G√©rer conducteurs',
                Icons.people_rounded,
                const Color(0xFFF59E0B),
                () => _showComingSoon('Gestion des clients'),
              ),
              _buildActionCard(
                'Rapports',
                'Statistiques & Analytics',
                Icons.analytics_rounded,
                const Color(0xFF8B5CF6),
                () => _showComingSoon('Rapports'),
              ),
            ],
          ),
        ],
      ),
    );
  }

  Widget _buildActionCard(String title, String subtitle, IconData icon, Color color, VoidCallback onTap) {
    return Container(
      decoration: BoxDecoration(
        gradient: LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [
            Colors.white,
            color.withOpacity(0.05),
          ],
        ),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: color.withOpacity(0.15),
            blurRadius: 15,
            offset: const Offset(0, 8),
          ),
        ],
        border: Border.all(
          color: color.withOpacity(0.2),
          width: 1.5,
        ),
      ),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          onTap: onTap,
          borderRadius: BorderRadius.circular(20),
          child: Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.center,
              mainAxisSize: MainAxisSize.min,
              children: [
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    gradient: LinearGradient(
                      colors: [color, color.withOpacity(0.8)],
                    ),
                    borderRadius: BorderRadius.circular(12),
                    boxShadow: [
                      BoxShadow(
                        color: color.withOpacity(0.3),
                        blurRadius: 6,
                        offset: const Offset(0, 3),
                      ),
                    ],
                  ),
                  child: Icon(icon, color: Colors.white, size: 24),
                ),
                const SizedBox(height: 8),
                Flexible(
                  child: Text(
                    title,
                    style: const TextStyle(
                      fontSize: 13,
                      fontWeight: FontWeight.bold,
                      color: Color(0xFF1F2937),
                    ),
                    textAlign: TextAlign.center,
                    maxLines: 1,
                    overflow: TextOverflow.ellipsis,
                  ),
                ),
                const SizedBox(height: 2),
                Flexible(
                  child: Text(
                    subtitle,
                    style: TextStyle(
                      color: Colors.grey.shade600,
                      fontSize: 10,
                      fontWeight: FontWeight.w500,
                    ),
                    textAlign: TextAlign.center,
                    maxLines: 2,
                    overflow: TextOverflow.ellipsis,
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildPendingVehiclesPreview() {
    print('üîç [AGENT DASHBOARD] _agenceId = $_agenceId');
    print('üîç [AGENT DASHBOARD] _agentInfo = $_agentInfo');

    // TOUJOURS afficher la section pour debug
    return Container(
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.1),
            blurRadius: 10,
            offset: const Offset(0, 5),
          ),
        ],
      ),
      padding: const EdgeInsets.all(20),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // En-t√™te de section
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: [Colors.orange.shade600, Colors.orange.shade800],
                  ),
                  borderRadius: BorderRadius.circular(12),
                ),
                child: const Icon(
                  Icons.pending_actions,
                  color: Colors.white,
                  size: 20,
                ),
              ),
              const SizedBox(width: 12),
              Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  const Text(
                    'V√©hicules en attente',
                    style: TextStyle(
                      fontSize: 18,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  Text(
                    'AgenceId: ${_agenceId ?? "NON D√âFINI"}',
                    style: TextStyle(
                      fontSize: 12,
                      color: Colors.grey.shade600,
                    ),
                  ),
                ],
              ),
            ],
          ),
          const SizedBox(height: 16),

          // Section v√©hicules en attente - TOUJOURS AFFICH√âE
          _buildVehiclesStreamWithDebug(),
        ],
      ),
    );
  }

  Widget _buildVehiclesStreamWithDebug() {
    // Toujours afficher la section v√©hicules, m√™me si agenceId n'est pas d√©fini
    return _buildVehiclesStream();
  }

  Widget _buildVehiclesStream() {
    final currentUser = FirebaseAuth.instance.currentUser;
    if (currentUser == null) {
      return Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(Icons.error_outline, size: 64, color: Colors.red[300]),
            const SizedBox(height: 16),
            Text(
              'Erreur',
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: Colors.red[700],
              ),
            ),
            const SizedBox(height: 8),
            Text(
              'Utilisateur non connect√©',
              textAlign: TextAlign.center,
              style: TextStyle(color: Colors.grey[600]),
            ),
          ],
        ),
      );
    }

    return StreamBuilder<QuerySnapshot>(
      stream: FirebaseFirestore.instance
          .collection('vehicules')
          .where('etatCompte', isEqualTo: 'Affect√© √† Agent')
          .where('agentAffecteId', isEqualTo: currentUser.uid)
          .snapshots(),
      builder: (context, snapshot) {
        print('üîç [AGENT DASHBOARD] Stream state: ${snapshot.connectionState}');
        print('üîç [AGENT DASHBOARD] Has error: ${snapshot.hasError}');
        print('üîç [AGENT DASHBOARD] AgentId: ${currentUser.uid}');
        if (snapshot.hasError) {
          print('‚ùå [AGENT DASHBOARD] Erreur stream v√©hicules: ${snapshot.error}');
        }

        if (snapshot.hasError) {
          return Container(
            decoration: BoxDecoration(
              color: Colors.red.shade50,
              borderRadius: BorderRadius.circular(16),
              border: Border.all(color: Colors.red.shade200),
            ),
            padding: const EdgeInsets.all(20),
            child: Column(
              children: [
                Icon(Icons.error_outline, color: Colors.red.shade600, size: 48),
                const SizedBox(height: 12),
                Text(
                  'Erreur de chargement',
                  style: TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.bold,
                    color: Colors.red.shade700,
                  ),
                ),
                const SizedBox(height: 8),
                Text(
                  'Erreur: ${snapshot.error}',
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.red.shade600,
                  ),
                  textAlign: TextAlign.center,
                ),
              ],
            ),
          );
        }

        if (snapshot.connectionState == ConnectionState.waiting) {
          return Card(
            child: Padding(
              padding: const EdgeInsets.all(24),
              child: Center(
                child: Column(
                  children: [
                    const CircularProgressIndicator(),
                    const SizedBox(height: 12),
                    Text(
                      'Chargement des v√©hicules...',
                      style: TextStyle(color: Colors.grey.shade600),
                    ),
                  ],
                ),
              ),
            ),
          );
        }

        final vehicules = snapshot.data?.docs ?? [];

        print('üìä [AGENT DASHBOARD] ${vehicules.length} v√©hicules affect√©s trouv√©s pour agent ${currentUser.uid}');

        // Debug: Afficher les d√©tails des v√©hicules trouv√©s
        for (var doc in vehicules) {
          final data = doc.data() as Map<String, dynamic>;
          print('üöó [AGENT DASHBOARD] V√©hicule affect√©: ${doc.id} - ${data['marque']} ${data['modele']} - agentId: ${data['agentAffecteId']} - etat: ${data['etatCompte']}');
        }

        return Container(
          decoration: BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.circular(16),
            boxShadow: [
              BoxShadow(
                color: Colors.grey.withOpacity(0.1),
                blurRadius: 10,
                offset: const Offset(0, 5),
              ),
            ],
          ),
          padding: const EdgeInsets.all(20),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Row(
                    children: [
                      Container(
                        padding: const EdgeInsets.all(8),
                        decoration: BoxDecoration(
                          gradient: LinearGradient(
                            colors: [Colors.orange.shade600, Colors.orange.shade800],
                          ),
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: const Icon(
                          Icons.pending_actions,
                          color: Colors.white,
                          size: 20,
                        ),
                      ),
                      const SizedBox(width: 12),
                      Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          const Text(
                            'Dossiers affect√©s',
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.bold,
                            ),
                          ),
                          Text(
                            '${vehicules.length} dossier${vehicules.length > 1 ? 's' : ''} √† traiter',
                            style: TextStyle(
                              fontSize: 12,
                              color: Colors.grey.shade600,
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                  if (vehicules.isNotEmpty)
                    Container(
                      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
                      decoration: BoxDecoration(
                        color: Colors.orange.shade100,
                        borderRadius: BorderRadius.circular(20),
                      ),
                      child: Text(
                        '${vehicules.length}',
                        style: TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.bold,
                          color: Colors.orange.shade700,
                        ),
                      ),
                    ),
                ],
              ),
              const SizedBox(height: 16),

              if (vehicules.isEmpty)
                Container(
                  padding: const EdgeInsets.all(24),
                  decoration: BoxDecoration(
                    color: Colors.grey.shade50,
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(color: Colors.grey.shade200),
                  ),
                  child: Center(
                    child: Column(
                      children: [
                        Icon(
                          Icons.check_circle_outline,
                          size: 48,
                          color: Colors.green.shade400,
                        ),
                        const SizedBox(height: 12),
                        const Text(
                          'Aucun dossier affect√©',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.w600,
                          ),
                        ),
                        const SizedBox(height: 4),
                        Text(
                          'Aucun dossier ne vous a √©t√© affect√© pour le moment',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey.shade500,
                          ),
                          textAlign: TextAlign.center,
                        ),
                      ],
                    ),
                  ),
                )
              else ...[
                // Afficher les 3 premiers v√©hicules
                ...vehicules.take(3).map((doc) {
                  final data = doc.data() as Map<String, dynamic>;
                  final createdAt = (data['createdAt'] as Timestamp?)?.toDate();

                  return Container(
                    margin: const EdgeInsets.only(bottom: 12),
                    decoration: BoxDecoration(
                      color: Colors.orange.shade50,
                      borderRadius: BorderRadius.circular(12),
                      border: Border.all(color: Colors.orange.shade200),
                    ),
                    child: ListTile(
                      contentPadding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
                      leading: Container(
                        padding: const EdgeInsets.all(8),
                        decoration: BoxDecoration(
                          color: Colors.orange.shade600,
                          borderRadius: BorderRadius.circular(8),
                        ),
                        child: const Icon(
                          Icons.directions_car,
                          color: Colors.white,
                          size: 20,
                        ),
                      ),
                      title: Text(
                        '${data['marque'] ?? 'N/A'} ${data['modele'] ?? 'N/A'}',
                        style: const TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 16,
                        ),
                      ),
                      subtitle: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'Immatriculation: ${data['numeroImmatriculation'] ?? 'N/A'}',
                            style: const TextStyle(fontSize: 14),
                          ),
                          if (createdAt != null)
                            Text(
                              'Ajout√© le ${_formatDate(createdAt)}',
                              style: TextStyle(
                                fontSize: 12,
                                color: Colors.grey.shade600,
                              ),
                            ),
                        ],
                      ),
                      trailing: Container(
                        padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                        decoration: BoxDecoration(
                          color: Colors.orange.shade600,
                          borderRadius: BorderRadius.circular(12),
                        ),
                        child: const Text(
                          'NOUVEAU',
                          style: TextStyle(
                            color: Colors.white,
                            fontSize: 10,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                      ),
                      onTap: () => Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => const PendingVehiclesManagementScreen(),
                        ),
                      ),
                    ),
                  );
                }).toList(),

                // Bouton "Voir tout" si plus de 3 v√©hicules
                if (vehicules.length > 3) ...[
                  const SizedBox(height: 12),
                  SizedBox(
                    width: double.infinity,
                    child: ElevatedButton.icon(
                      onPressed: () => Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => const PendingVehiclesManagementScreen(),
                        ),
                      ),
                      icon: const Icon(Icons.list, size: 18),
                      label: Text('Voir tous les ${vehicules.length} v√©hicules'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.orange.shade600,
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(vertical: 12),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                    ),
                  ),
                ] else if (vehicules.isNotEmpty) ...[
                  const SizedBox(height: 12),
                  SizedBox(
                    width: double.infinity,
                    child: ElevatedButton.icon(
                      onPressed: () => Navigator.push(
                        context,
                        MaterialPageRoute(
                          builder: (context) => const PendingVehiclesManagementScreen(),
                        ),
                      ),
                      icon: const Icon(Icons.manage_accounts, size: 18),
                      label: const Text('G√©rer les v√©hicules'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.orange.shade600,
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(vertical: 12),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(12),
                        ),
                      ),
                    ),
                  ),
                ],
              ],
            ],
          ),
        );
      },
    );
  }

  String _formatDate(DateTime? date) {
    if (date == null) return 'N/A';
    return '${date.day.toString().padLeft(2, '0')}/${date.month.toString().padLeft(2, '0')}/${date.year}';
  }

  void _showNotifications() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        height: MediaQuery.of(context).size.height * 0.8,
        decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(25),
            topRight: Radius.circular(25),
          ),
        ),
        child: Column(
          children: [
            // Handle bar
            Container(
              margin: const EdgeInsets.only(top: 12),
              width: 40,
              height: 4,
              decoration: BoxDecoration(
                color: Colors.grey.shade300,
                borderRadius: BorderRadius.circular(2),
              ),
            ),

            // Header
            Container(
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                gradient: const LinearGradient(
                  colors: [Color(0xFFFF6B6B), Color(0xFFFF8E53)],
                ),
                borderRadius: const BorderRadius.only(
                  topLeft: Radius.circular(25),
                  topRight: Radius.circular(25),
                ),
              ),
              child: Row(
                children: [
                  Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.2),
                      borderRadius: BorderRadius.circular(50),
                    ),
                    child: const Icon(
                      Icons.notifications_active,
                      color: Colors.white,
                      size: 24,
                    ),
                  ),
                  const SizedBox(width: 16),
                  const Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          'Notifications',
                          style: TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                        ),
                        Text(
                          'V√©hicules en attente de validation',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.white70,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),

            // Liste des v√©hicules en attente
            Expanded(
              child: StreamBuilder<QuerySnapshot>(
                stream: FirebaseFirestore.instance
                    .collection('vehicules')
                    .where('etatCompte', isEqualTo: 'En attente de validation')
                    .where('agenceId', isEqualTo: _agenceId)
                    .orderBy('dateCreation', descending: true)
                    .snapshots(),
                builder: (context, snapshot) {
                  if (snapshot.hasError) {
                    return Center(
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(Icons.error_outline, size: 64, color: Colors.red.shade300),
                          const SizedBox(height: 16),
                          Text(
                            'Erreur de chargement',
                            style: TextStyle(fontSize: 16, color: Colors.grey.shade600),
                          ),
                        ],
                      ),
                    );
                  }

                  if (snapshot.connectionState == ConnectionState.waiting) {
                    return const Center(
                      child: CircularProgressIndicator(),
                    );
                  }

                  final vehicules = snapshot.data?.docs ?? [];

                  if (vehicules.isEmpty) {
                    return Center(
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(Icons.check_circle_outline, size: 64, color: Colors.green.shade300),
                          const SizedBox(height: 16),
                          Text(
                            'Aucune notification',
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.w600,
                              color: Colors.grey.shade700,
                            ),
                          ),
                          const SizedBox(height: 8),
                          Text(
                            'Tous les v√©hicules sont trait√©s',
                            style: TextStyle(fontSize: 14, color: Colors.grey.shade500),
                          ),
                        ],
                      ),
                    );
                  }

                  return ListView.builder(
                    padding: const EdgeInsets.all(16),
                    itemCount: vehicules.length,
                    itemBuilder: (context, index) {
                      final vehicule = vehicules[index].data() as Map<String, dynamic>;
                      final dateCreation = (vehicule['dateCreation'] as Timestamp?)?.toDate();

                      return Container(
                        margin: const EdgeInsets.only(bottom: 12),
                        decoration: BoxDecoration(
                          color: Colors.orange.shade50,
                          borderRadius: BorderRadius.circular(12),
                          border: Border.all(color: Colors.orange.shade200),
                        ),
                        child: ListTile(
                          leading: Container(
                            padding: const EdgeInsets.all(8),
                            decoration: BoxDecoration(
                              color: Colors.orange.shade100,
                              borderRadius: BorderRadius.circular(8),
                            ),
                            child: Icon(
                              Icons.directions_car,
                              color: Colors.orange.shade600,
                              size: 24,
                            ),
                          ),
                          title: Text(
                            '${vehicule['marque']} ${vehicule['modele']}',
                            style: const TextStyle(
                              fontWeight: FontWeight.bold,
                              fontSize: 16,
                            ),
                          ),
                          subtitle: Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              Text('Propri√©taire: ${vehicule['prenomProprietaire']} ${vehicule['nomProprietaire']}'),
                              Text('Immatriculation: ${vehicule['numeroImmatriculation']}'),
                              if (dateCreation != null)
                                Text(
                                  'Soumis le: ${_formatDate(dateCreation)}',
                                  style: TextStyle(
                                    fontSize: 12,
                                    color: Colors.grey.shade600,
                                  ),
                                ),
                            ],
                          ),
                          trailing: ElevatedButton(
                            onPressed: () {
                              Navigator.pop(context);
                              Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (context) => const PendingVehiclesManagementScreen(),
                                ),
                              );
                            },
                            style: ElevatedButton.styleFrom(
                              backgroundColor: Colors.orange.shade600,
                              foregroundColor: Colors.white,
                              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(8),
                              ),
                            ),
                            child: const Text('Traiter', style: TextStyle(fontSize: 12)),
                          ),
                        ),
                      );
                    },
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _showProfile() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => Container(
        height: MediaQuery.of(context).size.height * 0.85,
        decoration: const BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.only(
            topLeft: Radius.circular(25),
            topRight: Radius.circular(25),
          ),
        ),
        child: Column(
          children: [
            // Handle bar
            Container(
              margin: const EdgeInsets.only(top: 12),
              width: 40,
              height: 4,
              decoration: BoxDecoration(
                color: Colors.grey.shade300,
                borderRadius: BorderRadius.circular(2),
              ),
            ),

            // Header
            Container(
              padding: const EdgeInsets.all(20),
              decoration: BoxDecoration(
                gradient: const LinearGradient(
                  colors: [Color(0xFF667EEA), Color(0xFF764BA2)],
                ),
                borderRadius: const BorderRadius.only(
                  topLeft: Radius.circular(25),
                  topRight: Radius.circular(25),
                ),
              ),
              child: Row(
                children: [
                  Container(
                    padding: const EdgeInsets.all(12),
                    decoration: BoxDecoration(
                      color: Colors.white.withOpacity(0.2),
                      borderRadius: BorderRadius.circular(50),
                    ),
                    child: const Icon(
                      Icons.person,
                      color: Colors.white,
                      size: 32,
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          '${_agentInfo!['prenom']} ${_agentInfo!['nom']}',
                          style: const TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                            color: Colors.white,
                          ),
                        ),
                        Text(
                          'Agent d\'Assurance',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.white.withOpacity(0.8),
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),

            // Contenu du profil
            Expanded(
              child: SingleChildScrollView(
                padding: const EdgeInsets.all(20),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    _buildProfileSection('Informations Personnelles', [
                      _buildProfileItem(Icons.email, 'Email', _agentInfo!['email'] ?? 'N/A'),
                      _buildProfileItem(Icons.phone, 'T√©l√©phone', _agentInfo!['telephone'] ?? 'N/A'),
                      _buildProfileItem(Icons.badge, 'ID Agent', _agentInfo!['uid'] ?? 'N/A'),
                    ]),

                    const SizedBox(height: 24),

                    _buildProfileSection('Informations Professionnelles', [
                      _buildProfileItem(Icons.business, 'Compagnie', _agentInfo!['compagnieNom'] ?? 'N/A'),
                      _buildProfileItem(Icons.store, 'Agence', _agentInfo!['agenceNom'] ?? 'N/A'),
                      _buildProfileItem(Icons.access_time, 'Derni√®re Connexion', _formatDate(_agentInfo!['lastLoginAt']?.toDate())),
                    ]),

                    const SizedBox(height: 24),

                    // Statistiques en temps r√©el
                    StreamBuilder<QuerySnapshot>(
                      stream: FirebaseFirestore.instance
                          .collection('contrats')
                          .where('agentId', isEqualTo: _agentId)
                          .snapshots(),
                      builder: (context, snapshot) {
                        final contratsCount = snapshot.data?.docs.length ?? 0;
                        double totalPrimes = 0;

                        if (snapshot.hasData) {
                          for (var doc in snapshot.data!.docs) {
                            final data = doc.data() as Map<String, dynamic>;
                            totalPrimes += (data['primeAnnuelle'] as num?)?.toDouble() ?? 0;
                          }
                        }

                        return _buildProfileSection('Statistiques', [
                          _buildProfileItem(Icons.assignment, 'Contrats Cr√©√©s', '$contratsCount'),
                          _buildProfileItem(Icons.euro, 'Total Primes', '${totalPrimes.toStringAsFixed(0)} DT'),
                          _buildProfileItem(Icons.trending_up, 'Derni√®re Activit√©', _formatDate(_agentInfo!['lastActivity']?.toDate())),
                        ]);
                      },
                    ),

                    const SizedBox(height: 32),

                    // Actions
                    Row(
                      children: [
                        Expanded(
                          child: ElevatedButton.icon(
                            onPressed: () {
                              Navigator.pop(context);
                              _showComingSoon('Modifier le profil');
                            },
                            icon: const Icon(Icons.edit),
                            label: const Text('Modifier'),
                            style: ElevatedButton.styleFrom(
                              backgroundColor: const Color(0xFF667EEA),
                              foregroundColor: Colors.white,
                              padding: const EdgeInsets.symmetric(vertical: 12),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(12),
                              ),
                            ),
                          ),
                        ),
                        const SizedBox(width: 12),
                        Expanded(
                          child: OutlinedButton.icon(
                            onPressed: () {
                              Navigator.pop(context);
                              _logout();
                            },
                            icon: const Icon(Icons.logout),
                            label: const Text('D√©connexion'),
                            style: OutlinedButton.styleFrom(
                              foregroundColor: Colors.red,
                              side: const BorderSide(color: Colors.red),
                              padding: const EdgeInsets.symmetric(vertical: 12),
                              shape: RoundedRectangleBorder(
                                borderRadius: BorderRadius.circular(12),
                              ),
                            ),
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildProfileSection(String title, List<Widget> items) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          title,
          style: const TextStyle(
            fontSize: 18,
            fontWeight: FontWeight.bold,
            color: Color(0xFF1F2937),
          ),
        ),
        const SizedBox(height: 12),
        Container(
          decoration: BoxDecoration(
            color: Colors.grey.shade50,
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: Colors.grey.shade200),
          ),
          child: Column(children: items),
        ),
      ],
    );
  }

  Widget _buildProfileItem(IconData icon, String label, String value) {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        border: Border(
          bottom: BorderSide(color: Colors.grey.shade200, width: 0.5),
        ),
      ),
      child: Row(
        children: [
          Container(
            padding: const EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: const Color(0xFF667EEA).withOpacity(0.1),
              borderRadius: BorderRadius.circular(8),
            ),
            child: Icon(icon, color: const Color(0xFF667EEA), size: 20),
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  label,
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.grey.shade600,
                    fontWeight: FontWeight.w500,
                  ),
                ),
                const SizedBox(height: 2),
                Text(
                  value,
                  style: const TextStyle(
                    fontSize: 14,
                    fontWeight: FontWeight.w600,
                    color: Color(0xFF1F2937),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  void _showComingSoon(String feature) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('$feature - Bient√¥t disponible !'),
        backgroundColor: Colors.blue.shade600,
      ),
    );
  }

  void _logout() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('D√©connexion'),
        content: const Text('√ätes-vous s√ªr de vouloir vous d√©connecter ?'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Annuler'),
          ),
          TextButton(
            onPressed: () async {
              await FirebaseAuth.instance.signOut();
              Navigator.of(context).pushNamedAndRemoveUntil(
                '/login',
                (route) => false,
              );
            },
            child: const Text('D√©connexion'),
          ),
        ],
      ),
    );
  }

  /// üìã Section des v√©hicules affect√©s √† cet agent (SUPPRIM√âE)
  Widget _buildAssignedVehiclesSection_DELETED() {
    print('üîç [AGENT DEBUG] ===== CONSTRUCTION SECTION V√âHICULES AFFECT√âS =====');
    print('üîç [AGENT DEBUG] Agent ID: $_agentId');
    print('üîç [AGENT DEBUG] Agent Info: $_agentInfo');
    print('üîç [AGENT DEBUG] Current User: ${FirebaseAuth.instance.currentUser?.uid}');

    // Test rapide pour v√©rifier si on trouve le v√©hicule
    if (_agentId != null) {
      FirebaseFirestore.instance
          .collection('vehicules')
          .where('agentAffecteId', isEqualTo: _agentId)
          .get()
          .then((snapshot) {
        print('üîç [AGENT DEBUG] Test rapide: ${snapshot.docs.length} v√©hicules trouv√©s pour $_agentId');
        for (final doc in snapshot.docs) {
          final data = doc.data();
          print('üîç [AGENT DEBUG] Test v√©hicule: ${data['marque']} ${data['modele']} - ${data['etatCompte']}');
        }
      });
    }

    return Container(
      decoration: BoxDecoration(
        gradient: const LinearGradient(
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
          colors: [Colors.white, Color(0xFFF8FAFC)],
        ),
        borderRadius: BorderRadius.circular(20),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 20,
            offset: const Offset(0, 10),
          ),
        ],
        border: Border.all(
          color: Colors.blue.shade100,
          width: 1,
        ),
      ),
      padding: const EdgeInsets.all(20),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  gradient: const LinearGradient(
                    colors: [Color(0xFF3B82F6), Color(0xFF1D4ED8)],
                  ),
                  borderRadius: BorderRadius.circular(16),
                ),
                child: const Icon(
                  Icons.assignment_ind,
                  color: Colors.white,
                  size: 24,
                ),
              ),
              const SizedBox(width: 16),
              const Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'V√©hicules Affect√©s',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.bold,
                        color: Color(0xFF1F2937),
                      ),
                    ),
                    Text(
                      'Dossiers qui vous sont assign√©s',
                      style: TextStyle(
                        fontSize: 13,
                        color: Colors.grey,
                      ),
                    ),
                  ],
                ),
              ),
            ],
          ),
          const SizedBox(height: 20),

          StreamBuilder<QuerySnapshot>(
            stream: FirebaseFirestore.instance
                .collection('vehicules')
                .where('etatCompte', isEqualTo: 'Affect√© √† Agent')
                .where('agentAffecteId', isEqualTo: _agentId)
                .snapshots(),
            builder: (context, snapshot) {
              print('üîç [AGENT STREAM] StreamBuilder appel√© - ConnectionState: ${snapshot.connectionState}');
              print('üîç [AGENT STREAM] Agent ID recherch√©: $_agentId');
              print('üîç [AGENT STREAM] HasError: ${snapshot.hasError}');
              print('üîç [AGENT STREAM] HasData: ${snapshot.hasData}');
              if (snapshot.hasData) {
                print('üîç [AGENT STREAM] Nombre de documents: ${snapshot.data!.docs.length}');
              }

              if (snapshot.hasError) {
                print('üîç [AGENT STREAM] Erreur: ${snapshot.error}');
                return Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.red.shade50,
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(color: Colors.red.shade200),
                  ),
                  child: Row(
                    children: [
                      Icon(Icons.error_outline, color: Colors.red.shade600),
                      const SizedBox(width: 8),
                      Text(
                        'Erreur de chargement',
                        style: TextStyle(color: Colors.red.shade700),
                      ),
                    ],
                  ),
                );
              }

              if (snapshot.connectionState == ConnectionState.waiting) {
                return Container(
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    color: Colors.grey.shade50,
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(color: Colors.grey.shade200),
                  ),
                  child: const Row(
                    children: [
                      SizedBox(
                        width: 16,
                        height: 16,
                        child: CircularProgressIndicator(strokeWidth: 2),
                      ),
                      SizedBox(width: 8),
                      Text('Chargement des v√©hicules affect√©s...'),
                    ],
                  ),
                );
              }

              final vehicules = snapshot.data?.docs ?? [];
              print('üîç [AGENT STREAM] ${vehicules.length} v√©hicules affect√©s trouv√©s pour agent $_agentId');

              // Debug d√©taill√© de chaque v√©hicule
              for (int i = 0; i < vehicules.length; i++) {
                final doc = vehicules[i];
                final data = doc.data() as Map<String, dynamic>;
                print('üîç [AGENT STREAM] V√©hicule $i: ${doc.id}');
                print('üîç [AGENT STREAM] - Marque/Mod√®le: ${data['marque']} ${data['modele']}');
                print('üîç [AGENT STREAM] - √âtat: ${data['etatCompte']}');
                print('üîç [AGENT STREAM] - Agent ID: ${data['agentAffecteId']}');
                print('üîç [AGENT STREAM] - Agent Nom: ${data['agentAffecteNom']}');
              }

              if (vehicules.isEmpty) {
                print('üîç [AGENT STREAM] Aucun v√©hicule trouv√© - affichage message vide');
                return Container(
                  padding: const EdgeInsets.all(32),
                  decoration: BoxDecoration(
                    color: Colors.blue.shade50,
                    borderRadius: BorderRadius.circular(16),
                    border: Border.all(color: Colors.blue.shade200),
                  ),
                  child: Center(
                    child: Column(
                      children: [
                        Icon(
                          Icons.assignment_outlined,
                          size: 64,
                          color: Colors.blue.shade400,
                        ),
                        const SizedBox(height: 16),
                        const Text(
                          'Aucun v√©hicule affect√©',
                          style: TextStyle(
                            fontSize: 18,
                            fontWeight: FontWeight.w600,
                            color: Color(0xFF1F2937),
                          ),
                        ),
                        const SizedBox(height: 8),
                        Text(
                          'Les v√©hicules qui vous seront affect√©s appara√Ætront ici',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey.shade500,
                          ),
                          textAlign: TextAlign.center,
                        ),
                      ],
                    ),
                  ),
                );
              }

              print('üîç [AGENT STREAM] Affichage de ${vehicules.length} v√©hicules');

              return Column(
                children: [
                  ...vehicules.take(3).map((doc) {
                    final data = doc.data() as Map<String, dynamic>;
                    print('üîç [AGENT STREAM] Construction carte pour: ${data['marque']} ${data['modele']}');
                    return _buildAssignedVehicleCard_DELETED(doc.id, data);
                  }),
                  if (vehicules.length > 3) ...[
                    const SizedBox(height: 12),
                    Container(
                      padding: const EdgeInsets.all(16),
                      decoration: BoxDecoration(
                        color: Colors.blue.shade50,
                        borderRadius: BorderRadius.circular(12),
                        border: Border.all(color: Colors.blue.shade200),
                      ),
                      child: Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          Icon(Icons.info_outline, color: Colors.blue.shade600, size: 20),
                          const SizedBox(width: 8),
                          Text(
                            '+${vehicules.length - 3} autres v√©hicules affect√©s',
                            style: TextStyle(
                              color: Colors.blue.shade700,
                              fontWeight: FontWeight.w600,
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ],
              );
            },
          ),
        ],
      ),
    );
  }

  /// üöó Carte d'un v√©hicule affect√© (SUPPRIM√âE)
  Widget _buildAssignedVehicleCard_DELETED(String vehicleId, Map<String, dynamic> data) {
    final assignedAt = (data['dateAffectation'] as Timestamp?)?.toDate();

    return Container(
      margin: const EdgeInsets.only(bottom: 12),
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(16),
        border: Border.all(color: Colors.blue.shade200),
        boxShadow: [
          BoxShadow(
            color: Colors.grey.withOpacity(0.1),
            spreadRadius: 1,
            blurRadius: 5,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          // En-t√™te avec v√©hicule
          Row(
            children: [
              Container(
                padding: const EdgeInsets.all(10),
                decoration: BoxDecoration(
                  color: Colors.blue.shade100,
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Icon(
                  Icons.directions_car,
                  color: Colors.blue.shade600,
                  size: 24,
                ),
              ),
              const SizedBox(width: 12),
              Expanded(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      '${data['marque'] ?? 'N/A'} ${data['modele'] ?? 'N/A'}',
                      style: const TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.bold,
                        color: Color(0xFF1F2937),
                      ),
                    ),
                    Text(
                      'Immatriculation: ${data['numeroImmatriculation'] ?? 'N/A'}',
                      style: TextStyle(
                        fontSize: 12,
                        color: Colors.grey.shade600,
                      ),
                    ),
                  ],
                ),
              ),
              Container(
                padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                decoration: BoxDecoration(
                  color: Colors.blue.shade50,
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(color: Colors.blue.shade200),
                ),
                child: Text(
                  'Affect√©',
                  style: TextStyle(
                    fontSize: 10,
                    color: Colors.blue.shade700,
                    fontWeight: FontWeight.w600,
                  ),
                ),
              ),
            ],
          ),

          const SizedBox(height: 12),

          // Informations propri√©taire
          Container(
            padding: const EdgeInsets.all(12),
            decoration: BoxDecoration(
              color: Colors.grey.shade50,
              borderRadius: BorderRadius.circular(8),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Icon(Icons.person, size: 16, color: Colors.grey.shade600),
                    const SizedBox(width: 6),
                    Text(
                      'Propri√©taire',
                      style: TextStyle(
                        fontSize: 12,
                        fontWeight: FontWeight.w600,
                        color: Colors.grey.shade700,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 4),
                Text(
                  '${data['prenomProprietaire'] ?? 'N/A'} ${data['nomProprietaire'] ?? 'N/A'}',
                  style: const TextStyle(
                    fontSize: 14,
                    fontWeight: FontWeight.w600,
                  ),
                ),
                if (assignedAt != null) ...[
                  const SizedBox(height: 8),
                  Row(
                    children: [
                      Icon(Icons.schedule, size: 14, color: Colors.blue.shade600),
                      const SizedBox(width: 4),
                      Text(
                        'Affect√© le ${assignedAt.day}/${assignedAt.month}/${assignedAt.year} √† ${assignedAt.hour}:${assignedAt.minute.toString().padLeft(2, '0')}',
                        style: TextStyle(
                          fontSize: 11,
                          color: Colors.blue.shade600,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ],
                  ),
                ],
              ],
            ),
          ),

          const SizedBox(height: 12),

          // Boutons d'action
          Row(
            children: [
              Expanded(
                child: ElevatedButton.icon(
                  onPressed: () => _viewVehicleDetails(vehicleId, data),
                  icon: const Icon(Icons.visibility, size: 16),
                  label: const Text('Voir D√©tails'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blue.shade600,
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(vertical: 8),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                ),
              ),
              const SizedBox(width: 8),
              Expanded(
                child: ElevatedButton.icon(
                  onPressed: () => _processVehicle(vehicleId, data),
                  icon: const Icon(Icons.edit_document, size: 16),
                  label: const Text('Traiter'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.green.shade600,
                    foregroundColor: Colors.white,
                    padding: const EdgeInsets.symmetric(vertical: 8),
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(8),
                    ),
                  ),
                ),
              ),
            ],
          ),
        ],
      ),
    );
  }

  /// üëÅÔ∏è Voir les d√©tails d'un v√©hicule
  void _viewVehicleDetails(String vehicleId, Map<String, dynamic> data) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Icon(Icons.directions_car, color: Colors.blue.shade600),
            const SizedBox(width: 8),
            Text('${data['marque']} ${data['modele']}'),
          ],
        ),
        content: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              _buildDetailRow('Immatriculation', data['numeroImmatriculation']),
              _buildDetailRow('Propri√©taire', '${data['prenomProprietaire']} ${data['nomProprietaire']}'),
              _buildDetailRow('Ann√©e', data['annee']?.toString()),
              _buildDetailRow('Couleur', data['couleur']),
              _buildDetailRow('Usage', data['usage']),
              _buildDetailRow('Compagnie', data['compagnieAssuranceNom']),
              _buildDetailRow('Agence', data['agenceAssuranceNom']),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Fermer'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop();
              _processVehicle(vehicleId, data);
            },
            style: ElevatedButton.styleFrom(backgroundColor: Colors.green),
            child: const Text('Traiter', style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );
  }

  /// üìù Traiter un v√©hicule (cr√©er contrat, etc.)
  void _processVehicle(String vehicleId, Map<String, dynamic> data) {
    showDialog(
      context: context,
      builder: (context) => Dialog(
        shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
        child: Container(
          width: MediaQuery.of(context).size.width * 0.9,
          constraints: BoxConstraints(
            maxWidth: 500,
            maxHeight: MediaQuery.of(context).size.height * 0.8,
          ),
          padding: const EdgeInsets.all(24),
          child: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Titre
              Row(
                children: [
                  Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: Colors.green.shade100,
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Icon(Icons.edit_document, color: Colors.green.shade600),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        const Text(
                          'Gestion du Contrat',
                          style: TextStyle(
                            fontSize: 20,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        Text(
                          '${data['marque']} ${data['modele']}',
                          style: TextStyle(
                            fontSize: 14,
                            color: Colors.grey.shade600,
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 20),

              // Informations v√©hicule
              Container(
                padding: const EdgeInsets.all(16),
                decoration: BoxDecoration(
                  color: Colors.blue.shade50,
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(color: Colors.blue.shade200),
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Row(
                      children: [
                        Icon(Icons.directions_car, color: Colors.blue.shade600),
                        const SizedBox(width: 8),
                        const Text(
                          'Informations V√©hicule',
                          style: TextStyle(fontWeight: FontWeight.bold),
                        ),
                      ],
                    ),
                    const SizedBox(height: 12),
                    _buildDetailRow('Propri√©taire', '${data['prenomProprietaire']} ${data['nomProprietaire']}'),
                    _buildDetailRow('Immatriculation', data['numeroImmatriculation']),
                    _buildDetailRow('Ann√©e', data['annee']?.toString()),
                    _buildDetailRow('Usage', data['usage']),
                  ],
                ),
              ),

              const SizedBox(height: 20),

              // Actions de gestion
              const Text(
                'Actions disponibles :',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                ),
              ),
              const SizedBox(height: 12),

              // Boutons d'action
              Column(
                children: [
                  SizedBox(
                    width: double.infinity,
                    child: ElevatedButton.icon(
                      onPressed: () {
                        Navigator.of(context).pop();
                        _createContract(vehicleId, data);
                      },
                      icon: const Icon(Icons.description, size: 20),
                      label: const Text('Cr√©er Contrat d\'Assurance'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.green.shade600,
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(vertical: 14),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(height: 8),
                  SizedBox(
                    width: double.infinity,
                    child: ElevatedButton.icon(
                      onPressed: () {
                        Navigator.of(context).pop();
                        _requestDocuments(vehicleId, data);
                      },
                      icon: const Icon(Icons.folder_open, size: 20),
                      label: const Text('Demander Documents'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.orange.shade600,
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(vertical: 14),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(height: 8),
                  SizedBox(
                    width: double.infinity,
                    child: ElevatedButton.icon(
                      onPressed: () {
                        Navigator.of(context).pop();
                        _markAsProcessed(vehicleId, data);
                      },
                      icon: const Icon(Icons.check_circle, size: 20),
                      label: const Text('Marquer comme Trait√©'),
                      style: ElevatedButton.styleFrom(
                        backgroundColor: Colors.blue.shade600,
                        foregroundColor: Colors.white,
                        padding: const EdgeInsets.symmetric(vertical: 14),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                      ),
                    ),
                  ),
                ],
              ),

              const SizedBox(height: 20),

              // Bouton fermer
              Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  TextButton(
                    onPressed: () => Navigator.of(context).pop(),
                    child: const Text('Fermer'),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  /// üìã Ligne de d√©tail pour le dialog
  Widget _buildDetailRow(String label, String? value) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 8),
      child: Row(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          SizedBox(
            width: 100,
            child: Text(
              '$label:',
              style: TextStyle(
                fontWeight: FontWeight.w600,
                color: Colors.grey.shade700,
              ),
            ),
          ),
          Expanded(
            child: Text(
              value ?? 'N/A',
              style: const TextStyle(fontWeight: FontWeight.w500),
            ),
          ),
        ],
      ),
    );
  }



  /// üìÑ Cr√©er un contrat d'assurance
  Future<void> _createContract(String vehicleId, Map<String, dynamic> data) async {
    final TextEditingController numeroContratController = TextEditingController();
    final TextEditingController primeController = TextEditingController();
    final TextEditingController franchiseController = TextEditingController();

    DateTime? dateDebut;
    DateTime? dateFin;
    bool isGeneratingNumber = false;

    // G√©n√©rer automatiquement le num√©ro de contrat
    Future<void> generateContractNumber() async {
      try {
        isGeneratingNumber = true;
        final numero = await ContractNumberService.generateUniqueContractNumber(
          compagnieId: _agentInfo?['compagnieId'] ?? 'default_company',
          agenceId: _agenceId ?? 'default_agency',
          typeContrat: 'assurance_auto',
        );
        numeroContratController.text = numero;
        print('‚úÖ [CONTRACT] Num√©ro g√©n√©r√©: $numero');
      } catch (e) {
        print('‚ùå [CONTRACT] Erreur g√©n√©ration num√©ro: $e');
        // Fallback simple
        final timestamp = DateTime.now().millisecondsSinceEpoch;
        numeroContratController.text = 'CTR_$timestamp';
      } finally {
        isGeneratingNumber = false;
      }
    }

    // G√©n√©rer le num√©ro au d√©but
    await generateContractNumber();

    final created = await showDialog<bool>(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setState) => AlertDialog(
          title: const Row(
            children: [
              Icon(Icons.description, color: Colors.green),
              SizedBox(width: 8),
              Text('Cr√©er Contrat d\'Assurance'),
            ],
          ),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              children: [
                // Num√©ro de contrat g√©n√©r√© automatiquement
                Container(
                  decoration: BoxDecoration(
                    color: Colors.blue.shade50,
                    borderRadius: BorderRadius.circular(8),
                    border: Border.all(color: Colors.blue.shade200),
                  ),
                  padding: const EdgeInsets.all(12),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Icon(Icons.confirmation_number, color: Colors.blue.shade600, size: 20),
                          const SizedBox(width: 8),
                          const Text(
                            'Num√©ro de Contrat (G√©n√©r√© automatiquement)',
                            style: TextStyle(
                              fontWeight: FontWeight.bold,
                              fontSize: 14,
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 8),
                      Row(
                        children: [
                          Expanded(
                            child: TextField(
                              controller: numeroContratController,
                              readOnly: true,
                              decoration: InputDecoration(
                                border: OutlineInputBorder(
                                  borderRadius: BorderRadius.circular(6),
                                ),
                                filled: true,
                                fillColor: Colors.white,
                                contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 8),
                              ),
                              style: const TextStyle(
                                fontFamily: 'monospace',
                                fontWeight: FontWeight.bold,
                              ),
                            ),
                          ),
                          const SizedBox(width: 8),
                          StatefulBuilder(
                            builder: (context, setButtonState) => IconButton(
                              onPressed: isGeneratingNumber ? null : () async {
                                setButtonState(() => isGeneratingNumber = true);
                                await generateContractNumber();
                                setButtonState(() => isGeneratingNumber = false);
                              },
                              icon: isGeneratingNumber
                                  ? SizedBox(
                                      width: 16,
                                      height: 16,
                                      child: CircularProgressIndicator(
                                        strokeWidth: 2,
                                        color: Colors.blue.shade600,
                                      ),
                                    )
                                  : Icon(Icons.refresh, color: Colors.blue.shade600),
                              tooltip: 'G√©n√©rer un nouveau num√©ro',
                              style: IconButton.styleFrom(
                                backgroundColor: Colors.blue.shade100,
                              ),
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 16),
                TextField(
                  controller: primeController,
                  decoration: const InputDecoration(
                    labelText: 'Prime annuelle (TND) *',
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.euro),
                  ),
                  keyboardType: TextInputType.number,
                ),
                const SizedBox(height: 16),
                TextField(
                  controller: franchiseController,
                  decoration: const InputDecoration(
                    labelText: 'Franchise (TND)',
                    border: OutlineInputBorder(),
                    prefixIcon: Icon(Icons.money),
                  ),
                  keyboardType: TextInputType.number,
                ),
                const SizedBox(height: 16),
                Row(
                  children: [
                    Expanded(
                      child: OutlinedButton.icon(
                        onPressed: () async {
                          final date = await showDatePicker(
                            context: context,
                            initialDate: DateTime.now(),
                            firstDate: DateTime.now(),
                            lastDate: DateTime.now().add(const Duration(days: 365)),
                          );
                          if (date != null) {
                            setState(() {
                              dateDebut = date;
                            });
                          }
                        },
                        icon: const Icon(Icons.calendar_today),
                        label: Text(dateDebut != null
                          ? 'D√©but: ${dateDebut!.day}/${dateDebut!.month}/${dateDebut!.year}'
                          : 'Date d√©but *'),
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 8),
                Row(
                  children: [
                    Expanded(
                      child: OutlinedButton.icon(
                        onPressed: () async {
                          final date = await showDatePicker(
                            context: context,
                            initialDate: dateDebut?.add(const Duration(days: 365)) ?? DateTime.now().add(const Duration(days: 365)),
                            firstDate: dateDebut ?? DateTime.now(),
                            lastDate: DateTime.now().add(const Duration(days: 730)),
                          );
                          if (date != null) {
                            setState(() {
                              dateFin = date;
                            });
                          }
                        },
                        icon: const Icon(Icons.calendar_today),
                        label: Text(dateFin != null
                          ? 'Fin: ${dateFin!.day}/${dateFin!.month}/${dateFin!.year}'
                          : 'Date fin *'),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(false),
              child: const Text('Annuler'),
            ),
            ElevatedButton(
              onPressed: () {
                if (numeroContratController.text.trim().isEmpty ||
                    primeController.text.trim().isEmpty ||
                    dateDebut == null ||
                    dateFin == null) {
                  ScaffoldMessenger.of(context).showSnackBar(
                    const SnackBar(
                      content: Text('Veuillez remplir tous les champs obligatoires'),
                      backgroundColor: Colors.orange,
                    ),
                  );
                  return;
                }
                Navigator.of(context).pop(true);
              },
              style: ElevatedButton.styleFrom(backgroundColor: Colors.green),
              child: const Text('Cr√©er', style: TextStyle(color: Colors.white)),
            ),
          ],
        ),
      ),
    );

    if (created == true) {
      try {
        // Cr√©er le contrat dans Firestore
        await FirebaseFirestore.instance.collection('contrats').add({
          'vehiculeId': vehicleId,
          'numeroContrat': numeroContratController.text.trim(),
          'primeAnnuelle': double.tryParse(primeController.text.trim()) ?? 0,
          'franchise': double.tryParse(franchiseController.text.trim()) ?? 0,
          'dateDebut': Timestamp.fromDate(dateDebut!),
          'dateFin': Timestamp.fromDate(dateFin!),
          'statut': 'Actif',
          'agentId': _agentId,
          'agentNom': '${_agentInfo!['prenom']} ${_agentInfo!['nom']}',
          'agenceId': _agenceId,
          'vehiculeInfo': {
            'marque': data['marque'],
            'modele': data['modele'],
            'immatriculation': data['numeroImmatriculation'],
            'proprietaire': '${data['prenomProprietaire']} ${data['nomProprietaire']}',
          },
          'createdAt': FieldValue.serverTimestamp(),
          'updatedAt': FieldValue.serverTimestamp(),
        });

        // Mettre √† jour le statut du v√©hicule
        await FirebaseFirestore.instance
            .collection('vehicules')
            .doc(vehicleId)
            .update({
          'etatCompte': 'Contrat Cr√©√©',
          'numeroContrat': numeroContratController.text.trim(),
          'dateContrat': FieldValue.serverTimestamp(),
          'traitePar': _agentId,
          'updatedAt': FieldValue.serverTimestamp(),
        });

        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('‚úÖ Contrat ${numeroContratController.text.trim()} cr√©√© avec succ√®s'),
              backgroundColor: Colors.green,
            ),
          );
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('‚ùå Erreur lors de la cr√©ation: $e'),
              backgroundColor: Colors.red,
            ),
          );
        }
      }
    }
  }

  /// üìÅ Demander des documents suppl√©mentaires
  Future<void> _requestDocuments(String vehicleId, Map<String, dynamic> data) async {
    final TextEditingController messageController = TextEditingController();
    final List<String> documentsRequis = [];

    final sent = await showDialog<bool>(
      context: context,
      builder: (context) => StatefulBuilder(
        builder: (context, setState) => AlertDialog(
          title: const Row(
            children: [
              Icon(Icons.folder_open, color: Colors.orange),
              SizedBox(width: 8),
              Text('Demander Documents'),
            ],
          ),
          content: SingleChildScrollView(
            child: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('V√©hicule: ${data['marque']} ${data['modele']}'),
                Text('Propri√©taire: ${data['prenomProprietaire']} ${data['nomProprietaire']}'),
                const SizedBox(height: 16),
                const Text(
                  'Documents requis:',
                  style: TextStyle(fontWeight: FontWeight.bold),
                ),
                const SizedBox(height: 8),
                ...['Carte grise', 'Permis de conduire', 'Carte d\'identit√©', 'Justificatif de domicile', 'Photos du v√©hicule']
                    .map((doc) => CheckboxListTile(
                      title: Text(doc),
                      value: documentsRequis.contains(doc),
                      onChanged: (value) {
                        setState(() {
                          if (value == true) {
                            documentsRequis.add(doc);
                          } else {
                            documentsRequis.remove(doc);
                          }
                        });
                      },
                    )),
                const SizedBox(height: 16),
                TextField(
                  controller: messageController,
                  decoration: const InputDecoration(
                    labelText: 'Message personnalis√©',
                    border: OutlineInputBorder(),
                    hintText: 'Instructions suppl√©mentaires...',
                  ),
                  maxLines: 3,
                ),
              ],
            ),
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.of(context).pop(false),
              child: const Text('Annuler'),
            ),
            ElevatedButton(
              onPressed: documentsRequis.isNotEmpty
                  ? () => Navigator.of(context).pop(true)
                  : null,
              style: ElevatedButton.styleFrom(backgroundColor: Colors.orange),
              child: const Text('Envoyer', style: TextStyle(color: Colors.white)),
            ),
          ],
        ),
      ),
    );

    if (sent == true) {
      try {
        // Cr√©er une demande de documents
        await FirebaseFirestore.instance.collection('demandes_documents').add({
          'vehiculeId': vehicleId,
          'proprietaireNom': '${data['prenomProprietaire']} ${data['nomProprietaire']}',
          'documentsRequis': documentsRequis,
          'message': messageController.text.trim(),
          'statut': 'En attente',
          'agentId': _agentId,
          'agentNom': '${_agentInfo!['prenom']} ${_agentInfo!['nom']}',
          'agenceId': _agenceId,
          'vehiculeInfo': {
            'marque': data['marque'],
            'modele': data['modele'],
            'immatriculation': data['numeroImmatriculation'],
          },
          'createdAt': FieldValue.serverTimestamp(),
        });

        // Mettre √† jour le statut du v√©hicule
        await FirebaseFirestore.instance
            .collection('vehicules')
            .doc(vehicleId)
            .update({
          'etatCompte': 'Documents Demand√©s',
          'documentsRequis': documentsRequis,
          'messageDemande': messageController.text.trim(),
          'dateDemandeDocs': FieldValue.serverTimestamp(),
          'updatedAt': FieldValue.serverTimestamp(),
        });

        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('‚úÖ Demande de ${documentsRequis.length} documents envoy√©e'),
              backgroundColor: Colors.orange,
            ),
          );
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('‚ùå Erreur lors de l\'envoi: $e'),
              backgroundColor: Colors.red,
            ),
          );
        }
      }
    }
  }

  /// ‚úÖ Marquer comme trait√©
  Future<void> _markAsProcessed(String vehicleId, Map<String, dynamic> data) async {
    final TextEditingController notesController = TextEditingController();

    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Row(
          children: [
            Icon(Icons.check_circle, color: Colors.blue),
            SizedBox(width: 8),
            Text('Marquer comme Trait√©'),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            Text('Voulez-vous marquer ce v√©hicule comme trait√© ?'),
            const SizedBox(height: 8),
            Text(
              '${data['marque']} ${data['modele']} - ${data['prenomProprietaire']} ${data['nomProprietaire']}',
              style: const TextStyle(fontWeight: FontWeight.bold),
            ),
            const SizedBox(height: 16),
            TextField(
              controller: notesController,
              decoration: const InputDecoration(
                labelText: 'Notes de traitement',
                border: OutlineInputBorder(),
                hintText: 'R√©sum√© du traitement effectu√©...',
              ),
              maxLines: 3,
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: const Text('Annuler'),
          ),
          ElevatedButton(
            onPressed: () => Navigator.of(context).pop(true),
            style: ElevatedButton.styleFrom(backgroundColor: Colors.blue),
            child: const Text('Confirmer', style: TextStyle(color: Colors.white)),
          ),
        ],
      ),
    );

    if (confirmed == true) {
      try {
        await FirebaseFirestore.instance
            .collection('vehicules')
            .doc(vehicleId)
            .update({
          'etatCompte': 'Trait√© par Agent',
          'notesTraitement': notesController.text.trim(),
          'dateTraitement': FieldValue.serverTimestamp(),
          'traitePar': _agentId,
          'agentTraitementNom': '${_agentInfo!['prenom']} ${_agentInfo!['nom']}',
          'updatedAt': FieldValue.serverTimestamp(),
        });

        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(
              content: Text('‚úÖ V√©hicule marqu√© comme trait√©'),
              backgroundColor: Colors.blue,
            ),
          );
        }
      } catch (e) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            SnackBar(
              content: Text('‚ùå Erreur: $e'),
              backgroundColor: Colors.red,
            ),
          );
        }
      }
    }
  }

  /// üìã Afficher la liste des contrats de l'agent
  void _showMesContrats() {
    showModalBottomSheet(
      context: context,
      isScrollControlled: true,
      backgroundColor: Colors.transparent,
      builder: (context) => DraggableScrollableSheet(
        initialChildSize: 0.9,
        maxChildSize: 0.95,
        minChildSize: 0.5,
        builder: (context, scrollController) => Container(
          decoration: const BoxDecoration(
            color: Colors.white,
            borderRadius: BorderRadius.only(
              topLeft: Radius.circular(20),
              topRight: Radius.circular(20),
            ),
          ),
          child: Column(
            children: [
              // En-t√™te
              Container(
                padding: const EdgeInsets.all(20),
                decoration: BoxDecoration(
                  gradient: LinearGradient(
                    colors: [Colors.blue.shade600, Colors.blue.shade700],
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                  ),
                  borderRadius: const BorderRadius.only(
                    topLeft: Radius.circular(20),
                    topRight: Radius.circular(20),
                  ),
                ),
                child: Row(
                  children: [
                    Container(
                      padding: const EdgeInsets.all(10),
                      decoration: BoxDecoration(
                        color: Colors.white.withOpacity(0.2),
                        borderRadius: BorderRadius.circular(10),
                      ),
                      child: const Icon(
                        Icons.assignment,
                        color: Colors.white,
                        size: 24,
                      ),
                    ),
                    const SizedBox(width: 16),
                    const Expanded(
                      child: Column(
                        crossAxisAlignment: CrossAxisAlignment.start,
                        children: [
                          Text(
                            'Mes Contrats',
                            style: TextStyle(
                              fontSize: 20,
                              fontWeight: FontWeight.bold,
                              color: Colors.white,
                            ),
                          ),
                          Text(
                            'Contrats cr√©√©s par moi',
                            style: TextStyle(
                              fontSize: 14,
                              color: Colors.white70,
                            ),
                          ),
                        ],
                      ),
                    ),
                    IconButton(
                      onPressed: () => Navigator.of(context).pop(),
                      icon: const Icon(Icons.close, color: Colors.white),
                    ),
                  ],
                ),
              ),

              // Liste des contrats
              Expanded(
                child: FutureBuilder<List<Map<String, dynamic>>>(
                  future: _loadAgentContrats(),
                  builder: (context, snapshot) {
                    if (snapshot.connectionState == ConnectionState.waiting) {
                      return const Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            CircularProgressIndicator(),
                            SizedBox(height: 16),
                            Text('Chargement des contrats...'),
                          ],
                        ),
                      );
                    }

                    if (snapshot.hasError) {
                      return Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(Icons.error, size: 64, color: Colors.red.shade400),
                            const SizedBox(height: 16),
                            Text('Erreur: ${snapshot.error}'),
                            const SizedBox(height: 16),
                            ElevatedButton(
                              onPressed: () {
                                Navigator.of(context).pop();
                                _showMesContrats(); // Recharger
                              },
                              child: const Text('R√©essayer'),
                            ),
                          ],
                        ),
                      );
                    }

                    final contrats = snapshot.data ?? [];
                    print('üìã [CONTRATS] ${contrats.length} contrats trouv√©s pour agent');

                    if (contrats.isEmpty) {
                      return Center(
                        child: Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.assignment_outlined,
                              size: 80,
                              color: Colors.grey.shade400,
                            ),
                            const SizedBox(height: 16),
                            Text(
                              'Aucun contrat cr√©√©',
                              style: TextStyle(
                                fontSize: 18,
                                fontWeight: FontWeight.w600,
                                color: Colors.grey.shade600,
                              ),
                            ),
                            const SizedBox(height: 8),
                            Text(
                              'Les contrats que vous cr√©ez appara√Ætront ici',
                              style: TextStyle(
                                color: Colors.grey.shade500,
                              ),
                              textAlign: TextAlign.center,
                            ),
                          ],
                        ),
                      );
                    }

                    return ListView.builder(
                      controller: scrollController,
                      padding: const EdgeInsets.all(16),
                      itemCount: contrats.length,
                      itemBuilder: (context, index) {
                        final contrat = contrats[index];
                        return _buildContratCard(contrat);
                      },
                    );
                  },
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  /// üìã Charger les contrats de l'agent
  Future<List<Map<String, dynamic>>> _loadAgentContrats() async {
    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user == null) {
        print('‚ùå [CONTRATS] Utilisateur non connect√©');
        return [];
      }

      print('üìã [CONTRATS] Chargement contrats pour agent: ${user.uid}');
      print('üìã [CONTRATS] Email agent: ${user.email}');

      // D'abord, testons avec une requ√™te simple pour voir tous les contrats
      final allContratsQuery = await FirebaseFirestore.instance
          .collection('contrats')
          .get();

      print('üìã [CONTRATS] Total contrats dans la collection: ${allContratsQuery.docs.length}');

      // Affichons les agentId de tous les contrats pour debug
      for (final doc in allContratsQuery.docs) {
        final data = doc.data();
        print('üìã [CONTRATS] Contrat ${data['numeroContrat']} - agentId: ${data['agentId']}');
      }

      final contrats = <Map<String, dynamic>>[];

      try {
        // D'abord r√©cup√©rer tous les contrats pour debug
        final allSnapshot = await FirebaseFirestore.instance
            .collection('contrats')
            .get();

        print('üìã [CONTRATS] Total contrats dans collection: ${allSnapshot.docs.length}');

        // Filtrer manuellement pour √©viter les probl√®mes d'index
        for (final doc in allSnapshot.docs) {
          final contractData = doc.data();
          print('üìã [CONTRATS] Contrat ${contractData['numeroContrat']} - agentId: ${contractData['agentId']} - cherch√©: ${user.uid}');

          if (contractData['agentId'] == user.uid) {
            contractData['id'] = doc.id;
            contrats.add(contractData);
            print('‚úÖ [CONTRATS] MATCH! Contrat ajout√©: ${contractData['numeroContrat']}');
          }
        }

        print('üìã [CONTRATS] Total contrats trouv√©s pour cet agent: ${contrats.length}');
      } catch (e) {
        print('‚ùå [CONTRATS] Erreur r√©cup√©ration: $e');
      }

      // Trier par date de cr√©ation (plus r√©cent en premier) - en m√©moire pour √©viter l'index
      contrats.sort((a, b) {
        final aDate = a['createdAt'] as Timestamp?;
        final bDate = b['createdAt'] as Timestamp?;
        if (aDate == null && bDate == null) return 0;
        if (aDate == null) return 1;
        if (bDate == null) return -1;
        return bDate.compareTo(aDate);
      });

      print('üìã [CONTRATS] Total final: ${contrats.length} contrats');
      return contrats;
    } catch (e) {
      print('‚ùå [CONTRATS] Erreur chargement contrats agent: $e');
      return [];
    }
  }

  /// üìÑ Carte de contrat
  Widget _buildContratCard(Map<String, dynamic> contrat) {
    final dateCreation = (contrat['createdAt'] as Timestamp?)?.toDate();
    final dateDebut = (contrat['dateDebut'] as Timestamp?)?.toDate();
    final dateFin = (contrat['dateFin'] as Timestamp?)?.toDate();
    final isActive = dateFin?.isAfter(DateTime.now()) ?? false;

    return Container(
      margin: const EdgeInsets.only(bottom: 16),
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: isActive
              ? [Colors.green.shade50, Colors.green.shade100]
              : [Colors.grey.shade50, Colors.grey.shade100],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(16),
        border: Border.all(
          color: isActive ? Colors.green.shade200 : Colors.grey.shade300,
        ),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            spreadRadius: 1,
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        children: [
          // En-t√™te du contrat
          Container(
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: isActive ? Colors.green.shade600 : Colors.grey.shade600,
              borderRadius: const BorderRadius.only(
                topLeft: Radius.circular(16),
                topRight: Radius.circular(16),
              ),
            ),
            child: Row(
              children: [
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.white.withOpacity(0.2),
                    borderRadius: BorderRadius.circular(8),
                  ),
                  child: Icon(
                    isActive ? Icons.verified : Icons.history,
                    color: Colors.white,
                    size: 20,
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        contrat['numeroContrat'] ?? 'N/A',
                        style: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        ),
                      ),
                      Text(
                        isActive ? 'Contrat Actif' : 'Contrat Expir√©',
                        style: TextStyle(
                          fontSize: 12,
                          color: Colors.white.withOpacity(0.9),
                        ),
                      ),
                    ],
                  ),
                ),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: Colors.white.withOpacity(0.2),
                    borderRadius: BorderRadius.circular(12),
                  ),
                  child: Text(
                    contrat['typeContrat'] ?? 'RC',
                    style: const TextStyle(
                      fontSize: 10,
                      color: Colors.white,
                      fontWeight: FontWeight.w600,
                    ),
                  ),
                ),
              ],
            ),
          ),

          // Contenu du contrat
          Padding(
            padding: const EdgeInsets.all(16),
            child: Column(
              children: [
                // Informations principales
                _buildContratInfoRow(
                  'Assur√©',
                  '${contrat['conducteurInfo']?['nom'] ?? 'N/A'} ${contrat['conducteurInfo']?['prenom'] ?? 'N/A'}',
                  Icons.person,
                ),
                _buildContratInfoRow(
                  'V√©hicule',
                  '${contrat['vehiculeInfo']?['marque'] ?? 'N/A'} ${contrat['vehiculeInfo']?['modele'] ?? 'N/A'}',
                  Icons.directions_car,
                ),
                _buildContratInfoRow(
                  'Immatriculation',
                  contrat['vehiculeInfo']?['immatriculation'] ?? 'N/A',
                  Icons.confirmation_number,
                ),
                _buildContratInfoRow(
                  'Prime',
                  '${contrat['primeAnnuelle'] ?? 0} DT',
                  Icons.payments,
                ),
                _buildContratInfoRow(
                  'Cr√©√© le',
                  _formatDate(dateCreation),
                  Icons.calendar_today,
                ),

                const SizedBox(height: 16),

                // Actions
                Row(
                  children: [
                    Expanded(
                      child: ElevatedButton.icon(
                        onPressed: () => _showContratDetails(contrat),
                        icon: const Icon(Icons.visibility, size: 16),
                        label: const Text('D√©tails'),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.blue.shade600,
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(vertical: 8),
                        ),
                      ),
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: ElevatedButton.icon(
                        onPressed: () => _exportContratPDF(contrat),
                        icon: const Icon(Icons.picture_as_pdf, size: 16),
                        label: const Text('PDF'),
                        style: ElevatedButton.styleFrom(
                          backgroundColor: Colors.red.shade600,
                          foregroundColor: Colors.white,
                          padding: const EdgeInsets.symmetric(vertical: 8),
                        ),
                      ),
                    ),
                  ],
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  /// üìù Ligne d'information du contrat
  Widget _buildContratInfoRow(String label, String value, IconData icon) {
    return Container(
      padding: const EdgeInsets.symmetric(vertical: 6, horizontal: 8),
      margin: const EdgeInsets.only(bottom: 4),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(6),
        border: Border.all(color: Colors.grey.shade200),
      ),
      child: Row(
        children: [
          Icon(icon, size: 18, color: Colors.blue.shade700),
          const SizedBox(width: 12),
          SizedBox(
            width: 90,
            child: Text(
              '$label:',
              style: TextStyle(
                fontWeight: FontWeight.bold,
                color: Colors.black87,
                fontSize: 14,
              ),
            ),
          ),
          Expanded(
            child: Text(
              value,
              style: TextStyle(
                fontSize: 14,
                fontWeight: FontWeight.w600,
                color: Colors.black,
              ),
            ),
          ),
        ],
      ),
    );
  }



  /// üëÅÔ∏è Afficher les d√©tails du contrat
  void _showContratDetails(Map<String, dynamic> contrat) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Contrat ${contrat['numeroContrat']}'),
        content: SingleChildScrollView(
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            mainAxisSize: MainAxisSize.min,
            children: [
              Text('Type: ${contrat['typeContrat']}'),
              Text('Assur√©: ${contrat['nomAssure']} ${contrat['prenomAssure']}'),
              Text('Prime: ${contrat['montantPrime']} DT'),
              Text('Statut: ${contrat['statutContrat']}'),
              if (contrat['observations'] != null && contrat['observations'].isNotEmpty)
                Text('Observations: ${contrat['observations']}'),
            ],
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Fermer'),
          ),
        ],
      ),
    );
  }

  /// üìÑ Exporter le contrat en PDF
  void _exportContratPDF(Map<String, dynamic> contrat) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Icon(Icons.picture_as_pdf, color: Colors.red.shade600),
            const SizedBox(width: 8),
            const Text('Aper√ßu PDF Contrat'),
          ],
        ),
        content: SingleChildScrollView(
          child: Container(
            width: double.maxFinite,
            padding: const EdgeInsets.all(16),
            decoration: BoxDecoration(
              color: Colors.grey.shade50,
              borderRadius: BorderRadius.circular(8),
              border: Border.all(color: Colors.grey.shade300),
            ),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              mainAxisSize: MainAxisSize.min,
              children: [
                // En-t√™te simple
                Container(
                  padding: const EdgeInsets.all(12),
                  decoration: BoxDecoration(
                    color: Colors.blue.shade600,
                    borderRadius: BorderRadius.circular(6),
                  ),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        'CONTRAT D\'ASSURANCE AUTOMOBILE',
                        style: TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.bold,
                          color: Colors.white,
                        ),
                      ),
                      const SizedBox(height: 4),
                      Text(
                        'Numero: ${contrat['numeroContrat']}',
                        style: TextStyle(
                          fontSize: 12,
                          color: Colors.white,
                        ),
                      ),
                    ],
                  ),
                ),
                const SizedBox(height: 16),

                // Contenu texte simple
                Text(
                  'INFORMATIONS GENERALES',
                  style: TextStyle(
                    fontSize: 14,
                    fontWeight: FontWeight.bold,
                    color: Colors.blue.shade700,
                  ),
                ),
                const SizedBox(height: 8),
                Text('Type: ${contrat['typeContrat'] ?? 'N/A'}'),
                Text('Statut: ${contrat['statutContrat'] ?? 'N/A'}'),
                Text('Prime: ${contrat['primeAnnuelle'] ?? 0} DT'),
                Text('Franchise: ${contrat['franchise'] ?? 0} DT'),

                const SizedBox(height: 16),

                Text(
                  'ASSURE',
                  style: TextStyle(
                    fontSize: 14,
                    fontWeight: FontWeight.bold,
                    color: Colors.blue.shade700,
                  ),
                ),
                const SizedBox(height: 8),
                Text('Nom: ${contrat['conducteurInfo']?['nom'] ?? 'N/A'} ${contrat['conducteurInfo']?['prenom'] ?? 'N/A'}'),

                const SizedBox(height: 16),

                Text(
                  'VEHICULE',
                  style: TextStyle(
                    fontSize: 14,
                    fontWeight: FontWeight.bold,
                    color: Colors.blue.shade700,
                  ),
                ),
                const SizedBox(height: 8),
                Text('Marque: ${contrat['vehiculeInfo']?['marque'] ?? 'N/A'}'),
                Text('Modele: ${contrat['vehiculeInfo']?['modele'] ?? 'N/A'}'),
                Text('Immatriculation: ${contrat['vehiculeInfo']?['immatriculation'] ?? 'N/A'}'),
                Text('Annee: ${contrat['vehiculeInfo']?['annee']?.toString() ?? 'N/A'}'),

                const SizedBox(height: 16),

                Text(
                  'GARANTIES',
                  style: TextStyle(
                    fontSize: 14,
                    fontWeight: FontWeight.bold,
                    color: Colors.blue.shade700,
                  ),
                ),
                const SizedBox(height: 8),
                ...((contrat['garanties'] as List<dynamic>?) ?? []).map((garantie) =>
                  Padding(
                    padding: const EdgeInsets.only(bottom: 4),
                    child: Text('- ${garantie.toString()}'),
                  ),
                ).toList(),

                const SizedBox(height: 16),

                // Note
                Container(
                  padding: const EdgeInsets.all(8),
                  decoration: BoxDecoration(
                    color: Colors.green.shade50,
                    borderRadius: BorderRadius.circular(4),
                    border: Border.all(color: Colors.green.shade200),
                  ),
                  child: Text(
                    'Le document sera sauvegarde dans le dossier Documents de votre telephone.',
                    style: TextStyle(
                      fontSize: 11,
                      color: Colors.green.shade700,
                    ),
                    textAlign: TextAlign.center,
                  ),
                ),
              ],
            ),
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Fermer'),
          ),
          ElevatedButton.icon(
            onPressed: () {
              Navigator.of(context).pop();
              _generatePDFFile(contrat);
            },
            icon: const Icon(Icons.download, size: 16),
            label: const Text('Telecharger PDF'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.red.shade600,
              foregroundColor: Colors.white,
            ),
          ),
        ],
      ),
    );
  }



  /// üìÑ G√©n√©rer le fichier PDF avec support Unicode
  Future<void> _generatePDFFile(Map<String, dynamic> contrat) async {
    try {
      // Afficher le loading
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Row(
            children: [
              SizedBox(
                width: 20,
                height: 20,
                child: CircularProgressIndicator(
                  strokeWidth: 2,
                  valueColor: AlwaysStoppedAnimation<Color>(Colors.white),
                ),
              ),
              const SizedBox(width: 12),
              Text('G√©n√©ration PDF en cours...'),
            ],
          ),
          backgroundColor: Colors.blue.shade600,
          duration: const Duration(seconds: 2),
        ),
      );

      // Cr√©er le document PDF
      final pdf = pw.Document();

      debugPrint('üîß D√©but g√©n√©ration PDF pour contrat: ${contrat['numeroContrat']}');

      // Fonction pour nettoyer le texte (enlever les accents)
      String cleanText(String text) {
        return text
            .replaceAll('√©', 'e')
            .replaceAll('√®', 'e')
            .replaceAll('√™', 'e')
            .replaceAll('√†', 'a')
            .replaceAll('√ß', 'c')
            .replaceAll('√π', 'u')
            .replaceAll('√ª', 'u')
            .replaceAll('√¥', 'o')
            .replaceAll('√Æ', 'i')
            .replaceAll('√¢', 'a')
            .replaceAll('√â', 'E')
            .replaceAll('√à', 'E')
            .replaceAll('√Ä', 'A')
            .replaceAll('√á', 'C')
            .replaceAll('¬∞', ' ')
            .replaceAll('‚Ä¢', '-');
      }

      pdf.addPage(
        pw.Page(
          pageFormat: PdfPageFormat.a4,
          build: (pw.Context context) {
            return pw.Column(
              crossAxisAlignment: pw.CrossAxisAlignment.start,
              children: [
                // En-t√™te
                pw.Container(
                  width: double.infinity,
                  padding: const pw.EdgeInsets.all(20),
                  color: PdfColors.blue,
                  child: pw.Column(
                    crossAxisAlignment: pw.CrossAxisAlignment.start,
                    children: [
                      pw.Text(
                        cleanText('CONTRAT D\'ASSURANCE AUTOMOBILE'),
                        style: pw.TextStyle(
                          fontSize: 18,
                          color: PdfColors.white,
                          fontWeight: pw.FontWeight.bold,
                        ),
                      ),
                      pw.SizedBox(height: 8),
                      pw.Text(
                        'Numero: ${contrat['numeroContrat']}',
                        style: pw.TextStyle(
                          fontSize: 14,
                          color: PdfColors.white,
                        ),
                      ),
                    ],
                  ),
                ),

                pw.SizedBox(height: 30),

                // Informations g√©n√©rales
                pw.Text(
                  cleanText('INFORMATIONS GENERALES'),
                  style: pw.TextStyle(
                    fontSize: 16,
                    color: PdfColors.blue,
                    fontWeight: pw.FontWeight.bold,
                  ),
                ),
                pw.SizedBox(height: 10),
                pw.Text(
                  'Type: ${cleanText(contrat['typeContrat'] ?? 'N/A')}',
                  style: pw.TextStyle(fontSize: 12),
                ),
                pw.Text(
                  'Statut: ${cleanText(contrat['statutContrat'] ?? 'N/A')}',
                  style: pw.TextStyle(fontSize: 12),
                ),
                pw.Text(
                  'Prime: ${contrat['primeAnnuelle'] ?? 0} DT',
                  style: pw.TextStyle(fontSize: 12),
                ),
                pw.Text(
                  'Franchise: ${contrat['franchise'] ?? 0} DT',
                  style: pw.TextStyle(fontSize: 12),
                ),

                pw.SizedBox(height: 20),

                // Assur√©
                pw.Text(
                  cleanText('ASSURE'),
                  style: pw.TextStyle(
                    fontSize: 16,
                    color: PdfColors.blue,
                    fontWeight: pw.FontWeight.bold,
                  ),
                ),
                pw.SizedBox(height: 10),
                pw.Text(
                  'Nom: ${cleanText('${contrat['conducteurInfo']?['nom'] ?? 'N/A'} ${contrat['conducteurInfo']?['prenom'] ?? 'N/A'}')}',
                  style: pw.TextStyle(fontSize: 12),
                ),

                pw.SizedBox(height: 20),

                // V√©hicule
                pw.Text(
                  cleanText('VEHICULE'),
                  style: pw.TextStyle(
                    fontSize: 16,
                    color: PdfColors.blue,
                    fontWeight: pw.FontWeight.bold,
                  ),
                ),
                pw.SizedBox(height: 10),
                pw.Text(
                  'Marque: ${cleanText(contrat['vehiculeInfo']?['marque'] ?? 'N/A')}',
                  style: pw.TextStyle(fontSize: 12),
                ),
                pw.Text(
                  'Modele: ${cleanText(contrat['vehiculeInfo']?['modele'] ?? 'N/A')}',
                  style: pw.TextStyle(fontSize: 12),
                ),
                pw.Text(
                  'Immatriculation: ${contrat['vehiculeInfo']?['immatriculation'] ?? 'N/A'}',
                  style: pw.TextStyle(fontSize: 12),
                ),
                pw.Text(
                  'Annee: ${contrat['vehiculeInfo']?['annee']?.toString() ?? 'N/A'}',
                  style: pw.TextStyle(fontSize: 12),
                ),

                pw.SizedBox(height: 20),

                // Garanties
                pw.Text(
                  'GARANTIES',
                  style: pw.TextStyle(
                    fontSize: 16,
                    color: PdfColors.blue,
                    fontWeight: pw.FontWeight.bold,
                  ),
                ),
                pw.SizedBox(height: 10),
                ...((contrat['garanties'] as List<dynamic>?) ?? []).map((garantie) =>
                  pw.Text(
                    '- ${cleanText(garantie.toString())}',
                    style: pw.TextStyle(fontSize: 12),
                  ),
                ).toList(),

                pw.Spacer(),

                // Pied de page
                pw.Container(
                  width: double.infinity,
                  padding: const pw.EdgeInsets.all(10),
                  color: PdfColors.grey200,
                  child: pw.Text(
                    'Document genere le ${DateTime.now().day}/${DateTime.now().month}/${DateTime.now().year}',
                    style: pw.TextStyle(fontSize: 10),
                    textAlign: pw.TextAlign.center,
                  ),
                ),
              ],
            );
          },
        ),
      );

      debugPrint('‚úÖ Page PDF cr√©√©e avec succ√®s');

      // Sauvegarder le fichier PDF dans le dossier de l'application
      debugPrint('üìÅ Sauvegarde du PDF dans le dossier de l\'application...');

      final fileName = 'contrat_${contrat['numeroContrat']}.pdf';
      final pdfBytes = await pdf.save();
      debugPrint('üíæ PDF g√©n√©r√©, taille: ${pdfBytes.length} bytes');

      // Utiliser le dossier de l'application (toujours accessible)
      final directory = await getApplicationDocumentsDirectory();
      final file = File('${directory.path}/$fileName');

      await file.writeAsBytes(pdfBytes);
      debugPrint('‚úÖ Fichier sauvegard√©: ${file.path}');

      // Afficher une bo√Æte de dialogue avec les options
      _showPDFSuccessDialog(file, fileName, contrat, directory);

    } catch (e) {
      // Afficher l'erreur
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Row(
            children: [
              Icon(Icons.error, color: Colors.white, size: 20),
              const SizedBox(width: 8),
              Expanded(
                child: Text('Erreur PDF: $e'),
              ),
            ],
          ),
          backgroundColor: Colors.red.shade600,
          duration: const Duration(seconds: 3),
        ),
      );
    }
  }

  /// üìÑ Afficher la bo√Æte de dialogue de succ√®s PDF
  void _showPDFSuccessDialog(File file, String fileName, Map<String, dynamic> contrat, Directory directory) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Row(
          children: [
            Icon(Icons.check_circle, color: Colors.green.shade600, size: 28),
            const SizedBox(width: 12),
            const Expanded(child: Text('PDF G√©n√©r√©')),
          ],
        ),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'Le contrat PDF a √©t√© g√©n√©r√© avec succ√®s !',
              style: TextStyle(fontSize: 16, fontWeight: FontWeight.w500),
            ),
            const SizedBox(height: 16),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.grey.shade100,
                borderRadius: BorderRadius.circular(8),
                border: Border.all(color: Colors.grey.shade300),
              ),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Row(
                    children: [
                      Icon(Icons.picture_as_pdf, color: Colors.red.shade600, size: 20),
                      const SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          fileName,
                          style: const TextStyle(fontWeight: FontWeight.w500),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 8),
                  Row(
                    children: [
                      Icon(Icons.folder, color: Colors.blue.shade600, size: 16),
                      const SizedBox(width: 6),
                      Expanded(
                        child: Text(
                          'Dossier Documents de l\'application',
                          style: TextStyle(fontSize: 12, color: Colors.grey.shade600),
                        ),
                      ),
                    ],
                  ),
                  const SizedBox(height: 4),
                  Text(
                    'Taille: ${(file.lengthSync() / 1024).toStringAsFixed(1)} KB',
                    style: TextStyle(fontSize: 12, color: Colors.grey.shade600),
                  ),
                  const SizedBox(height: 8),
                  Container(
                    padding: const EdgeInsets.all(8),
                    decoration: BoxDecoration(
                      color: Colors.blue.shade50,
                      borderRadius: BorderRadius.circular(6),
                      border: Border.all(color: Colors.blue.shade200),
                    ),
                    child: Row(
                      children: [
                        Icon(Icons.info_outline, color: Colors.blue.shade600, size: 16),
                        const SizedBox(width: 6),
                        Expanded(
                          child: Text(
                            'Utilisez "Partager" pour sauvegarder dans vos T√©l√©chargements',
                            style: TextStyle(fontSize: 11, color: Colors.blue.shade700),
                          ),
                        ),
                      ],
                    ),
                  ),
                ],
              ),
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('Fermer'),
          ),
          ElevatedButton.icon(
            onPressed: () async {
              Navigator.of(context).pop();
              try {
                await Share.shareXFiles(
                  [XFile(file.path)],
                  text: 'Contrat d\'assurance ${contrat['numeroContrat']}',
                  subject: 'Contrat d\'assurance automobile',
                );
              } catch (e) {
                debugPrint('‚ùå Erreur partage: $e');
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(
                    content: Text('Erreur lors du partage: $e'),
                    backgroundColor: Colors.red.shade600,
                  ),
                );
              }
            },
            icon: const Icon(Icons.share, size: 16),
            label: const Text('Partager'),
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.blue.shade600,
              foregroundColor: Colors.white,
            ),
          ),
        ],
      ),
    );
  }




}
