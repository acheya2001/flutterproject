import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';import '../models/vehicule_assure_model.dart';import '../../../core/utils/constants.dart';  /// üìã R√©cup√®re tous les v√©hicules assur√©s d';    debugPrint('[VehiculeAssureService] Getting vehicles for user: $userId';      debugPrint('[VehiculeAssureService] Found ${snapshot.docs.length} total vehicles in collection';        debugPrint('[VehiculeAssureService] üìÑ Processing doc ${doc.id}';        debugPrint('[VehiculeAssureService] üìÑ Data keys: ${data.keys.toList()}';          debugPrint('[VehiculeAssureService] ‚úÖ Vehicle created: ${vehicule.vehicule.immatriculation}';          debugPrint('[VehiculeAssureService] ‚ùå Error creating vehicle ${doc.id}: $e';      final vehiculesActifs = vehicules.where((v) => v.statut == 'actif';      debugPrint('[VehiculeAssureService] üöó Returning ${vehiculesActifs.length} active vehicles';      debugPrint('[VehiculeAssureService] Stream error: $error';    debugPrint('[VehiculeAssureService] üîß Creating fallback vehicle from data: ${data.keys.toList()}';    String immatriculation = 'XXX TUN XXX';    String marque = 'Inconnu';    String modele = 'Inconnu';    String couleur = 'Blanc';    String numeroContrat = '';    String assureurId = 'STAR';    String clientId = 'test_conducteur_1';    // Essayer diff√©rentes structures pour l';    if (data['immatriculation';      immatriculation = data['immatriculation';    } else if (data['vehicule'] != null && data['vehicule']['immatriculation';      immatriculation = data['vehicule']['immatriculation';    if (data['vehicule';      final vehicule = data['vehicule';      if (vehicule['marque'] != null) marque = vehicule['marque';      if (vehicule['modele'] != null) modele = vehicule['modele';      if (vehicule['annee'] != null) annee = int.tryParse(vehicule['annee';      if (vehicule['couleur'] != null) couleur = vehicule['couleur';    if (data['marque'] != null) marque = data['marque';    if (data['modele'] != null) modele = data['modele';    if (data['annee'] != null) annee = int.tryParse(data['annee';    if (data['couleur'] != null) couleur = data['couleur';    if (data['numero_contrat'] != null) numeroContrat = data['numero_contrat';    if (data['assureur_id'] != null) assureurId = data['assureur_id';    if (data['client_id';      clientId = data['client_id';    } else if (data['proprietaire'] != null && data['proprietaire']['user_id';      clientId = data['proprietaire']['user_id';    debugPrint('[VehiculeAssureService] üîß Extracted: $immatriculation, $marque $modele, contrat: $numeroContrat';        numeroChassis: data['numero_chassis']?.toString() ?? '';        puissanceFiscale: int.tryParse(data['puissance_fiscale']?.toString() ?? '0';        nom: data['nom']?.toString() ?? 'Propri√©taire';        prenom: data['prenom']?.toString() ?? 'Inconnu';        cin: data['cin']?.toString() ?? '';        telephone: data['telephone']?.toString() ?? '';        typeCouverture: data['type_couverture']?.toString() ?? 'RC';        franchise: double.tryParse(data['franchise']?.toString() ?? '200';        primeAnnuelle: double.tryParse(data['prime_annuelle']?.toString() ?? '500';      statut: data['statut']?.toString() ?? 'actif';      debugPrint('[VehiculeAssureService] Getting all vehicles for insurer';      debugPrint('[VehiculeAssureService] Found ${snapshot.docs.length} total vehicles';          debugPrint('[VehiculeAssureService] ‚ùå Error creating vehicle ${doc.id}: $e';      debugPrint('[VehiculeAssureService] üöó Returning ${vehicules.length} vehicles';      debugPrint('[VehiculeAssureService] Error getting all vehicles: $e';  /// üîç V√©rifie si un contrat d';      debugPrint('[VehiculeAssureService] üîç Verifying contract: $numeroContrat for vehicle: $immatriculation, user: $userId';      // D';          .where('numero_contrat';      debugPrint('[VehiculeAssureService] üìä Found ${contractDocs.docs.length} documents with contract $numeroContrat';        debugPrint('[VehiculeAssureService] üìÑ FULL DOCUMENT DATA:';        debugPrint('[VehiculeAssureService] üìÑ ${data.toString()}';        // Chercher l';        debugPrint('[VehiculeAssureService] üîç Searching for immatriculation in different places:';        debugPrint('[VehiculeAssureService] üîç data["immatriculation"] = ${data['immatriculation']}';        debugPrint('[VehiculeAssureService] üîç data["vehicule"] = ${data['vehicule']}';        debugPrint('[VehiculeAssureService] üîç data["proprietaire"] = ${data['proprietaire']}';        debugPrint('[VehiculeAssureService] üîç data["client_id"] = ${data['client_id']}';        if (data['vehicule';          final vehicule = data['vehicule';          debugPrint('[VehiculeAssureService] üîç vehicule["immatriculation"] = ${vehicule['immatriculation']}';        if (data['proprietaire';          final proprietaire = data['proprietaire';          debugPrint('[VehiculeAssureService] üîç proprietaire["user_id"] = ${proprietaire['user_id']}';      // Cherchons d';          .where('numero_contrat';      debugPrint('[VehiculeAssureService] üîç Contract query: ${contractQuery.docs.length} documents found';        debugPrint('[VehiculeAssureService] ‚ùå No contract found: $numeroContrat';      // Parcourir les documents trouv√©s et v√©rifier l';        debugPrint('[VehiculeAssureService] üîç Checking doc ${doc.id}';        // V√©rifier l';        if (data['immatriculation';          docImmatriculation = data['immatriculation';        else if (data['vehicule'] != null && data['vehicule']['immatriculation';          docImmatriculation = data['vehicule']['immatriculation';        debugPrint('[VehiculeAssureService] üîç Doc immatriculation: $docImmatriculation vs searched: $immatriculation';          debugPrint('[VehiculeAssureService] ‚úÖ Immatriculation matches! Creating vehicle...';            debugPrint('[VehiculeAssureService] ‚úÖ Vehicle created successfully!';            debugPrint('[VehiculeAssureService] ‚ùå Error creating vehicle: $e';        debugPrint('[VehiculeAssureService] ‚ùå No matching vehicle found';        debugPrint('[VehiculeAssureService] Contract is not active for vehicle: ${foundVehicle.id}';      debugPrint('[VehiculeAssureService] ‚úÖ Contract verified successfully for vehicle: ${foundVehicle.id}';      debugPrint('[VehiculeAssureService] Error verifying contract: $e';      debugPrint('[VehiculeAssureService] Searching vehicle by immatriculation: $immatriculation';          .where('immatriculation';          .where('statut', isEqualTo: 'actif';        debugPrint('[VehiculeAssureService] No vehicle found with immatriculation: $immatriculation';      debugPrint('[VehiculeAssureService] Vehicle found: ${vehicule.id}';      debugPrint('[VehiculeAssureService] Error finding vehicle: $e';  /// üìä R√©cup√®re les statistiques d';        'nombre_sinistres';        'montant_total_sinistres';        'dernier_sinistre';        'statut_contrat';        'jours_restants';      debugPrint('[VehiculeAssureService] Error getting vehicle stats: $e';      debugPrint('[VehiculeAssureService] Error getting vehicle by ID: $e';  /// üìù Ajoute un sinistre √† l'historique d';      if (vehicule == null) throw Exception('V√©hicule non trouv√©';        'historique_sinistres';        'updated_at';      debugPrint('[VehiculeAssureService] Sinistre added to vehicle: $vehiculeId';      debugPrint('[VehiculeAssureService] Error adding sinistre: $e';  /// üè¢ R√©cup√®re tous les v√©hicules d';        .where('assureur_id';        .orderBy('created_at';  /// üìä R√©cup√®re les KPIs d';          .where('assureur_id';        'total_vehicules';        'vehicules_actifs';        'total_sinistres';        'montant_total_sinistres';        'sinistre_moyen';        'taux_sinistralite';      debugPrint('[VehiculeAssureService] Error getting assureur KPIs: $e';        query = query.where('vehicule.marque';        query = query.where('vehicule.modele';        query = query.where('assureur_id';        query = query.where('statut';      debugPrint('[VehiculeAssureService] Error searching vehicles: $e';