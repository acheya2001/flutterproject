import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:geolocator/geolocator.dart';
import '../../models/accident_session_complete.dart';
import '../../services/auto_fill_service.dart';
import '../../services/cloudinary_service.dart';
import '../../services/sinistre_tracking_service.dart';
import '../../widgets/elegant_form_widgets.dart';
import 'dart:io';
import 'package:image_picker/image_picker.dart';

/// üìã Formulaire de constat d'accident COMPLET selon les standards officiels
class ConstatCompletScreen extends StatefulWidget {
  final AccidentSessionComplete? session;
  final Map<String, dynamic>? vehiculeSelectionne;
  final String? sinistreId;
  final bool isCollaborative;
  final String? accidentType;
  final int? vehicleCount;
  final String? conducteurLetter;
  final Map<String, dynamic>? sessionData;

  const ConstatCompletScreen({
    Key? key,
    this.session,
    this.vehiculeSelectionne,
    this.sinistreId,
    this.isCollaborative = false,
    this.accidentType,
    this.vehicleCount,
    this.conducteurLetter,
    this.sessionData,
  }) : super(key: key);

  @override
  State<ConstatCompletScreen> createState() => _ConstatCompletScreenState();
}

class _ConstatCompletScreenState extends State<ConstatCompletScreen>
    with TickerProviderStateMixin {
  late TabController _tabController;
  final _formKey = GlobalKey<FormState>();
  
  bool _isLoading = false;
  bool _isPreFilled = false;
  Map<String, dynamic> _formData = {};
  List<String> _photos = [];

  // Controllers pour tous les champs
  final Map<String, TextEditingController> _controllers = {};

  // Sections du constat (dynamiques selon le nombre de conducteurs)
  late List<String> _sections;

  @override
  void initState() {
    super.initState();

    // 1. Initialiser les sections d'abord
    _initializeSections();

    // 2. Cr√©er le TabController avec le bon nombre de sections
    _tabController = TabController(length: _sections.length, vsync: this);

    // 3. Initialiser les controllers
    _initializeControllers();

    // 4. Pr√©-remplissage automatique SEULEMENT pour conducteur inscrit
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _checkUserTypeAndLoadData();
    });
  }

  /// üìã Initialiser les sections selon le contexte
  void _initializeSections() {
    final myLetter = widget.conducteurLetter ?? 'A';

    // CHAQUE CONDUCTEUR A UNIQUEMENT SA PROPRE SECTION
    _sections = [
      'Informations g√©n√©rales', // Date, lieu, heure (partag√©es)
      'Mes informations', // MES informations personnelles uniquement
      'Mon v√©hicule', // MON v√©hicule uniquement
      'Mon assurance', // MON assurance uniquement
      'Circonstances', // Ce que j'ai vu
      'D√©g√¢ts sur mon v√©hicule', // MES d√©g√¢ts
      'Photos', // MES photos
      'Croquis', // Ma version du croquis
      'Validation', // Ma signature
    ];
  }

  /// üîß Initialiser tous les controllers
  void _initializeControllers() {
    final fields = [
      // Section 1: Informations g√©n√©rales
      'date', 'heure', 'lieu', 'ville', 'codePostal', 'pays',

      // Section 2: Mes informations personnelles COMPL√àTES
      'nom', 'prenom', 'cin', 'dateNaissance', 'lieuNaissance',
      'adresse', 'ville', 'codePostal', 'telephone', 'email',
      'profession', 'nationalite', 'situationFamiliale',

      // Permis de conduire COMPLET
      'numeroPermis', 'categoriePermis', 'dateDelivrancePermis',
      'lieuDelivrancePermis', 'dateValiditePermis',

      // Section 3: Mon v√©hicule COMPLET
      'marque', 'modele', 'immatriculation', 'couleur', 'annee',
      'numeroSerie', 'puissanceFiscale', 'nombrePlaces', 'usage',
      'datePremiereImmatriculation', 'kilometrage', 'carburant',
      'typeVehicule', 'poids', 'longueur', 'largeur',

      // Section 4: Mon assurance COMPL√àTE avec validit√©
      'compagnieAssurance', 'numeroPolice', 'agenceAssurance',
      'dateDebutContrat', 'dateFinContrat', 'montantFranchise',
      'typeContrat', 'typeCouverture', 'primeAnnuelle',
      'garanties', 'plafondGarantie',

      // Section 5: Circonstances
      'descriptionAccident',

      // Section 8: T√©moins
      'temoin1_nom', 'temoin1_telephone', 'temoin1_adresse',
      'temoin2_nom', 'temoin2_telephone', 'temoin2_adresse',

      // Anciens champs pour compatibilit√© (√† supprimer progressivement)
      'conducteurA_nom', 'conducteurA_prenom', 'conducteurA_dateNaissance',
      'conducteurA_adresse', 'conducteurA_telephone', 'conducteurA_email',
      'conducteurA_numeroPermis', 'conducteurA_categoriePermis',
      'conducteurB_nom', 'conducteurB_prenom', 'conducteurB_dateNaissance',
      'conducteurB_adresse', 'conducteurB_telephone', 'conducteurB_email',
      'conducteurB_numeroPermis', 'conducteurB_categoriePermis',
      'assuranceA_compagnie', 'assuranceA_numeroPolice', 'assuranceA_agence',
      'assuranceA_validiteDebut', 'assuranceA_validiteFin',
      'assuranceB_compagnie', 'assuranceB_numeroPolice', 'assuranceB_agence',
      'assuranceB_validiteDebut', 'assuranceB_validiteFin',

      // Observations
      'observations',
    ];

    for (String field in fields) {
      _controllers[field] = TextEditingController();
    }
  }

  /// üîÑ Charger les donn√©es pr√©-remplies
  Future<void> _loadPreFilledData() async {
    setState(() => _isLoading = true);

    try {
      // 1. Charger les donn√©es automatiques (date, heure, lieu)
      final preFilledData = await AutoFillService.getCompletePreFilledData();

      if (preFilledData['isPreFilled'] == true) {
        _applyPreFilledData(preFilledData);
      }

      // 2. Pr√©-remplir avec les donn√©es du v√©hicule s√©lectionn√©
      if (widget.vehiculeSelectionne != null) {
        _applyVehicleData(widget.vehiculeSelectionne!);
      }

      // 3. Pr√©-remplir avec les donn√©es du conducteur connect√©
      await _loadConducteurData();

      // 4. Appliquer les informations de l'accident
      _applyAccidentInfo();

      setState(() => _isPreFilled = true);
    } catch (e) {
      print('‚ùå Erreur pr√©-remplissage: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  /// üìù Appliquer les donn√©es pr√©-remplies automatiques
  void _applyPreFilledData(Map<String, dynamic> data) {
    final dateTime = data['dateTime'] ?? {};
    final location = data['location'] ?? {};

    // Date et heure automatiques
    _controllers['date']?.text = dateTime['dateFormatted'] ?? '';
    _controllers['heure']?.text = dateTime['heure'] ?? '';

    // Localisation automatique
    _controllers['lieu']?.text = location['adresse'] ?? '';
    _controllers['ville']?.text = location['ville'] ?? '';
    _controllers['codePostal']?.text = location['codePostal'] ?? '';
    _controllers['pays']?.text = 'Tunisie';
  }

  /// üöó Appliquer les donn√©es du v√©hicule s√©lectionn√©
  void _applyVehicleData(Map<String, dynamic> vehicule) {
    final letter = widget.conducteurLetter ?? 'A';

    // V√©hicule du conducteur connect√©
    _controllers['vehicule${letter}_marque']?.text = vehicule['marque'] ?? '';
    _controllers['vehicule${letter}_modele']?.text = vehicule['modele'] ?? '';
    _controllers['vehicule${letter}_immatriculation']?.text = vehicule['immatriculation'] ?? '';
    _controllers['vehicule${letter}_couleur']?.text = vehicule['couleur'] ?? '';

    // Assurance du v√©hicule
    _controllers['assurance${letter}_compagnie']?.text = vehicule['compagnieAssurance'] ?? '';
    _controllers['assurance${letter}_numeroPolice']?.text = vehicule['numeroPolice'] ?? '';
    _controllers['assurance${letter}_agence']?.text = vehicule['agenceAssurance'] ?? '';
  }

  /// üîç V√©rifier le type d'utilisateur et charger les donn√©es appropri√©es
  Future<void> _checkUserTypeAndLoadData() async {
    try {
      final user = FirebaseAuth.instance.currentUser;

      print('üîç === DIAGNOSTIC TYPE UTILISATEUR ===');
      print('üîç Utilisateur connect√©: ${user?.email ?? "NON"}');
      print('üîç V√©hicule s√©lectionn√©: ${widget.vehiculeSelectionne != null ? "OUI" : "NULL"}');
      print('üîç Mode collaboratif: ${widget.isCollaborative}');
      print('üîç Conducteur letter: ${widget.conducteurLetter}');

      if (user == null) {
        print('üë§ Utilisateur NON CONNECT√â - Formulaire vide pour invit√©');
        _showUserTypeMessage('Invit√©', 'Formulaire vide √† remplir manuellement');
        return;
      }

      // V√©rifier si l'utilisateur est inscrit dans le syst√®me
      final userDoc = await FirebaseFirestore.instance
          .collection('users')
          .doc(user.uid)
          .get();

      print('üîç Document utilisateur existe: ${userDoc.exists}');
      if (userDoc.exists) {
        print('üîç Donn√©es utilisateur: ${userDoc.data()}');
      }

      if (!userDoc.exists) {
        print('‚ö†Ô∏è Document utilisateur manquant, v√©rification des contrats...');

        // V√©rifier si l'utilisateur a des contrats (donc il est inscrit mais document manquant)
        final contractSnapshot = await FirebaseFirestore.instance
            .collection('demandes_contrats')
            .where('conducteurId', isEqualTo: user.uid)
            .limit(1)
            .get();

        if (contractSnapshot.docs.isNotEmpty) {
          print('‚úÖ Utilisateur a des contrats - Cr√©ation du document utilisateur...');

          final contractData = contractSnapshot.docs.first.data();

          // Cr√©er le document utilisateur √† partir des donn√©es du contrat
          await FirebaseFirestore.instance
              .collection('users')
              .doc(user.uid)
              .set({
            'uid': user.uid,
            'email': user.email,
            'nom': contractData['nom'] ?? '',
            'prenom': contractData['prenom'] ?? '',
            'telephone': contractData['telephone'] ?? '',
            'adresse': contractData['adresse'] ?? '',
            'ville': contractData['ville'] ?? '',
            'codePostal': contractData['codePostal'] ?? '',
            'dateNaissance': contractData['dateNaissance'] ?? '',
            'profession': contractData['profession'] ?? '',
            'nationalite': contractData['nationalite'] ?? 'Tunisienne',
            'numeroPermis': contractData['numeroPermis'] ?? '',
            'categoriePermis': contractData['categoriePermis'] ?? '',
            'role': 'conducteur',
            'statut': 'actif',
            'dateCreation': FieldValue.serverTimestamp(),
            'source': 'auto_creation_from_contract',
          });

          print('‚úÖ Document utilisateur cr√©√© automatiquement !');

          // Recharger le document utilisateur apr√®s cr√©ation
          final newUserDoc = await FirebaseFirestore.instance
              .collection('users')
              .doc(user.uid)
              .get();

          if (newUserDoc.exists) {
            final userData = newUserDoc.data()!;
            final role = userData['role'] ?? 'conducteur';

            print('üë§ Utilisateur INSCRIT (cr√©√© automatiquement) - R√¥le: $role');
            print('‚úÖ PR√â-REMPLISSAGE AUTOMATIQUE activ√©');

            _showUserTypeMessage('Inscrit ($role)', 'Document cr√©√© - Pr√©-remplissage automatique');

            // TOUJOURS charger les donn√©es pour les utilisateurs inscrits
            await _loadPreFilledData();
            await _loadConducteurData();
          }

          return;
        } else {
          print('üë§ Utilisateur NON INSCRIT - Aucun contrat trouv√©');
          _showUserTypeMessage('Non inscrit', 'Formulaire vide √† remplir manuellement');
          return;
        }
      }

      final userData = userDoc.data()!;
      final role = userData['role'] ?? 'inconnu';

      print('üë§ Utilisateur INSCRIT d√©tect√© - R√¥le: $role');
      print('‚úÖ PR√â-REMPLISSAGE AUTOMATIQUE activ√©');

      _showUserTypeMessage('Inscrit ($role)', 'Pr√©-remplissage automatique des donn√©es');

      // TOUJOURS charger les donn√©es pour les utilisateurs inscrits
      await _loadPreFilledData();
      await _loadConducteurData();

    } catch (e) {
      print('‚ùå Erreur v√©rification type utilisateur: $e');
      _showUserTypeMessage('Erreur', 'Impossible de d√©terminer le type d\'utilisateur');
    }
  }

  /// üí¨ Afficher un message sur le type d'utilisateur
  void _showUserTypeMessage(String userType, String message) {
    if (mounted) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Row(
            children: [
              Icon(
                userType.contains('Inscrit') ? Icons.verified_user : Icons.person_outline,
                color: Colors.white,
                size: 20,
              ),
              const SizedBox(width: 8),
              Expanded(
                child: Text(
                  '$userType: $message',
                  style: const TextStyle(fontSize: 14),
                ),
              ),
            ],
          ),
          backgroundColor: userType.contains('Inscrit') ? Colors.green : Colors.orange,
          duration: const Duration(seconds: 3),
        ),
      );
    }
  }

  /// üë§ Charger les donn√©es du conducteur connect√©
  Future<void> _loadConducteurData() async {
    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user == null) {
        print('‚ö†Ô∏è Aucun utilisateur connect√© - formulaire vide pour non-inscrit');
        return;
      }

      print('üîÑ Chargement des donn√©es du conducteur inscrit...');

      // SEULEMENT pour les conducteurs INSCRITS
      // V√©rifier si l'utilisateur est vraiment inscrit dans le syst√®me
      final userDoc = await FirebaseFirestore.instance
          .collection('users')
          .doc(user.uid)
          .get();

      if (!userDoc.exists) {
        print('‚ö†Ô∏è Utilisateur non inscrit dans le syst√®me - formulaire vide');
        return;
      }

      print('‚úÖ Utilisateur inscrit d√©tect√© - pr√©-remplissage automatique');

      // 1. Charger les donn√©es du contrat actif (contient TOUTES les infos)
      await _loadContractCompleteData(user.uid);

      // 2. Si pas de contrat, charger les donn√©es utilisateur de base
      if (_controllers['nom']?.text.isEmpty ?? true) {
        await _loadUserBasicData(user);
      }

      // 3. PR√â-REMPLISSAGE AUTOMATIQUE - V√©hicule et assurance
      if (widget.vehiculeSelectionne != null) {
        await _loadVehicleAndInsuranceData();
      }

    } catch (e) {
      print('‚ùå Erreur chargement conducteur: $e');
    }
  }

  /// üìÑ Charger les donn√©es compl√®tes du contrat actif
  Future<void> _loadContractCompleteData(String userId) async {
    try {
      print('üîç Recherche du contrat actif...');

      // Chercher le contrat actif dans demandes_contrats
      final contractSnapshot = await FirebaseFirestore.instance
          .collection('demandes_contrats')
          .where('conducteurId', isEqualTo: userId)
          .where('statut', whereIn: ['contrat_actif', 'contrat_valide', 'affectee'])
          .limit(1)
          .get();

      if (contractSnapshot.docs.isNotEmpty) {
        final contractData = contractSnapshot.docs.first.data();
        print('‚úÖ Contrat trouv√©: ${contractData['numero']} - ${contractData['nom']} ${contractData['prenom']}');

        // PR√â-REMPLISSAGE COMPLET - Informations personnelles
        _controllers['nom']?.text = contractData['nom'] ?? '';
        _controllers['prenom']?.text = contractData['prenom'] ?? '';
        _controllers['telephone']?.text = contractData['telephone'] ?? '';
        _controllers['email']?.text = contractData['email'] ?? '';
        _controllers['adresse']?.text = contractData['adresse'] ?? '';
        _controllers['ville']?.text = contractData['ville'] ?? '';
        _controllers['codePostal']?.text = contractData['codePostal'] ?? '';
        _controllers['dateNaissance']?.text = contractData['dateNaissance'] ?? '';
        _controllers['lieuNaissance']?.text = contractData['lieuNaissance'] ?? '';
        _controllers['profession']?.text = contractData['profession'] ?? '';
        _controllers['nationalite']?.text = contractData['nationalite'] ?? 'Tunisienne';

        // PR√â-REMPLISSAGE COMPLET - Permis de conduire
        _controllers['numeroPermis']?.text = contractData['numeroPermis'] ?? '';
        _controllers['categoriePermis']?.text = contractData['categoriePermis'] ?? '';
        _controllers['dateDelivrancePermis']?.text = contractData['dateDelivrancePermis'] ?? '';
        _controllers['lieuDelivrancePermis']?.text = contractData['lieuDelivrancePermis'] ?? '';
        _controllers['dateValiditePermis']?.text = contractData['dateValiditePermis'] ?? '';

        // PR√â-REMPLISSAGE COMPLET - V√©hicule
        _controllers['marque']?.text = contractData['marque'] ?? '';
        _controllers['modele']?.text = contractData['modele'] ?? '';
        _controllers['immatriculation']?.text = contractData['immatriculation'] ?? '';
        _controllers['couleur']?.text = contractData['couleur'] ?? '';
        _controllers['annee']?.text = contractData['annee']?.toString() ?? '';
        _controllers['numeroSerie']?.text = contractData['numeroSerie'] ?? '';
        _controllers['puissanceFiscale']?.text = contractData['puissanceFiscale']?.toString() ?? '';
        _controllers['nombrePlaces']?.text = contractData['nombrePlaces']?.toString() ?? '';
        _controllers['usage']?.text = contractData['usage'] ?? 'Personnel';
        _controllers['datePremiereImmatriculation']?.text = contractData['datePremiereImmatriculation'] ?? '';

        // PR√â-REMPLISSAGE COMPLET - Assurance avec validit√©
        _controllers['compagnieAssurance']?.text = contractData['compagnieAssuranceNom'] ?? contractData['compagnieAssurance'] ?? '';
        _controllers['numeroPolice']?.text = contractData['numero'] ?? contractData['numeroPolice'] ?? '';
        _controllers['agenceAssurance']?.text = contractData['agenceAssuranceNom'] ?? contractData['agenceAssurance'] ?? '';

        // VALIDIT√â DU CONTRAT (tr√®s important pour les constats)
        _controllers['dateDebutContrat']?.text = contractData['dateDebutContrat'] ?? '';
        _controllers['dateFinContrat']?.text = contractData['dateFinContrat'] ?? '';
        _controllers['montantFranchise']?.text = contractData['franchise']?.toString() ?? contractData['montantFranchise']?.toString() ?? '';
        _controllers['typeContrat']?.text = contractData['typeCouverture'] ?? contractData['typeContrat'] ?? 'Tous risques';

        print('‚úÖ TOUTES les donn√©es pr√©-remplies depuis le contrat !');
      } else {
        print('‚ö†Ô∏è Aucun contrat actif trouv√©');
      }
    } catch (e) {
      print('‚ùå Erreur chargement contrat: $e');
    }
  }

  /// üë§ Charger les donn√©es utilisateur de base (fallback)
  Future<void> _loadUserBasicData(User user) async {
    try {
      final userDoc = await FirebaseFirestore.instance
          .collection('users')
          .doc(user.uid)
          .get();

      if (userDoc.exists) {
        final userData = userDoc.data()!;
        print('‚úÖ Donn√©es utilisateur de base: ${userData['nom']} ${userData['prenom']}');

        // Remplir uniquement si pas d√©j√† rempli par le contrat
        if (_controllers['nom']?.text.isEmpty ?? true) {
          _controllers['nom']?.text = userData['nom'] ?? '';
          _controllers['prenom']?.text = userData['prenom'] ?? '';
          _controllers['telephone']?.text = userData['telephone'] ?? '';
          _controllers['email']?.text = userData['email'] ?? user.email ?? '';
        }
      }
    } catch (e) {
      print('‚ùå Erreur chargement donn√©es utilisateur: $e');
    }
  }

  /// üöó Charger les donn√©es du v√©hicule et de l'assurance
  Future<void> _loadVehicleAndInsuranceData() async {
    try {
      final vehicule = widget.vehiculeSelectionne!;
      print('üîÑ Pr√©-remplissage v√©hicule: ${vehicule['marque']} ${vehicule['modele']}');

      // PR√â-REMPLISSAGE AUTOMATIQUE - V√©hicule
      _controllers['marque']?.text = vehicule['marque'] ?? '';
      _controllers['modele']?.text = vehicule['modele'] ?? '';
      _controllers['immatriculation']?.text = vehicule['immatriculation'] ?? '';
      _controllers['couleur']?.text = vehicule['couleur'] ?? '';
      _controllers['annee']?.text = vehicule['annee']?.toString() ?? '';
      _controllers['numeroSerie']?.text = vehicule['numeroSerie'] ?? '';
      _controllers['puissanceFiscale']?.text = vehicule['puissanceFiscale']?.toString() ?? '';
      _controllers['nombrePlaces']?.text = vehicule['nombrePlaces']?.toString() ?? '';
      _controllers['usage']?.text = vehicule['usage'] ?? 'Personnel';
      _controllers['datePremiereImmatriculation']?.text = vehicule['datePremiereImmatriculation'] ?? '';

      // PR√â-REMPLISSAGE AUTOMATIQUE - Assurance
      _controllers['compagnieAssurance']?.text = vehicule['compagnieAssurance'] ?? '';
      _controllers['numeroPolice']?.text = vehicule['numeroPolice'] ?? '';
      _controllers['agenceAssurance']?.text = vehicule['agenceAssurance'] ?? '';
      _controllers['dateDebutContrat']?.text = vehicule['dateDebutContrat'] ?? '';
      _controllers['dateFinContrat']?.text = vehicule['dateFinContrat'] ?? '';
      _controllers['montantFranchise']?.text = vehicule['montantFranchise']?.toString() ?? '';
      _controllers['typeContrat']?.text = vehicule['typeContrat'] ?? 'Tous risques';

      print('‚úÖ V√©hicule et assurance pr√©-remplis: ${vehicule['compagnieAssurance']} - ${vehicule['numeroPolice']}');
    } catch (e) {
      print('‚ùå Erreur pr√©-remplissage v√©hicule: $e');
    }
  }

  /// üö® Appliquer les informations de l'accident
  void _applyAccidentInfo() {
    // Marquer le type d'accident dans les circonstances
    if (widget.accidentType != null) {
      switch (widget.accidentType) {
        case 'collision_deux_vehicules':
          // Marquer les circonstances appropri√©es
          break;
        case 'carambolage':
          // Marquer carambolage
          break;
        case 'sortie_route':
          // Marquer sortie de route
          break;
        case 'collision_objet_fixe':
          // Marquer collision objet fixe
          break;
        case 'accident_pieton_cycliste':
          // Marquer accident pi√©ton/cycliste
          break;
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey[50],
      appBar: AppBar(
        title: const Text('Constat d\'Accident Complet'),
        backgroundColor: Colors.blue[600],
        foregroundColor: Colors.white,
        elevation: 0,
        bottom: TabBar(
          controller: _tabController,
          isScrollable: true,
          indicatorColor: Colors.white,
          labelColor: Colors.white,
          unselectedLabelColor: Colors.white70,
          tabs: _sections.map((section) => Tab(text: section)).toList(),
        ),
        actions: [
          IconButton(
            onPressed: _isLoading ? null : _sauvegarderBrouillon,
            icon: const Icon(Icons.save),
            tooltip: 'Sauvegarder brouillon',
          ),
          IconButton(
            onPressed: _isLoading ? null : _finaliserConstat,
            icon: const Icon(Icons.send),
            tooltip: 'Finaliser constat',
          ),
        ],
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : Column(
              children: [
                // Indicateur de pr√©-remplissage
                if (_isPreFilled)
                  ElegantFormWidgets.buildPreFilledIndicator(
                    isPreFilled: _isPreFilled,
                    message: 'Constat pr√©-rempli avec vos informations',
                  ),
                
                // Contenu des onglets
                Expanded(
                  child: TabBarView(
                    controller: _tabController,
                    children: [
                      _buildInformationsGeneralesTab(), // Informations g√©n√©rales
                      _buildMesInformationsTab(),       // Mes informations
                      _buildMonVehiculeTab(),           // Mon v√©hicule
                      _buildMonAssuranceTab(),          // Mon assurance
                      _buildCirconstancesTab(),         // Circonstances
                      _buildDegatsTab(),                // D√©g√¢ts sur mon v√©hicule
                      _buildPhotosTab(),                // Photos
                      _buildCroquisTab(),               // Croquis
                      _buildValidationTab(),            // Validation
                    ],
                  ),
                ),
              ],
            ),
    );
  }

  /// üìç Section 1: Informations g√©n√©rales (partag√©es)
  Widget _buildInformationsGeneralesTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Form(
        key: _formKey,
        child: Column(
          children: [
            ElegantFormWidgets.buildFormSection(
              title: 'Date et Heure de l\'Accident',
              icon: Icons.access_time,
              children: [
                Row(
                  children: [
                    Expanded(
                      child: ElegantFormWidgets.buildDatePicker(
                        label: 'Date',
                        controller: _controllers['date']!,
                        context: context,
                        isRequired: true,
                      ),
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: ElegantFormWidgets.buildTimePicker(
                        label: 'Heure',
                        controller: _controllers['heure']!,
                        context: context,
                        isRequired: true,
                      ),
                    ),
                  ],
                ),
              ],
            ),

            ElegantFormWidgets.buildFormSection(
              title: 'Lieu de l\'Accident',
              icon: Icons.location_on,
              children: [
                ElegantFormWidgets.buildElegantTextField(
                  label: 'Adresse pr√©cise',
                  controller: _controllers['lieu']!,
                  hint: 'Rue, avenue, route...',
                  isRequired: true,
                  validator: (value) => value?.isEmpty == true ? 'Lieu requis' : null,
                ),
                const SizedBox(height: 16),
                Row(
                  children: [
                    Expanded(
                      child: ElegantFormWidgets.buildElegantTextField(
                        label: 'Ville',
                        controller: _controllers['ville']!,
                        isRequired: true,
                      ),
                    ),
                    const SizedBox(width: 16),
                    Expanded(
                      child: ElegantFormWidgets.buildElegantTextField(
                        label: 'Code postal',
                        controller: _controllers['codePostal']!,
                        keyboardType: TextInputType.number,
                      ),
                    ),
                  ],
                ),
                const SizedBox(height: 16),
                ElegantFormWidgets.buildElegantTextField(
                  label: 'Pays',
                  controller: _controllers['pays']!,
                  preFilledValue: 'Tunisie',
                ),
                const SizedBox(height: 16),
                ElevatedButton.icon(
                  onPressed: _obtenirPositionGPS,
                  icon: const Icon(Icons.gps_fixed),
                  label: const Text('Obtenir position GPS'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.green[600],
                    foregroundColor: Colors.white,
                  ),
                ),
              ],
            ),

            ElegantFormWidgets.buildFormSection(
              title: 'Questions G√©n√©rales',
              icon: Icons.help_outline,
              children: [
                _buildYesNoQuestion('Y a-t-il des bless√©s ?', 'blesses'),
                const SizedBox(height: 16),
                _buildYesNoQuestion('Y a-t-il des d√©g√¢ts mat√©riels autres qu\'aux v√©hicules ?', 'degatsAutres'),
              ],
            ),
          ],
        ),
      ),
    );
  }

  /// üë§ Section 2: Mes informations personnelles
  Widget _buildMesInformationsTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          ElegantFormWidgets.buildFormSection(
            title: 'Mes Informations Personnelles',
            icon: Icons.person,
            iconColor: Colors.blue[600],
            children: [
              _buildMesInformationsForm(),
            ],
          ),
        ],
      ),
    );
  }

  /// üöó Section 3: Mon v√©hicule
  Widget _buildMonVehiculeTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          ElegantFormWidgets.buildFormSection(
            title: 'Mon V√©hicule',
            icon: Icons.directions_car,
            iconColor: Colors.blue[600],
            children: [
              _buildMonVehiculeForm(),
            ],
          ),
        ],
      ),
    );
  }

  /// üõ°Ô∏è Section 4: Mon assurance
  Widget _buildMonAssuranceTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          ElegantFormWidgets.buildFormSection(
            title: 'Mon Assurance',
            icon: Icons.security,
            iconColor: Colors.blue[600],
            children: [
              _buildMonAssuranceForm(),
            ],
          ),
        ],
      ),
    );
  }

  /// üì∏ Section 6: Photos
  Widget _buildPhotosTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          ElegantFormWidgets.buildFormSection(
            title: 'Photos des D√©g√¢ts',
            icon: Icons.camera_alt,
            children: [
              _buildPhotosSection(),
              const SizedBox(height: 16),
              Row(
                children: [
                  Expanded(
                    child: ElevatedButton.icon(
                      onPressed: () => _ajouterPhoto(ImageSource.camera),
                      icon: const Icon(Icons.camera),
                      label: const Text('Prendre photo'),
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: ElevatedButton.icon(
                      onPressed: () => _ajouterPhoto(ImageSource.gallery),
                      icon: const Icon(Icons.photo_library),
                      label: const Text('Galerie'),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ],
      ),
    );
  }

  /// ‚úÖ Section 9: Validation
  Widget _buildValidationTab() {
    return const Center(
      child: Text('Validation - √Ä impl√©menter'),
    );
  }

  /// ‚ö†Ô∏è Section 5: Circonstances
  Widget _buildCirconstancesTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          ElegantFormWidgets.buildFormSection(
            title: 'Circonstances de l\'Accident',
            icon: Icons.warning,
            children: [
              const Text(
                'Cochez les cases correspondant aux circonstances de l\'accident:',
                style: TextStyle(fontSize: 14, color: Colors.grey),
              ),
              const SizedBox(height: 16),
              _buildCirconstancesCheckboxes(),
            ],
          ),

          ElegantFormWidgets.buildFormSection(
            title: 'Description Libre',
            icon: Icons.description,
            children: [
              ElegantFormWidgets.buildElegantTextField(
                label: 'Description de l\'accident',
                controller: _controllers['descriptionAccident']!,
                hint: 'D√©crivez ce qui s\'est pass√© avec vos propres mots...',
                maxLines: 5,
                isRequired: true,
              ),
            ],
          ),
        ],
      ),
    );
  }

  /// üîß Section 6: D√©g√¢ts
  Widget _buildDegatsTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          ElegantFormWidgets.buildFormSection(
            title: 'Photos des D√©g√¢ts',
            icon: Icons.camera_alt,
            children: [
              _buildPhotosSection(),
              const SizedBox(height: 16),
              Row(
                children: [
                  Expanded(
                    child: ElevatedButton.icon(
                      onPressed: () => _ajouterPhoto(ImageSource.camera),
                      icon: const Icon(Icons.camera),
                      label: const Text('Prendre photo'),
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: ElevatedButton.icon(
                      onPressed: () => _ajouterPhoto(ImageSource.gallery),
                      icon: const Icon(Icons.photo_library),
                      label: const Text('Galerie'),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ],
      ),
    );
  }

  /// üé® Section 7: Croquis
  Widget _buildCroquisTab() {
    return const Center(
      child: Text('Croquis - √Ä impl√©menter'),
    );
  }

  /// üë• Section 8: T√©moins
  Widget _buildTemoinsTab() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        children: [
          ElegantFormWidgets.buildFormSection(
            title: 'T√©moins de l\'Accident',
            icon: Icons.people,
            children: [
              _buildTemoinForm(1),
              const SizedBox(height: 16),
              _buildTemoinForm(2),
            ],
          ),
        ],
      ),
    );
  }

  /// ‚úçÔ∏è Section 9: Signatures
  Widget _buildSignaturesTab() {
    return const Center(
      child: Text('Signatures - √Ä impl√©menter'),
    );
  }

  /// üë§ Formulaire pour mes informations personnelles (adapt√© inscrit/non-inscrit)
  Widget _buildMesInformationsForm() {
    return Column(
      children: [
        // Nom et Pr√©nom
        Row(
          children: [
            Expanded(
              child: ElegantFormWidgets.buildElegantTextField(
                label: 'Nom *',
                controller: _controllers['nom']!,
                isRequired: true,
                hint: 'Votre nom de famille',
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: ElegantFormWidgets.buildElegantTextField(
                label: 'Pr√©nom *',
                controller: _controllers['prenom']!,
                isRequired: true,
                hint: 'Votre pr√©nom',
              ),
            ),
          ],
        ),
        const SizedBox(height: 16),

        // Date de naissance et CIN
        Row(
          children: [
            Expanded(
              child: ElegantFormWidgets.buildElegantTextField(
                label: 'Date de naissance',
                controller: _controllers['dateNaissance']!,
                hint: 'JJ/MM/AAAA',
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: ElegantFormWidgets.buildElegantTextField(
                label: 'CIN',
                controller: _controllers['cin']!,
                hint: 'Num√©ro CIN',
              ),
            ),
          ],
        ),
        const SizedBox(height: 16),

        // Adresse compl√®te
        ElegantFormWidgets.buildElegantTextField(
          label: 'Adresse compl√®te *',
          controller: _controllers['adresse']!,
          maxLines: 2,
          isRequired: true,
          hint: 'Rue, ville, code postal...',
        ),
        const SizedBox(height: 16),

        // T√©l√©phone et Email
        Row(
          children: [
            Expanded(
              child: ElegantFormWidgets.buildElegantTextField(
                label: 'T√©l√©phone *',
                controller: _controllers['telephone']!,
                keyboardType: TextInputType.phone,
                isRequired: true,
                hint: '+216 XX XXX XXX',
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: ElegantFormWidgets.buildElegantTextField(
                label: 'Email',
                controller: _controllers['email']!,
                keyboardType: TextInputType.emailAddress,
                hint: 'votre@email.com',
              ),
            ),
          ],
        ),
        const SizedBox(height: 24),

        // Section Permis de conduire
        Container(
          width: double.infinity,
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.blue[50],
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: Colors.blue[200]!, width: 1),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Icon(Icons.credit_card, color: Colors.blue[700], size: 20),
                  const SizedBox(width: 8),
                  Text(
                    'Permis de conduire',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: Colors.blue[800],
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 16),
              Row(
                children: [
                  Expanded(
                    child: ElegantFormWidgets.buildElegantTextField(
                      label: 'N¬∞ Permis *',
                      controller: _controllers['numeroPermis']!,
                      isRequired: true,
                      hint: 'Num√©ro du permis',
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: ElegantFormWidgets.buildElegantTextField(
                      label: 'Cat√©gorie *',
                      controller: _controllers['categoriePermis']!,
                      hint: 'B, A, C...',
                      isRequired: true,
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ],
    );
  }

  /// üöó Formulaire pour mon v√©hicule (adapt√© inscrit/non-inscrit)
  Widget _buildMonVehiculeForm() {
    return Column(
      children: [
        // Marque et Mod√®le
        Row(
          children: [
            Expanded(
              child: ElegantFormWidgets.buildElegantTextField(
                label: 'Marque *',
                controller: _controllers['marque']!,
                isRequired: true,
                hint: 'Ex: Peugeot, Renault...',
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: ElegantFormWidgets.buildElegantTextField(
                label: 'Mod√®le *',
                controller: _controllers['modele']!,
                isRequired: true,
                hint: 'Ex: 208, Clio...',
              ),
            ),
          ],
        ),
        const SizedBox(height: 16),

        // Immatriculation
        ElegantFormWidgets.buildElegantTextField(
          label: 'Immatriculation *',
          controller: _controllers['immatriculation']!,
          isRequired: true,
          hint: 'Ex: 123 TUN 456',
        ),
        const SizedBox(height: 16),

        // Couleur et Ann√©e
        Row(
          children: [
            Expanded(
              child: ElegantFormWidgets.buildElegantTextField(
                label: 'Couleur',
                controller: _controllers['couleur']!,
                hint: 'Ex: Blanc, Rouge...',
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: ElegantFormWidgets.buildElegantTextField(
                label: 'Ann√©e *',
                controller: _controllers['annee']!,
                keyboardType: TextInputType.number,
                isRequired: true,
                hint: 'Ex: 2020',
              ),
            ),
          ],
        ),
        const SizedBox(height: 16),

        // Num√©ro de s√©rie (optionnel pour non-inscrits)
        ElegantFormWidgets.buildElegantTextField(
          label: 'Num√©ro de s√©rie (ch√¢ssis)',
          controller: _controllers['numeroSerie']!,
          hint: 'Optionnel - Num√©ro de ch√¢ssis',
        ),
      ],
    );
  }

  /// üõ°Ô∏è Formulaire pour mon assurance (adapt√© inscrit/non-inscrit)
  Widget _buildMonAssuranceForm() {
    return Column(
      children: [
        // Compagnie d'assurance et Num√©ro de police
        Row(
          children: [
            Expanded(
              flex: 2,
              child: ElegantFormWidgets.buildElegantTextField(
                label: 'Compagnie d\'assurance *',
                controller: _controllers['compagnieAssurance']!,
                isRequired: true,
                hint: 'Ex: STAR, AMI, COMAR...',
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: ElegantFormWidgets.buildElegantTextField(
                label: 'N¬∞ Police *',
                controller: _controllers['numeroPolice']!,
                isRequired: true,
                hint: 'Num√©ro de police',
              ),
            ),
          ],
        ),
        const SizedBox(height: 16),

        // Agence d'assurance
        ElegantFormWidgets.buildElegantTextField(
          label: 'Agence d\'assurance',
          controller: _controllers['agenceAssurance']!,
          hint: 'Nom de l\'agence (optionnel)',
        ),
        const SizedBox(height: 16),

        // P√©riode de validit√© du contrat (TR√àS IMPORTANT)
        Container(
          width: double.infinity,
          padding: const EdgeInsets.all(16),
          decoration: BoxDecoration(
            color: Colors.green[50],
            borderRadius: BorderRadius.circular(12),
            border: Border.all(color: Colors.green[300]!, width: 2),
          ),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Row(
                children: [
                  Icon(Icons.verified_user, color: Colors.green[700], size: 20),
                  const SizedBox(width: 8),
                  Text(
                    'Validit√© du contrat d\'assurance',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: Colors.green[800],
                    ),
                  ),
                ],
              ),
              const SizedBox(height: 12),
              Row(
                children: [
                  Expanded(
                    child: ElegantFormWidgets.buildDatePicker(
                      label: 'Validit√© du *',
                      controller: _controllers['dateDebutContrat']!,
                      context: context,
                      isRequired: true,
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: ElegantFormWidgets.buildDatePicker(
                      label: 'Validit√© au *',
                      controller: _controllers['dateFinContrat']!,
                      context: context,
                      isRequired: true,
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
        const SizedBox(height: 16),

        // Type de couverture
        ElegantFormWidgets.buildElegantTextField(
          label: 'Type de couverture',
          controller: _controllers['typeContrat']!,
          hint: 'Ex: Tous risques, Responsabilit√© civile...',
        ),
      ],
    );
  }

  /// üë§ Formulaire pour un conducteur (ancien - √† supprimer)
  Widget _buildConducteurForm(String conducteur) {
    return Column(
      children: [
        Row(
          children: [
            Expanded(
              child: ElegantFormWidgets.buildElegantTextField(
                label: 'Nom',
                controller: _controllers['conducteur${conducteur}_nom']!,
                isRequired: true,
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: ElegantFormWidgets.buildElegantTextField(
                label: 'Pr√©nom',
                controller: _controllers['conducteur${conducteur}_prenom']!,
                isRequired: true,
              ),
            ),
          ],
        ),
        const SizedBox(height: 16),
        ElegantFormWidgets.buildDatePicker(
          label: 'Date de naissance',
          controller: _controllers['conducteur${conducteur}_dateNaissance']!,
          context: context,
          isRequired: true,
        ),
        const SizedBox(height: 16),
        ElegantFormWidgets.buildElegantTextField(
          label: 'Adresse compl√®te',
          controller: _controllers['conducteur${conducteur}_adresse']!,
          maxLines: 2,
          isRequired: true,
        ),
        const SizedBox(height: 16),
        Row(
          children: [
            Expanded(
              child: ElegantFormWidgets.buildElegantTextField(
                label: 'T√©l√©phone',
                controller: _controllers['conducteur${conducteur}_telephone']!,
                keyboardType: TextInputType.phone,
                isRequired: true,
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: ElegantFormWidgets.buildElegantTextField(
                label: 'Email',
                controller: _controllers['conducteur${conducteur}_email']!,
                keyboardType: TextInputType.emailAddress,
              ),
            ),
          ],
        ),
        const SizedBox(height: 16),
        Row(
          children: [
            Expanded(
              child: ElegantFormWidgets.buildElegantTextField(
                label: 'N¬∞ Permis de conduire',
                controller: _controllers['conducteur${conducteur}_numeroPermis']!,
                isRequired: true,
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: ElegantFormWidgets.buildElegantTextField(
                label: 'Cat√©gorie',
                controller: _controllers['conducteur${conducteur}_categoriePermis']!,
                hint: 'B, A, C...',
              ),
            ),
          ],
        ),
      ],
    );
  }

  /// üõ°Ô∏è Formulaire pour une assurance
  Widget _buildAssuranceForm(String vehicule) {
    return Column(
      children: [
        ElegantFormWidgets.buildElegantTextField(
          label: 'Compagnie d\'assurance',
          controller: _controllers['assurance${vehicule}_compagnie']!,
          isRequired: true,
        ),
        const SizedBox(height: 16),
        ElegantFormWidgets.buildElegantTextField(
          label: 'Num√©ro de police',
          controller: _controllers['assurance${vehicule}_numeroPolice']!,
          isRequired: true,
        ),
        const SizedBox(height: 16),
        ElegantFormWidgets.buildElegantTextField(
          label: 'Agence',
          controller: _controllers['assurance${vehicule}_agence']!,
        ),
        const SizedBox(height: 16),
        Row(
          children: [
            Expanded(
              child: ElegantFormWidgets.buildDatePicker(
                label: 'Validit√© du',
                controller: _controllers['assurance${vehicule}_validiteDebut']!,
                context: context,
                isRequired: true,
              ),
            ),
            const SizedBox(width: 16),
            Expanded(
              child: ElegantFormWidgets.buildDatePicker(
                label: 'Validit√© au',
                controller: _controllers['assurance${vehicule}_validiteFin']!,
                context: context,
                isRequired: true,
              ),
            ),
          ],
        ),
      ],
    );
  }

  /// üë• Formulaire pour un t√©moin
  Widget _buildTemoinForm(int numero) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          'T√©moin $numero',
          style: const TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.w600,
          ),
        ),
        const SizedBox(height: 12),
        ElegantFormWidgets.buildElegantTextField(
          label: 'Nom et pr√©nom',
          controller: _controllers['temoin${numero}_nom']!,
        ),
        const SizedBox(height: 12),
        ElegantFormWidgets.buildElegantTextField(
          label: 'T√©l√©phone',
          controller: _controllers['temoin${numero}_telephone']!,
          keyboardType: TextInputType.phone,
        ),
        const SizedBox(height: 12),
        ElegantFormWidgets.buildElegantTextField(
          label: 'Adresse',
          controller: _controllers['temoin${numero}_adresse']!,
          maxLines: 2,
        ),
      ],
    );
  }

  /// ‚ùì Widget pour question Oui/Non
  Widget _buildYesNoQuestion(String question, String key) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          question,
          style: const TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.w500,
          ),
        ),
        const SizedBox(height: 8),
        Row(
          children: [
            Expanded(
              child: RadioListTile<bool>(
                title: const Text('Oui'),
                value: true,
                groupValue: _formData[key],
                onChanged: (value) {
                  setState(() {
                    _formData[key] = value;
                  });
                },
              ),
            ),
            Expanded(
              child: RadioListTile<bool>(
                title: const Text('Non'),
                value: false,
                groupValue: _formData[key],
                onChanged: (value) {
                  setState(() {
                    _formData[key] = value;
                  });
                },
              ),
            ),
          ],
        ),
      ],
    );
  }

  /// ‚ö†Ô∏è Checkboxes pour les circonstances
  Widget _buildCirconstancesCheckboxes() {
    final circonstances = [
      'Stationnait',
      'Quittait un stationnement',
      'Prenait un stationnement',
      'Sortait d\'un parking, d\'un lieu priv√©',
      'S\'engageait dans un parking, un lieu priv√©',
      'Sortait d\'un rond-point',
      'S\'engageait dans un rond-point',
      'Heurtait par l\'arri√®re',
      'Roulait dans le m√™me sens et sur la m√™me file',
      'Changeait de file',
      'Doublait',
      'Virait √† droite',
      'Virait √† gauche',
      'Reculait',
      'Empi√©tait sur une voie r√©serv√©e √† la circulation en sens inverse',
      'Venait de droite (dans un carrefour)',
      'N\'avait pas observ√© un signal de priorit√© ou un feu de signalisation',
    ];

    return Column(
      children: circonstances.map((circonstance) {
        return CheckboxListTile(
          title: Text(circonstance),
          value: _formData['circonstance_$circonstance'] ?? false,
          onChanged: (value) {
            setState(() {
              _formData['circonstance_$circonstance'] = value ?? false;
            });
          },
        );
      }).toList(),
    );
  }

  /// üì∏ Section photos
  Widget _buildPhotosSection() {
    return Column(
      children: [
        if (_photos.isNotEmpty) ...[
          GridView.builder(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
              crossAxisCount: 3,
              crossAxisSpacing: 8,
              mainAxisSpacing: 8,
            ),
            itemCount: _photos.length,
            itemBuilder: (context, index) {
              return _buildPhotoCard(_photos[index], index);
            },
          ),
          const SizedBox(height: 16),
        ],
        Text(
          '${_photos.length}/10 photos ajout√©es',
          style: TextStyle(
            color: Colors.grey[600],
            fontSize: 14,
          ),
        ),
      ],
    );
  }

  /// üñºÔ∏è Carte de photo
  Widget _buildPhotoCard(String photoUrl, int index) {
    return Container(
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(8),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: ClipRRect(
        borderRadius: BorderRadius.circular(8),
        child: Stack(
          children: [
            Image.network(
              photoUrl,
              width: double.infinity,
              height: double.infinity,
              fit: BoxFit.cover,
              errorBuilder: (context, error, stackTrace) {
                return Container(
                  color: Colors.grey[200],
                  child: const Icon(Icons.error),
                );
              },
            ),
            Positioned(
              top: 4,
              right: 4,
              child: GestureDetector(
                onTap: () => _supprimerPhoto(index),
                child: Container(
                  padding: const EdgeInsets.all(4),
                  decoration: const BoxDecoration(
                    color: Colors.red,
                    shape: BoxShape.circle,
                  ),
                  child: const Icon(
                    Icons.close,
                    color: Colors.white,
                    size: 16,
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  /// üì∏ Ajouter une photo
  Future<void> _ajouterPhoto(ImageSource source) async {
    if (_photos.length >= 10) {
      _showErrorMessage('Maximum 10 photos autoris√©es');
      return;
    }

    try {
      final ImagePicker picker = ImagePicker();
      final XFile? image = await picker.pickImage(
        source: source,
        imageQuality: 75,
        maxWidth: 1920,
        maxHeight: 1080,
      );

      if (image != null) {
        setState(() => _isLoading = true);

        final photoUrl = await CloudinaryService.uploadImage(
          File(image.path),
          'constats',
        );

        if (photoUrl != null) {
          setState(() {
            _photos.add(photoUrl);
            _isLoading = false;
          });
          _showSuccessMessage('Photo ajout√©e avec succ√®s !');
        }
      }
    } catch (e) {
      setState(() => _isLoading = false);
      _showErrorMessage('Erreur lors de l\'ajout: $e');
    }
  }

  /// üóëÔ∏è Supprimer une photo
  void _supprimerPhoto(int index) {
    setState(() {
      _photos.removeAt(index);
    });
    _showSuccessMessage('Photo supprim√©e');
  }

  /// üìç Obtenir position GPS
  Future<void> _obtenirPositionGPS() async {
    try {
      setState(() => _isLoading = true);

      final position = await Geolocator.getCurrentPosition();

      setState(() {
        _formData['latitude'] = position.latitude;
        _formData['longitude'] = position.longitude;
        _isLoading = false;
      });

      _showSuccessMessage('Position GPS obtenue !');
    } catch (e) {
      setState(() => _isLoading = false);
      _showErrorMessage('Erreur GPS: $e');
    }
  }

  /// üíæ Sauvegarder brouillon
  Future<void> _sauvegarderBrouillon() async {
    try {
      setState(() => _isLoading = true);

      // Collecter toutes les donn√©es du formulaire
      final data = _collectFormData();
      data['statut'] = 'brouillon';
      data['photos'] = _photos;

      // TODO: Sauvegarder en base de donn√©es
      await Future.delayed(const Duration(seconds: 1)); // Simulation

      _showSuccessMessage('Brouillon sauvegard√© !');
    } catch (e) {
      _showErrorMessage('Erreur sauvegarde: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  /// üì§ Finaliser constat
  Future<void> _finaliserConstat() async {
    if (!_formKey.currentState!.validate()) {
      _showErrorMessage('Veuillez remplir tous les champs obligatoires');
      return;
    }

    try {
      setState(() => _isLoading = true);

      // Collecter toutes les donn√©es du formulaire
      final data = _collectFormData();
      data['statut'] = 'termine';
      data['photos'] = _photos;
      data['dateFinalisation'] = DateTime.now().toIso8601String();
      data['accidentType'] = widget.accidentType;
      data['vehicleCount'] = widget.vehicleCount;
      data['isCollaborative'] = widget.isCollaborative;
      data['conducteurLetter'] = widget.conducteurLetter;

      // 1. Enregistrer le sinistre dans Firestore
      await _enregistrerSinistre(data);

      // 2. Envoyer √† l'agence d'assurance
      await _envoyerAAgence(data);

      // 3. Mettre √† jour le statut du sinistre de suivi
      if (widget.sinistreId != null) {
        await SinistreTrackingService.updateStatut(
          sinistreId: widget.sinistreId!,
          newStatut: 'envoye_agence',
          description: 'Constat finalis√© et envoy√© √† l\'agence',
          additionalData: {
            'dateFinalisation': DateTime.now().toIso8601String(),
            'nombreVehicules': widget.vehicleCount ?? 1,
            'typeAccident': widget.accidentType ?? 'non_specifie',
          },
        );
      }
      await Future.delayed(const Duration(seconds: 2)); // Simulation

      _showSuccessMessage('Constat finalis√© et envoy√© !');
      Navigator.pop(context);
    } catch (e) {
      _showErrorMessage('Erreur finalisation: $e');
    } finally {
      setState(() => _isLoading = false);
    }
  }

  /// üíæ Enregistrer le sinistre dans Firestore
  Future<void> _enregistrerSinistre(Map<String, dynamic> data) async {
    final user = FirebaseAuth.instance.currentUser;
    if (user == null) throw Exception('Utilisateur non connect√©');

    // Pr√©parer les donn√©es du sinistre
    final sinistreData = {
      'conducteurId': user.uid,
      'sinistreId': widget.sinistreId,
      'typeAccident': widget.accidentType ?? 'non_specifie',
      'nombreVehicules': widget.vehicleCount ?? 1,
      'isCollaborative': widget.isCollaborative,
      'conducteurLetter': widget.conducteurLetter ?? 'A',
      'statut': 'termine',
      'dateCreation': DateTime.now(),
      'dateFinalisation': DateTime.now(),
      'lieu': data['lieu'] ?? '',
      'ville': data['ville'] ?? '',
      'dateAccident': data['date'] ?? '',
      'heureAccident': data['heure'] ?? '',
      'vehiculeSelectionne': widget.vehiculeSelectionne,
      'formulaireData': data,
      'photos': _photos,
      'source': 'constat_complet',
    };

    // Enregistrer dans la collection sinistres
    await FirebaseFirestore.instance
        .collection('sinistres')
        .add(sinistreData);

    print('‚úÖ Sinistre enregistr√© avec succ√®s');
  }

  /// üìß Envoyer le constat √† l'agence d'assurance
  Future<void> _envoyerAAgence(Map<String, dynamic> data) async {
    try {
      final user = FirebaseAuth.instance.currentUser;
      if (user == null || widget.vehiculeSelectionne == null) return;

      final agenceAssurance = widget.vehiculeSelectionne!['agenceAssurance'];
      final compagnieAssurance = widget.vehiculeSelectionne!['compagnieAssurance'];

      if (agenceAssurance == null || compagnieAssurance == null) {
        print('‚ö†Ô∏è Informations d\'agence manquantes');
        return;
      }

      // Pr√©parer les donn√©es pour l'agence
      final agenceData = {
        'conducteurId': user.uid,
        'sinistreId': widget.sinistreId,
        'agenceAssurance': agenceAssurance,
        'compagnieAssurance': compagnieAssurance,
        'typeAccident': widget.accidentType,
        'dateEnvoi': DateTime.now(),
        'statut': 'recu_agence',
        'constatData': data,
        'vehiculeInfo': widget.vehiculeSelectionne,
        'source': 'constat_mobile',
      };

      // Enregistrer dans la collection pour l'agence
      await FirebaseFirestore.instance
          .collection('sinistres_agence')
          .add(agenceData);

      print('‚úÖ Constat envoy√© √† l\'agence: $agenceAssurance');
    } catch (e) {
      print('‚ùå Erreur envoi agence: $e');
      // Ne pas bloquer la finalisation si l'envoi √©choue
    }
  }

  /// üìã Collecter toutes les donn√©es du formulaire
  Map<String, dynamic> _collectFormData() {
    final data = <String, dynamic>{};

    // Collecter toutes les valeurs des controllers
    _controllers.forEach((key, controller) {
      data[key] = controller.text;
    });

    // Ajouter les donn√©es des checkboxes et radio buttons
    data.addAll(_formData);

    return data;
  }

  /// ‚úÖ Message de succ√®s
  void _showSuccessMessage(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.green,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  /// ‚ùå Message d'erreur
  void _showErrorMessage(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: Colors.red,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  @override
  void dispose() {
    _tabController.dispose();
    _controllers.values.forEach((controller) => controller.dispose());
    super.dispose();
  }
}
