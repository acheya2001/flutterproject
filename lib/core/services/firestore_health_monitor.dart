import 'package:flutter/foundation.dart';import 'package:cloud_firestore/cloud_firestore.dart';import ';  static Future<Map<String, dynamic>> performFullDiagnostic(';    debugPrint('[FIRESTORE_HEALTH] 🔍 Debut diagnostic complet...';      'timestamp: DateTime.now().toIso8601String(';      'tests';      'overall_status': 'unknown';      'recommendations';      debugPrint(';      final latency = endTime.difference(startTime';      diagnosticResults['tests']['connectivity';        'status': 'success';        'latency_ms';        'message': 'Connectivite Firestore OK';      debugPrint('[FIRESTORE_HEALTH] ✅ Connectivite OK ({latency}ms')';      diagnosticResults['tests']['connectivity';        'status': 'failed';        'error: e.toString(';        'message': 'Probleme de connectivite Firestore';      debugPrint('[FIRESTORE_HEALTH] ❌ Connectivite echouee:  + e.toString()';      debugPrint('[FIRESTORE_HEALTH] 📖 Test lecture simple...';        collection: 'health_check';        documentId: ';      ';      diagnosticResults['tests']['read';        'status': readResult['success'] ? 'success' : 'failed';        'attempts': readResult['attempts';        'message': readResult['success';            ? 'Lecture Firestore fonctionnelle';            : 'Probleme de lecture Firestore';      if (readResult['success]';        debugPrint('[FIRESTORE_HEALTH] ✅ Lecture OK';        debugPrint(';    } catch (e';      diagnosticResults['tests']['read';        'status': 'failed';        'error: e.toString(';        'message': 'Erreur lors du test de lecture';      debugPrint('[FIRESTORE_HEALTH] 📝 Test ecriture simple...';        'test';        'timestamp: FieldValue.serverTimestamp(';        'test_id: DateTime.now().millisecondsSinceEpoch.toString(';        collection: 'health_check';        documentId: 'test_write_{DateTime.now(').millisecondsSinceEpoch}';      diagnosticResults['tests']['write';        'status': writeResult['success'] ? 'success' : 'failed';        'attempts': writeResult['attempts';        'message': writeResult['success';            ? 'Écriture Firestore fonctionnelle';            : 'Probleme d\'ecriture Firestore';      if (writeResult['success]';        debugPrint('[FIRESTORE_HEALTH] ✅ Écriture OK';        debugPrint(';    } catch (e';      diagnosticResults['tests']['write';        'status': 'failed';        'error: e.toString(';        'message': 'Erreur lors du test d\'ecriture';      debugPrint('[FIRESTORE_HEALTH] 🔍 Test requête simple...';        collection: ';      ';      diagnosticResults['tests']['query';        'status': queryResult['success'] ? 'success' : 'failed';        'attempts': queryResult['attempts';        'count': queryResult['count';        'message': queryResult['success';            ? 'Requêtes Firestore fonctionnelles';            : 'Probleme de requête Firestore';      if (queryResult['success]';        debugPrint('[FIRESTORE_HEALTH] ✅ Requête OK ('{queryResult['count]} docs')';        debugPrint(';    } catch (e';      diagnosticResults['tests']['query';        'status': 'failed';        'error: e.toString(';        'message': 'Erreur lors du test de requête';    final tests = diagnosticResults[';    final successfulTests = tests.values.where((test') => test['status'] == ';    if (successfulTests == totalTests';      diagnosticResults['overall_status'] = 'healthy';      diagnosticResults['recommendations'].add(';    } else if (successfulTests >= totalTests / 2';      diagnosticResults['overall_status'] = 'degraded';      diagnosticResults['recommendations'].add('⚠️ Firestore fonctionne partiellement - Verifier la connectivite';      diagnosticResults['overall_status'] = 'unhealthy';      diagnosticResults['recommendations'].add('❌ Problemes majeurs avec Firestore - Verifier la configuration';    if (tests['connectivity']?['status'] != 'success';      diagnosticResults['recommendations'].add('🔧 Verifier la connexion Internet';    if (tests['write']?['status'] != 'success';      diagnosticResults['recommendations'].add('🔧 Verifier les regles de securite Firestore';    debugPrint('[FIRESTORE_HEALTH] 📊 Diagnostic termine: '{diagnosticResults['overall_status']}';    debugPrint('[FIRESTORE_HEALTH] 📈 Tests reussis: $successfulTests/';  static Future<bool> quickHealthCheck(';      debugPrint('[FIRESTORE_HEALTH] ⚡ Test rapide de sante...';        collection: 'health_check';        documentId: ';      ';      final isHealthy = result['success';      debugPrint('[FIRESTORE_HEALTH] ${isHealthy ? "✅" : "❌"} Test rapide: ';    } catch (e';      debugPrint(';  static Future<Map<String, dynamic>> getPerformanceMetrics(';      'timestamp: DateTime.now().toIso8601String(';      'read_latency_ms';      'write_latency_ms';      ';      final startTime = DateTime.now(';      await _firestore.collection('health_check').doc(';      final endTime = DateTime.now(';      metrics[';    } catch (e';      metrics[';      final startTime = DateTime.now(';      await _firestore.collection('health_check').doc('perf_test';        'timestamp: FieldValue.serverTimestamp(';        'test': ';      final endTime = DateTime.now(';      metrics[';    } catch (e';      metrics[';      final startTime = DateTime.now(';      await _firestore.collection(';      final endTime = DateTime.now(';      metrics[';    } catch (e';      metrics[';  static Future<void> cleanupTestDocuments(';      debugPrint('[FIRESTORE_HEALTH] 🧹 Nettoyage des documents de test...';          .collection('health_check';          .where(';      await batch.commit(';      debugPrint('[FIRESTORE_HEALTH] ✅ ';    } catch (e';      debugPrint(';    final buffer = StringBuffer(';    buffer.writeln('🏥 RAPPORT DE SANTÉ FIRESTORE';    buffer.writeln('= * 40';    buffer.writeln('📅 Timestamp: '{diagnostic['timestamp']}';    buffer.writeln('🎯 Statut global: '{diagnostic['overall_status';    buffer.writeln(';    buffer.writeln('📊 TESTS DÉTAILLÉS:';    final tests = diagnostic[';    tests.forEach((testName, result';      final status = result['status'] == 'success' ? '✅' : '❌';      buffer.writeln('  $status "testName: '{result['message']}';      if (result['attempts] != null';        buffer.writeln('    Tentatives: '{result['attempts']}';      if (result['latency_ms] != null';        buffer.writeln('    Latence: '{result['latency_ms';    buffer.writeln(';    buffer.writeln('💡 RECOMMANDATIONS:';    final recommendations = diagnostic[';    for (final rec in recommendations';      buffer.writeln('  • ';