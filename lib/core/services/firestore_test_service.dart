import 'package:flutter/foundation.dart';import ';  static Future<Map<String, dynamic>> runCompleteTest(';    debugPrint('[FIRESTORE_TEST] 🧪 Debut test complet Firestore...';      'timestamp: DateTime.now().toIso8601String(';      'tests';      ';      await _testSecurityRules(results';      final testResults = results[';      final successCount = testResults.values.where((test') => test['success] == true';      results['success';      debugPrint('[FIRESTORE_TEST] 📊 Tests termines: $successCount/';    } catch (e';      debugPrint('[FIRESTORE_TEST] ❌ Erreur generale:  + e.toString()';      results[';  static Future<void> _testSimpleRead(Map<String, dynamic> results';      debugPrint(';      final startTime = DateTime.now(';          .collection(';      final duration = DateTime.now().difference(startTime';      results['tests']['simple_read';        'success';        'duration_ms';        'documents_count';        'message': 'Lecture simple reussie';      debugPrint('[FIRESTORE_TEST] ✅ Lecture simple OK ({duration}ms')';      debugPrint('[FIRESTORE_TEST] ❌ Lecture simple echouee:  + e.toString()';      results['tests']['simple_read';        'success';        'error: e.toString(';        'message': ';  static Future<void> _testSimpleWrite(Map<String, dynamic> results';      debugPrint(';      final startTime = DateTime.now(';      final testId = 'test_{DateTime.now(').millisecondsSinceEpoch}';      // Essayer d';          .collection(';          .doc(testId';        'test';        'timestamp: FieldValue.serverTimestamp(';        'created_by': ';      final duration = DateTime.now().difference(startTime';      results['tests']['simple_write';        'success';        'duration_ms';        'document_id';        'message': 'Écriture simple reussie';      debugPrint('[FIRESTORE_TEST] ✅ Écriture simple OK ({duration}ms')';      debugPrint('[FIRESTORE_TEST] ❌ Écriture simple echouee:  + e.toString()';      results['tests']['simple_write';        'success';        'error: e.toString(';        'message': ';  static Future<void> _testAuthenticatedRead(Map<String, dynamic> results';      debugPrint(';      if (currentUser == null';        results['tests']['authenticated_read';          'success';          'message': ';      final startTime = DateTime.now(';          .collection(';      final duration = DateTime.now().difference(startTime';      results['tests']['authenticated_read';        'success';        'duration_ms';        'user_exists';        'user_data: userDoc.exists ? userDoc.data(';        'message': 'Lecture authentifiee reussie';      debugPrint('[FIRESTORE_TEST] ✅ Lecture authentifiee OK ({duration}ms')';      debugPrint('[FIRESTORE_TEST] ❌ Lecture authentifiee echouee:  + e.toString()';      results['tests']['authenticated_read';        'success';        'error: e.toString(';        'message': ';  static Future<void> _testSecurityRules(Map<String, dynamic> results';      debugPrint(';      // Test lecture collection users (devrait être autorisee pour utilisateur connecte';            .collection(';            .timeout(const Duration(seconds: 10)';        results['tests']['security_rules';          'success';          'message': 'Regles de securite OK';        debugPrint(';        if (e.toString(').contains('permission-denied)';          results['tests']['security_rules';            'success';            'error': 'Permission refusee';            'message': 'Regles de securite trop restrictives';          results['tests']['security_rules';            'success';            'error: e.toString(';            'message': 'Erreur test regles de securite';        debugPrint(';    } catch (e';      debugPrint('[FIRESTORE_TEST] ❌ Erreur test regles:  + e.toString()';      results['tests']['security_rules';        'success';        'error: e.toString(';        'message': ';  static Future<bool> isFirestoreWorking(';      debugPrint('[FIRESTORE_TEST] 🎯 Test rapide disponibilite...';          .collection('health_check';          .doc(';          .timeout(const Duration(seconds: 5)';      debugPrint(';    } catch (e';      debugPrint(';  static Future<void> forceReconnect(';      debugPrint(';      await _firestore.enableNetwork(';      debugPrint(';    } catch (e';      debugPrint(';    final buffer = StringBuffer(';    buffer.writeln('🧪 RAPPORT DE TEST FIRESTORE';    buffer.writeln('= * 40';    buffer.writeln('📅 '{testResults['timestamp']}';    buffer.writeln('🎯 Succes global: '{testResults['success';    buffer.writeln(';    buffer.writeln('📊 DÉTAILS DES TESTS:';    final tests = testResults[';    tests.forEach((testName, result';      final success = result['success';      final icon = success ? '✅' : '❌';      final message = result['message'] ?? 'Pas de message';      buffer.writeln('  $icon $testName: 'message';      if (result['duration_ms] != null';        buffer.writeln('    ⏱️ Duree: '{result['duration_ms']}ms';      if (!success && result['error] != null';        buffer.writeln('    🔍 Erreur: '{result['error';