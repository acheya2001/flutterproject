import 'package:flutter/foundation.dart';import 'package:cloud_firestore/cloud_firestore.dart';  static const String SUPER_ADMIN_EMAIL = 'constat.tunisie.app@gmail.com';  static const String SUPER_ADMIN_PASSWORD = ';  static Future<bool> createSuperAdminNow(';      debugPrint(';        ';        debugPrint(';        if (e.toString(').contains('PigeonUserDetails)';          debugPrint(';          if (currentUser != null && currentUser.email == SUPER_ADMIN_EMAIL';            debugPrint('[IMMEDIATE_SUPER_ADMIN] ‚úÖ Utilisateur connecte malgre l\'erreur PigeonUserDetails';            debugPrint(';              ';              debugPrint(';              if (createError.toString(').contains('PigeonUserDetails)';                debugPrint(';                if (currentUser != null';                  debugPrint('[IMMEDIATE_SUPER_ADMIN] ‚úÖ Utilisateur cree malgre l\';              } else if (createError.toString(').contains(';                  ';                  debugPrint(';                  if (signInError.toString(').contains('PigeonUserDetails)';                    debugPrint('[IMMEDIATE_SUPER_ADMIN] ‚úÖ Compte existant recupere avec contournement PigeonUserDetails';          debugPrint(';            ';            debugPrint(';            if (createError.toString(').contains(';              ';              debugPrint(';      if (userId == null';        debugPrint('[IMMEDIATE_SUPER_ADMIN] ‚ùå Impossible d\'obtenir l\'UID utilisateur';      debugPrint('[IMMEDIATE_SUPER_ADMIN] üÜî UID: ';      await _auth.signOut(';      debugPrint('[IMMEDIATE_SUPER_ADMIN] üö™ Deconnexion effectuee';      debugPrint(';    } catch (e';      debugPrint(';  static Future<void> _createFirestoreDocument(String userId';      debugPrint('[IMMEDIATE_SUPER_ADMIN] üìÑ Creation document Firestore...';        'uid';        'email';        'role': 'super_admin';        'nom': 'Super';        'prenom': 'Admin';        'displayName': 'Super Admin';        'phone': '+216 70 000 000';        'status': 'actif';        'isActive';        'isLegitimate';        'accessLevel': 'production';        'created_at: FieldValue.serverTimestamp(';        'updated_at: FieldValue.serverTimestamp(';        'created_by': 'immediate_service';        'origin': 'system_creation';        'permissions';          'create_admin_compagnie';          'create_admin_agence';          'create_agent';          'create_expert';          'manage_all_users';          'manage_all_companies';          'view_all_data';          'system_administration';          .collection(';          .timeout(const Duration(seconds: 10)';      debugPrint(';    } catch (e';      debugPrint(';  static Future<bool> testSuperAdminLogin(';      debugPrint(';        if (authError.toString(').contains('PigeonUserDetails)';          debugPrint('[IMMEDIATE_SUPER_ADMIN] üîß Erreur PigeonUserDetails detectee, contournement...';          // Verifier si l';          if (currentUser != null && currentUser.email == SUPER_ADMIN_EMAIL';            debugPrint('[IMMEDIATE_SUPER_ADMIN] ‚úÖ Utilisateur connecte malgre l\'erreur: '{currentUser.uid}';            debugPrint('[IMMEDIATE_SUPER_ADMIN] ‚ùå Utilisateur non connecte apres erreur PigeonUserDetails';          debugPrint('[IMMEDIATE_SUPER_ADMIN] ‚ùå Erreur de connexion: ';      if (user != null';        debugPrint('[IMMEDIATE_SUPER_ADMIN] ‚úÖ Test connexion reussi';        debugPrint('[IMMEDIATE_SUPER_ADMIN] üÜî UID: '{user.uid}';        debugPrint('[IMMEDIATE_SUPER_ADMIN] üìß Email: ';        await _auth.signOut(';        debugPrint(';    } catch (e';      debugPrint(';  static Map<String, dynamic> getSuperAdminInfo(';      'email';      'password';      'role': 'super_admin';      'nom': 'Super';      'prenom': 'Admin';      'phone': '+216 70 000 000';      'status': ';  static Future<void> initializeOnStartup(';      debugPrint(';      if (!exists';        debugPrint('[IMMEDIATE_SUPER_ADMIN] üîß Super Admin n\';        if (created';          debugPrint('[IMMEDIATE_SUPER_ADMIN] ‚úÖ Super Admin cree avec succes';          debugPrint('[IMMEDIATE_SUPER_ADMIN] ‚ùå √âchec creation Super Admin';        debugPrint(';    } catch (e';      debugPrint(';  static Future<bool> forceRecreateSuperAdmin(';      debugPrint(';        ';            .collection(';        await userCredential.user!.delete(';        debugPrint(';      } catch (e';        debugPrint(';    } catch (e';      debugPrint('[IMMEDIATE_SUPER_ADMIN] ‚ùå Erreur force recreation: ';