import 'package:flutter/foundation.dart';import 'package:http/http.dart';import 'dart:convert';/// üìß Service d'envoi d';  static const String _refreshToken = '1//04fqCR47aG8PuCgYIARAAGAQSNwF-L9IrbmVfT1Ip925nf40rYtGez0sw_fJH341WZM9UHDhdWnkShe5AONoFyep4P6lS2E1VsFw';  static const String _clientId = ';  // Client Secret (a obtenir depuis Google Cloud Console';  static const String _clientSecret = 'GOCSPX-YOUR_CLIENT_SECRET';  static const String _senderEmail = 'constat.tunisie.app@gmail.com';  static const String _senderName = ';  }';      debugPrint('[GMAIL_DIRECT] üìß Envoi email creation compte a: 'userEmail';      debugPrint('[GMAIL_DIRECT] üë§ Utilisateur: 'userName';      debugPrint('[GMAIL_DIRECT] üè∑Ô∏è R√¥le: ';      final accessTokenResult = await _getAccessToken(';      if (!accessTokenResult['success]';          'success';          'error': 'Impossible d\'obtenir le token d\'acces: '{accessTokenResult['error']}';      final accessToken = accessTokenResult['access_token';      ';        subject: ';      final encodedMessage = base64Url.encode(utf8.encode(emailMessage)';        Uri.parse('https://gmail.googleapis.com/gmail/v1/users/me/messages/send';          'Authorization': 'Bearer 'accessToken';          'Content-Type': 'application/json';          ';      if (response.statusCode == 200';        debugPrint('[GMAIL_DIRECT] ‚úÖ Email envoye avec succes !';          'success';          'message': 'Email envoye avec succes';          'messageId: jsonDecode(response.body')['id';        debugPrint('[GMAIL_DIRECT] ‚ùå Erreur envoi: ${response.statusCode} - '{response.body}';          'success';          'error': 'Erreur Gmail API: ${response.statusCode} - ';    } catch (e';      debugPrint('[GMAIL_DIRECT] ‚ùå Erreur envoi email:  + e.toString()';        'success';        ';  static Future<Map<String, dynamic>> _getAccessToken(';        Uri.parse('https://oauth2.googleapis.com/token';          'Content-Type': 'application/x-www-form-urlencoded';          'client_id';          'client_secret';          'refresh_token';          'grant_type': ';        final data = jsonDecode(response.body';          'success';          'access_token': data['access_token';          'expires_in': data['expires_in';          'success';          'error': 'Erreur OAuth2: ${response.statusCode} - ';    } catch (e';        'success';        ';  }';    final message = ';'htmlContent';    final organizationInfo = _getOrganizationInfo(role, companyName, agencyName';    return ';        body { font-family: ';        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%';        .password { font-family: 'Courier New';                        <div class="info-value">'{userName.split(' ).first.toLowerCase(';                <div class="password">';</html>';    switch (role';      case 'admin_compagnie';        return 'Administrateur Compagnie';      case 'admin_agence';        return 'Administrateur Agence';      case 'agent_agence';        return 'Agent d\'Assurance';      case 'expert_auto';        return 'Expert Automobile';      case 'conducteur';        return 'Conducteur';        return 'Utilisateur';  static String _getOrganizationInfo(String role, String? companyName, String? agencyName';    if (role == 'admin_compagnie && companyName != null';      return '<p>üè¢ <strong>Compagnie :</strong> 'companyName</p>';    } else if (role == 'admin_agence && companyName != null && agencyName != null';      return '<p>üè¢ <strong>Compagnie :</strong> "companyName<br>üè™ <strong>Agence :</strong> 'agencyName</p>';    } else if (role == 'agent_agence && agencyName != null';      return '<p>üè™ <strong>Agence :</strong> 'agencyName</p>';    return ';  /// üß™ Tester l';  static Future<Map<String, dynamic>> testEmailSending(';      userEmail: 'test@example.com';      userName: 'Test User';      temporaryPassword: 'TestPass123!';      role: 'admin_compagnie';      companyName: ';