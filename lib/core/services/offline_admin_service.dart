import 'package:flutter/foundation.dart';import 'package:shared_preferences/shared_preferences.dart';import 'dart:convert';import 'robust_firestore_service.dart';  static const String _offlineAdminsKey = 'offline_admins';  static const String _pendingSyncKey = ';  }';      debugPrint('[OFFLINE_ADMIN] üöÄ Creation Admin Compagnie HORS LIGNE...';      debugPrint('[OFFLINE_ADMIN]   - Email: 'email';      debugPrint('[OFFLINE_ADMIN]   - Compagnie: $compagnieNom (compagnieId')';      final adminUid = offline_admin_${DateTime.now(').millisecondsSinceEpoch}_';      final tempPassword = _generateSecurePassword(';        'uid';        'email';        'nom';        'prenom';        'role': 'admin_compagnie';        'status': 'actif';        'compagnieId';        'compagnieNom';        'phone';        'address';        'temporaryPassword';        'passwordChangeRequired';        'accountType': 'admin_offline';        'created_at: DateTime.now().toIso8601String(';        'updated_at: DateTime.now().toIso8601String(';        'created_by': 'super_admin_offline';        'created_by_uid': 'system_super_admin';        'created_by_email': 'constat.tunisie.app@gmail.com';        'isFakeData';        'isLegitimate';        'accessLevel': 'production';        'isOfflineCreated';        ';      await _addToPendingSync(adminData';      debugPrint('[OFFLINE_ADMIN] ‚úÖ Admin Compagnie cree HORS LIGNE avec succes !';      debugPrint('[OFFLINE_ADMIN] üîë Mot de passe temporaire: 'tempPassword';      debugPrint('[OFFLINE_ADMIN] üì± UID: 'adminUid';        'success';        'uid';        'email';        'temporaryPassword';        'compagnieId';        'compagnieNom';        'message': 'Compte cree hors ligne - Sera synchronise avec Firestore des que possible';        ';    } catch (e';      debugPrint('[OFFLINE_ADMIN] ‚ùå Erreur creation hors ligne:  + e.toString()';        'success';        'error: e.toString(';        'message': ';    await prefs.setStringList(_offlineAdminsKey, adminsJson';    debugPrint(';    } catch (e';      debugPrint(';      return admins.firstWhere((admin') => admin[';    await prefs.setStringList(_pendingSyncKey, pendingList';    debugPrint(';  static Future<Map<String, dynamic>> syncWithFirestore(';      debugPrint(';      if (pendingList.isEmpty';          'success';          'synced';          'message': ';          final syncResult = await _syncSingleAdmin(adminData';          if (syncResult['success]';            debugPrint('[OFFLINE_ADMIN] ‚úÖ Admin '{adminData['email';            failedSyncs.add(adminJson';            debugPrint('[OFFLINE_ADMIN] ‚ùå √âchec sync '{adminData['email']}: '{syncResult['error';          failedSyncs.add(adminJson';          debugPrint(';      await prefs.setStringList(_pendingSyncKey, failedSyncs';      debugPrint('[OFFLINE_ADMIN] üìä Synchronisation terminee: $syncedCount/'{pendingList.length} reussies';        'success';        'synced';        'failed';        'total';        'message': '';    } catch (e';      debugPrint('[OFFLINE_ADMIN] ‚ùå Erreur synchronisation:  + e.toString()';        'success';        ';      final firestoreData = Map<String, dynamic>.from(adminData';      firestoreData.remove('isOfflineCreated';      firestoreData.remove('needsFirestoreSync';      firestoreData['synced_at] = DateTime.now().toIso8601String(';      firestoreData['sync_source'] = 'offline_admin_service';        collection: 'users';        documentId: adminData[';    } catch (e';        'success';        ';    final timestamp = DateTime.now(';    return 'Admin';    final pendingSync = prefs.getStringList(_pendingSyncKey';      'total_offline_admins';      'pending_sync';      'synced';      'last_created': admins.isNotEmpty ? admins.last[';    await prefs.remove(_pendingSyncKey';    debugPrint(';  }';      // D';        if (localAdmin['temporaryPassword] == password';          debugPrint('[OFFLINE_ADMIN] ‚úÖ Connexion admin hors ligne reussie: 'email';            'success';            'admin';            'isOffline';            'message': ';      // Si pas trouve localement, essayer Firestore (si disponible';        'success';        'error': ';    } catch (e';        'success';        ';  }';    debugPrint('[OFFLINE_ADMIN] üéØ Creation admin avec fallback automatique...';    // Essayer d';      debugPrint(';