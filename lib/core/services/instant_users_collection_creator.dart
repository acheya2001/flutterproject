import 'package:cloud_firestore/cloud_firestore.dart';import ';  static Future<Map<String, dynamic>> createUsersCollectionNow(';    debugPrint('[INSTANT_USERS] üöÄ === CR√âATION IMM√âDIATE COLLECTION USERS ===';      'success';      'created_admins';      'errors';      'collection_created';          'id': 'admin_star_2025';          'email': 'admin.star@assurance.tn';          'compagnieId': 'star-assurance';          'compagnieNom': 'STAR Assurance';          'id': 'admin_comar_2025';          'email': 'admin.comar@assurance.tn';          'compagnieId': 'comar-assurance';          'compagnieNom': 'COMAR Assurance';          'id': 'admin_gat_2025';          'email': 'admin.gat@assurance.tn';          'compagnieId': 'gat-assurance';          'compagnieNom': 'GAT Assurance';          'id': 'admin_maghrebia_2025';          'email': 'admin.maghrebia@assurance.tn';          'compagnieId': 'maghrebia-assurance';          'compagnieNom': 'Maghrebia Assurance';      debugPrint('[INSTANT_USERS] üìù Creation de ';      for (int i = 0; i < results.length; i++';        if (adminResult['success]';          (result['created_admins] as List<String>').add(adminData['email]!';          debugPrint('[INSTANT_USERS] ‚úÖ Admin cree: '{adminData['email']}';          (result['errors] as List<String>').add('‚ùå '{adminData['email']}: '{adminResult['error']}';          debugPrint('[INSTANT_USERS] ‚ùå √âchec: '{adminData['email']} - '{adminResult['error';      final collectionExists = await _verifyUsersCollectionExists(';      result['collection_created';      final successCount = (result['created_admins] as List';      result['success';      debugPrint('[INSTANT_USERS] üìä Resultat: $successCount/'{adminsToCreate.length} admins crees';      debugPrint('[INSTANT_USERS] üìã Collection users: '{collectionExists ? 'CR√â√âE' : '√âCHEC';    } catch (e';      debugPrint('[INSTANT_USERS] ‚ùå Erreur globale:  + e.toString()';      (result['errors] as List<String>').add(';  static Future<Map<String, dynamic>> _createSingleAdmin(Map<String, String> adminData';        'uid': adminData['id';        'email': adminData['email';        'nom': 'Admin';        'prenom': adminData['compagnieNom';        'role': 'admin_compagnie';        'status': 'actif';        'compagnieId': adminData['compagnieId';        'compagnieNom': adminData['compagnieNom';        'created_at: FieldValue.serverTimestamp(';        'created_by': 'instant_creator';        'source': 'auto_creation';        'isLegitimate';        'isActive';        'password_reset_required';        'last_login';          .collection('users';          .doc(adminData[';          .timeout(const Duration(seconds: 10)';      return {'success': true, 'adminId': adminData[';    } catch (e';      return {'success': false, ';  static Future<bool> _verifyUsersCollectionExists(';          .collection(';    } catch (e';      debugPrint(';  static Future<void> cleanupTestAdmins(';      debugPrint('[INSTANT_USERS] üßπ Nettoyage admins de test...';          .collection('users';          .where('source', isEqualTo: ';      await batch.commit(';      debugPrint('[INSTANT_USERS] ‚úÖ ';    } catch (e';      debugPrint(';  static Future<Map<String, dynamic>> getUsersCollectionStatus(';          .collection(';          .where((doc) => doc.data(')['role'] == ';          .toList(';        'exists';        'total_users';        'admin_compagnies';        ';            .map((doc) => doc.data(')[';    } catch (e';        'exists';        'error: e.toString(';        'total_users';        ';  static Future<bool> createMinimalAdminToInitCollection(';      debugPrint('[INSTANT_USERS] ‚ö° Creation admin minimal pour initialiser...';        'uid': 'init_admin_{DateTime.now(').millisecondsSinceEpoch}';        'email': 'init@admin.temp';        'role': 'admin_compagnie';        'status': 'temp';        'created_at: FieldValue.serverTimestamp(';        'isTemp';          .collection('users';          .doc(';          .timeout(const Duration(seconds: 5)';      debugPrint(';    } catch (e';      debugPrint('[INSTANT_USERS] ‚ùå √âchec initialisation: ';