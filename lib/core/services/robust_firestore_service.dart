import 'package:flutter/foundation.dart';import ';    while (attempt < maxRetries';        debugPrint('[ROBUST_FIRESTORE] 📝 Tentative ${attempt + 1}/$maxRetries - Écriture: $collection/';            .set(data';        debugPrint('[ROBUST_FIRESTORE] ✅ Écriture reussie apres {attempt + 1} tentative(s')';          'success';          'attempts';          'documentId';          'message': ';      } catch (e';        debugPrint('[ROBUST_FIRESTORE] ❌ Tentative $attempt echouee:  + e.toString()';        // Verifier si c';          debugPrint('[ROBUST_FIRESTORE] ⏳ Attente ';          ';        debugPrint('[ROBUST_FIRESTORE] 💥 Échec definitif apres 'attempt tentatives';          'success';          'attempts';          'error: e.toString(';          'message': 'Impossible d\'ecrire le document apres 'attempt tentatives';      'success';      'attempts';      'error': 'Max retries reached';      'message': ';    while (attempt < maxRetries';        debugPrint('[ROBUST_FIRESTORE] 📖 Tentative ${attempt + 1}/$maxRetries - Lecture: $collection/';            .get(';        debugPrint('[ROBUST_FIRESTORE] ✅ Lecture reussie apres {attempt + 1} tentative(s')';          'success';          'exists';          'data: doc.exists ? doc.data(';          ';      } catch (e';        debugPrint(';        if (_isTemporaryError(e) && attempt < maxRetries';          debugPrint('[ROBUST_FIRESTORE] ⏳ Attente ';          currentDelay = Duration(milliseconds: (currentDelay.inMilliseconds * 1.2).round()';          'success';          'attempts';          'error: e.toString(';      'success';      'attempts';      'error': ';    while (attempt < maxRetries';        debugPrint('[ROBUST_FIRESTORE] 🔍 Tentative ${attempt + 1}/$maxRetries - Requête: ';        final snapshot = await query.get(';        debugPrint('[ROBUST_FIRESTORE] ✅ Requête reussie: '{snapshot.docs.length} documents';          'success';          'documents: snapshot.docs.map((doc';            ';          }).toList(';          'count';          ';      } catch (e';        debugPrint(';          currentDelay = Duration(milliseconds: (currentDelay.inMilliseconds * 1.2).round()';          'success';          'attempts';          'error: e.toString(';          'documents';          'count';      'success';      'attempts';      'error': 'Max retries reached for query';      'documents';      ';    while (attempt < maxRetries';        debugPrint('[ROBUST_FIRESTORE] 🔄 Tentative ${attempt + 1}/$maxRetries - Mise a jour: $collection/';            .update(data';        debugPrint('[ROBUST_FIRESTORE] ✅ Mise a jour reussie apres {attempt + 1} tentative(s')';          'success';          'attempts';          'message': ';          currentDelay = Duration(milliseconds: (currentDelay.inMilliseconds * 1.2).round()';          'success';          'attempts';          'error: e.toString(';      'success';      'attempts';      'error': ';    final errorString = error.toString().toLowerCase(';    return errorString.contains('unavailable';           errorString.contains('deadline exceeded';           errorString.contains('timeout';           errorString.contains('network';           errorString.contains('connection';           errorString.contains('cancelled';           errorString.contains(';      final startTime = DateTime.now(';          .collection('health_check';          .doc(';      final latency = endTime.difference(startTime';        'status': 'healthy';        'latency_ms';        ';    } catch (e';        'status': 'unhealthy';        'error: e.toString(';        ';    while (attempt < maxRetries';        debugPrint('[ROBUST_FIRESTORE] 🔧 $operationName - Tentative ${attempt + 1}/';        final result = await operation(';        debugPrint('[ROBUST_FIRESTORE] ✅ $operationName reussi apres {attempt + 1} tentative(s')';          debugPrint('[ROBUST_FIRESTORE] ⏳ $operationName - Retry dans ';          currentDelay = Duration(milliseconds: (currentDelay.inMilliseconds * 1.3).round()';        debugPrint('[ROBUST_FIRESTORE] 💥 $operationName echoue definitivement:  + e.toString()';    throw Exception('';