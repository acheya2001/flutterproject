import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';import '../utils/constants.dart';import '../../features/constat/models/session_constat_model.dart';import '../../features/constat/models/conducteur_session_info.dart';import '../../features/conducteur/models/conducteur_info_model.dart';import '../../features/conducteur/models/vehicule_accident_model.dart';import '../../features/conducteur/models/assurance_info_model.dart';import '../../features/constat/models/proprietaire_info.dart';import '../../features/constat/models/temoin_model.dart';/// avec gestion d';      debugPrint('[FirestoreSession] === CR√âATION SESSION COLLABORATIVE ===';        'sessionCode';        'dateAccident';        'lieuAccident';        'coordonnees';        'nombreConducteurs';        'createdBy';        'createdAt';        'updatedAt';        'status': session.status.toString().split('.';        'invitationsSent';        'validationStatus';      debugPrint('[FirestoreSession] ‚úÖ Session cr√©√©e: $sessionId';        'sessionId';        'createdAt';        'isActive';      debugPrint('[FirestoreSession] ‚úÖ Code de session mapp√©: ${session.sessionCode}';            .collection('conducteurs';        debugPrint('[FirestoreSession] ‚úÖ Conducteur $position cr√©√©';      debugPrint('[FirestoreSession] ‚ùå Erreur cr√©ation session: $e';      debugPrint('[FirestoreSession] === RECHERCHE SESSION PAR CODE ===';      debugPrint('[FirestoreSession] Code recherch√©: $sessionCode';      // 1. R√©cup√©rer l';        debugPrint('[FirestoreSession] ‚ùå Code de session non trouv√©';      final sessionId = codeDoc.data()!['sessionId';      debugPrint('[FirestoreSession] ‚úÖ Session ID trouv√©: $sessionId';        debugPrint('[FirestoreSession] ‚ùå Session non trouv√©e';          .collection('conducteurs';        sessionCode: sessionData['sessionCode';        dateAccident: (sessionData['dateAccident';        lieuAccident: sessionData['lieuAccident';        coordonnees: sessionData['coordonnees';        nombreConducteurs: sessionData['nombreConducteurs';        createdBy: sessionData['createdBy';        createdAt: (sessionData['createdAt';        updatedAt: (sessionData['updatedAt';          (e) => e.toString().split('.').last == sessionData['status';        invitationsSent: List<String>.from(sessionData['invitationsSent';        validationStatus: Map<String, bool>.from(sessionData['validationStatus';      debugPrint('[FirestoreSession] ‚úÖ Session r√©cup√©r√©e avec succ√®s';      debugPrint('[FirestoreSession] ‚ùå Erreur r√©cup√©ration session: $e';      debugPrint('[FirestoreSession] === REJOINDRE SESSION ===';      debugPrint('[FirestoreSession] Code: $sessionCode, User: $userId';        throw Exception('Session non trouv√©e';        throw Exception('Aucune position disponible dans cette session';          .collection('conducteurs';        'userId';        'hasJoined';        'joinedAt';      debugPrint('[FirestoreSession] ‚úÖ Conducteur rejoint position: $positionDisponible';      debugPrint('[FirestoreSession] ‚ùå Erreur rejoindre session: $e';  /// üíæ Sauvegarde les donn√©es d';      debugPrint('[FirestoreSession] === SAUVEGARDE DONN√âES CONDUCTEUR ===';      debugPrint('[FirestoreSession] Session: $sessionId, Position: $position';        'conducteur';        'vehicule';        'assurance';        'isProprietaire';        'proprietaire';        'circonstances';        'degatsApparents';        'temoins';        'photosAccident';        'photoPermis';        'photoCarteGrise';        'photoAttestation';        'signature';        'observations';        'isCompleted';        'completedAt';        'updatedAt';          .collection('conducteurs';        'validationStatus.$position';        'updatedAt';      debugPrint('[FirestoreSession] ‚úÖ Donn√©es conducteur sauvegard√©es';      debugPrint('[FirestoreSession] ‚ùå Erreur sauvegarde: $e';        sessionDoc.data()!['validationStatus';      final nombreConducteurs = sessionDoc.data()!['nombreConducteurs';      final positions = ['A', 'B', 'C', 'D', 'E', 'F';          'status': SessionStatus.completed.toString().split('.';          'completedAt';      debugPrint('[FirestoreSession] ‚ùå Erreur v√©rification: $e';  /// üìã R√©cup√®re les sessions d';      debugPrint('[FirestoreSession] === R√âCUP√âRATION SESSIONS UTILISATEUR ===';      // Sessions cr√©√©es par l';          .where('createdBy';          .orderBy('createdAt';      // Sessions o√π l';        if (sessionDoc.data()['createdBy';            .collection('conducteurs';            .where('userId';      debugPrint('[FirestoreSession] ‚úÖ ${sessions.length} sessions trouv√©es';      debugPrint('[FirestoreSession] ‚ùå Erreur r√©cup√©ration sessions: $e';          .collection('conducteurs';        sessionCode: sessionData['sessionCode';        dateAccident: (sessionData['dateAccident';        lieuAccident: sessionData['lieuAccident';        coordonnees: sessionData['coordonnees';        nombreConducteurs: sessionData['nombreConducteurs';        createdBy: sessionData['createdBy';        createdAt: (sessionData['createdAt';        updatedAt: (sessionData['updatedAt';          (e) => e.toString().split('.').last == sessionData['status';        invitationsSent: List<String>.from(sessionData['invitationsSent';        validationStatus: Map<String, bool>.from(sessionData['validationStatus';      debugPrint('[FirestoreSession] ‚ùå Erreur construction session: $e';