import 'dart:async';import 'package:flutter/foundation.dart';import 'package:flutter/material.dart';import 'package:flutter_local_notifications/flutter_local_notifications.dart';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:timezone/timezone.dart';import 'package:timezone/data/latest.dart';import '../../features/vehicule/models/vehicule_model.dart';import 'notification_service.dart';      debugPrint('[NotificationReminderService] Initialisation du service de rappels';          AndroidInitializationSettings('@mipmap/ic_launcher';      debugPrint('[NotificationReminderService] Service initialisé avec succès';      debugPrint('[NotificationReminderService] Erreur lors de l\'initialisation: $e';      debugPrint('[NotificationReminderService] Erreur lors de la demande de permissions: $e';    debugPrint('[NotificationReminderService] Notification tappée: ${notificationResponse.payload}';    // Ici vous pouvez naviguer vers l';    // Annuler le timer existant s';    // Calculer le temps jusqu';    // Si on est déjà passé 9h00 aujourd';    debugPrint('[NotificationReminderService] Prochaine vérification programmée dans: ${timeUntilNextCheck.inHours}h ${timeUntilNextCheck.inMinutes % 60}min';      debugPrint('[NotificationReminderService] Début de la vérification quotidienne';      final vehiculesSnapshot = await _firestore.collection('vehicules';          debugPrint('[NotificationReminderService] Erreur lors de la vérification du véhicule ${doc.id}: $e';      debugPrint('[NotificationReminderService] Vérification quotidienne terminée';      debugPrint('[NotificationReminderService] Erreur lors de la vérification quotidienne: $e';  // Vérifier l'assurance d';    debugPrint('[NotificationReminderService] Véhicule ${vehicule.immatriculation}: $daysRemaining jours restants';    // Vérifier si l'assurance a expiré aujourd';    // Vérifier si l';  // Envoyer une notification de rappel d';      const title = 'Assurance à renouveler';          ? 'L\'assurance de votre véhicule ${vehicule.immatriculation} expire demain !';          : 'L\'assurance de votre véhicule ${vehicule.immatriculation} expire dans $daysRemaining jours.';        payload: 'insurance_reminder_${vehicule.id}';      // Notification push si l';        'insurance_reminder';      debugPrint('[NotificationReminderService] Notification envoyée pour ${vehicule.immatriculation}: $daysRemaining jours restants';      debugPrint('[NotificationReminderService] Erreur lors de l\'envoi de la notification: $e';  // Envoyer une notification d';      const title = 'Assurance expirée !';      final body = 'L\'assurance de votre véhicule ${vehicule.immatriculation} a expiré aujourd\'hui. Renouvelez-la immédiatement.';        payload: 'insurance_expired_${vehicule.id}';        'insurance_expired';      debugPrint('[NotificationReminderService] Notification d\'expiration envoyée pour ${vehicule.immatriculation}';      debugPrint('[NotificationReminderService] Erreur lors de l\'envoi de la notification d\'expiration: $e';      const title = 'Assurance en retard !';      final body = 'L\'assurance de votre véhicule ${vehicule.immatriculation} est expirée depuis $daysOverdue jour(s). Renouvelez-la d\'urgence !';        payload: 'insurance_overdue_${vehicule.id}';        'insurance_overdue';      debugPrint('[NotificationReminderService] Notification de retard envoyée pour ${vehicule.immatriculation}: $daysOverdue jours de retard';      debugPrint('[NotificationReminderService] Erreur lors de l\'envoi de la notification de retard: $e';        'insurance_reminders';        'Rappels d\'assurance';        channelDescription: 'Notifications de rappel pour le renouvellement d\'assurance';        icon: '@mipmap/ic_launcher';      debugPrint('[NotificationReminderService] Erreur lors de l\'affichage de la notification locale: $e';          'type': 'insurance_reminder';          'timestamp';      debugPrint('[NotificationReminderService] Erreur lors de l\'envoi de la notification push: $e';  // Sauvegarder l';      await _firestore.collection('notification_history';        'userId';        'vehiculeId';        'type';        'title';        'body';        'daysRemaining';        'sentAt';        'read';      debugPrint('[NotificationReminderService] Erreur lors de la sauvegarde de l\'historique: $e';      debugPrint('[NotificationReminderService] Programmation des rappels pour ${vehicule.immatriculation}';          const title = 'Assurance à renouveler';              ? 'L\'assurance de votre véhicule ${vehicule.immatriculation} expire demain !';              : 'L\'assurance de votre véhicule ${vehicule.immatriculation} expire dans $i jours.';                'insurance_reminders';                'Rappels d\'assurance';                channelDescription: 'Notifications de rappel pour le renouvellement d\'assurance';            payload: 'scheduled_reminder_${vehicule.id}_$i';          debugPrint('[NotificationReminderService] Notification programmée pour le ${notificationDate.day}/${notificationDate.month}/${notificationDate.year} ($i jours avant expiration)';      debugPrint('[NotificationReminderService] Erreur lors de la programmation des rappels: $e';      debugPrint('[NotificationReminderService] Rappels annulés pour le véhicule $vehiculeId';      debugPrint('[NotificationReminderService] Erreur lors de l\'annulation des rappels: $e';  // Récupérer l';          .collection('notification_history';          .where('userId';          .orderBy('sentAt';        'id';      debugPrint('[NotificationReminderService] Erreur lors de la récupération de l\'historique: $e';          .collection('notification_history';          .update({'read';      debugPrint('[NotificationReminderService] Erreur lors du marquage comme lu: $e';    debugPrint('[NotificationReminderService] Service arrêté';}