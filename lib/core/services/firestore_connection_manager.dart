import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';import ';    if (_isOptimized';      debugPrint(';      if (!hasInternet';        debugPrint(';      final connectionWorks = await _testFirestoreConnection(';      debugPrint('[FIRESTORE_MANAGER] '{connectionWorks ? '‚úÖ' : '‚ùå'} Optimisation '{connectionWorks ? 'reussie' : 'echouee';    } catch (e';      debugPrint(';      final hasConnection = !connectivityResults.contains(ConnectivityResult.none';      debugPrint('[FIRESTORE_MANAGER] üåê Internet: '{hasConnection ? 'OK' : 'KO'} (connectivityResults')';      debugPrint(';  static Future<void> _restartFirestoreConnection(';      debugPrint(';      await Future.delayed(const Duration(seconds: 1)';      debugPrint(';    } catch (e';      debugPrint(';  static Future<void> _configureOptimalSettings(';      debugPrint('[FIRESTORE_MANAGER] ‚öôÔ∏è Configuration parametres optimaux...';      debugPrint(';    } catch (e';      debugPrint(';  static Future<bool> _testFirestoreConnection(';      debugPrint('[FIRESTORE_MANAGER] üß™ Test connexion Firestore...';      final testDoc = _firestore.collection('connection_test').doc('test';        'test';        ';        await testDoc.delete().timeout(const Duration(seconds: 3)';        debugPrint('[FIRESTORE_MANAGER] ‚úÖ Test connexion reussi';        debugPrint(';    } catch (e';      debugPrint(';    for (int attempt = 1; attempt <= maxRetries; attempt++';        debugPrint('[FIRESTORE_MANAGER] üöÄ Creation document $documentId (tentative $attempt/maxRetries')';        debugPrint('[FIRESTORE_MANAGER] ‚úÖ Document $documentId cree (tentative attempt')';        debugPrint(';        if (attempt == maxRetries';          debugPrint('[FIRESTORE_MANAGER] üí• √âchec definitif pour ';        final waitTime = Duration(seconds: attempt * 2';        debugPrint('[FIRESTORE_MANAGER] ‚è≥ Attente ';      final firestoreWorks = await _testFirestoreConnection(';        'internet';        'firestore';        'optimized';        'overall_status': hasInternet && firestoreWorks ? 'OK' : 'PROBLEM';        ';    } catch (e';        'internet';        'firestore';        'optimized';        'overall_status': 'ERROR';        'error: e.toString(';        ';  static Future<Map<String, dynamic>> createAdminsWithConnectionManager(';    debugPrint('[FIRESTORE_MANAGER] üë• === CR√âATION ADMINS AVEC GESTIONNAIRE ===';      'success';      'created_admins';      'failed_admins';      'connection_status';      final connectionOK = await optimizeAndRepairConnection(';      result[';      if (!connectionOK';        debugPrint('[FIRESTORE_MANAGER] ‚ùå Connexion non disponible';          'id': 'admin_star_connection';          'email': 'admin.star@assurance.tn';          'compagnieId': 'star-assurance';          'compagnieNom': 'STAR Assurance';          'id': 'admin_comar_connection';          'email': 'admin.comar@assurance.tn';          'compagnieId': 'comar-assurance';          'compagnieNom': 'COMAR Assurance';          'id': 'admin_gat_connection';          'email': 'admin.gat@assurance.tn';          'compagnieId': 'gat-assurance';          'compagnieNom': 'GAT Assurance';          'id': 'admin_maghrebia_connection';          'email': 'admin.maghrebia@assurance.tn';          'compagnieId': 'maghrebia-assurance';          'compagnieNom': ';      for (final admin in adminsToCreate';          'uid': admin['id';          'email': admin['email';          'nom': 'Admin';          'prenom': admin['compagnieNom';          'role': 'admin_compagnie';          'status': 'actif';          'compagnieId': admin['compagnieId';          'compagnieNom': admin['compagnieNom';          'created_at: FieldValue.serverTimestamp(';          'created_by': 'connection_manager';          'source': 'optimized_creation';          'isLegitimate';          'isActive';          collection: 'users';          documentId: admin[';        if (created';          (result['created_admins] as List<String>').add(admin['email]!';          (result['failed_admins] as List<String>').add(admin['email]!';      final successCount = (result['created_admins] as List';      result['success';      debugPrint('[FIRESTORE_MANAGER] üìä Resultat: $successCount/';    } catch (e';      debugPrint('[FIRESTORE_MANAGER] ‚ùå Erreur creation admins:  + e.toString()';      result[';