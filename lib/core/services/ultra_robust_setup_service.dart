import 'package:cloud_firestore/cloud_firestore.dart';import 'package:flutter/foundation.dart';  static Future<bool> executeUltraRobustSetup(';    debugPrint('[ULTRA_SETUP] üîç Verification forcee de l\'etat...';    debugPrint(';      if (!usersExist';        debugPrint(';        await _createAdminsWithUltraRobustMethod(';        debugPrint(';        if (adminCount < 4';          debugPrint('[ULTRA_SETUP] ‚ö†Ô∏è Seulement ';          await _createAdminsWithUltraRobustMethod(';      debugPrint(';    } catch (e';      debugPrint(';  static Future<void> _configureFirestoreOptimal(';      debugPrint(';      await _firestore.enableNetwork(';      debugPrint(';    } catch (e';      debugPrint(';  static Future<bool> _checkUsersWithMultipleStrategies(';    debugPrint('[ULTRA_SETUP] üîç Verification existence users...';          .collection(';      if (cacheSnapshot.docs.isNotEmpty';        debugPrint(';    } catch (e';      debugPrint('[ULTRA_SETUP] Cache vide:  + e.toString()';          .collection(';      if (serverSnapshot.docs.isNotEmpty';        debugPrint(';    } catch (e';      debugPrint('[ULTRA_SETUP] Serveur inaccessible:  + e.toString()';          .collection(';    } catch (e';      debugPrint(';  static Future<void> _createAdminsWithUltraRobustMethod(';        'id': 'admin_star_ultra_robust';        'email': 'admin.star@assurance.tn';        'compagnieId': 'star-assurance';        'compagnieNom': 'STAR Assurance';        'id': 'admin_comar_ultra_robust';        'email': 'admin.comar@assurance.tn';        'compagnieId': 'comar-assurance';        'compagnieNom': 'COMAR Assurance';        'id': 'admin_gat_ultra_robust';        'email': 'admin.gat@assurance.tn';        'compagnieId': 'gat-assurance';        'compagnieNom': 'GAT Assurance';        'id': 'admin_maghrebia_ultra_robust';        'email': 'admin.maghrebia@assurance.tn';        'compagnieId': 'maghrebia-assurance';        'compagnieNom': ';    for (int attempt = 1; attempt <= maxAttempts; attempt++';        debugPrint('[ULTRA_SETUP] üîÑ Tentative $attempt/$maxAttempts pour '{adminData['email']}';          'uid': adminData['id';          'email': adminData['email';          'nom': 'Admin';          'prenom': adminData['compagnieNom';          'role': 'admin_compagnie';          'status': 'actif';          'compagnieId': adminData['compagnieId';          'compagnieNom': adminData['compagnieNom';          'created_at: FieldValue.serverTimestamp(';          'created_by': 'ultra_robust_setup';          'source': 'auto_creation_v2';          'isLegitimate';          'isActive';          'setup_version': '2.0';          ';        final batch = _firestore.batch(';        final docRef = _firestore.collection('users').doc(adminData[';        await batch.commit().timeout(timeoutDuration';        debugPrint('[ULTRA_SETUP] ‚úÖ '{adminData['email']} cree (tentative attempt')';        debugPrint('[ULTRA_SETUP] ‚ùå Tentative $attempt echouee pour '{adminData['email';        if (attempt == maxAttempts';          debugPrint('[ULTRA_SETUP] üí• √âchec definitif pour '{adminData['email';  static Future<void> _createAdminFallback(Map<String, String> adminData';      debugPrint('[ULTRA_SETUP] üÜò Fallback pour '{adminData['email';      await _firestore.runTransaction((transaction';        final docRef = _firestore.collection('users').doc(adminData['id]!';          'uid': adminData['id';          'email': adminData['email';          'nom': 'Admin';          'prenom': adminData['compagnieNom';          'role': 'admin_compagnie';          'status': 'actif';          'compagnieId': adminData['compagnieId';          'compagnieNom': adminData['compagnieNom';          'created_at: FieldValue.serverTimestamp(';          'created_by': 'fallback_method';          'source': 'fallback_creation';          'isLegitimate';          ';      }).timeout(const Duration(seconds: 10)';      debugPrint('[ULTRA_SETUP] ‚úÖ Fallback reussi pour '{adminData['email';    } catch (e';      debugPrint('[ULTRA_SETUP] ‚ùå Fallback echoue pour '{adminData['email';  static Future<void> _storeForLaterRetry(Map<String, String> adminData';      debugPrint('[ULTRA_SETUP] üíæ Stockage pour retry: '{adminData['email']}';          .collection('pending_admin_creation';          .doc(adminData['id]!';            'pending_creation';            'failed_at: DateTime.now().toIso8601String(';            ';    } catch (e';      debugPrint(';    return await executeUltraRobustSetup(';  /// üß™ Tester la creation d';      debugPrint('[ULTRA_SETUP] üß™ Test creation admin...';        'uid': 'test_admin_{DateTime.now(').millisecondsSinceEpoch}';        'email': 'test@example.com';        'role': 'test';        'created_at: FieldValue.serverTimestamp(';        'test';          .collection(';          .timeout(const Duration(seconds: 5)';      debugPrint(';    } catch (e';      debugPrint(';  static Future<int> _countAdminCompagnies(';      debugPrint('[ULTRA_SETUP] üìä Comptage admins compagnies...';          .collection('users';          .where('role', isEqualTo: ';          .timeout(const Duration(seconds: 3)';      debugPrint('[ULTRA_SETUP] üìä Trouve ';    } catch (e';      debugPrint('[ULTRA_SETUP] ‚ùå Erreur comptage: ';