/// üö® Syst√®me d'exceptions personnalis√©es pour l'application
/// Permet une gestion d'erreurs plus pr√©cise et des messages utilisateur appropri√©s

/// üî• Exception de base pour l'application
abstract class AppException implements Exception {
  final String message;
  final String? code;
  final dynamic originalError;
  final StackTrace? stackTrace;

  const AppException(
    this.message, {
    this.code,
    this.originalError,
    this.stackTrace,
  });

  @override
  String toString() => 'AppException: $message${code != null ? ' (Code: $code)' : ''}';

  /// üì± Message utilisateur friendly
  String get userMessage => message;

  /// üîß Message technique pour les d√©veloppeurs
  String get technicalMessage => toString();
}

/// üåê Exceptions r√©seau
class NetworkException extends AppException {
  const NetworkException(
    String message, {
    String? code,
    dynamic originalError,
    StackTrace? stackTrace,
  }) : super(message, code: code, originalError: originalError, stackTrace: stackTrace);

  @override
  String get userMessage => 'Probl√®me de connexion internet. Veuillez v√©rifier votre connexion.';
}

/// üîê Exceptions d'authentification
class AuthException extends AppException {
  const AuthException(
    String message, {
    String? code,
    dynamic originalError,
    StackTrace? stackTrace,
  }) : super(message, code: code, originalError: originalError, stackTrace: stackTrace);

  @override
  String get userMessage {
    switch (code) {
      case 'user-not-found':
        return 'Aucun compte trouv√© avec cet email.';
      case 'wrong-password':
        return 'Mot de passe incorrect.';
      case 'email-already-in-use':
        return 'Un compte existe d√©j√† avec cet email.';
      case 'weak-password':
        return 'Le mot de passe est trop faible.';
      case 'invalid-email':
        return 'Format d\'email invalide.';
      case 'user-disabled':
        return 'Ce compte a √©t√© d√©sactiv√©.';
      case 'too-many-requests':
        return 'Trop de tentatives. Veuillez r√©essayer plus tard.';
      default:
        return 'Erreur d\'authentification. Veuillez r√©essayer.';
    }
  }
}

/// üî• Exceptions Firestore
class FirestoreException extends AppException {
  const FirestoreException(
    String message, {
    String? code,
    dynamic originalError,
    StackTrace? stackTrace,
  }) : super(message, code: code, originalError: originalError, stackTrace: stackTrace);

  @override
  String get userMessage {
    switch (code) {
      case 'permission-denied':
        return 'Vous n\'avez pas les autorisations n√©cessaires.';
      case 'not-found':
        return 'Document non trouv√©.';
      case 'already-exists':
        return 'Ce document existe d√©j√†.';
      case 'resource-exhausted':
        return 'Limite de quota atteinte. Veuillez r√©essayer plus tard.';
      case 'unavailable':
        return 'Service temporairement indisponible.';
      default:
        return 'Erreur de base de donn√©es. Veuillez r√©essayer.';
    }
  }
}

/// üì§ Exceptions de stockage (upload/download)
class StorageException extends AppException {
  const StorageException(
    String message, {
    String? code,
    dynamic originalError,
    StackTrace? stackTrace,
  }) : super(message, code: code, originalError: originalError, stackTrace: stackTrace);

  @override
  String get userMessage {
    switch (code) {
      case 'file-too-large':
        return 'Le fichier est trop volumineux.';
      case 'invalid-format':
        return 'Format de fichier non support√©.';
      case 'upload-failed':
        return '√âchec du t√©l√©chargement. V√©rifiez votre connexion.';
      case 'storage-quota-exceeded':
        return 'Espace de stockage insuffisant.';
      default:
        return 'Erreur de stockage. Veuillez r√©essayer.';
    }
  }
}

/// ‚úÖ Exceptions de validation
class ValidationException extends AppException {
  final Map<String, String>? fieldErrors;

  const ValidationException(
    String message, {
    this.fieldErrors,
    String? code,
    dynamic originalError,
    StackTrace? stackTrace,
  }) : super(message, code: code, originalError: originalError, stackTrace: stackTrace);

  @override
  String get userMessage => 'Veuillez corriger les erreurs dans le formulaire.';

  /// üìù Obtenir l'erreur pour un champ sp√©cifique
  String? getFieldError(String fieldName) => fieldErrors?[fieldName];

  /// üìã V√©rifier si un champ a une erreur
  bool hasFieldError(String fieldName) => fieldErrors?.containsKey(fieldName) ?? false;
}

/// üíº Exceptions m√©tier sp√©cifiques
class BusinessException extends AppException {
  const BusinessException(
    String message, {
    String? code,
    dynamic originalError,
    StackTrace? stackTrace,
  }) : super(message, code: code, originalError: originalError, stackTrace: stackTrace);

  @override
  String get userMessage {
    switch (code) {
      case 'contract-already-exists':
        return 'Un contrat existe d√©j√† pour ce v√©hicule.';
      case 'vehicle-not-found':
        return 'V√©hicule non trouv√©.';
      case 'agent-not-assigned':
        return 'Aucun agent n\'est assign√© √† ce dossier.';
      case 'invalid-contract-status':
        return 'Statut de contrat invalide pour cette op√©ration.';
      case 'document-missing':
        return 'Document requis manquant.';
      default:
        return message;
    }
  }
}

/// üìß Exceptions de service email
class EmailException extends AppException {
  const EmailException(
    String message, {
    String? code,
    dynamic originalError,
    StackTrace? stackTrace,
  }) : super(message, code: code, originalError: originalError, stackTrace: stackTrace);

  @override
  String get userMessage {
    switch (code) {
      case 'invalid-email':
        return 'Adresse email invalide.';
      case 'send-failed':
        return '√âchec de l\'envoi de l\'email. Veuillez r√©essayer.';
      case 'service-unavailable':
        return 'Service email temporairement indisponible.';
      default:
        return 'Erreur lors de l\'envoi de l\'email.';
    }
  }
}

/// üîÑ Exceptions de synchronisation
class SyncException extends AppException {
  const SyncException(
    String message, {
    String? code,
    dynamic originalError,
    StackTrace? stackTrace,
  }) : super(message, code: code, originalError: originalError, stackTrace: stackTrace);

  @override
  String get userMessage {
    switch (code) {
      case 'sync-conflict':
        return 'Conflit de synchronisation d√©tect√©.';
      case 'offline-mode':
        return 'Fonctionnalit√© non disponible hors ligne.';
      case 'sync-timeout':
        return 'D√©lai de synchronisation d√©pass√©.';
      default:
        return 'Erreur de synchronisation.';
    }
  }
}

/// üîß Exception g√©n√©rique (classe concr√®te)
class GenericException extends AppException {
  const GenericException(
    String message, {
    String? code,
    dynamic originalError,
    StackTrace? stackTrace,
  }) : super(message, code: code, originalError: originalError, stackTrace: stackTrace);

  @override
  String get userMessage => 'Une erreur inattendue s\'est produite. Veuillez r√©essayer.';
}

/// üõ†Ô∏è Utilitaires pour la gestion d'exceptions
class ExceptionHandler {
  /// üîç Convertir une exception g√©n√©rique en AppException
  static AppException handleException(dynamic error, [StackTrace? stackTrace]) {
    if (error is AppException) {
      return error;
    }

    // Gestion des erreurs Firebase Auth
    if (error.toString().contains('firebase_auth')) {
      return AuthException(
        error.toString(),
        code: _extractFirebaseErrorCode(error.toString()),
        originalError: error,
        stackTrace: stackTrace,
      );
    }

    // Gestion des erreurs Firestore
    if (error.toString().contains('firestore') || error.toString().contains('cloud_firestore')) {
      return FirestoreException(
        error.toString(),
        code: _extractFirebaseErrorCode(error.toString()),
        originalError: error,
        stackTrace: stackTrace,
      );
    }

    // Gestion des erreurs r√©seau
    if (error.toString().contains('network') || 
        error.toString().contains('connection') ||
        error.toString().contains('timeout')) {
      return NetworkException(
        error.toString(),
        originalError: error,
        stackTrace: stackTrace,
      );
    }

    // Exception g√©n√©rique - utiliser une classe concr√®te
    return GenericException(
      error.toString(),
      originalError: error,
      stackTrace: stackTrace,
    );
  }

  /// üîß Extraire le code d'erreur Firebase
  static String? _extractFirebaseErrorCode(String errorMessage) {
    final regex = RegExp(r'\[([^\]]+)\]');
    final match = regex.firstMatch(errorMessage);
    return match?.group(1);
  }

  /// üì± Obtenir un message utilisateur appropri√©
  static String getUserMessage(dynamic error) {
    if (error is AppException) {
      return error.userMessage;
    }
    return 'Une erreur inattendue s\'est produite.';
  }

  /// üîß Obtenir un message technique pour les logs
  static String getTechnicalMessage(dynamic error) {
    if (error is AppException) {
      return error.technicalMessage;
    }
    return error.toString();
  }
}
