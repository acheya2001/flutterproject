import 'package:flutter/material.dart';import 'package:firebase_core/firebase_core.dart';import 'package:cloud_firestore/cloud_firestore.dart';import 'dart:math';      title: 'Test G√©n√©ration DB';  String _status = '';        title: Text('Test G√©n√©ration Base de Donn√©es';              child: Text('Tester G√©n√©ration Compagnies';              child: Text('Tester G√©n√©ration Agences';              child: Text('Tester G√©n√©ration Agents';              child: Text('Tester G√©n√©ration Conducteurs';              child: Text('Tester G√©n√©ration Contrats';                    style: TextStyle(fontFamily: 'monospace';      _status += '${DateTime.now().toString().substring(11, 19)} - $message\n';    _updateStatus('üöÄ Test g√©n√©ration compagnies...';      List<String> compagnies = ['STAR', 'GAT', 'BH', 'MAGHREBIA';        await _firestore.collection('insurance_companies';          'code';          'nom';          'nom_complet';          'adresse_siege': 'Avenue Habib Bourguiba, Tunis';          'telephone': '+216 71 ${Random().nextInt(900000) + 100000}';          'email': '${compagnie.toLowerCase()}@assurance.tn';          'date_creation';          'statut': 'active';        _updateStatus('‚úÖ Compagnie $compagnie cr√©√©e';      _updateStatus('‚úÖ Test compagnies termin√© avec succ√®s !';      _updateStatus('‚ùå Erreur compagnies: $e';    _updateStatus('üè¢ Test g√©n√©ration agences...';      List<String> compagnies = ['STAR', 'GAT';      List<String> gouvernorats = ['Tunis', 'Ariana', 'Manouba';          String agenceId = '${compagnie.toLowerCase()}_${gouvernorat.toLowerCase()}_agence1';          await _firestore.collection('agences';            'id';            'nom': 'Agence $compagnie $gouvernorat 1';            'compagnie';            'gouvernorat';            'adresse': '${Random().nextInt(200) + 1} Avenue Habib Bourguiba, $gouvernorat';            'telephone': '+216 71 ${Random().nextInt(900000) + 100000}';            'email': 'agence1.${gouvernorat.toLowerCase()}@${compagnie.toLowerCase()}.tn';            'responsable': 'Ahmed Ben Ali';            'date_ouverture';            'statut': 'active';          _updateStatus('‚úÖ Agence $agenceId cr√©√©e';      _updateStatus('‚úÖ Test agences termin√© avec succ√®s !';      _updateStatus('‚ùå Erreur agences: $e';    _updateStatus('üë• Test g√©n√©ration agents...';      QuerySnapshot agencesSnapshot = await _firestore.collection('agences';        String prenom = 'Ahmed';        String nom = 'Ben Ali';        String email = '${prenom.toLowerCase()}.${nom.toLowerCase().replaceAll(' ', '')}@${agenceData['compagnie'].toString().toLowerCase()}.tn';        String userId = _firestore.collection('users';        // Cr√©er l';        await _firestore.collection('users';          'uid';          'email';          'nom';          'prenom';          'telephone': '+216 ${Random().nextInt(90000000) + 10000000}';          'role': 'assureur';          'compagnie': agenceData['compagnie';          'agence': agenceData['id';          'gouvernorat': agenceData['gouvernorat';          'date_creation';          'statut': 'actif';        // Cr√©er le type d';        await _firestore.collection('user_types';          'type': 'assureur';          'userId';        // Cr√©er l';        await _firestore.collection('assureurs';          'userId';          'email';          'nom';          'prenom';          'compagnie': agenceData['compagnie';          'agence': agenceData['id';          'gouvernorat': agenceData['gouvernorat';          'poste': 'Agent Commercial';          'date_embauche';          'statut': 'actif';        _updateStatus('‚úÖ Agent $prenom $nom cr√©√© pour ${agenceData['compagnie']}';      _updateStatus('‚úÖ Test agents termin√© avec succ√®s !';      _updateStatus('‚ùå Erreur agents: $e';    _updateStatus('üöó Test g√©n√©ration conducteurs...';        String prenom = 'Conducteur$i';        String nom = 'Test';        String email = '${prenom.toLowerCase()}.${nom.toLowerCase()}@gmail.com';        String userId = _firestore.collection('users';        // Cr√©er l';        await _firestore.collection('users';          'uid';          'email';          'nom';          'prenom';          'telephone': '+216 ${Random().nextInt(90000000) + 10000000}';          'role': 'conducteur';          'date_creation';          'statut': 'actif';        // Cr√©er le type d';        await _firestore.collection('user_types';          'type': 'conducteur';          'userId';        // Cr√©er l';        await _firestore.collection('conducteurs';          'userId';          'email';          'nom';          'prenom';          'cin': '${Random().nextInt(90000000) + 10000000}';          'telephone': '+216 ${Random().nextInt(90000000) + 10000000}';          'profession': 'Ing√©nieur';          'permis_numero': 'P${Random().nextInt(9000000) + 1000000}';          'permis_date_obtention';          'permis_categorie': 'B';          'date_creation';          'statut': 'actif';        _updateStatus('‚úÖ Conducteur $prenom $nom cr√©√©';      _updateStatus('‚úÖ Test conducteurs termin√© avec succ√®s !';      _updateStatus('‚ùå Erreur conducteurs: $e';    _updateStatus('üìÑ Test g√©n√©ration contrats...';      QuerySnapshot agentsSnapshot = await _firestore.collection('assureurs';      QuerySnapshot conducteursSnapshot = await _firestore.collection('conducteurs';        _updateStatus('‚ùå Pas assez d\'agents ou conducteurs pour cr√©er des contrats';        String contractId = _firestore.collection('contracts';        await _firestore.collection('contracts';          'id';          'numero_contrat': 'C${agentData['compagnie']}${DateTime.now().year}${i.toString().padLeft(6, '0')}';          'compagnie';            'code': agentData['compagnie';            'nom': _getCompagnieNomComplet(agentData['compagnie';          'agent';            'id';            'nom': agentData['nom';            'prenom': agentData['prenom';            'email': agentData['email';          'conducteur';            'id';            'nom': conducteurData['nom';            'prenom': conducteurData['prenom';            'cin': conducteurData['cin';            'telephone': conducteurData['telephone';          'vehicule';            'marque': 'Peugeot';            'modele': '208';            'annee';            'immatriculation': '${Random().nextInt(900) + 100} TUN ${Random().nextInt(9000) + 1000}';            'couleur': 'Blanc';            'carburant': 'Essence';          'assurance';            'type_couverture': 'Tous Risques';            'date_debut';            'date_fin';            'prime_annuelle';          'date_creation';          'statut': 'actif';          'createdBy';          'conducteurId';        _updateStatus('‚úÖ Contrat $i cr√©√©';      _updateStatus('‚úÖ Test contrats termin√© avec succ√®s !';      _updateStatus('‚ùå Erreur contrats: $e';      case 'STAR': return 'Soci√©t√© Tunisienne d\'Assurance et de R√©assurance';      case 'GAT': return 'Groupe Assurances Tunis';      case 'BH': return 'BH Assurance';      case 'MAGHREBIA': return 'Compagnie d\'Assurance Maghrebia';