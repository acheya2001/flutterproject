import 'package:flutter/material.dart';import 'package:cloud_firestore/cloud_firestore.dart';import 'features/admin/models/professional_request_model_final.dart';  static const String _collection = ';  static Future<Map<String, dynamic>> debugSubmitRequest(ProfessionalRequestModel request';      'timestamp: DateTime.now().toIso8601String(';      'steps';      'errors';      'success';      'firestore_connected';      'collection_accessible';      'data_prepared';      'document_created';      'document_id';      debugInfo['steps'].add('1. Verification connexion Firestore...';      debugPrint(';        await _firestore.enableNetwork(';        debugInfo['firestore_connected';        debugInfo['steps'].add('✅ Firestore connecte';        debugPrint(';      } catch (e';        debugInfo['errors'].add('❌ Erreur connexion Firestore:  + e.toString()';        debugPrint('[DEBUG_SUBMISSION] ❌ Erreur connexion Firestore:  + e.toString()';      // Étape 2: Verifier l';      debugInfo['steps'].add('2. Verification acces collection...';      debugPrint('[DEBUG_SUBMISSION] 🔍 Étape 2: Verification acces collection ';        final testQuery = await _firestore.collection(_collection).limit(1).get(';        debugInfo['collection_accessible';        debugInfo['steps'].add('✅ Collection accessible ({testQuery.docs.length} docs trouves')';        debugPrint(';      } catch (e';        debugInfo['errors'].add('❌ Erreur acces collection:  + e.toString()';        debugPrint('[DEBUG_SUBMISSION] ❌ Erreur acces collection:  + e.toString()';      debugInfo['steps'].add('3. Preparation des donnees...';      debugPrint(';        final requestData = request.toFirestore(';        debugInfo['data_prepared';        debugInfo['prepared_data';        debugInfo['steps'].add('✅ Donnees preparees: '{requestData.keys.length} champs';        debugPrint('[DEBUG_SUBMISSION] ✅ Donnees preparees: ';      } catch (e';        debugInfo['errors'].add('❌ Erreur preparation donnees:  + e.toString()';        debugPrint('[DEBUG_SUBMISSION] ❌ Erreur preparation donnees:  + e.toString()';      debugInfo['steps'].add('4. Ajout metadonnees...';      debugPrint(';      final requestData = request.toFirestore(';      requestData['created_at] = FieldValue.serverTimestamp(';      requestData['updated_at] = FieldValue.serverTimestamp(';      requestData['debug_timestamp] = DateTime.now().toIso8601String(';      requestData['debug_source'] = 'DebugSubmissionService';      debugInfo['final_data] = requestData.map((key, value';        MapEntry(key, value is FieldValue ? 'FieldValue.serverTimestamp() : value)';      debugInfo['steps'].add('✅ Metadonnees ajoutees';      debugPrint('[DEBUG_SUBMISSION] ✅ Metadonnees ajoutees';      debugInfo['steps'].add('5. Creation document Firestore...';      debugPrint('[DEBUG_SUBMISSION] 🔍 Étape 5: Creation document dans ';        final docRef = await _firestore.collection(_collection).add(requestData';        debugInfo['document_created';        debugInfo['document_id';        debugInfo['success';        debugInfo['steps'].add('✅ Document cree avec ID: '{docRef.id}';        debugPrint('[DEBUG_SUBMISSION] ✅ Document cree avec ID: ';      } catch (e';        debugInfo['errors'].add('❌ Erreur creation document:  + e.toString()';        debugPrint('[DEBUG_SUBMISSION] ❌ Erreur creation document:  + e.toString()';      debugInfo['steps'].add('6. Verification document cree...';      debugPrint(';        final createdDoc = await _firestore.collection(_collection').doc(debugInfo[';        if (createdDoc.exists';          debugInfo['steps'].add('✅ Document verifie et existe';          debugPrint('[DEBUG_SUBMISSION] ✅ Document verifie et existe';          debugInfo['created_document_data] = createdDoc.data(';          debugInfo['errors'].add('❌ Document cree mais introuvable';          debugPrint(';      } catch (e';        debugInfo['errors'].add('❌ Erreur verification document:  + e.toString()';        debugPrint(';    } catch (e';      debugInfo['errors'].add('❌ Erreur generale:  + e.toString()';      debugPrint(';      id: timestamp.toString(';      nomComplet: 'Debug Test User 'timestamp';      email: 'debug'timestamp@test.com';      tel: '21612345678';      cin: '12345678';      roleDemande: ';      envoyeLe: DateTime.now(';      status: 'en_attente';      nomCompagnie: 'Debug Test Company';      nomAgence: 'Debug Test Agency';      compagnie: ';        ';              ({debugInfo['timestamp';              ';              ...debugInfo[';              )';              if (debugInfo[';                ';                ...debugInfo[';                )';              if (debugInfo[';                const SizedBox(height: 16';                ({debugInfo['document_id';            onPressed: () => Navigator.of(context).pop(';            child: const Text(';          ')')';          if (debugInfo[';                Navigator.of(context).pop(';                // Copier l';              child: const Text(';')')