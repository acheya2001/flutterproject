import 'package:flutter/material.dart';
import 'package:firebase_core/firebase_core.dart';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'dart:math';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  await Firebase.initializeApp();
  runApp(DatabaseGeneratorApp());
}

class DatabaseGeneratorApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'G√©n√©rateur Base de Donn√©es Assurance',
      home: DatabaseGeneratorScreen(),
    );
  }
}

class DatabaseGeneratorScreen extends StatefulWidget {
  @override
  _DatabaseGeneratorScreenState createState() => _DatabaseGeneratorScreenState();
}

class _DatabaseGeneratorScreenState extends State<DatabaseGeneratorScreen> {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;
  bool _isGenerating = false;
  String _status = '';
  int _progress = 0;
  int _total = 0;

  // Donn√©es de base pour la g√©n√©ration
  final List<String> compagnies = [
    'STAR', 'GAT', 'BH', 'MAGHREBIA', 'LLOYD', 'COMAR', 'CTAMA', 'ZITOUNA'
  ];

  final List<String> gouvernorats = [
    'Tunis', 'Ariana', 'Ben Arous', 'Manouba', 'Nabeul', 'Zaghouan',
    'Bizerte', 'B√©ja', 'Jendouba', 'Kef', 'Siliana', 'Sousse',
    'Monastir', 'Mahdia', 'Sfax', 'Kairouan', 'Kasserine', 'Sidi Bouzid',
    'Gab√®s', 'M√©denine', 'Tataouine', 'Gafsa', 'Tozeur', 'K√©bili'
  ];

  final List<String> marques = [
    'Peugeot', 'Renault', 'Citro√´n', 'Volkswagen', 'Ford', 'Opel',
    'Fiat', 'Seat', 'Skoda', 'Hyundai', 'Kia', 'Toyota', 'Nissan',
    'Dacia', 'Suzuki', 'Mitsubishi', 'Mazda', 'Honda', 'Chevrolet'
  ];

  final List<String> modeles = [
    '206', '207', '208', '307', '308', '407', '508', 'Clio', 'Megane',
    'Logan', 'Sandero', 'Symbol', 'C3', 'C4', 'Berlingo', 'Golf',
    'Polo', 'Passat', 'Fiesta', 'Focus', 'Mondeo', 'Corsa', 'Astra',
    'Punto', 'Panda', 'Ibiza', 'Leon', 'Fabia', 'Octavia', 'i10',
    'i20', 'i30', 'Accent', 'Elantra', 'Picanto', 'Rio', 'Cerato',
    'Yaris', 'Corolla', 'Auris', 'Micra', 'Note', 'Qashqai'
  ];

  final List<String> prenoms = [
    'Ahmed', 'Mohamed', 'Ali', 'Mahmoud', 'Omar', 'Youssef', 'Karim',
    'Sami', 'Rami', 'Nabil', 'Farid', 'Tarek', 'Walid', 'Hichem',
    'Amine', 'Fares', 'Marwan', 'Aymen', 'Bilel', 'Chokri',
    'Fatma', 'Aicha', 'Khadija', 'Amina', 'Salma', 'Nour', 'Ines',
    'Sarra', 'Rim', 'Dorra', 'Emna', 'Olfa', 'Wafa', 'Samia',
    'Leila', 'Monia', 'Sonia', 'Rania', 'Meriem', 'Asma'
  ];

  final List<String> noms = [
    'Ben Ali', 'Trabelsi', 'Bouazizi', 'Chaieb', 'Dridi', 'Gharbi',
    'Jemli', 'Karray', 'Lassoued', 'Maaloul', 'Nasri', 'Ouali',
    'Riahi', 'Saidi', 'Tlili', 'Zouari', 'Abidi', 'Belhaj',
    'Chaabane', 'Derbali', 'Essid', 'Ferjani', 'Ghanmi', 'Hamdi',
    'Jebali', 'Kacem', 'Labidi', 'Mahfoudh', 'Nouri', 'Oueslati'
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('G√©n√©rateur Base de Donn√©es Assurance'),
        backgroundColor: Colors.blue,
      ),
      body: Padding(
        padding: EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            Card(
              child: Padding(
                padding: EdgeInsets.all(16.0),
                child: Column(
                  children: [
                    Text(
                      'G√©n√©ration de Base de Donn√©es',
                      style: TextStyle(fontSize: 20, fontWeight: FontWeight.bold),
                    ),
                    SizedBox(height: 16),
                    Text(
                      'Ce script va g√©n√©rer:\n'
                      '‚Ä¢ 8 compagnies d\'assurance\n'
                      '‚Ä¢ 24 gouvernorats avec agences\n'
                      '‚Ä¢ 200+ agents d\'assurance\n'
                      '‚Ä¢ 5000+ contrats de v√©hicules\n'
                      '‚Ä¢ 1000+ conducteurs',
                      style: TextStyle(fontSize: 14),
                    ),
                  ],
                ),
              ),
            ),
            SizedBox(height: 20),
            ElevatedButton(
              onPressed: _isGenerating ? null : _generateDatabase,
              child: Text(_isGenerating ? 'G√©n√©ration en cours...' : 'G√©n√©rer Base de Donn√©es'),
              style: ElevatedButton.styleFrom(
                backgroundColor: Colors.green,
                padding: EdgeInsets.symmetric(vertical: 16),
              ),
            ),
            SizedBox(height: 20),
            if (_isGenerating) ...[
              LinearProgressIndicator(
                value: _total > 0 ? _progress / _total : 0,
              ),
              SizedBox(height: 10),
              Text(
                'Progression: $_progress / $_total',
                textAlign: TextAlign.center,
              ),
            ],
            SizedBox(height: 20),
            Expanded(
              child: Container(
                padding: EdgeInsets.all(12),
                decoration: BoxDecoration(
                  border: Border.all(color: Colors.grey),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: SingleChildScrollView(
                  child: Text(
                    _status,
                    style: TextStyle(fontFamily: 'monospace', fontSize: 12),
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  void _updateStatus(String message) {
    setState(() {
      _status += '${DateTime.now().toString().substring(11, 19)} - $message\n';
    });
    print(message);
  }

  void _updateProgress() {
    setState(() {
      _progress++;
    });
  }

  Future<void> _generateDatabase() async {
    setState(() {
      _isGenerating = true;
      _status = '';
      _progress = 0;
      _total = 8 + (24 * 3) + 200 + 5000 + 1000; // Estimation
    });

    try {
      _updateStatus('üöÄ D√©but de la g√©n√©ration de la base de donn√©es...');

      // 1. G√©n√©rer les compagnies d'assurance
      await _generateCompagnies();

      // 2. G√©n√©rer les agences par gouvernorat
      await _generateAgences();

      // 3. G√©n√©rer les agents d'assurance
      await _generateAgents();

      // 4. G√©n√©rer les conducteurs
      await _generateConducteurs();

      // 5. G√©n√©rer les contrats de v√©hicules
      await _generateContrats();

      _updateStatus('‚úÖ G√©n√©ration termin√©e avec succ√®s !');
      _updateStatus('üìä Base de donn√©es cr√©√©e avec ${_progress} √©l√©ments');

    } catch (e) {
      _updateStatus('‚ùå Erreur: $e');
    } finally {
      setState(() {
        _isGenerating = false;
      });
    }
  }

  Future<void> _generateCompagnies() async {
    _updateStatus('üìã G√©n√©ration des compagnies d\'assurance...');
    
    for (String compagnie in compagnies) {
      await _firestore.collection('insurance_companies').doc(compagnie.toLowerCase()).set({
        'code': compagnie,
        'nom': compagnie,
        'nom_complet': _getCompagnieNomComplet(compagnie),
        'adresse_siege': 'Avenue Habib Bourguiba, Tunis',
        'telephone': '+216 71 ${Random().nextInt(900000) + 100000}',
        'email': '${compagnie.toLowerCase()}@assurance.tn',
        'site_web': 'www.${compagnie.toLowerCase()}.com.tn',
        'date_creation': DateTime.now().subtract(Duration(days: Random().nextInt(7300))),
        'statut': 'active',
        'logo_url': 'https://example.com/logos/${compagnie.toLowerCase()}.png',
      });
      _updateProgress();
      _updateStatus('‚úÖ Compagnie $compagnie cr√©√©e');
    }
  }

  String _getCompagnieNomComplet(String code) {
    switch (code) {
      case 'STAR': return 'Soci√©t√© Tunisienne d\'Assurance et de R√©assurance';
      case 'GAT': return 'Groupe Assurances Tunis';
      case 'BH': return 'BH Assurance';
      case 'MAGHREBIA': return 'Compagnie d\'Assurance Maghrebia';
      case 'LLOYD': return 'Lloyd Tunisien';
      case 'COMAR': return 'Compagnie M√©diterran√©enne d\'Assurance et de R√©assurance';
      case 'CTAMA': return 'Compagnie Tuniso-Arabe d\'Assurance Maritime et d\'Aviation';
      case 'ZITOUNA': return 'Zitouna Takaful';
      default: return code;
    }
  }

  Future<void> _generateAgences() async {
    _updateStatus('üè¢ G√©n√©ration des agences par gouvernorat...');

    for (String compagnie in compagnies) {
      for (String gouvernorat in gouvernorats) {
        int nbAgences = Random().nextInt(3) + 1; // 1 √† 3 agences par gouvernorat

        for (int i = 1; i <= nbAgences; i++) {
          String agenceId = '${compagnie.toLowerCase()}_${gouvernorat.toLowerCase()}_agence$i';

          await _firestore.collection('agences').doc(agenceId).set({
            'id': agenceId,
            'nom': 'Agence $compagnie $gouvernorat $i',
            'compagnie': compagnie,
            'gouvernorat': gouvernorat,
            'adresse': '${Random().nextInt(200) + 1} Avenue ${_getRandomStreet()}, $gouvernorat',
            'telephone': '+216 ${_getGouvernoratCode(gouvernorat)} ${Random().nextInt(900000) + 100000}',
            'email': 'agence$i.${gouvernorat.toLowerCase()}@${compagnie.toLowerCase()}.tn',
            'responsable': '${prenoms[Random().nextInt(prenoms.length)]} ${noms[Random().nextInt(noms.length)]}',
            'date_ouverture': DateTime.now().subtract(Duration(days: Random().nextInt(3650))),
            'statut': 'active',
            'horaires': {
              'lundi_vendredi': '08:00-17:00',
              'samedi': '08:00-12:00',
              'dimanche': 'ferm√©'
            },
          });
          _updateProgress();
        }
      }
    }
    _updateStatus('‚úÖ Agences cr√©√©es pour tous les gouvernorats');
  }

  String _getRandomStreet() {
    List<String> streets = [
      'Habib Bourguiba', 'de la R√©publique', 'de l\'Ind√©pendance', 'du 20 Mars',
      'Farhat Hached', 'Mongi Slim', 'de la Libert√©', 'des Martyrs',
      'H√©di Chaker', 'Tahar Sfar', 'de Carthage', 'du 9 Avril'
    ];
    return streets[Random().nextInt(streets.length)];
  }

  String _getGouvernoratCode(String gouvernorat) {
    Map<String, String> codes = {
      'Tunis': '71', 'Ariana': '71', 'Ben Arous': '71', 'Manouba': '71',
      'Nabeul': '72', 'Zaghouan': '72', 'Bizerte': '72', 'B√©ja': '78',
      'Jendouba': '78', 'Kef': '78', 'Siliana': '78', 'Sousse': '73',
      'Monastir': '73', 'Mahdia': '73', 'Sfax': '74', 'Kairouan': '77',
      'Kasserine': '77', 'Sidi Bouzid': '76', 'Gab√®s': '75', 'M√©denine': '75',
      'Tataouine': '75', 'Gafsa': '76', 'Tozeur': '76', 'K√©bili': '76'
    };
    return codes[gouvernorat] ?? '71';
  }

  Future<void> _generateAgents() async {
    _updateStatus('üë• G√©n√©ration des agents d\'assurance...');

    // R√©cup√©rer toutes les agences
    QuerySnapshot agencesSnapshot = await _firestore.collection('agences').get();

    for (QueryDocumentSnapshot agenceDoc in agencesSnapshot.docs) {
      Map<String, dynamic> agenceData = agenceDoc.data() as Map<String, dynamic>;

      int nbAgents = Random().nextInt(5) + 2; // 2 √† 6 agents par agence

      for (int i = 1; i <= nbAgents; i++) {
        String prenom = prenoms[Random().nextInt(prenoms.length)];
        String nom = noms[Random().nextInt(noms.length)];
        String email = '${prenom.toLowerCase()}.${nom.toLowerCase().replaceAll(' ', '')}@${agenceData['compagnie'].toString().toLowerCase()}.tn';

        // Cr√©er l'utilisateur dans users
        String userId = _firestore.collection('users').doc().id;

        await _firestore.collection('users').doc(userId).set({
          'uid': userId,
          'email': email,
          'nom': nom,
          'prenom': prenom,
          'telephone': '+216 ${Random().nextInt(90000000) + 10000000}',
          'date_naissance': DateTime.now().subtract(Duration(days: Random().nextInt(14600) + 7300)), // 20-60 ans
          'adresse': '${Random().nextInt(100) + 1} Rue ${_getRandomStreet()}, ${agenceData['gouvernorat']}',
          'cin': '${Random().nextInt(90000000) + 10000000}',
          'date_creation': DateTime.now().subtract(Duration(days: Random().nextInt(365))),
          'statut': 'actif',
          'role': 'assureur',
          'compagnie': agenceData['compagnie'],
          'agence': agenceData['id'],
          'gouvernorat': agenceData['gouvernorat'],
        });

        // Cr√©er le type d'utilisateur
        await _firestore.collection('user_types').doc(userId).set({
          'type': 'assureur',
          'userId': userId,
        });

        // Cr√©er l'entr√©e dans assureurs
        await _firestore.collection('assureurs').doc(userId).set({
          'userId': userId,
          'email': email,
          'nom': nom,
          'prenom': prenom,
          'compagnie': agenceData['compagnie'],
          'agence': agenceData['id'],
          'gouvernorat': agenceData['gouvernorat'],
          'poste': _getRandomPoste(),
          'date_embauche': DateTime.now().subtract(Duration(days: Random().nextInt(1825))),
          'salaire': Random().nextInt(2000) + 1000,
          'commission': Random().nextDouble() * 5 + 2, // 2-7%
          'objectif_mensuel': Random().nextInt(50) + 20,
          'statut': 'actif',
        });

        _updateProgress();
      }
    }
    _updateStatus('‚úÖ Agents d\'assurance cr√©√©s');
  }

  String _getRandomPoste() {
    List<String> postes = [
      'Agent Commercial', 'Conseiller Client√®le', 'Charg√© de Client√®le',
      'Agent de Souscription', 'Responsable Agence', 'Superviseur'
    ];
    return postes[Random().nextInt(postes.length)];
  }

  Future<void> _generateConducteurs() async {
    _updateStatus('üöó G√©n√©ration des conducteurs...');

    for (int i = 1; i <= 1000; i++) {
      String prenom = prenoms[Random().nextInt(prenoms.length)];
      String nom = noms[Random().nextInt(noms.length)];
      String email = '${prenom.toLowerCase()}.${nom.toLowerCase().replaceAll(' ', '')}$i@gmail.com';

      String userId = _firestore.collection('users').doc().id;

      // Cr√©er l'utilisateur dans users
      await _firestore.collection('users').doc(userId).set({
        'uid': userId,
        'email': email,
        'nom': nom,
        'prenom': prenom,
        'telephone': '+216 ${Random().nextInt(90000000) + 10000000}',
        'date_naissance': DateTime.now().subtract(Duration(days: Random().nextInt(21900) + 6570)), // 18-78 ans
        'adresse': '${Random().nextInt(200) + 1} ${_getRandomStreet()}, ${gouvernorats[Random().nextInt(gouvernorats.length)]}',
        'cin': '${Random().nextInt(90000000) + 10000000}',
        'date_creation': DateTime.now().subtract(Duration(days: Random().nextInt(365))),
        'statut': 'actif',
        'role': 'conducteur',
      });

      // Cr√©er le type d'utilisateur
      await _firestore.collection('user_types').doc(userId).set({
        'type': 'conducteur',
        'userId': userId,
      });

      // Cr√©er l'entr√©e dans conducteurs
      await _firestore.collection('conducteurs').doc(userId).set({
        'userId': userId,
        'email': email,
        'nom': nom,
        'prenom': prenom,
        'date_naissance': DateTime.now().subtract(Duration(days: Random().nextInt(21900) + 6570)),
        'lieu_naissance': gouvernorats[Random().nextInt(gouvernorats.length)],
        'cin': '${Random().nextInt(90000000) + 10000000}',
        'adresse': '${Random().nextInt(200) + 1} ${_getRandomStreet()}, ${gouvernorats[Random().nextInt(gouvernorats.length)]}',
        'telephone': '+216 ${Random().nextInt(90000000) + 10000000}',
        'profession': _getRandomProfession(),
        'permis_numero': 'P${Random().nextInt(9000000) + 1000000}',
        'permis_date_obtention': DateTime.now().subtract(Duration(days: Random().nextInt(7300) + 365)),
        'permis_categorie': _getRandomPermisCategorie(),
        'date_creation': DateTime.now().subtract(Duration(days: Random().nextInt(365))),
        'statut': 'actif',
      });

      _updateProgress();

      if (i % 100 == 0) {
        _updateStatus('‚úÖ $i conducteurs cr√©√©s');
      }
    }
    _updateStatus('‚úÖ 1000 conducteurs cr√©√©s');
  }

  String _getRandomProfession() {
    List<String> professions = [
      'Ing√©nieur', 'M√©decin', 'Enseignant', 'Comptable', 'Avocat', 'Pharmacien',
      'Architecte', 'Dentiste', 'Infirmier', 'Technicien', 'Commercial', 'Fonctionnaire',
      'Entrepreneur', 'Consultant', 'Journaliste', 'Traducteur', 'Designer', 'D√©veloppeur',
      'M√©canicien', '√âlectricien', 'Plombier', 'Ma√ßon', 'Chauffeur', 'Vendeur',
      'Cuisinier', 'Serveur', 'Coiffeur', 'Esth√©ticienne', 'Photographe', 'Musicien'
    ];
    return professions[Random().nextInt(professions.length)];
  }

  String _getRandomPermisCategorie() {
    List<String> categories = ['B', 'A', 'A1', 'C', 'D', 'BE', 'CE'];
    return categories[Random().nextInt(categories.length)];
  }

  Future<void> _generateContrats() async {
    _updateStatus('üìÑ G√©n√©ration des contrats de v√©hicules...');

    // R√©cup√©rer tous les agents
    QuerySnapshot agentsSnapshot = await _firestore.collection('assureurs').get();
    List<QueryDocumentSnapshot> agents = agentsSnapshot.docs;

    // R√©cup√©rer tous les conducteurs
    QuerySnapshot conducteursSnapshot = await _firestore.collection('conducteurs').get();
    List<QueryDocumentSnapshot> conducteurs = conducteursSnapshot.docs;

    for (int i = 1; i <= 5000; i++) {
      // S√©lectionner un agent et un conducteur al√©atoirement
      QueryDocumentSnapshot agent = agents[Random().nextInt(agents.length)];
      QueryDocumentSnapshot conducteur = conducteurs[Random().nextInt(conducteurs.length)];

      Map<String, dynamic> agentData = agent.data() as Map<String, dynamic>;
      Map<String, dynamic> conducteurData = conducteur.data() as Map<String, dynamic>;

      String marque = marques[Random().nextInt(marques.length)];
      String modele = modeles[Random().nextInt(modeles.length)];
      int annee = DateTime.now().year - Random().nextInt(20); // V√©hicules de 0 √† 20 ans

      String contractId = _firestore.collection('contracts').doc().id;

      await _firestore.collection('contracts').doc(contractId).set({
        'id': contractId,
        'numero_contrat': 'C${agentData['compagnie']}${DateTime.now().year}${i.toString().padLeft(6, '0')}',
        'compagnie': {
          'code': agentData['compagnie'],
          'nom': _getCompagnieNomComplet(agentData['compagnie']),
        },
        'agence': {
          'id': agentData['agence'],
          'gouvernorat': agentData['gouvernorat'],
        },
        'agent': {
          'id': agent.id,
          'nom': agentData['nom'],
          'prenom': agentData['prenom'],
          'email': agentData['email'],
        },
        'conducteur': {
          'id': conducteur.id,
          'nom': conducteurData['nom'],
          'prenom': conducteurData['prenom'],
          'cin': conducteurData['cin'],
          'telephone': conducteurData['telephone'],
          'adresse': conducteurData['adresse'],
        },
        'vehicule': {
          'marque': marque,
          'modele': modele,
          'annee': annee,
          'immatriculation': _generateImmatriculation(),
          'numero_chassis': _generateNumeroChassis(),
          'couleur': _getRandomCouleur(),
          'carburant': _getRandomCarburant(),
          'puissance': Random().nextInt(200) + 50,
          'nombre_places': Random().nextInt(5) + 2,
          'usage': _getRandomUsage(),
        },
        'assurance': {
          'type_couverture': _getRandomCouverture(),
          'date_debut': DateTime.now().subtract(Duration(days: Random().nextInt(365))),
          'date_fin': DateTime.now().add(Duration(days: Random().nextInt(365) + 1)),
          'prime_annuelle': Random().nextInt(2000) + 300,
          'franchise': Random().nextInt(500) + 100,
          'bonus_malus': (Random().nextDouble() * 2 + 0.5).toStringAsFixed(2),
        },
        'date_creation': DateTime.now().subtract(Duration(days: Random().nextInt(365))),
        'statut': 'actif',
        'createdBy': agent.id,
        'conducteurId': conducteur.id,
      });

      _updateProgress();

      if (i % 500 == 0) {
        _updateStatus('‚úÖ $i contrats cr√©√©s');
      }
    }
    _updateStatus('‚úÖ 5000 contrats cr√©√©s');
  }

  String _generateImmatriculation() {
    // Format tunisien: 123 TUN 1234
    int num1 = Random().nextInt(900) + 100;
    List<String> letters = ['TUN', 'TUS', 'TUG', 'TUB', 'TUA', 'TUZ', 'TUJ', 'TUK'];
    String letter = letters[Random().nextInt(letters.length)];
    int num2 = Random().nextInt(9000) + 1000;
    return '$num1 $letter $num2';
  }

  String _generateNumeroChassis() {
    // Format: 17 caract√®res alphanum√©riques
    String chars = 'ABCDEFGHJKLMNPRSTUVWXYZ1234567890';
    String chassis = '';
    for (int i = 0; i < 17; i++) {
      chassis += chars[Random().nextInt(chars.length)];
    }
    return chassis;
  }

  String _getRandomCouleur() {
    List<String> couleurs = [
      'Blanc', 'Noir', 'Gris', 'Rouge', 'Bleu', 'Vert', 'Jaune', 'Orange',
      'Violet', 'Marron', 'Beige', 'Argent', 'Bordeaux', 'Rose'
    ];
    return couleurs[Random().nextInt(couleurs.length)];
  }

  String _getRandomCarburant() {
    List<String> carburants = ['Essence', 'Diesel', 'GPL', 'Hybride', '√âlectrique'];
    return carburants[Random().nextInt(carburants.length)];
  }

  String _getRandomUsage() {
    List<String> usages = ['Personnel', 'Professionnel', 'Taxi', 'Location', 'Transport'];
    return usages[Random().nextInt(usages.length)];
  }

  String _getRandomCouverture() {
    List<String> couvertures = [
      'Responsabilit√© Civile', 'Tous Risques', 'Tiers Collision',
      'Tiers √âtendu', 'Vol et Incendie'
    ];
    return couvertures[Random().nextInt(couvertures.length)];
  }
}
