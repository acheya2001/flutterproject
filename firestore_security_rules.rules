rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // üîê R√àGLES DE S√âCURIT√â POUR LES COMPAGNIES D'ASSURANCE
    // Ces r√®gles emp√™chent l'acc√®s crois√© entre compagnies
    
    // ===== COLLECTION USERS =====
    match /users/{userId} {
      // Lecture : Utilisateur peut lire son propre document + Super Admin peut tout lire
      allow read: if request.auth != null && (
        request.auth.uid == userId || 
        isSuperAdmin()
      );
      
      // √âcriture : Seul Super Admin peut cr√©er/modifier les utilisateurs
      allow write: if request.auth != null && isSuperAdmin();
    }
    
    // ===== COLLECTION COMPAGNIES_ASSURANCE =====
    match /compagnies_assurance/{compagnieId} {
      // Lecture : Super Admin + Admin de cette compagnie
      allow read: if request.auth != null && (
        isSuperAdmin() || 
        isAdminOfCompany(compagnieId)
      );
      
      // √âcriture : Seul Super Admin
      allow write: if request.auth != null && isSuperAdmin();
    }
    
    // ===== COLLECTION AGENCES_ASSURANCE =====
    match /agences_assurance/{agenceId} {
      // Lecture : Super Admin + Admin de la compagnie propri√©taire
      allow read: if request.auth != null && (
        isSuperAdmin() || 
        isAdminOfCompanyFromResource(resource.data.compagnieId)
      );
      
      // √âcriture : Super Admin + Admin de la compagnie propri√©taire
      allow write: if request.auth != null && (
        isSuperAdmin() || 
        (isAdminCompagnie() && isAdminOfCompanyFromResource(resource.data.compagnieId))
      );
    }
    
    // ===== COLLECTION AGENTS_ASSURANCE =====
    match /agents_assurance/{agentId} {
      // Lecture : Super Admin + Admin de la compagnie + Admin de l'agence
      allow read: if request.auth != null && (
        isSuperAdmin() || 
        isAdminOfCompanyFromResource(resource.data.compagnieId) ||
        isAdminOfAgencyFromResource(resource.data.agenceId)
      );
      
      // √âcriture : Super Admin + Admin de la compagnie + Admin de l'agence
      allow write: if request.auth != null && (
        isSuperAdmin() || 
        (isAdminCompagnie() && isAdminOfCompanyFromResource(resource.data.compagnieId)) ||
        (isAdminAgence() && isAdminOfAgencyFromResource(resource.data.agenceId))
      );
    }
    
    // ===== COLLECTION CONTRATS =====
    match /contrats/{contratId} {
      // Lecture : Super Admin + Admin de la compagnie + Agent de l'agence + Conducteur propri√©taire
      allow read: if request.auth != null && (
        isSuperAdmin() || 
        isAdminOfCompanyFromResource(resource.data.compagnieId) ||
        isAgentOfAgencyFromResource(resource.data.agenceId) ||
        isConducteurOwner(resource.data.conducteurId)
      );
      
      // √âcriture : Super Admin + Admin de la compagnie + Agent de l'agence
      allow write: if request.auth != null && (
        isSuperAdmin() || 
        (isAdminCompagnie() && isAdminOfCompanyFromResource(resource.data.compagnieId)) ||
        (isAgent() && isAgentOfAgencyFromResource(resource.data.agenceId))
      );
    }
    
    // ===== COLLECTION SINISTRES =====
    match /sinistres/{sinistreId} {
      // Lecture : Super Admin + Admin de la compagnie + Agent + Expert + Conducteur impliqu√©
      allow read: if request.auth != null && (
        isSuperAdmin() || 
        isAdminOfCompanyFromResource(resource.data.compagnieId) ||
        isAgentOfAgencyFromResource(resource.data.agenceId) ||
        isExpertAssigned(sinistreId) ||
        isConducteurInvolved(resource.data.conducteurIds)
      );
      
      // √âcriture : Super Admin + Admin de la compagnie + Agent + Expert assign√©
      allow write: if request.auth != null && (
        isSuperAdmin() || 
        (isAdminCompagnie() && isAdminOfCompanyFromResource(resource.data.compagnieId)) ||
        (isAgent() && isAgentOfAgencyFromResource(resource.data.agenceId)) ||
        (isExpert() && isExpertAssigned(sinistreId))
      );
    }
    
    // ===== COLLECTION EXPERTS =====
    match /experts/{expertId} {
      // Lecture : Super Admin + Admin des compagnies avec lesquelles l'expert travaille
      allow read: if request.auth != null && (
        isSuperAdmin() || 
        request.auth.uid == expertId ||
        isAdminOfAnyCompanyInList(resource.data.compagniesPartenaires)
      );
      
      // √âcriture : Super Admin + Expert lui-m√™me (pour ses donn√©es)
      allow write: if request.auth != null && (
        isSuperAdmin() || 
        (isExpert() && request.auth.uid == expertId)
      );
    }
    
    // ===== COLLECTION CONDUCTEURS =====
    match /conducteurs/{conducteurId} {
      // Lecture : Super Admin + Conducteur lui-m√™me + Admin des compagnies de ses contrats
      allow read: if request.auth != null && (
        isSuperAdmin() || 
        request.auth.uid == conducteurId ||
        isAdminOfConducteurCompanies(conducteurId)
      );
      
      // √âcriture : Super Admin + Conducteur lui-m√™me
      allow write: if request.auth != null && (
        isSuperAdmin() || 
        (isConducteur() && request.auth.uid == conducteurId)
      );
    }
    
    // ===== COLLECTION SECURITY_LOGS =====
    match /security_logs/{logId} {
      // Lecture : Seul Super Admin
      allow read: if request.auth != null && isSuperAdmin();
      
      // √âcriture : Syst√®me uniquement (via Cloud Functions)
      allow write: if false;
    }
    
    // ===== COLLECTION SECURITY_VIOLATIONS =====
    match /security_violations/{violationId} {
      // Lecture : Seul Super Admin
      allow read: if request.auth != null && isSuperAdmin();
      
      // √âcriture : Syst√®me uniquement
      allow write: if request.auth != null;
    }
    
    // ===== FONCTIONS UTILITAIRES =====
    
    // V√©rifier si l'utilisateur est Super Admin
    function isSuperAdmin() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'super_admin';
    }
    
    // V√©rifier si l'utilisateur est Admin Compagnie
    function isAdminCompagnie() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin_compagnie';
    }
    
    // V√©rifier si l'utilisateur est Admin Agence
    function isAdminAgence() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin_agence';
    }
    
    // V√©rifier si l'utilisateur est Agent
    function isAgent() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'agent';
    }
    
    // V√©rifier si l'utilisateur est Expert
    function isExpert() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'expert';
    }
    
    // V√©rifier si l'utilisateur est Conducteur
    function isConducteur() {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'conducteur';
    }
    
    // V√©rifier si l'utilisateur est admin de la compagnie sp√©cifi√©e
    function isAdminOfCompany(compagnieId) {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin_compagnie' &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.compagnieId == compagnieId;
    }
    
    // V√©rifier si l'utilisateur est admin de la compagnie depuis une ressource
    function isAdminOfCompanyFromResource(compagnieId) {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin_compagnie' &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.compagnieId == compagnieId;
    }
    
    // V√©rifier si l'utilisateur est admin de l'agence depuis une ressource
    function isAdminOfAgencyFromResource(agenceId) {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin_agence' &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.agenceId == agenceId;
    }
    
    // V√©rifier si l'utilisateur est agent de l'agence depuis une ressource
    function isAgentOfAgencyFromResource(agenceId) {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'agent' &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.agenceId == agenceId;
    }
    
    // V√©rifier si l'utilisateur est le conducteur propri√©taire
    function isConducteurOwner(conducteurId) {
      return request.auth != null && request.auth.uid == conducteurId;
    }
    
    // V√©rifier si l'expert est assign√© au sinistre
    function isExpertAssigned(sinistreId) {
      return request.auth != null && 
             exists(/databases/$(database)/documents/sinistres/$(sinistreId)) &&
             get(/databases/$(database)/documents/sinistres/$(sinistreId)).data.expertId == request.auth.uid;
    }
    
    // V√©rifier si le conducteur est impliqu√© dans le sinistre
    function isConducteurInvolved(conducteurIds) {
      return request.auth != null && 
             request.auth.uid in conducteurIds;
    }
    
    // V√©rifier si l'admin peut g√©rer une des compagnies de la liste
    function isAdminOfAnyCompanyInList(compagniesIds) {
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin_compagnie' &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.compagnieId in compagniesIds;
    }
    
    // V√©rifier si l'admin peut g√©rer les compagnies du conducteur
    function isAdminOfConducteurCompanies(conducteurId) {
      // Cette fonction n√©cessiterait une requ√™te complexe pour r√©cup√©rer les contrats du conducteur
      // Pour simplifier, on autorise l'acc√®s si l'admin a au moins un contrat avec ce conducteur
      return request.auth != null && 
             exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin_compagnie';
    }
  }
}
