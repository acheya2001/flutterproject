rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // üîê R√àGLES POUR LES UTILISATEURS
    match /users/{userId} {
      // Lecture : Utilisateur connect√© peut lire son propre profil + Super Admin peut tout lire
      allow read: if request.auth != null && 
                     (request.auth.uid == userId || isSuperAdmin());
      
      // Cr√©ation : Seul le Super Admin peut cr√©er des utilisateurs
      allow create: if isSuperAdmin();
      
      // Mise √† jour : Utilisateur peut modifier son profil + Super Admin peut tout modifier
      allow update: if request.auth != null && 
                       (request.auth.uid == userId || isSuperAdmin());
      
      // Suppression : Seul le Super Admin peut supprimer
      allow delete: if isSuperAdmin();
    }
    
    // üìã R√àGLES POUR LES DEMANDES DE COMPTES
    match /account_requests/{requestId} {
      // Lecture : Seul le Super Admin peut lire toutes les demandes
      allow read: if isSuperAdmin();
      
      // Cr√©ation : Tout utilisateur connect√© peut faire une demande
      allow create: if request.auth != null && 
                       validateAccountRequest();
      
      // Mise √† jour : Seul le Super Admin peut traiter les demandes
      allow update: if isSuperAdmin() && 
                       validateRequestUpdate();
      
      // Suppression : Seul le Super Admin peut supprimer
      allow delete: if isSuperAdmin();
    }
    
    // üöó R√àGLES POUR LES CONDUCTEURS
    match /drivers/{driverId} {
      // Lecture : Conducteur peut lire son profil + Agents/Experts/Admins peuvent lire
      allow read: if request.auth != null && 
                     (request.auth.uid == driverId || 
                      isAgent() || isExpert() || isAdmin());
      
      // Cr√©ation : Conducteur peut cr√©er son profil
      allow create: if request.auth != null && 
                       request.auth.uid == driverId;
      
      // Mise √† jour : Conducteur peut modifier son profil
      allow update: if request.auth != null && 
                       request.auth.uid == driverId;
      
      // Suppression : Seuls les admins peuvent supprimer
      allow delete: if isAdmin();
    }
    
    // üè¢ R√àGLES POUR LES AGENTS D'ASSURANCE
    match /agents_assurance/{agentId} {
      // Lecture : Agent peut lire son profil + Admins peuvent lire
      allow read: if request.auth != null && 
                     (request.auth.uid == agentId || isAdmin());
      
      // Cr√©ation/Mise √† jour/Suppression : Seuls les admins
      allow create, update, delete: if isAdmin();
    }
    
    // üîç R√àGLES POUR LES EXPERTS
    match /experts/{expertId} {
      // Lecture : Expert peut lire son profil + Admins peuvent lire
      allow read: if request.auth != null && 
                     (request.auth.uid == expertId || isAdmin());
      
      // Cr√©ation/Mise √† jour/Suppression : Seuls les admins
      allow create, update, delete: if isAdmin();
    }
    
    // üè¢ R√àGLES POUR LES COMPAGNIES D'ASSURANCE
    match /compagnies_assurance/{companyId} {
      // Lecture : Agents de la compagnie + Admins
      allow read: if request.auth != null && 
                     (belongsToCompany(companyId) || isAdmin());
      
      // Cr√©ation/Mise √† jour/Suppression : Seuls les Super Admins
      allow create, update, delete: if isSuperAdmin();
    }
    
    // üè™ R√àGLES POUR LES AGENCES
    match /agences_assurance/{agencyId} {
      // Lecture : Agents de l'agence + Admins
      allow read: if request.auth != null && 
                     (belongsToAgency(agencyId) || isAdmin());
      
      // Cr√©ation/Mise √† jour/Suppression : Admins de compagnie et Super Admin
      allow create, update, delete: if isCompanyAdmin() || isSuperAdmin();
    }
    
    // üöó R√àGLES POUR LES V√âHICULES
    match /vehicles/{vehicleId} {
      // Lecture : Propri√©taire + Agents + Experts + Admins
      allow read: if request.auth != null && 
                     (isVehicleOwner(vehicleId) || 
                      isAgent() || isExpert() || isAdmin());
      
      // Cr√©ation : Conducteurs et Agents
      allow create: if request.auth != null && 
                       (isDriver() || isAgent());
      
      // Mise √† jour : Propri√©taire + Agents
      allow update: if request.auth != null && 
                       (isVehicleOwner(vehicleId) || isAgent());
      
      // Suppression : Seuls les agents et admins
      allow delete: if isAgent() || isAdmin();
    }
    
    // üìÑ R√àGLES POUR LES CONTRATS
    match /contracts/{contractId} {
      // Lecture : Parties concern√©es + Agents + Admins
      allow read: if request.auth != null && 
                     (isContractParty(contractId) || 
                      isAgent() || isAdmin());
      
      // Cr√©ation/Mise √† jour : Seuls les agents
      allow create, update: if isAgent();
      
      // Suppression : Seuls les admins
      allow delete: if isAdmin();
    }
    
    // üö® R√àGLES POUR LES SINISTRES/R√âCLAMATIONS
    match /claims/{claimId} {
      // Lecture : Parties concern√©es + Agents + Experts + Admins
      allow read: if request.auth != null && 
                     (isClaimParty(claimId) || 
                      isAgent() || isExpert() || isAdmin());
      
      // Cr√©ation : Conducteurs et Agents
      allow create: if request.auth != null && 
                       (isDriver() || isAgent());
      
      // Mise √† jour : Agents et Experts (pour leurs parties respectives)
      allow update: if request.auth != null && 
                       (isAgent() || isExpert());
      
      // Suppression : Seuls les admins
      allow delete: if isAdmin();
    }
    
    // üìÑ R√àGLES POUR LES DOCUMENTS
    match /documents/{documentId} {
      // Lecture : Propri√©taire + Parties autoris√©es
      allow read: if request.auth != null && 
                     canAccessDocument(documentId);
      
      // Cr√©ation : Utilisateurs connect√©s
      allow create: if request.auth != null;
      
      // Mise √† jour : Propri√©taire du document
      allow update: if request.auth != null && 
                       isDocumentOwner(documentId);
      
      // Suppression : Propri√©taire + Admins
      allow delete: if request.auth != null && 
                       (isDocumentOwner(documentId) || isAdmin());
    }
    
    // üîî R√àGLES POUR LES NOTIFICATIONS
    match /notifications/{notificationId} {
      // Lecture : Destinataire de la notification
      allow read: if request.auth != null && 
                     isNotificationRecipient(notificationId);
      
      // Cr√©ation : Syst√®me et Admins
      allow create: if isAdmin();
      
      // Mise √† jour : Destinataire (pour marquer comme lu)
      allow update: if request.auth != null && 
                       isNotificationRecipient(notificationId);
      
      // Suppression : Destinataire + Admins
      allow delete: if request.auth != null && 
                       (isNotificationRecipient(notificationId) || isAdmin());
    }
    
    // üí¨ R√àGLES POUR LES MESSAGES
    match /messages/{messageId} {
      // Lecture : Participants √† la conversation
      allow read: if request.auth != null && 
                     isMessageParticipant(messageId);
      
      // Cr√©ation : Utilisateurs connect√©s
      allow create: if request.auth != null;
      
      // Mise √† jour : Exp√©diteur du message
      allow update: if request.auth != null && 
                       isMessageSender(messageId);
      
      // Suppression : Exp√©diteur + Admins
      allow delete: if request.auth != null && 
                       (isMessageSender(messageId) || isAdmin());
    }
    
    // üîß FONCTIONS UTILITAIRES
    
    // V√©rifier si l'utilisateur est Super Admin
    function isSuperAdmin() {
      return request.auth != null && 
             getUserRole() == 'super_admin';
    }
    
    // V√©rifier si l'utilisateur est Admin (Company ou Agency)
    function isAdmin() {
      return request.auth != null && 
             (getUserRole() == 'company_admin' || 
              getUserRole() == 'agency_admin' || 
              getUserRole() == 'super_admin');
    }
    
    // V√©rifier si l'utilisateur est Admin de Compagnie
    function isCompanyAdmin() {
      return request.auth != null && 
             (getUserRole() == 'company_admin' || 
              getUserRole() == 'super_admin');
    }
    
    // V√©rifier si l'utilisateur est Agent
    function isAgent() {
      return request.auth != null && 
             getUserRole() == 'agent';
    }
    
    // V√©rifier si l'utilisateur est Expert
    function isExpert() {
      return request.auth != null && 
             getUserRole() == 'expert';
    }
    
    // V√©rifier si l'utilisateur est Conducteur
    function isDriver() {
      return request.auth != null && 
             getUserRole() == 'driver';
    }
    
    // Obtenir le r√¥le de l'utilisateur connect√©
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    // Valider une demande de compte
    function validateAccountRequest() {
      return request.resource.data.keys().hasAll(['email', 'firstName', 'lastName', 'accountType']) &&
             request.resource.data.status == 'pending';
    }
    
    // Valider la mise √† jour d'une demande
    function validateRequestUpdate() {
      return request.resource.data.status in ['approved', 'rejected'] &&
             request.resource.data.processedBy == request.auth.uid;
    }
    
    // V√©rifier l'appartenance √† une compagnie
    function belongsToCompany(companyId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.companyId == companyId;
    }
    
    // V√©rifier l'appartenance √† une agence
    function belongsToAgency(agencyId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.agencyId == agencyId;
    }
    
    // V√©rifier si l'utilisateur est propri√©taire du v√©hicule
    function isVehicleOwner(vehicleId) {
      return get(/databases/$(database)/documents/vehicles/$(vehicleId)).data.ownerId == request.auth.uid;
    }
    
    // V√©rifier si l'utilisateur est partie au contrat
    function isContractParty(contractId) {
      let contract = get(/databases/$(database)/documents/contracts/$(contractId)).data;
      return contract.driverId == request.auth.uid || 
             contract.agentId == request.auth.uid;
    }
    
    // V√©rifier si l'utilisateur est partie au sinistre
    function isClaimParty(claimId) {
      let claim = get(/databases/$(database)/documents/claims/$(claimId)).data;
      return claim.driverId == request.auth.uid || 
             claim.agentId == request.auth.uid || 
             claim.expertId == request.auth.uid;
    }
    
    // V√©rifier l'acc√®s aux documents
    function canAccessDocument(documentId) {
      let doc = get(/databases/$(database)/documents/documents/$(documentId)).data;
      return doc.ownerId == request.auth.uid || 
             request.auth.uid in doc.authorizedUsers || 
             isAdmin();
    }
    
    // V√©rifier si l'utilisateur est propri√©taire du document
    function isDocumentOwner(documentId) {
      return get(/databases/$(database)/documents/documents/$(documentId)).data.ownerId == request.auth.uid;
    }
    
    // V√©rifier si l'utilisateur est destinataire de la notification
    function isNotificationRecipient(notificationId) {
      return get(/databases/$(database)/documents/notifications/$(notificationId)).data.recipientId == request.auth.uid;
    }
    
    // V√©rifier si l'utilisateur est participant au message
    function isMessageParticipant(messageId) {
      let message = get(/databases/$(database)/documents/messages/$(messageId)).data;
      return request.auth.uid in message.participants;
    }
    
    // V√©rifier si l'utilisateur est exp√©diteur du message
    function isMessageSender(messageId) {
      return get(/databases/$(database)/documents/messages/$(messageId)).data.senderId == request.auth.uid;
    }
  }
}
