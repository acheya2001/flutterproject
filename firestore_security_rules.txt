// üîí R√®gles de s√©curit√© Firestore pour le syst√®me d'assurance unifi√©
// √Ä copier dans la console Firebase > Firestore Database > Rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ==================== FONCTIONS UTILITAIRES ====================
    
    // V√©rifier si l'utilisateur est authentifi√©
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // V√©rifier le r√¥le de l'utilisateur
    function hasRole(role) {
      return isAuthenticated() && 
             resource.data.role == role;
    }
    
    // V√©rifier si l'utilisateur est un super admin
    function isSuperAdmin() {
      return isAuthenticated() && 
             request.auth.token.role == 'super_admin';
    }
    
    // V√©rifier si l'utilisateur est un admin de compagnie
    function isCompanyAdmin(compagnieId) {
      return isAuthenticated() && 
             request.auth.token.role == 'admin_compagnie' &&
             request.auth.token.compagnieId == compagnieId;
    }
    
    // V√©rifier si l'utilisateur est un admin d'agence
    function isAgencyAdmin(agenceId) {
      return isAuthenticated() && 
             request.auth.token.role == 'admin_agence' &&
             request.auth.token.agenceId == agenceId;
    }
    
    // V√©rifier si l'utilisateur est un agent
    function isAgent(agenceId) {
      return isAuthenticated() && 
             request.auth.token.role == 'agent_agence' &&
             request.auth.token.agenceId == agenceId;
    }
    
    // V√©rifier si l'utilisateur est un conducteur
    function isConducteur() {
      return isAuthenticated() && 
             request.auth.token.role == 'conducteur';
    }
    
    // V√©rifier si l'utilisateur est un expert
    function isExpert() {
      return isAuthenticated() && 
             request.auth.token.role == 'expert_auto';
    }

    // ==================== COMPAGNIES D'ASSURANCE ====================
    
    match /compagnies_assurance/{compagnieId} {
      // Lecture: Super Admin, Admin Compagnie, Admin Agence, Agents
      allow read: if isSuperAdmin() || 
                     isCompanyAdmin(compagnieId) ||
                     isAgencyAdmin(resource.data.agenceId) ||
                     isAgent(resource.data.agenceId);
      
      // √âcriture: Seulement Super Admin
      allow write: if isSuperAdmin();
    }

    // ==================== AGENCES ====================
    
    match /agences_assurance/{agenceId} {
      // Lecture: Super Admin, Admin Compagnie, Admin Agence, Agents de l'agence
      allow read: if isSuperAdmin() || 
                     isCompanyAdmin(resource.data.compagnieId) ||
                     isAgencyAdmin(agenceId) ||
                     isAgent(agenceId);
      
      // √âcriture: Super Admin, Admin Compagnie
      allow write: if isSuperAdmin() || 
                      isCompanyAdmin(resource.data.compagnieId);
    }

    // ==================== AGENTS ====================
    
    match /agents_assurance/{agentId} {
      // Lecture: Super Admin, Admin Compagnie, Admin Agence, l'agent lui-m√™me
      allow read: if isSuperAdmin() || 
                     isCompanyAdmin(resource.data.compagnieId) ||
                     isAgencyAdmin(resource.data.agenceId) ||
                     (isAgent(resource.data.agenceId) && request.auth.uid == agentId);
      
      // √âcriture: Super Admin, Admin Agence
      allow write: if isSuperAdmin() || 
                      isAgencyAdmin(resource.data.agenceId);
    }

    // ==================== CLIENTS/CONDUCTEURS ====================
    
    match /clients_conducteurs/{clientId} {
      // Lecture: Super Admin, Agents, le conducteur lui-m√™me
      allow read: if isSuperAdmin() || 
                     isAgent(resource.data.agenceId) ||
                     (isConducteur() && request.auth.uid == clientId);
      
      // √âcriture: Super Admin, Agents, le conducteur lui-m√™me (donn√©es limit√©es)
      allow write: if isSuperAdmin() || 
                      isAgent(resource.data.agenceId) ||
                      (isConducteur() && request.auth.uid == clientId);
    }

    // ==================== V√âHICULES ====================
    
    match /vehicules/{vehiculeId} {
      // Lecture: Super Admin, Agents, le propri√©taire
      allow read: if isSuperAdmin() || 
                     isAgent(resource.data.agenceId) ||
                     (isConducteur() && request.auth.uid == resource.data.proprietaireId);
      
      // √âcriture: Super Admin, Agents, le propri√©taire (cr√©ation seulement)
      allow create: if isSuperAdmin() || 
                       isAgent(resource.data.agenceId) ||
                       (isConducteur() && request.auth.uid == resource.data.proprietaireId);
      
      allow update: if isSuperAdmin() || 
                       isAgent(resource.data.agenceId);
    }

    // ==================== CONTRATS D'ASSURANCE ====================
    
    match /contrats_assurance/{contratId} {
      // Lecture: Super Admin, Admin Compagnie, Agents, le client
      allow read: if isSuperAdmin() || 
                     isCompanyAdmin(resource.data.compagnieId) ||
                     isAgent(resource.data.agenceId) ||
                     (isConducteur() && request.auth.uid == resource.data.clientId);
      
      // √âcriture: Super Admin, Agents de l'agence
      allow write: if isSuperAdmin() || 
                      isAgent(resource.data.agenceId);
    }

    // ==================== CONSTATS D'ACCIDENTS ====================
    
    match /constats_accidents/{constatId} {
      // Lecture: Super Admin, Admin Compagnie, Agents, Experts, Conducteurs impliqu√©s
      allow read: if isSuperAdmin() || 
                     isCompanyAdmin(resource.data.compagnieId) ||
                     isAgent(resource.data.agenceId) ||
                     isExpert() ||
                     (isConducteur() && 
                      (request.auth.uid in resource.data.conducteursImpliques));
      
      // Cr√©ation: Conducteurs
      allow create: if isConducteur();
      
      // Mise √† jour: Super Admin, Agents, Experts assign√©s
      allow update: if isSuperAdmin() || 
                       isAgent(resource.data.agenceId) ||
                       (isExpert() && request.auth.uid == resource.data.expertId);
    }

    // ==================== EXPERTS AUTOMOBILES ====================
    
    match /experts_automobile/{expertId} {
      // Lecture: Super Admin, Admin Compagnie (si expert travaille avec), l'expert lui-m√™me
      allow read: if isSuperAdmin() || 
                     (isCompanyAdmin(resource.data.compagnieId) && 
                      resource.data.compagnieId in resource.data.compagnieIds) ||
                     (isExpert() && request.auth.uid == expertId);
      
      // √âcriture: Super Admin, l'expert lui-m√™me (donn√©es limit√©es)
      allow create: if isSuperAdmin();
      allow update: if isSuperAdmin() || 
                       (isExpert() && request.auth.uid == expertId);
    }

    // ==================== DEMANDES PROFESSIONNELLES ====================
    
    match /demandes_professionnels/{demandeId} {
      // Lecture: Super Admin, le demandeur
      allow read: if isSuperAdmin() || 
                     request.auth.uid == resource.data.userId;
      
      // Cr√©ation: Utilisateurs authentifi√©s
      allow create: if isAuthenticated();
      
      // Mise √† jour: Super Admin seulement
      allow update: if isSuperAdmin();
    }

    // ==================== NOTIFICATIONS ====================
    
    match /notifications/{notificationId} {
      // Lecture: Le destinataire de la notification
      allow read: if isAuthenticated() && 
                     request.auth.uid == resource.data.userId;
      
      // √âcriture: Super Admin, syst√®me
      allow write: if isSuperAdmin();
    }

    // ==================== SESSIONS COLLABORATIVES ====================
    
    match /collaborative_sessions/{sessionId} {
      // Lecture: Participants de la session
      allow read: if isAuthenticated() && 
                     request.auth.uid in resource.data.participants;
      
      // √âcriture: Cr√©ateur de la session, participants
      allow write: if isAuthenticated() && 
                      (request.auth.uid == resource.data.createdBy ||
                       request.auth.uid in resource.data.participants);
    }

    // ==================== R√àGLES PAR D√âFAUT ====================
    
    // Interdire tout acc√®s non sp√©cifi√©
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
