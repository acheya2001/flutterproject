rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // ========================================
    // FONCTIONS UTILITAIRES
    // ========================================
    
    // Vérifie si l'utilisateur est authentifié
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Vérifie si l'utilisateur est le propriétaire du document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Récupère les données utilisateur
    function getUserData() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    // Vérifie le rôle de l'utilisateur
    function hasRole(role) {
      return isAuthenticated() && getUserData().role == role;
    }
    
    // Vérifie si l'utilisateur est conducteur
    function isConducteur() {
      return hasRole('conducteur');
    }
    
    // Vérifie si l'utilisateur est assureur
    function isAssureur() {
      return hasRole('assureur');
    }
    
    // Vérifie si l'utilisateur est expert
    function isExpert() {
      return hasRole('expert');
    }
    
    // Vérifie si l'utilisateur peut accéder aux données d'un autre utilisateur
    function canAccessUserData(targetUserId) {
      return isOwner(targetUserId) || isAssureur() || isExpert();
    }
    
    // ========================================
    // COLLECTION USERS
    // ========================================
    
    match /users/{userId} {
      // Lecture : propriétaire, assureurs et experts
      allow read: if canAccessUserData(userId);
      
      // Écriture : seulement le propriétaire
      allow write: if isOwner(userId);
      
      // Création : utilisateur authentifié pour son propre document
      allow create: if isAuthenticated() && isOwner(userId);
    }
    
    // ========================================
    // COLLECTION VEHICULES ASSURES
    // ========================================
    
    match /vehicules_assures/{vehiculeId} {
      // Lecture : 
      // - Propriétaire du véhicule
      // - Assureurs (pour vérification)
      // - Experts (pour expertise)
      allow read: if isAuthenticated() && (
        isOwner(resource.data.client_id) ||
        isOwner(resource.data.proprietaire.user_id) ||
        isAssureur() ||
        isExpert()
      );
      
      // Écriture : seulement les assureurs
      allow write: if isAssureur();
      
      // Création : assureurs et système
      allow create: if isAssureur();
    }
    
    // ========================================
    // COLLECTION CONSTATS
    // ========================================
    
    match /constats/{constatId} {
      // Lecture :
      // - Conducteurs impliqués
      // - Assureurs des véhicules impliqués
      // - Experts assignés
      allow read: if isAuthenticated() && (
        request.auth.uid in resource.data.conducteurs ||
        isAssureur() ||
        isExpert() ||
        request.auth.uid == resource.data.created_by
      );
      
      // Écriture :
      // - Conducteurs impliqués (pendant la période d'édition)
      // - Experts (pour modifications/validations)
      allow write: if isAuthenticated() && (
        (request.auth.uid in resource.data.conducteurs && resource.data.statut in ['brouillon', 'en_cours']) ||
        isExpert() ||
        (request.auth.uid == resource.data.created_by && resource.data.statut in ['brouillon', 'en_cours'])
      );
      
      // Création : conducteurs authentifiés
      allow create: if isConducteur();
    }
    
    // ========================================
    // COLLECTION ACCIDENTS
    // ========================================
    
    match /accidents/{accidentId} {
      // Lecture : conducteurs impliqués, assureurs, experts
      allow read: if isAuthenticated() && (
        request.auth.uid in resource.data.conducteurs_impliques ||
        isAssureur() ||
        isExpert()
      );
      
      // Écriture : conducteurs impliqués et experts
      allow write: if isAuthenticated() && (
        request.auth.uid in resource.data.conducteurs_impliques ||
        isExpert()
      );
      
      // Création : conducteurs
      allow create: if isConducteur();
    }
    
    // ========================================
    // COLLECTION EXPERTISES
    // ========================================
    
    match /expertises/{expertiseId} {
      // Lecture : expert assigné, assureurs, conducteurs concernés
      allow read: if isAuthenticated() && (
        isOwner(resource.data.expert_id) ||
        isAssureur() ||
        request.auth.uid in resource.data.conducteurs_concernes
      );
      
      // Écriture : seulement l'expert assigné
      allow write: if isAuthenticated() && isOwner(resource.data.expert_id);
      
      // Création : experts et assureurs
      allow create: if isExpert() || isAssureur();
    }
    
    // ========================================
    // COLLECTION INVITATIONS
    // ========================================
    
    match /invitations/{invitationId} {
      // Lecture : expéditeur, destinataire, assureurs, experts
      allow read: if isAuthenticated() && (
        isOwner(resource.data.sender_id) ||
        isOwner(resource.data.recipient_id) ||
        resource.data.recipient_email == getUserData().email ||
        isAssureur() ||
        isExpert()
      );
      
      // Écriture : expéditeur et destinataire
      allow write: if isAuthenticated() && (
        isOwner(resource.data.sender_id) ||
        isOwner(resource.data.recipient_id) ||
        resource.data.recipient_email == getUserData().email
      );
      
      // Création : conducteurs authentifiés
      allow create: if isConducteur();
    }
    
    // ========================================
    // COLLECTION MESSAGES
    // ========================================
    
    match /messages/{messageId} {
      // Lecture : expéditeur, destinataire, participants de la session
      allow read: if isAuthenticated() && (
        isOwner(resource.data.sender_id) ||
        isOwner(resource.data.recipient_id) ||
        request.auth.uid in resource.data.participants ||
        isAssureur() ||
        isExpert()
      );
      
      // Écriture : expéditeur seulement
      allow write: if isAuthenticated() && isOwner(resource.data.sender_id);
      
      // Création : utilisateurs authentifiés
      allow create: if isAuthenticated();
    }
    
    // ========================================
    // COLLECTION SESSIONS COLLABORATIVES
    // ========================================
    
    match /collaborative_sessions/{sessionId} {
      // Lecture : créateur, participants, assureurs, experts
      allow read: if isAuthenticated() && (
        isOwner(resource.data.created_by) ||
        request.auth.uid in resource.data.participants ||
        isAssureur() ||
        isExpert()
      );
      
      // Écriture : créateur et participants
      allow write: if isAuthenticated() && (
        isOwner(resource.data.created_by) ||
        request.auth.uid in resource.data.participants
      );
      
      // Création : conducteurs
      allow create: if isConducteur();
    }
    
    // ========================================
    // COLLECTION PHOTOS/DOCUMENTS
    // ========================================
    
    match /photos/{photoId} {
      // Lecture : propriétaire, assureurs, experts
      allow read: if isAuthenticated() && (
        isOwner(resource.data.uploaded_by) ||
        isAssureur() ||
        isExpert()
      );
      
      // Écriture : propriétaire seulement
      allow write: if isAuthenticated() && isOwner(resource.data.uploaded_by);
      
      // Création : utilisateurs authentifiés
      allow create: if isAuthenticated();
    }
    
    // ========================================
    // COLLECTION NOTIFICATIONS
    // ========================================
    
    match /notifications/{notificationId} {
      // Lecture : destinataire seulement
      allow read: if isAuthenticated() && isOwner(resource.data.user_id);
      
      // Écriture : destinataire seulement
      allow write: if isAuthenticated() && isOwner(resource.data.user_id);
      
      // Création : système et utilisateurs authentifiés
      allow create: if isAuthenticated();
    }
    
    // ========================================
    // COLLECTION LOGS/AUDIT
    // ========================================
    
    match /audit_logs/{logId} {
      // Lecture : assureurs et experts seulement
      allow read: if isAssureur() || isExpert();
      
      // Écriture : interdite (logs en lecture seule)
      allow write: if false;
      
      // Création : système seulement (via Cloud Functions)
      allow create: if false;
    }
    
    // ========================================
    // RÈGLES PAR DÉFAUT
    // ========================================

    // Toute autre collection : accès restreint aux assureurs et experts
    match /{document=**} {
      allow read, write: if isAssureur() || isExpert();
    }
  }
}

// ========================================
// RÈGLES FIREBASE STORAGE
// ========================================

service firebase.storage {
  match /b/{bucket}/o {

    // Photos de véhicules
    match /vehicules/{vehiculeId}/{type}/{fileName} {
      // Lecture : propriétaire, assureurs, experts
      allow read: if request.auth != null;

      // Écriture : propriétaire du véhicule
      allow write: if request.auth != null &&
        (request.auth.uid == vehiculeId ||
         getUserRole() == 'assureur' ||
         getUserRole() == 'expert');
    }

    // Photos d'accidents/constats
    match /constats/{constatId}/{type}/{fileName} {
      // Lecture : participants, assureurs, experts
      allow read: if request.auth != null;

      // Écriture : participants du constat
      allow write: if request.auth != null;
    }

    // Documents utilisateurs
    match /users/{userId}/{type}/{fileName} {
      // Lecture : propriétaire, assureurs, experts
      allow read: if request.auth != null &&
        (request.auth.uid == userId ||
         getUserRole() == 'assureur' ||
         getUserRole() == 'expert');

      // Écriture : propriétaire seulement
      allow write: if request.auth != null && request.auth.uid == userId;
    }

    // Photos de profil
    match /profile_pictures/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // Fonction utilitaire pour Storage
    function getUserRole() {
      return firestore.get(/databases/(default)/documents/users/$(request.auth.uid)).data.role;
    }

    // Règle par défaut pour Storage
    match /{allPaths=**} {
      allow read, write: if request.auth != null;
    }
  }
}
